{
  "mcp_name": "GeLi2001/mcp-terminal",
  "mcp_description": "A terminal-based interactive client for managing and communicating with MCP servers, supporting multiple transport methods and server configurations.",
  "mcp_id": "GeLi2001_mcp-terminal",
  "fetch_timestamp": "2025-06-23T03:43:52.687576Z",
  "github_url": "https://github.com/GeLi2001/mcp-terminal",
  "repository": {
    "name": "mcp-terminal",
    "full_name": "GeLi2001/mcp-terminal",
    "description": "run and use mcp servers in your terminal",
    "html_url": "https://github.com/GeLi2001/mcp-terminal",
    "created_at": "2025-04-07T18:18:20Z",
    "updated_at": "2025-06-22T16:03:30Z",
    "pushed_at": "2025-04-11T07:01:30Z",
    "size": 48,
    "stargazers_count": 11,
    "watchers_count": 11,
    "forks_count": 2,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "GeLi2001",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/77590974?v=4",
      "html_url": "https://github.com/GeLi2001"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 2,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 43715,
      "JavaScript": 4180
    },
    "language_percentages": {
      "TypeScript": 91.27,
      "JavaScript": 8.73
    },
    "pull_requests_count": 1,
    "contributors_count": 2,
    "package_json_version": "0.1.7"
  },
  "readme": "# MCP Terminal\n\nA terminal-based interactive client for Model Context Protocol (MCP) servers.\n\n## Installation\n\n```bash\nnpm install -g mcp-terminal\n```\n\n## Features\n\n- Connect to multiple MCP servers simultaneously\n- Interactive terminal for sending messages to models\n- Easy configuration management\n- Support for both stdio and SSE transports\n- Switch between connected servers\n\n## Configuration\n\nBefore using MCP CLI, you need to configure at least one server:\n\n```bash\nmcp-terminal configure\n```\n\nThis will open your default editor with a configuration file where you can define MCP servers.\n\nExample configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"local-sse\": {\n      \"command\": \"npx @anthropic-ai/mcp-server@latest\",\n      \"args\": [],\n      \"url\": \"http://localhost:8765/sse\"\n    },\n    \"local-stdio\": {\n      \"command\": \"npx @anthropic-ai/mcp-server@latest\",\n      \"args\": [\"--stdio\"]\n    },\n    \"shopify\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"shopify-mcp\",\n        \"--accessToken\",\n        \"your-shopify-access-token\",\n        \"--domain\",\n        \"your-store.myshopify.com\"\n      ]\n    }\n  }\n}\n```\n\nNotice that servers can be configured with:\n\n- Both `command` and `url` for servers that need to be started locally but use SSE transport\n- Just `command` for servers that use stdio transport\n- Just `url` for connecting to remote servers\n\n## Usage\n\n### Configure MCP servers\n\n```bash\nmcp-terminal configure\n```\n\nThis will open your default editor to configure MCP servers.\n\n### Start MCP server\n\n```bash\nmcp-terminal start\n```\n\nThis will start the configured MCP server. You can have multiple servers configured.\n\n### Interactive Chat with AI using MCP tools\n\n```bash\nmcp-terminal chat\n```\n\nThis starts an interactive chat session with an AI model that can use MCP tools from your configured server. The LLM can interact with the MCP server tools to help answer your questions and perform actions.\n\nYou can specify which server to use:\n\n```bash\nmcp-terminal chat -s local-stdio\n```\n\n#### Server Types\n\nThe chat command supports two types of server configurations:\n\n1. **URL-based servers** - Servers with a URL configured will connect via HTTP/SSE\n2. **Command-based servers** - Servers with only a command will be started automatically and use stdio transport\n\n#### Requirements\n\nTo use the chat feature, you need:\n\n1. An OpenAI API key (set as `OPENAI_API_KEY` environment variable or in a `.env` file)\n2. A configured MCP server (configure using `mcp-terminal configure`)\n\n#### Example usage\n\n```\n$ mcp-terminal chat\nStarting chat session with LLM...\nType 'exit' or 'quit' to end the session.\n\nUsing MCP server: local-stdio\nStarting MCP server: local-stdio\nServer is running...\nConnected to MCP server via stdio transport\n\nYou: What's the weather in New York today?\nAI is thinking...\nAI: I'd like to check the weather in New York for you, but I need to use a tool to get that information.\n\nI attempted to use a weather tool, but we're currently connected via stdio transport, which doesn't allow me to directly access external tools. In a full implementation with the appropriate tools configured, I would be able to fetch real-time weather data for New York.\n\nTo get the actual weather in New York today, you could:\n1. Use a different MCP server configured with HTTP/SSE transport and weather tools\n2. Check a weather website or app directly\n3. Ask me a different question I can answer without external tools\n\nCan I help you with something else?\n\nYou: What is MCP?\nAI is thinking...\nAI: MCP stands for Model Context Protocol. It's an open standard protocol designed to connect AI language models (LLMs) like me with external tools, data sources, and APIs.\n\nHere's what makes MCP important:\n\n1. It allows AI models to extend their capabilities beyond their training data by accessing external tools and real-time information.\n\n2. It provides a standardized way for developers to create tools that AI models can interact with, making integration simpler.\n\n3. It enables AI assistants to perform actions in the real world - things like searching the web, accessing databases, running code, or interacting with services like the weather example you asked about earlier.\n\n4. It can work through different transport methods, such as HTTP/SSE (Server-Sent Events) or stdio (standard input/output), depending on the implementation.\n\nThe MCP-terminal tool you're using right now is a client that helps manage MCP servers and facilitates communication between users, AI models, and the tools provided by those servers.\n\nYou: exit\n\n## License\n\nMIT\n```\n"
}