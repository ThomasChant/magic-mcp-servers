{
  "mcp_name": "pab1it0/prometheus-mcp-server",
  "mcp_description": "üêç ‚òÅÔ∏è -  Query and analyze Prometheus, open-source monitoring system.",
  "mcp_id": "pab1it0_prometheus-mcp-server",
  "fetch_timestamp": "2025-06-23T07:25:36.237393Z",
  "github_url": "https://github.com/pab1it0/prometheus-mcp-server",
  "repository": {
    "name": "prometheus-mcp-server",
    "full_name": "pab1it0/prometheus-mcp-server",
    "description": "A Model Context Protocol (MCP) server that enables AI assistants to query and analyze Prometheus metrics through standardized interfaces.",
    "html_url": "https://github.com/pab1it0/prometheus-mcp-server",
    "created_at": "2025-03-19T16:36:09Z",
    "updated_at": "2025-06-23T02:10:37Z",
    "pushed_at": "2025-06-21T13:02:10Z",
    "size": 125,
    "stargazers_count": 120,
    "watchers_count": 120,
    "forks_count": 23,
    "open_issues_count": 4,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "ai",
      "devops",
      "llm",
      "mcp",
      "model-context-protocol",
      "prometheus"
    ],
    "default_branch": "main",
    "owner": {
      "login": "pab1it0",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/11724759?v=4",
      "html_url": "https://github.com/pab1it0"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 23,
    "subscribers_count": 3,
    "languages": {
      "Python": 21954,
      "Dockerfile": 1571
    },
    "language_percentages": {
      "Python": 93.32,
      "Dockerfile": 6.68
    },
    "pull_requests_count": 17,
    "contributors_count": 6,
    "latest_release": {
      "tag_name": "v1.1.0",
      "name": "v1.1.0",
      "published_at": "2025-06-21T13:03:07Z",
      "body": "**Full Changelog**: https://github.com/pab1it0/prometheus-mcp-server/compare/v1.0.7...v1.1.0",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v1.1.0",
        "commit_sha": "6a28488e0b4fa4f03bc69feadb2c72f3a81d42df"
      },
      {
        "name": "v1.0.7",
        "commit_sha": "0dd89374e0eea35464f85dc97d9e8fd3550e1a1c"
      },
      {
        "name": "v1.0.6",
        "commit_sha": "6075a603c6c9c0010a79e1b56eec8cb2f8d2885f"
      },
      {
        "name": "v1.0.5",
        "commit_sha": "6075a603c6c9c0010a79e1b56eec8cb2f8d2885f"
      },
      {
        "name": "v1.0.4",
        "commit_sha": "49d6685dbee42ca3225cc4d45f696479cad3cf68"
      },
      {
        "name": "v1.0.3",
        "commit_sha": "4dc9464154047a354ba68456cb1d2641bdeffccb"
      },
      {
        "name": "v1.0.1",
        "commit_sha": "14f9e7007b858490f2ef0526c56067d25856e771"
      },
      {
        "name": "v1.0.0",
        "commit_sha": "458f57a5ec13a74ef54bb48a26627e0ed63eea69"
      },
      {
        "name": "1.0.0",
        "commit_sha": "e4f22bf8c150ddffe85ab87c9d7b2b05441b9629"
      }
    ],
    "latest_version": "v1.1.0"
  },
  "readme": "# Prometheus MCP Server\n\nA [Model Context Protocol][mcp] (MCP) server for Prometheus.\n\nThis provides access to your Prometheus metrics and queries through standardized MCP interfaces, allowing AI assistants to execute PromQL queries and analyze your metrics data.\n\n<a href=\"https://glama.ai/mcp/servers/@pab1it0/prometheus-mcp-server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@pab1it0/prometheus-mcp-server/badge\" alt=\"Prometheus Server MCP server\" />\n</a>\n\n[mcp]: https://modelcontextprotocol.io\n\n## Features\n\n- [x] Execute PromQL queries against Prometheus\n- [x] Discover and explore metrics\n  - [x] List available metrics\n  - [x] Get metadata for specific metrics\n  - [x] View instant query results\n  - [x] View range query results with different step intervals\n- [x] Authentication support\n  - [x] Basic auth from environment variables\n  - [x] Bearer token auth from environment variables\n- [x] Docker containerization support\n\n- [x] Provide interactive tools for AI assistants\n\nThe list of tools is configurable, so you can choose which tools you want to make available to the MCP client.\nThis is useful if you don't use certain functionality or if you don't want to take up too much of the context window.\n\n## Usage\n\n1. Ensure your Prometheus server is accessible from the environment where you'll run this MCP server.\n\n2. Configure the environment variables for your Prometheus server, either through a `.env` file or system environment variables:\n\n```env\n# Required: Prometheus configuration\nPROMETHEUS_URL=http://your-prometheus-server:9090\n\n# Optional: Authentication credentials (if needed)\n# Choose one of the following authentication methods if required:\n\n# For basic auth\nPROMETHEUS_USERNAME=your_username\nPROMETHEUS_PASSWORD=your_password\n\n# For bearer token auth\nPROMETHEUS_TOKEN=your_token\n\n# Optional: For multi-tenant setups like Cortex, Mimir or Thanos\nORG_ID=your_organization_id\n```\n\n3. Add the server configuration to your client configuration file. For example, for Claude Desktop:\n\n```json\n{\n  \"mcpServers\": {\n    \"prometheus\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<full path to prometheus-mcp-server directory>\",\n        \"run\",\n        \"src/prometheus_mcp_server/main.py\"\n      ],\n      \"env\": {\n        \"PROMETHEUS_URL\": \"http://your-prometheus-server:9090\",\n        \"PROMETHEUS_USERNAME\": \"your_username\",\n        \"PROMETHEUS_PASSWORD\": \"your_password\"\n      }\n    }\n  }\n}\n```\n\n> Note: if you see `Error: spawn uv ENOENT` in Claude Desktop, you may need to specify the full path to `uv` or set the environment variable `NO_UV=1` in the configuration.\n\n## Docker Usage\n\nThis project includes Docker support for easy deployment and isolation.\n\n### Pre-built Docker Image\n\nThe easiest way to use this project is with the pre-built image from GitHub Container Registry:\n\n```bash\ndocker pull ghcr.io/pab1it0/prometheus-mcp-server:latest\n```\n\nYou can also use specific versions with tags:\n\n```bash\ndocker pull ghcr.io/pab1it0/prometheus-mcp-server:1.0.0\n```\n\n### Building the Docker Image Locally\n\nIf you prefer to build the image yourself:\n\n```bash\ndocker build -t prometheus-mcp-server .\n```\n\n### Running with Docker\n\nYou can run the server using Docker in several ways:\n\n#### Using docker run with the pre-built image:\n\n```bash\ndocker run -it --rm \\\n  -e PROMETHEUS_URL=http://your-prometheus-server:9090 \\\n  -e PROMETHEUS_USERNAME=your_username \\\n  -e PROMETHEUS_PASSWORD=your_password \\\n  ghcr.io/pab1it0/prometheus-mcp-server:latest\n```\n\n#### Using docker run with a locally built image:\n\n```bash\ndocker run -it --rm \\\n  -e PROMETHEUS_URL=http://your-prometheus-server:9090 \\\n  -e PROMETHEUS_USERNAME=your_username \\\n  -e PROMETHEUS_PASSWORD=your_password \\\n  prometheus-mcp-server\n```\n\n#### Using docker-compose:\n\nCreate a `.env` file with your Prometheus credentials and then run:\n\n```bash\ndocker-compose up\n```\n\n### Running with Docker in Claude Desktop\n\nTo use the containerized server with Claude Desktop, update the configuration to use Docker with the environment variables:\n\n```json\n{\n  \"mcpServers\": {\n    \"prometheus\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"PROMETHEUS_URL\",\n        \"-e\", \"PROMETHEUS_USERNAME\",\n        \"-e\", \"PROMETHEUS_PASSWORD\",\n        \"ghcr.io/pab1it0/prometheus-mcp-server:latest\"\n      ],\n      \"env\": {\n        \"PROMETHEUS_URL\": \"http://your-prometheus-server:9090\",\n        \"PROMETHEUS_USERNAME\": \"your_username\",\n        \"PROMETHEUS_PASSWORD\": \"your_password\"\n      }\n    }\n  }\n}\n```\n\nThis configuration passes the environment variables from Claude Desktop to the Docker container by using the `-e` flag with just the variable name, and providing the actual values in the `env` object.\n\n> **Note about Docker implementation**: The Docker setup has been updated to match the structure of the chess-mcp project, which has been proven to work correctly with Claude. The new implementation uses a multi-stage build process and runs the entry point script directly without an intermediary shell script. This approach ensures proper handling of stdin/stdout for MCP communication.\n\n## Development\n\nContributions are welcome! Please open an issue or submit a pull request if you have any suggestions or improvements.\n\nThis project uses [`uv`](https://github.com/astral-sh/uv) to manage dependencies. Install `uv` following the instructions for your platform:\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\nYou can then create a virtual environment and install the dependencies with:\n\n```bash\nuv venv\nsource .venv/bin/activate  # On Unix/macOS\n.venv\\Scripts\\activate     # On Windows\nuv pip install -e .\n```\n\n## Project Structure\n\nThe project has been organized with a `src` directory structure:\n\n```\nprometheus-mcp-server/\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îî‚îÄ‚îÄ prometheus_mcp_server/\n‚îÇ       ‚îú‚îÄ‚îÄ __init__.py      # Package initialization\n‚îÇ       ‚îú‚îÄ‚îÄ server.py        # MCP server implementation\n‚îÇ       ‚îú‚îÄ‚îÄ main.py          # Main application logic\n‚îú‚îÄ‚îÄ Dockerfile               # Docker configuration\n‚îú‚îÄ‚îÄ docker-compose.yml       # Docker Compose configuration\n‚îú‚îÄ‚îÄ .dockerignore            # Docker ignore file\n‚îú‚îÄ‚îÄ pyproject.toml           # Project configuration\n‚îî‚îÄ‚îÄ README.md                # This file\n```\n\n### Testing\n\nThe project includes a comprehensive test suite that ensures functionality and helps prevent regressions.\n\nRun the tests with pytest:\n\n```bash\n# Install development dependencies\nuv pip install -e \".[dev]\"\n\n# Run the tests\npytest\n\n# Run with coverage report\npytest --cov=src --cov-report=term-missing\n```\nTests are organized into:\n\n- Configuration validation tests\n- Server functionality tests\n- Error handling tests\n- Main application tests\n\nWhen adding new features, please also add corresponding tests.\n\n### Tools\n\n| Tool | Category | Description |\n| --- | --- | --- |\n| `execute_query` | Query | Execute a PromQL instant query against Prometheus |\n| `execute_range_query` | Query | Execute a PromQL range query with start time, end time, and step interval |\n| `list_metrics` | Discovery | List all available metrics in Prometheus |\n| `get_metric_metadata` | Discovery | Get metadata for a specific metric |\n| `get_targets` | Discovery | Get information about all scrape targets |\n\n## License\n\nMIT\n\n---\n\n[mcp]: https://modelcontextprotocol.io"
}