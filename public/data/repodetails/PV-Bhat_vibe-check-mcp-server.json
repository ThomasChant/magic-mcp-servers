{
  "mcp_name": "Vibe Check",
  "mcp_description": "The definitive Vibe Coder's sanity check MCP server: Prevents cascading errors by calling a \"Vibe-check\" agent to ensure alignment and prevent scope creep",
  "mcp_id": "PV-Bhat_vibe-check-mcp-server",
  "fetch_timestamp": "2025-06-23T09:17:49.910522Z",
  "github_url": "https://github.com/PV-Bhat/vibe-check-mcp-server",
  "repository": {
    "name": "vibe-check-mcp-server",
    "full_name": "PV-Bhat/vibe-check-mcp-server",
    "description": "The definitive Vibe Coder's sanity check MCP server: Prevent cascading errors in AI workflows by implementing strategic pattern interrupts. Uses tool call \"Vibe Check\" with LearnLM 1.5 Pro (Gemini API), fine-tuned for pedagogy and metacognition to enhance complex workflow strategy, and prevents tunnel vision errors.",
    "html_url": "https://github.com/PV-Bhat/vibe-check-mcp-server",
    "created_at": "2025-03-22T09:33:08Z",
    "updated_at": "2025-06-23T03:52:39Z",
    "pushed_at": "2025-06-04T10:54:17Z",
    "size": 2501,
    "stargazers_count": 75,
    "watchers_count": 75,
    "forks_count": 12,
    "open_issues_count": 2,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [
      "agent-based",
      "agentic-ai",
      "agentic-workflow",
      "ai-agents",
      "automation",
      "error-handling",
      "mcp",
      "mcp-server",
      "metacognition",
      "model-context-protocol",
      "model-context-protocol-servers",
      "vibe-coding",
      "vibecoding",
      "workflow-automation"
    ],
    "default_branch": "main",
    "owner": {
      "login": "PV-Bhat",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/186011573?v=4",
      "html_url": "https://github.com/PV-Bhat"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 12,
    "subscribers_count": 2,
    "languages": {
      "TypeScript": 27379,
      "JavaScript": 11828,
      "Shell": 7098,
      "Batchfile": 2651,
      "Dockerfile": 142
    },
    "language_percentages": {
      "TypeScript": 55.76,
      "JavaScript": 24.09,
      "Shell": 14.46,
      "Batchfile": 5.4,
      "Dockerfile": 0.29
    },
    "pull_requests_count": 9,
    "contributors_count": 3,
    "package_json_version": "0.2.0"
  },
  "readme": "# üß† Vibe Check MCP\n\n<img src=\"https://github.com/PV-Bhat/vibe-check-mcp-server/blob/main/Attachments/vibelogo.png\" alt=\"Logo\" width=\"150\" height=\"150\">\n\n[![Version](https://img.shields.io/badge/version-0.2.0-blue)](https://github.com/PV-Bhat/vibe-check-mcp-server)\n[![License](https://img.shields.io/badge/license-MIT-green)](LICENSE)\n[![Pattern Status](https://img.shields.io/badge/pattern-interrupted-red)](https://github.com/PV-Bhat/vibe-check-mcp-server)\n[![smithery badge](https://smithery.ai/badge/@PV-Bhat/vibe-check-mcp-server)](https://smithery.ai/server/@PV-Bhat/vibe-check-mcp-server)\n[![Vibe Check MCP Server](https://img.shields.io/badge/vibecheck%20-mcp.so-blue)](https://mcp.so/server/vibe-check-mcp-server/PV-Bhat)\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/6dd1b68e-85aa-40c8-83fb-f746653aca4f)\n\nAlso find Vibecheck on: [mcpservers.org](https://github.com/wong2/awesome-mcp-servers?tab=readme-ov-file#community-servers), [Glama.ai](https://glama.ai/mcp/servers/@PV-Bhat/vibe-check-mcp-server/), [mcp.so](https://mcp.so/server/vibe-check-mcp-server/PV-Bhat)\n\n\n_Your AI's inner rubber duck when it can't rubber duck itself._\n\n## What is Vibe Check?\n\nIn the **\"vibe coding\"** era, AI agents now have incredible capabilities, but the question has now moved:\n\nfrom \n> \"Can my AI agent really do this **complex task**?\" \n\nto\n \n> \"Can my AI agent understand that I want to write a **simple program**, not an _infrastructure for a multi-billion dollar tech company_?\"\n\nIt provides the essential \"Hold up... this ain't it\" moment that AI agents don't currently have: a built in self-correcting oversight layer. It's the definitive Vibe Coder's sanity check MCP server: \n\n- Prevent cascading errors in AI workflows by implementing strategic pattern interrupts. \n- Uses tool call \"Vibe Check\" with LearnLM 1.5 Pro (Gemini API), fine-tuned for pedagogy and metacognition to enhance complex workflow strategy, and prevents tunnel vision errors.\n- Implements \"Vibe Distill\" to encourage plan simplification, prevent over-engineering solutions, and minimize contextual drift in agents.\n- Self-improving feedback loops: Agents can log mistakes into \"Vibe Learn\" to improve semantic recall and help the oversight AI target patterns over time.\n\n**TLDR; Implement an agent fine-tuned to stop your agent and make it reconsider before it confidently implements something wrong.**\n\n## The Problem: Pattern Inertia\n\nIn the vibe coding movement, we're all using LLMs to generate, refactor, and debug our code. But these models have a critical flaw: once they start down a reasoning path, they'll keep going even when the path is clearly wrong.\n\n```\nYou: \"Parse this CSV file\"\n\nAI: \"First, let's implement a custom lexer/parser combination that can handle arbitrary \n     CSV dialects with an extensible architecture for future file formats...\"\n\nYou: *stares at 200 lines of code when you just needed to read 10 rows*\n```\n\nThis **pattern inertia** leads to:\n\n- üîÑ **Tunnel vision**: Your agent gets stuck in one approach, unable to see alternatives\n- üìà **Scope creep**: Simple tasks gradually evolve into enterprise-scale solutions\n- üîå **Overengineering**: Adding layers of abstraction to problems that don't need them\n- ‚ùì **Misalignment**: Solving an adjacent but different problem than the one you asked for\n\n## Features: Metacognitive Oversight Tools\n\nVibe Check adds a metacognitive layer to your agent workflows with three integrated tools:\n\n### üõë vibe_check\n\n**Pattern interrupt mechanism** that breaks tunnel vision with metacognitive questioning:\n\n```javascript\nvibe_check({\n  \"phase\": \"planning\",           // planning, implementation, or review\n  \"userRequest\": \"...\",          // FULL original user request \n  \"plan\": \"...\",                 // Current plan or thinking\n  \"confidence\": 0.7              // Optional: 0-1 confidence level\n})\n```\n\n### ‚öì vibe_distill\n\n**Meta-thinking anchor point** that recalibrates complex workflows:\n\n```javascript\nvibe_distill({\n  \"plan\": \"...\",                 // Detailed plan to simplify\n  \"userRequest\": \"...\"           // FULL original user request\n})\n```\n\n### üîÑ vibe_learn\n\n**Self-improving feedback loop** that builds pattern recognition over time:\n\n```javascript\nvibe_learn({\n  \"mistake\": \"...\",              // One-sentence description of mistake\n  \"category\": \"...\",             // From standard categories\n  \"solution\": \"...\"              // How it was corrected\n})\n```\n\n### Vibe Check in Action\n\n**Before Vibe Check:**\n\n![before](https://github.com/PV-Bhat/vibe-check-mcp-server/blob/main/Attachments/VCC1.png)\n\n_Claude assumes the meaning of MCP despite ambiguity, leading to all subsequent steps having this wrong assumption_\n\n**After Vibe Check:**\n\n![after](https://github.com/PV-Bhat/vibe-check-mcp-server/blob/main/Attachments/VCC2.png)\n\n_Vibe Check MCP is called, and points out the ambiguity, which forces Claude to acknowledge this lack of information and proactively address it_\n\n## Installation & Setup\n\n### Installing via Smithery\n\nTo install vibe-check-mcp-server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@PV-Bhat/vibe-check-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @PV-Bhat/vibe-check-mcp-server --client claude\n```\n\n### Manual Installation via npm (Recommended)\n\n```bash\n# Clone the repo\ngit clone https://github.com/PV-Bhat/vibe-check-mcp-server.git\ncd vibe-check-mcp-server\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Start the server\nnpm run start\n```\n\n## Integration with Claude\n\nAdd to your `claude_desktop_config.json`:\n\n```json\n\"vibe-check\": {\n  \"command\": \"node\",\n  \"args\": [\n    \"/path/to/vibe-check-mcp/build/index.js\"\n  ],\n  \"env\": {\n    \"GEMINI_API_KEY\": \"YOUR_GEMINI_API_KEY\"\n  }\n}\n```\n\n## Environment Configuration\n\nCreate a `.env` file in the project root:\n\n```\nGEMINI_API_KEY=your_gemini_api_key_here\n```\n\n## Agent Prompting Guide\n\nFor effective pattern interrupts, include these instructions in your system prompt:\n\n```\nAs an autonomous agent, you will:\n\n1. Treat vibe_check as a critical pattern interrupt mechanism\n2. ALWAYS include the complete user request with each call\n3. Specify the current phase (planning/implementation/review)\n4. Use vibe_distill as a recalibration anchor when complexity increases\n5. Build the feedback loop with vibe_learn to record resolved issues\n```\n\n## When to Use Each Tool\n\n| Tool | When to Use |\n|------|-------------|\n| üõë **vibe_check** | When your agent starts explaining blockchain fundamentals for a todo app |\n| ‚öì **vibe_distill** | When your agent's plan has more nested bullet points than your entire tech spec |\n| üîÑ **vibe_learn** | After you've manually steered your agent back from the complexity abyss |\n\n## API Reference\n\nSee the [Technical Reference](./docs/technical-reference.md) for complete API documentation.\n\n## Architecture\n\n<details>\n<summary><b>The Metacognitive Architecture (Click to Expand)</b></summary>\n\nVibe Check implements a dual-layer metacognitive architecture based on recursive oversight principles. Key insights:\n\n1. **Pattern Inertia Resistance**: LLM agents naturally demonstrate a momentum-like property in their reasoning paths, requiring external intervention to redirect.\n\n2. **Phase-Resonant Interrupts**: Metacognitive questioning must align with the agent's current phase (planning/implementation/review) to achieve maximum corrective impact.\n\n3. **Authority Structure Integration**: Agents must be explicitly prompted to treat external metacognitive feedback as high-priority interrupts rather than optional suggestions.\n\n4. **Anchor Compression Mechanisms**: Complex reasoning flows must be distilled into minimal anchor chains to serve as effective recalibration points.\n\n5. **Recursive Feedback Loops**: All observed missteps must be stored and leveraged to build longitudinal failure models that improve interrupt efficacy.\n\nFor more details on the underlying design principles, see [Philosophy](./docs/philosophy.md).\n</details>\n\n## Vibe Check in Action (Continued)\n\n![VC1](https://github.com/PV-Bhat/vibe-check-mcp-server/blob/main/Attachments/VC1.png)\n\n---\n\n![V2](https://github.com/PV-Bhat/vibe-check-mcp-server/blob/main/Attachments/vc2.png)\n\n---\n\n\n![V3](https://github.com/PV-Bhat/vibe-check-mcp-server/blob/main/Attachments/vc3.png)\n\n---\n\n\n![V4](https://github.com/PV-Bhat/vibe-check-mcp-server/blob/main/Attachments/vc4.png)\n\n\n## Verifications\n\n<img src=\"https://mseep.net/pr/pv-bhat-vibe-check-mcp-server-badge.png\" alt=\"Logo\" width=\"100\" height=\"100\">\n\n## Documentation\n\n| Document | Description |\n|----------|-------------|\n| [Agent Prompting Strategies](./docs/agent-prompting.md) | Detailed techniques for agent integration |\n| [Advanced Integration](./docs/advanced-integration.md) | Feedback chaining, confidence levels, and more |\n| [Technical Reference](./docs/technical-reference.md) | Complete API documentation |\n| [Philosophy](./docs/philosophy.md) | The deeper AI alignment principles behind Vibe Check |\n| [Case Studies](./docs/case-studies.md) | Real-world examples of Vibe Check in action |\n\n## Contributing\n\nWe welcome contributions to Vibe Check! Whether it's bug fixes, feature additions, or just improving documentation, check out our [Contributing Guidelines](./CONTRIBUTING.md) to get started.\n\n## License\n\n[MIT](LICENSE)\n"
}