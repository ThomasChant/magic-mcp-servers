{
  "mcp_name": "chatmcp/heybeauty-mcp",
  "mcp_description": "Facilitates virtual try-on experiences by leveraging HeyBeauty API to manage and execute try-on tasks with clothing resources.",
  "mcp_id": "chatmcp_heybeauty-mcp",
  "fetch_timestamp": "2025-06-23T02:03:02.334305Z",
  "github_url": "https://github.com/chatmcp/heybeauty-mcp",
  "repository": {
    "name": "heybeauty-mcp",
    "full_name": "chatmcp/heybeauty-mcp",
    "description": "HeyBeauty MCP Server for Virtual TryOn",
    "html_url": "https://github.com/chatmcp/heybeauty-mcp",
    "created_at": "2025-04-26T08:23:04Z",
    "updated_at": "2025-06-18T16:41:37Z",
    "pushed_at": "2025-04-26T08:47:11Z",
    "size": 19,
    "stargazers_count": 18,
    "watchers_count": 18,
    "forks_count": 5,
    "open_issues_count": 2,
    "language": "JavaScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "chatmcp",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/190904236?v=4",
      "html_url": "https://github.com/chatmcp"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 5,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 9889,
      "TypeScript": 3390,
      "Dockerfile": 442
    },
    "language_percentages": {
      "JavaScript": 72.07,
      "TypeScript": 24.71,
      "Dockerfile": 3.22
    },
    "pull_requests_count": 2,
    "contributors_count": 1,
    "package_json_version": "0.1.0"
  },
  "readme": "# HeyBeauty MCP Server\n\nHeyBeauty Virtual TryOn\n\nThis is a TypeScript-based MCP server that implements virtual tryon using HeyBeauty API. It demonstrates core MCP concepts by providing:\n\n- Resources representing clothes with URIs and metadata\n- Tools for submit tryon task and query task info.\n- Prompts for tryon cloth.\n\n## Quick Start\n\n1. apply for [HeyBeauty API Key](https://heybeauty.com/docs/api/introduction)\n\n2. add the server config to MCP Client config file\n\n```json\n{\n  \"mcpServers\": {\n    \"heybeauty-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"heybeauty-mcp\"],\n      \"env\": {\n        \"HEYBEAUTY_API_KEY\": \"your_heybeauty_api_key\"\n      }\n    }\n  }\n}\n```\n\n### Resources\n\n- List and access clothes via `cloth://` URIs\n- Each cloth has a id, name, description, image url and metadata\n- Plain text mime type for simple content access\n\n### Tools\n\n- `submit_tryon_task` - Submit a tryon task\n  - Takes user image url, cloth image url, cloth id and cloth description as required parameters\n  - Stores tryon task in server state\n- `query_tryon_task` - Query a tryon task\n  - Takes task id as required parameter\n  - Returns tryon task info\n\n### Prompts\n\n- `tryon_cloth` - Tryon cloth\n  - Takes user image url, cloth image url, cloth id and cloth description as required parameters\n  - Returns structured prompt for LLM tryon\n\n### Resources\n\n- `cloth://` - URI for clothes\n  - Each cloth has a id, name, description, image url and metadata\n\n## Development\n\nInstall dependencies:\n\n```bash\nnpm install\n```\n\nBuild the server:\n\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"heybeauty-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/heybeauty-mcp/build/index.js\"]\n    },\n    \"env\": {\n      \"HEYBEAUTY_API_KEY\": \"your_heybeauty_api_key\"\n    }\n  }\n}\n```\n\nFollow this document to [get HeyBeauty API Key](https://heybeauty.com/docs/api/introduction).\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n"
}