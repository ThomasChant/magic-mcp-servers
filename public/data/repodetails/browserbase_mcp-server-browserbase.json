{
  "mcp_name": "Browserbase",
  "mcp_description": "üéñÔ∏è üìá - Automate browser interactions in the cloud (e.g. web navigation, data extraction, form filling, and more)",
  "mcp_id": "browserbase_mcp-server-browserbase",
  "fetch_timestamp": "2025-06-23T01:48:12.347984Z",
  "github_url": "https://github.com/browserbase/mcp-server-browserbase",
  "repository": {
    "name": "mcp-server-browserbase",
    "full_name": "browserbase/mcp-server-browserbase",
    "description": "Allow LLMs to control a browser with Browserbase and Stagehand",
    "html_url": "https://github.com/browserbase/mcp-server-browserbase",
    "created_at": "2024-12-05T19:20:40Z",
    "updated_at": "2025-06-22T23:35:47Z",
    "pushed_at": "2025-06-21T00:37:04Z",
    "size": 5675,
    "stargazers_count": 1978,
    "watchers_count": 1978,
    "forks_count": 202,
    "open_issues_count": 13,
    "language": "TypeScript",
    "license": "Apache License 2.0",
    "topics": [
      "ai",
      "browser",
      "chrome",
      "chromium",
      "mcp",
      "playwright",
      "puppeteer"
    ],
    "default_branch": "main",
    "owner": {
      "login": "browserbase",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/158221360?v=4",
      "html_url": "https://github.com/browserbase"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 202,
    "subscribers_count": 16,
    "languages": {
      "TypeScript": 129251,
      "Dockerfile": 1155,
      "JavaScript": 922
    },
    "language_percentages": {
      "TypeScript": 98.42,
      "Dockerfile": 0.88,
      "JavaScript": 0.7
    },
    "pull_requests_count": 67,
    "contributors_count": 11
  },
  "readme": "# Browserbase MCP Server\n\n![cover](assets/cover-mcp.png)\n\n[The Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) is an open protocol that enables seamless integration between LLM applications and external data sources and tools. Whether you‚Äôre building an AI-powered IDE, enhancing a chat interface, or creating custom AI workflows, MCP provides a standardized way to connect LLMs with the context they need.\n\nThis server provides cloud browser automation capabilities using [Browserbase](https://www.browserbase.com/) and [Stagehand](https://github.com/browserbase/stagehand). This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a cloud browser environment.\n\nTo learn to get started with Browserbase, check out [Browserbase MCP](./browserbase/README.md) or [Stagehand MCP](./stagehand/README.md).\n\n## Getting Started with available MCPs\n\nüåê **Browserbase MCP** - Located in [`browserbase/`](./browserbase/)\n\n| Feature            | Description                               |\n| ------------------ | ----------------------------------------- |\n| Browser Automation | Control and orchestrate cloud browsers    |\n| Data Extraction    | Extract structured data from any webpage  |\n| Console Monitoring | Track and analyze browser console logs    |\n| Screenshots        | Capture full-page and element screenshots |\n| Web Interaction    | Navigate, click, and fill forms with ease |\n\nü§ò **Stagehand MCP** - Located in [`stagehand/`](./stagehand/)\n\n| Feature             | Description                                                                                                                                                    |\n| ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Atomic Instructions | Execute precise actions like `act(\"click the login button\")` or `extract(\"find the red shoes\")`                                                                |\n| Model Flexibility   | Supports multiple models, including OpenAI's GPT-4 and Anthropic's Claude-3.7 Sonnet                                                                           |\n| Modular Design      | Easily integrate new models with minimal changes                                                                                                               |\n| Vision Support      | Use annotated screenshots for complex DOMs                                                                                                                     |\n| Open Source         | Contribute to the project and join the [Slack community](https://join.slack.com/t/stagehand-dev/shared_invite/zt-2uvuobu50-~wVSx2Si75CPa3332hwVEw) for support |\n\n### Alternative Installation Methods\n\n[Smithery](https://smithery.ai/server/@browserbasehq/mcp-browserbase)\n\n### Credits\n\nHuge thanks and shoutout to the Playwright team for their contributions to the framework, and their work on the [Playwright MCP Server](https://github.com/microsoft/playwright-mcp)"
}