{
  "mcp_name": "redis/mcp-redis",
  "mcp_description": "üêç üè† - The Redis official MCP Server offers an interface to manage and search data in Redis.",
  "mcp_id": "redis_mcp-redis",
  "fetch_timestamp": "2025-06-23T07:54:44.075453Z",
  "github_url": "https://github.com/redis/mcp-redis",
  "repository": {
    "name": "mcp-redis",
    "full_name": "redis/mcp-redis",
    "description": "The official Redis MCP Server is a natural language interface designed for agentic applications to manage and search data in Redis efficiently",
    "html_url": "https://github.com/redis/mcp-redis",
    "created_at": "2025-04-02T08:42:13Z",
    "updated_at": "2025-06-22T08:32:10Z",
    "pushed_at": "2025-06-16T08:51:28Z",
    "size": 79,
    "stargazers_count": 102,
    "watchers_count": 102,
    "forks_count": 33,
    "open_issues_count": 3,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "database",
      "genai",
      "llm",
      "mcp",
      "mcp-server",
      "redis"
    ],
    "default_branch": "main",
    "owner": {
      "login": "redis",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/1529926?v=4",
      "html_url": "https://github.com/redis"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 33,
    "subscribers_count": 2,
    "languages": {
      "Python": 39341,
      "Dockerfile": 190
    },
    "language_percentages": {
      "Python": 99.52,
      "Dockerfile": 0.48
    },
    "pull_requests_count": 18,
    "contributors_count": 12,
    "latest_release": {
      "tag_name": "0.1.0",
      "name": "0.1.0",
      "published_at": "2025-04-15T13:40:23Z",
      "body": "The first release of the official Redis MCP Server is available. It enables MCP Clients to read, write, and search data stored in Redis. It includes the most common commands to manage Redis data structures like JSON, hash, string, set, sorted set, and list. You can also manage pub/sub channels and streams. Additional management commands are available to check the status of the Redis Server.\r\n\r\nThis version includes an example to test this MCP Server with the OpenAI Agents SDK and the configuration to import it into Claude Desktop.",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "0.1.0",
        "commit_sha": "9abea4327aaf9ffb8358769709925e3a484b27f4"
      }
    ],
    "latest_version": "0.1.0"
  },
  "readme": "# Redis MCP Server\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Python Version](https://img.shields.io/badge/python-3.13%2B-blue)](https://www.python.org/downloads/)\n[![smithery badge](https://smithery.ai/badge/@redis/mcp-redis)](https://smithery.ai/server/@redis/mcp-redis)\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/70102150-efe0-4705-9f7d-87980109a279)\n\n## Overview\nThe Redis MCP Server is a **natural language interface** designed for agentic applications to efficiently manage and search data in Redis. It integrates seamlessly with **MCP (Model Content Protocol) clients**, enabling AI-driven workflows to interact with structured and unstructured data in Redis. Using this MCP Server, you can ask questions like:\n\n- \"Store the entire conversation in a stream\"\n- \"Cache this item\"\n- \"Store the session with an expiration time\"\n- \"Index and search this vector\"\n\n## Features\n- **Natural Language Queries**: Enables AI agents to query and update Redis using natural language.\n- **Seamless MCP Integration**: Works with any **MCP client** for smooth communication.\n- **Full Redis Support**: Handles **hashes, lists, sets, sorted sets, streams**, and more.\n- **Search & Filtering**: Supports efficient data retrieval and searching in Redis.\n- **Scalable & Lightweight**: Designed for **high-performance** data operations.\n\n## Tools\n\nThis MCP Server provides tools to manage the data stored in Redis.\n\n- `string` tools to set, get strings with expiration. Useful for storing simple configuration values, session data, or caching responses.\n- `hash` tools to store field-value pairs within a single key. The hash can store vector embeddings. Useful for representing objects with multiple attributes, user profiles, or product information where fields can be accessed individually.\n- `list` tools with common operations to append and pop items. Useful for queues, message brokers, or maintaining a list of most recent actions.\n- `set` tools to add, remove and list set members. Useful for tracking unique values like user IDs or tags, and for performing set operations like intersection.\n- `sorted set` tools to manage data for e.g. leaderboards, priority queues, or time-based analytics with score-based ordering.\n- `pub/sub` functionality to publish messages to channels and subscribe to receive them. Useful for real-time notifications, chat applications, or distributing updates to multiple clients.\n- `streams` tools to add, read, and delete from data streams. Useful for event sourcing, activity feeds, or sensor data logging with consumer groups support.\n- `JSON` tools to store, retrieve, and manipulate JSON documents in Redis. Useful for complex nested data structures, document databases, or configuration management with path-based access.\n\nAdditional tools.\n\n- `query engine` tools to manage vector indexes and perform vector search\n- `server management` tool to retrieve information about the database\n\n## Installation\n\nFollow these instructions to install the server.\n\n```sh\n# Clone the repository\ngit clone https://github.com/redis/mcp-redis.git\ncd mcp-redis\n\n# Install dependencies using uv\nuv venv\nsource .venv/bin/activate\nuv sync\n```\n\n## Configuration\n\nTo configure this Redis MCP Server, consider the following environment variables:\n\n| Name                 | Description                                               | Default Value |\n|----------------------|-----------------------------------------------------------|--------------|\n| `REDIS_HOST`         | Redis IP or hostname                                      | `\"127.0.0.1\"` |\n| `REDIS_PORT`         | Redis port                                                | `6379`       |\n| `REDIS_DB`           | Database                                                  | 0            |\n| `REDIS_USERNAME`     | Default database username                                 | `\"default\"`  |\n| `REDIS_PWD`          | Default database password                                 | \"\"           |\n| `REDIS_SSL`          | Enables or disables SSL/TLS                               | `False`      |\n| `REDIS_CA_PATH`      | CA certificate for verifying server                       | None         |\n| `REDIS_SSL_KEYFILE`  | Client's private key file for client authentication       | None         |\n| `REDIS_SSL_CERTFILE` | Client's certificate file for client authentication       | None         |\n| `REDIS_CERT_REQS`    | Whether the client should verify the server's certificate | `\"required\"` |\n| `REDIS_CA_CERTS`     | Path to the trusted CA certificates file                  | None         |\n| `REDIS_CLUSTER_MODE` | Enable Redis Cluster mode                                 | `False`      |\n| `MCP_TRANSPORT`      | Use the `stdio` or `sse` transport                        | `stdio`      |\n\n\nThere are several ways to set environment variables:\n\n1. **Using a `.env` File**:  \n  Place a `.env` file in your project directory with key-value pairs for each environment variable. Tools like `python-dotenv`, `pipenv`, and `uv` can automatically load these variables when running your application. This is a convenient and secure way to manage configuration, as it keeps sensitive data out of your shell history and version control (if `.env` is in `.gitignore`).\n\nFor example, create a `.env` file with the following content from the `.env.example` file provided in the repository:\n\n  ```bash\ncp .env.example .env\n  ```\n\n\n  Then edit the `.env` file to set your Redis configuration:\n\nOR,\n\n2. **Setting Variables in the Shell**:  \n  You can export environment variables directly in your shell before running your application. For example:\n  ```sh\n  export REDIS_HOST=your_redis_host\n  export REDIS_PORT=6379\n  # Other variables will be set similarly...\n  ```\n  This method is useful for temporary overrides or quick testing.\n\n## Transports\n\nThis MCP server can be configured to handle requests locally, running as a process and communicating with the MCP client via `stdin` and `stdout`.\nThis is the default configuration. The `sse` transport is also configurable so the server is available over the network.\nConfigure the `MCP_TRANSPORT` variable accordingly.\n\n```commandline\nexport MCP_TRANSPORT=\"sse\"\n```\n\nThen start the server.\n\n```commandline\nuv run src/main.py\n```\n\nTest the server:\n\n```commandline\ncurl -i http://127.0.0.1:8000/sse\nHTTP/1.1 200 OK\n```\n\nIntegrate with your favorite tool or client. The VS Code configuration for GitHub Copilot is:\n\n```commandline\n\"mcp\": {\n    \"servers\": {\n        \"redis-mcp\": {\n            \"type\": \"sse\",\n            \"url\": \"http://127.0.0.1:8000/sse\"\n        },\n    }\n},\n```\n\n\n## Integration with OpenAI Agents SDK\n\nIntegrate this MCP Server with the OpenAI Agents SDK. Read the [documents](https://openai.github.io/openai-agents-python/mcp/) to learn more about the integration of the SDK with MCP.\n\nInstall the Python SDK.\n\n```commandline\npip install openai-agents\n```\n\nConfigure the OpenAI token:\n\n```commandline\nexport OPENAI_API_KEY=\"<openai_token>\"\n```\n\nAnd run the [application](./examples/redis_assistant.py).\n\n```commandline\npython3.13 redis_assistant.py\n```\n\nYou can troubleshoot your agent workflows using the [OpenAI dashboard](https://platform.openai.com/traces/).\n\n## Integration with Claude Desktop\n\n### Via Smithery\n\nIf you'd like to test the [Redis MCP Server](https://smithery.ai/server/@redis/mcp-redis) deployed [by Smithery](https://smithery.ai/docs/deployments), you can configure Claude Desktop automatically:\n\n```bash\nnpx -y @smithery/cli install @redis/mcp-redis --client claude\n```\n\nFollow the prompt and provide the details to configure the server and connect to Redis (e.g. using a Redis Cloud database).\nThe procedure will create the proper configuration in the `claude_desktop_config.json` configuration file.\n\n### Manual configuration\n\nYou can configure Claude Desktop to use this MCP Server.\n\n1. Specify your Redis credentials and TLS configuration\n2. Retrieve your `uv` command full path (e.g. `which uv`)\n3. Edit the `claude_desktop_config.json` configuration file\n   - on a MacOS, at `~/Library/Application\\ Support/Claude/`\n\n```commandline\n{\n    \"mcpServers\": {\n        \"redis\": {\n            \"command\": \"<full_path_uv_command>\",\n            \"args\": [\n                \"--directory\",\n                \"<your_mcp_server_directory>\",\n                \"run\",\n                \"src/main.py\"\n            ],\n            \"env\": {\n                \"REDIS_HOST\": \"<your_redis_database_hostname>\",\n                \"REDIS_PORT\": \"<your_redis_database_port>\",\n                \"REDIS_PWD\": \"<your_redis_database_password>\",\n                \"REDIS_SSL\": True|False,\n                \"REDIS_CA_PATH\": \"<your_redis_ca_path>\",\n                \"REDIS_CLUSTER_MODE\": True|False\n            }\n        }\n    }\n}\n```\n\n### Using with Docker\n\nYou can use a dockerized deployment of this server. You can either build your own image or use the official [Redis MCP Docker](https://hub.docker.com/r/mcp/redis) image.\n\nIf you'd like to build your own image, the Redis MCP Server provides a Dockerfile. Build this server's image with:\n\n```commandline\ndocker build -t mcp-redis .\n```\n\nFinally, configure Claude Desktop to create the container at start-up. Edit the `claude_desktop_config.json` and add:\n\n```commandline\n{\n  \"mcpServers\": {\n    \"redis\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\",\n                \"--rm\",\n                \"--name\",\n                \"redis-mcp-server\",\n                \"-i\",\n                \"-e\", \"REDIS_HOST=<redis_hostname>\",\n                \"-e\", \"REDIS_PORT=<redis_port>\",\n                \"-e\", \"REDIS_USERNAME=<redis_username>\",\n                \"-e\", \"REDIS_PWD=<redis_password>\",\n                \"mcp-redis\"]\n    }\n  }\n}\n```\n\nTo use the official [Redis MCP Docker](https://hub.docker.com/r/mcp/redis) image, just replace your image name (`mcp-redis` in the example above) with `mcp/redis`.\n\n### Troubleshooting\n\nYou can troubleshoot problems by tailing the log file.\n\n```commandline\ntail -f ~/Library/Logs/Claude/mcp-server-redis.log\n```\n\n## Integration with VS Code\n\nTo use the Redis MCP Server with VS Code, you need:\n\n1. Enable the [agent mode](https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode) tools. Add the following to your `settings.json`:\n\n```commandline\n{\n  \"chat.agent.enabled\": true\n}\n```\n\n2. Add the Redis MCP Server configuration to your `mcp.json` or `settings.json`:\n\n```commandline\n// Example .vscode/mcp.json\n{\n  \"servers\": {\n    \"redis\": {\n      \"type\": \"stdio\",\n      \"command\": \"<full_path_uv_command>\",\n      \"args\": [\n        \"--directory\",\n        \"<your_mcp_server_directory>\",\n        \"run\",\n        \"src/main.py\"\n      ],\n      \"env\": {\n        \"REDIS_HOST\": \"<your_redis_database_hostname>\",\n        \"REDIS_PORT\": \"<your_redis_database_port>\",\n        \"REDIS_USERNAME\": \"<your_redis_database_username>\",\n        \"REDIS_PWD\": \"<your_redis_database_password>\",\n      }\n    }\n  }\n}\n```\n\n```commandline\n// Example settings.json\n{\n  \"mcp\": {\n    \"servers\": {\n      \"redis\": {\n        \"type\": \"stdio\",\n        \"command\": \"<full_path_uv_command>\",\n        \"args\": [\n          \"--directory\",\n          \"<your_mcp_server_directory>\",\n          \"run\",\n          \"src/main.py\"\n        ],\n        \"env\": {\n          \"REDIS_HOST\": \"<your_redis_database_hostname>\",\n          \"REDIS_PORT\": \"<your_redis_database_port>\",\n          \"REDIS_USERNAME\": \"<your_redis_database_username>\",\n          \"REDIS_PWD\": \"<your_redis_database_password>\",\n        }\n      }\n    }\n  }\n}\n```\n\nFor more information, see the [VS Code documentation](https://code.visualstudio.com/docs/copilot/chat/mcp-servers).\n\n\n## Testing\n\nYou can use the [MCP Inspector](https://modelcontextprotocol.io/docs/tools/inspector) for visual debugging of this MCP Server.\n\n```sh\nnpx @modelcontextprotocol/inspector uv run src/main.py\n```\n\n## Example Use Cases\n- **AI Assistants**: Enable LLMs to fetch, store, and process data in Redis.\n- **Chatbots & Virtual Agents**: Retrieve session data, manage queues, and personalize responses.\n- **Data Search & Analytics**: Query Redis for **real-time insights and fast lookups**.\n- **Event Processing**: Manage event streams with **Redis Streams**.\n\n## Contributing\n1. Fork the repo\n2. Create a new branch (`feature-branch`)\n3. Commit your changes\n4. Push to your branch and submit a PR!\n\n## License\nThis project is licensed under the **MIT License**.\n\n## Badges\n\n<a href=\"https://glama.ai/mcp/servers/@redis/mcp-redis\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@redis/mcp-redis/badge\" alt=\"Redis Server MCP server\" />\n</a>\n\n## Contact\nFor questions or support, reach out via [GitHub Issues](https://github.com/redis/mcp-redis/issues).\n"
}