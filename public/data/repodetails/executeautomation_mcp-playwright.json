{
  "mcp_name": "Playwright MCP Server",
  "mcp_description": "A Model Context Protocol server that provides browser automation capabilities using Playwright.",
  "mcp_id": "executeautomation_mcp-playwright",
  "fetch_timestamp": "2025-06-23T07:33:15.463744Z",
  "github_url": "https://github.com/executeautomation/mcp-playwright",
  "repository": {
    "name": "mcp-playwright",
    "full_name": "executeautomation/mcp-playwright",
    "description": "Playwright Model Context Protocol Server - Tool to automate Browsers and APIs in Claude Desktop, Cline, Cursor IDE and More ðŸ”Œ",
    "html_url": "https://github.com/executeautomation/mcp-playwright",
    "created_at": "2024-12-03T18:43:20Z",
    "updated_at": "2025-06-23T07:23:06Z",
    "pushed_at": "2025-06-20T21:28:21Z",
    "size": 25789,
    "stargazers_count": 3983,
    "watchers_count": 3983,
    "forks_count": 330,
    "open_issues_count": 28,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "executeautomation",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/10337030?v=4",
      "html_url": "https://github.com/executeautomation"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": true,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 330,
    "subscribers_count": 33,
    "languages": {
      "TypeScript": 182244,
      "JavaScript": 2877,
      "Dockerfile": 979
    },
    "language_percentages": {
      "TypeScript": 97.93,
      "JavaScript": 1.55,
      "Dockerfile": 0.53
    },
    "pull_requests_count": 76,
    "contributors_count": 29,
    "package_json_version": "1.0.6"
  },
  "readme": "<div align=\"center\" markdown=\"1\">\n  <table>\n    <tr>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://mseep.ai/app/executeautomation-mcp-playwright\">\n          <img src=\"https://mseep.net/pr/executeautomation-mcp-playwright-badge.png\" alt=\"MseeP.ai Security Assessment Badge\" height=\"80\"/>\n        </a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://www.warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=mcp-playwright\">\n          <img alt=\"Warp sponsorship\" width=\"200\" src=\"https://github.com/user-attachments/assets/ab8dd143-b0fd-4904-bdc5-dd7ecac94eae\"/>\n        </a>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\"><sub>MseeP.ai Security Assessment</sub></td>\n      <td align=\"center\"><sub>Special thanks to <a href=\"https://www.warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=mcp-playwright\">Warp, the AI terminal for developers</a></sub></td>\n    </tr>\n  </table>\n</div>\n<hr>\n\n# Playwright MCP Server ðŸŽ­\n\n[![smithery badge](https://smithery.ai/badge/@executeautomation/playwright-mcp-server)](https://smithery.ai/server/@executeautomation/playwright-mcp-server)\n\nA Model Context Protocol server that provides browser automation capabilities using Playwright. This server enables LLMs to interact with web pages, take screenshots, generate test code, web scraps the page and execute JavaScript in a real browser environment.\n\n<a href=\"https://glama.ai/mcp/servers/yh4lgtwgbe\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/yh4lgtwgbe/badge\" alt=\"mcp-playwright MCP server\" /></a>\n\n## Screenshot\n![Playwright + Claude](image/playwright_claude.png)\n\n## [Documentation](https://executeautomation.github.io/mcp-playwright/) | [API reference](https://executeautomation.github.io/mcp-playwright/docs/playwright-web/Supported-Tools)\n\n## Installation\n\nYou can install the package using either npm, mcp-get, or Smithery:\n\nUsing npm:\n```bash\nnpm install -g @executeautomation/playwright-mcp-server\n```\n\nUsing mcp-get:\n```bash\nnpx @michaellatman/mcp-get@latest install @executeautomation/playwright-mcp-server\n```\nUsing Smithery\n\nTo install Playwright MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@executeautomation/playwright-mcp-server):\n\n```bash\nnpx @smithery/cli install @executeautomation/playwright-mcp-server --client claude\n```\n#### Installation in VS Code\n\nInstall the Playwright MCP server in VS Code using one of these buttons:\n\n<!--\n// Generate using?:\nconst config = JSON.stringify({ name: 'playwright', command: 'npx', args: [\"-y\", \"@executeautomation/playwright-mcp-server\"] });\nconst urlForWebsites = `vscode:mcp/install?${encodeURIComponent(config)}`;\n// Github markdown does not allow linking to `vscode:` directly, so you can use our redirect:\nconst urlForGithub = `https://insiders.vscode.dev/redirect?url=${encodeURIComponent(urlForWebsites)}`;\n-->\n\n[<img src=\"https://img.shields.io/badge/VS_Code-VS_Code?style=flat-square&label=Install%20Server&color=0098FF\" alt=\"Install in VS Code\">](https://insiders.vscode.dev/redirect?url=vscode%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522-y%2522%252C%2522%2540executeautomation%252Fplaywright-mcp-server%2522%255D%257D) \n[<img alt=\"Install in VS Code Insiders\" src=\"https://img.shields.io/badge/VS_Code_Insiders-VS_Code_Insiders?style=flat-square&label=Install%20Server&color=24bfa5\">](https://insiders.vscode.dev/redirect?url=vscode-insiders%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522-y%2522%252C%2522%2540executeautomation%252Fplaywright-mcp-server%2522%255D%257D)\n\nAlternatively, you can install the Playwright MCP server using the VS Code CLI:\n\n```bash\n# For VS Code\ncode --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@executeautomation/playwright-mcp-server\"]}'\n```\n\n```bash\n# For VS Code Insiders\ncode-insiders --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@executeautomation/playwright-mcp-server\"]}'\n```\n\nAfter installation, the ExecuteAutomation Playwright MCP server will be available for use with your GitHub Copilot agent in VS Code.\n\n## Configuration to use Playwright Server\nHere's the Claude Desktop configuration to use the Playwright server:\n\n```json\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@executeautomation/playwright-mcp-server\"]\n    }\n  }\n}\n```\n\n## Testing\n\nThis project uses Jest for testing. The tests are located in the `src/__tests__` directory.\n\n### Running Tests\n\nYou can run the tests using one of the following commands:\n\n```bash\n# Run tests using the custom script (with coverage)\nnode run-tests.cjs\n\n# Run tests using npm scripts\nnpm test           # Run tests without coverage\nnpm run test:coverage  # Run tests with coverage\nnpm run test:custom    # Run tests with custom script (same as node run-tests.cjs)\n```\n\nThe test coverage report will be generated in the `coverage` directory.\n\n### Running evals\n\nThe evals package loads an mcp client that then runs the index.ts file, so there is no need to rebuild between tests. You can load environment variables by prefixing the npx command. Full documentation can be found [here](https://www.mcpevals.io/docs).\n\n```bash\nOPENAI_API_KEY=your-key  npx mcp-eval src/evals/evals.ts src/tools/codegen/index.ts\n```\n\n## Contributing\n\nWhen adding new tools, please be mindful of the tool name length. Some clients, like Cursor, have a 60-character limit for the combined server and tool name (`server_name:tool_name`).\n\nOur server name is `playwright-mcp`. Please ensure your tool names are short enough to not exceed this limit.\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=executeautomation/mcp-playwright&type=Date)](https://star-history.com/#executeautomation/mcp-playwright&Date)\n"
}