{
  "mcp_name": "Machine-To-Machine/m2m-mcp-server-ssh-client",
  "mcp_description": "Facilitates secure SSH connections to remote MCP servers, enabling access to MCP tools and resources over a secure channel.",
  "mcp_id": "Machine-To-Machine_m2m-mcp-server-ssh-client",
  "fetch_timestamp": "2025-06-23T06:19:59.001423Z",
  "github_url": "https://github.com/Machine-To-Machine/m2m-mcp-server-ssh-client",
  "repository": {
    "name": "m2m-mcp-server-ssh-client",
    "full_name": "Machine-To-Machine/m2m-mcp-server-ssh-client",
    "description": null,
    "html_url": "https://github.com/Machine-To-Machine/m2m-mcp-server-ssh-client",
    "created_at": "2025-04-08T20:37:25Z",
    "updated_at": "2025-06-22T00:10:08Z",
    "pushed_at": "2025-04-16T21:58:21Z",
    "size": 121,
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "Machine-To-Machine",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/200778560?v=4",
      "html_url": "https://github.com/Machine-To-Machine"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 0,
    "languages": {
      "Python": 41699
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 2,
    "latest_release": {
      "tag_name": "v0.1.2",
      "name": "v0.1.2",
      "published_at": "2025-04-10T18:52:05Z",
      "body": "**Full Changelog**: https://github.com/Machine-To-Machine/m2m-mcp-server-ssh-client/compare/v0.1.1...v0.1.2",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.1.2",
        "commit_sha": "6e3892f9658c20254839e4759a3020a984d38d4f"
      },
      {
        "name": "v0.1.1",
        "commit_sha": "93c18ed21d5bece014acb721779d55373b2b2e10"
      },
      {
        "name": "v0.1.0",
        "commit_sha": "4fa383a710739152103fc8ace1e4313547db086b"
      }
    ],
    "latest_version": "v0.1.2"
  },
  "readme": "# MCP Server SSH Client\n\n[![PyPI version](https://img.shields.io/pypi/v/m2m-mcp-server-ssh-client.svg)](https://pypi.org/project/m2m-mcp-server-ssh-client/)\n[![Python Versions](https://img.shields.io/pypi/pyversions/m2m-mcp-server-ssh-client.svg)](https://pypi.org/project/m2m-mcp-server-ssh-client/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nA Model Context Protocol Server (Remote SSH client) that connects to remote MCP servers over SSH. This client enables accessing and utilizing MCP tools hosted on remote servers, providing a secure channel for MCP communication.\n\n<a href=\"https://glama.ai/mcp/servers/@Machine-To-Machine/m2m-mcp-server-ssh-client\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@Machine-To-Machine/m2m-mcp-server-ssh-client/badge\" />\n</a>\n\n## Features\n\n- Connect to any MCP server over SSH\n- Proxy all MCP protocol commands through a secure SSH channel\n- Support for key-based authentication\n- Support for MCP capabilities including tools, prompts, and resources\n\n## Installation\n\nIn a `uv` managed python project, add to dependencies by:\n\n```bash\nuv add m2m-mcp-server-ssh-client\n```\n\nAlternatively, for projects using `pip` for dependencies:\n```bash\npip install m2m-mcp-server-ssh-client\n```\n\nTo install directly from the source:\n\n```bash\ngit clone https://github.com/Machine-To-Machine/m2m-mcp-server-ssh-client.git\ncd m2m-mcp-server-ssh-client\npip install -e .\n```\n\nTo run the server inside your project:\n\n```\nuv run m2m-mcp-server-ssh-client\n```\n\n## Common Use Cases\n\n### 1. Quick Start with Demo Server\n\nWe maintain a public demo server with various MCP tools already configured and ready to use. (This server will be available until we release our open, decentralized registry.)\n\nThis demo server has multiple MCP servers including HackerNews, MLB Stats API, and Formula 1 API tools for you to experiment with.\n\n#### Claude\n\nTo connect Claude to this server, simply add the following to Claude Desktop settings.\n\n```json\n\"mcpServers\": {\n  \"remote-mcp-tools\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"m2m-mcp-server-ssh-client\", \n      \"--host\", \"mcp-beta.machinetomachine.ai\", \n      \"--port\", \"8022\", \n      \"--use-key-server\"\n    ]\n  }\n}\n```\n\n#### Command-line\n\n```bash\n# Connect to the M2M public demo server with automatic key exchange\nuv run m2m-mcp-server-ssh-client --host mcp-beta.machinetomachine.ai --use-key-server\n```\n\n### 2. Local Development Testing\n\nFor setting up your own SSH server, refer to [`m2m-mcp-server-ssh-server`](https://github.com/Machine-To-Machine/m2m-mcp-server-ssh-server).\n\nFor local testing with your own MCP tools:\n\n```bash\n# Connect to a local MCP SSH server\nuv run m2m-mcp-server-ssh-client\n```\n\nThe above command will try to connect to a local SSH server listening on port 8022.\n\nWhen testing locally, you can simplify key exchange by using the key server:\n\n```bash\n# Use the key server for automatic key management (if server has --run-key-server enabled)\nuv run m2m-mcp-server-ssh-client --use-key-server\n```\n\nThe above command will try to use the key server running on port 8000.\n\n### 3. Remote Server Connection\n\nConnect to your own hosted MCP server:\n\n```bash\n# Using existing SSH keys\nuv run m2m-mcp-server-ssh-client --host your-server.example.com --client-key ~/.ssh/your_key --known-hosts ~/.ssh/known_hosts\n```\n\nYou can simplify key exchange by running the key server on your remote server and configuring it in client.\n\n## Usage with AI Platforms\n\n### Claude Desktop Integration\n\nAdd this to Claude Desktop settings:\n\n```json\n\"mcpServers\": {\n  \"remote-mcp-tools\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"m2m-mcp-server-ssh-client\", \n      \"--host\", \"mcp-beta.machinetomachine.ai\", \n      \"--port\", \"8022\", \n      \"--use-key-server\"\n    ]\n  }\n}\n```\n\n### MCP Inspector\n\nFor debugging or exploring available tools:\n\n```bash\nnpx @modelcontextprotocol/inspector -- uvx m2m-mcp-server-ssh-client --host mcp-beta.machinetomachine.ai --port 8022 --use-key-server\n```\n\n## Usage\n\n### Command Line Options\n\n- `--host`: Remote SSH server host (default: \"localhost\")\n- `--port`: Remote SSH server port (default: 8022)\n- `--username`: SSH username (default: \"mcp\")\n- `--client-key`: Client private key file (default: \"~/.ssh/m2m_mcp_server_ssh_client\")\n- `--known-hosts`: Path to known hosts file (default: \"~/.ssh/known_hosts\")\n- `--passphrase`: Passphrase for the private key (default: None)\n- `--disable-host-key-checking`: Skip server signature verification (default: False)\n- `--log-level`: Set logging level (default: INFO)\n\n## Detailed Examples\n\n### Basic Connection to a Remote Server\n\nConnect to a remote MCP server (SSH server) running on port 8022:\n\n```bash\nuvx m2m-mcp-server-ssh-client --host mcp.example.com\n```\n\n### Using a Custom SSH Key\n\nSpecify a particular SSH key for authentication:\n\n```bash\nuvx m2m-mcp-server-ssh-client --host mcp.example.com --client-key ~/.ssh/mcp_custom_key\n```\n\nIf your key is passphrase-protected:\n\n```bash\nuvx m2m-mcp-server-ssh-client --host mcp.example.com --client-key ~/.ssh/mcp_custom_key --passphrase \"your-passphrase\"\n```\n\n### Debug Mode for Troubleshooting\n\nEnable detailed logging for troubleshooting connection issues:\n\n```bash\nuvx m2m-mcp-server-ssh-client --host mcp.example.com --log-level DEBUG\n```\n\n### Key Server Integration\n\nThe MCP SSH Client can use a key server for dynamic key exchange and verification:\n\n```bash\nuvx m2m-mcp-server-ssh-client --host mcp.example.com --use-key-server\n```\n\nWhen using a key server:\n\n1. The client fetches the server's public key from `http://host:key-server-port/server_pub_key`\n2. The client registers its public key with the server at `http://host:key-server-port/register`\n3. A temporary `known_hosts` file is created for the SSH connection\n\nThis feature is mutually exclusive with `--known-hosts` and `--disable-host-key-checking`.\n\n### Disabling Host Key Checking\n\n> **⚠️ Security Warning**: Using `--disable-host-key-checking` makes your connection vulnerable to man-in-the-middle attacks. Only use this option in trusted networks or for development/testing purposes.\n\n```bash\nuvx m2m-mcp-server-ssh-client --host localhost --disable-host-key-checking\n```\n\n### Configure for Claude Desktop\n\nAdd to your Claude settings:\n\n```json\n\"mcpServers\": {\n  \"remote-servers\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"m2m-mcp-server-ssh-client\", \n      \"--host\", \"example.com\", \n      \"--port\", \"8022\", \n      \"--username\", \"mcp\"\n    ]\n  }\n}\n```\n\nFor a more secure configuration with a specific key:\n\n```json\n\"mcpServers\": {\n  \"remote-servers\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"m2m-mcp-server-ssh-client\",\n      \"--host\", \"mcp-server.example.com\",\n      \"--port\", \"8022\",\n      \"--username\", \"claude-mcp\",\n      \"--client-key\", \"~/.ssh/claude_mcp_key\",\n      \"--known-hosts\", \"~/.ssh/mcp_remote_server\"\n    ]\n  }\n}\n```\n\n## How It Works\n\nThe MCP Server SSH Client establishes an SSH connection to a remote server running the MCP Server SSH Server for MCP tools, i.e., [`m2m-mcp-server-ssh-server`](https://github.com/Machine-To-Machine/m2m-mcp-server-ssh-server). It then:\n\n1. Creates a local proxy server that mirrors the capabilities of the remote MCP server\n2. Forwards all MCP requests to the remote server through the SSH connection\n3. Returns responses from the remote server to the local client\n\nThis allows you to use tools running on remote machines as if they were installed locally.\n\n### Authentication Flow\n\n```mermaid\n%%{init: {'theme':'default', 'themeVariables': { 'primaryColor': '#5D8AA8', 'primaryTextColor': '#fff', 'primaryBorderColor': '#1F456E', 'lineColor': '#5D8AA8', 'secondaryColor': '#006400', 'tertiaryColor': '#fff' }}}%%\n\nsequenceDiagram\n    participant Host as MCP Host<br>(Claude/Cursor)\n    participant Client as MCP SSH Client\n    participant KeySrv as Key Server<br>(HTTP API)\n    participant SSHSrv as MCP SSH Server\n    participant MCP as MCP Servers\n\n    Note over Client,SSHSrv: Initial Key Exchange & Authentication\n    \n    Client->>Client: Generate SSH key pair<br>if does not exist\n    Client->>KeySrv: GET /server_pub_key\n    KeySrv->>Client: Return server's public key\n    Client->>Client: Store server key in<br>temporary known_hosts\n    Client->>KeySrv: POST /register<br>{client_pub_key: \"ssh-ed25519 AAAA...\"}\n    KeySrv->>SSHSrv: Store client public key<br>in authorized keys\n    KeySrv->>Client: {status: \"success\"}\n    \n    Note over Client,SSHSrv: Secure SSH Connection\n    \n    Client->>SSHSrv: SSH handshake with<br>client key authentication\n    SSHSrv->>SSHSrv: Verify client key<br>against authorized keys\n    SSHSrv->>Client: Authentication successful\n    \n    Note over Client,SSHSrv: MCP Communication\n    \n    Host->>Client: JSONRPC request\n    Client->>SSHSrv: Forward request<br>over SSH tunnel\n    SSHSrv->>MCP: Route request to<br>appropriate MCP server\n    MCP->>SSHSrv: Process and return results\n    SSHSrv->>Client: Send response over SSH\n    Client->>Host: Return JSONRPC response\n    \n    Note over Client,SSHSrv: Session Management\n    \n    alt Session Termination\n        Host->>Client: Close connection\n        Client->>SSHSrv: Terminate SSH session\n        SSHSrv->>SSHSrv: Clean up resources\n    end\n```\n\n## Security Considerations\n\n- Always use host key verification in production environments\n- Use passphrase-protected SSH keys for stronger security\n- Consider using dedicated SSH keys for MCP connections\n- Set appropriate permissions (600) for your SSH key files\n- Use a dedicated, limited-privilege user on the remote server\n\n## Troubleshooting Common Issues\n\n### Connection Refused\n\n```\nError running MCP SSH client: [Errno 111] Connection refused\n```\n\n**Solution**: Verify the host and port are correct and that the SSH service is running.\n\n### Authentication Failure\n\n```\nError running MCP SSH client: Authentication failed\n```\n\n**Solution**: Check the key file path. Ensure the remote server has your public key installed.\n\n### Host Key Verification Failed\n\n```\nError running MCP SSH client: Host key verification failed\n```\n\n**Solution**: Either add the host key to your known_hosts file or use `--disable-host-key-checking` (for testing only).\n\n## Dependencies\n\n- anyio (>=4.5.0)\n- asyncssh (>=2.20.0)\n- mcp (>=1.1.3)\n- pydantic (>=2.0.0)\n\n## Development\n\n### Setup Development Environment\n\n```bash\ngit clone https://github.com/Machine-To-Machine/m2m-mcp-server-ssh-client.git\ncd m2m-mcp-server-ssh-client\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\nuv pip install -e \".[dev]\"\n```\n\n### Code Quality\n\n```bash\n# Run linting\nuv run ruff check .\n\n# Run formatting check\nuv run ruff format --check .\n\n# Run security checks\nuv run bandit -r src/\n```\n\n## Debugging\n\nYou can use the MCP inspector to debug the client:\n\n```\nnpx @modelcontextprotocol/inspector uvx m2m-mcp-server-ssh-client --host example.com\n```\n\nFor advanced debugging, use the following workflow:\n\n1. Start the client with `--log-level DEBUG`\n2. Check the SSH connection parameters and handshake process\n3. If using custom keys, verify correct paths and permissions\n4. Use `ssh -v` directly to test basic connectivity first\n\n## Contributing\n\nWe welcome contributions to help expand and improve `m2m-mcp-server-ssh-client`. Whether you want to add new features, enhance existing functionality, or improve documentation, your input is valuable.\n\nPull requests are welcome! Feel free to contribute new ideas, bug fixes, or enhancements.\n\n### Contribution Guidelines\n\n1. Fork the repository\n2. Create a feature branch: `git checkout -b feature-name`\n3. Commit your changes: `git commit -am 'Add some feature'`\n4. Push to the branch: `git push origin feature-name`\n5. Submit a pull request\n\n## License\n\nMIT License - See LICENSE file for details.\n\n## Authors\n\n- **Machine To Machine**\n"
}