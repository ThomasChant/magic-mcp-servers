{
  "mcp_name": "echozyr2001/ali-flux-mcp",
  "mcp_description": "Facilitates image generation and management using Alibaba Cloud's DashScope API, with task tracking and local storage capabilities.",
  "mcp_id": "echozyr2001_ali-flux-mcp",
  "fetch_timestamp": "2025-06-23T02:46:29.301586Z",
  "github_url": "https://github.com/echozyr2001/ali-flux-mcp",
  "repository": {
    "name": "ali-flux-mcp",
    "full_name": "echozyr2001/ali-flux-mcp",
    "description": "A simple MCP server for generating images using Ali Cloud's DashScope API, with tools for task management and local image saving.",
    "html_url": "https://github.com/echozyr2001/ali-flux-mcp",
    "created_at": "2025-04-27T05:45:30Z",
    "updated_at": "2025-05-06T04:54:44Z",
    "pushed_at": "2025-04-27T07:22:52Z",
    "size": 15,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": null,
    "topics": [
      "mcp",
      "mcp-server"
    ],
    "default_branch": "main",
    "owner": {
      "login": "echozyr2001",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/115935108?v=4",
      "html_url": "https://github.com/echozyr2001"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 12902
    },
    "language_percentages": {
      "JavaScript": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "0.1.0"
  },
  "readme": "# Ali-Flux MCP Server\n\n[中文文档](README-zh.md)\n\nA Model Context Protocol server for Alibaba Cloud DashScope API\n\nThis is a TypeScript-based MCP server that provides functionality to interact with Alibaba Cloud DashScope API for generating images and saving them locally. It demonstrates core MCP concepts by providing:\n\n- Tools for generating images using Alibaba Cloud DashScope API\n- Tools for checking task status\n- Tools for downloading generated images and saving them locally\n\n## Features\n\n### Tools\n- `generate_image` - Generate images using Alibaba Cloud DashScope API\n  - Takes prompt as required parameter\n  - Optional parameters: size, seed, steps\n  - Submits image generation task to DashScope API\n\n- `check_task_status` - Check image generation task status\n  - Takes task_id as required parameter\n  - Returns the current status of the image generation task\n\n- `download_image` - Download generated images and save them locally\n  - Takes task_id as required parameter\n  - Optional parameter: save_path for custom save location (must be an absolute path)\n  - Optional parameter: base_dir for resolving relative paths (defaults to WORK_DIR environment variable)\n  - Downloads all generated images and saves them to the specified directory\n\n## Development\n\n### Prerequisites\n- Node.js and npm\n- Alibaba Cloud DashScope API key\n\n### Environment Variables\n- `DASHSCOPE_API_KEY`: Your Alibaba Cloud DashScope API key\n- `SAVE_DIR`: Directory to save generated images (default: ~/Desktop/flux-images)\n- `MODEL_NAME`: DashScope model name (default: flux-merged)\n- `WORK_DIR`: Work directory (default: process.cwd())\n\n### Setup\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\n### Configuration\nTo use with Claude Desktop or other MCP-compatible clients, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"ali-flux\": {\n      \"command\": \"/path/to/ali-flux/build/index.js\",\n      \"env\": {\n        \"DASHSCOPE_API_KEY\": \"your-api-key-here\",\n        \"SAVE_DIR\": \"/custom/save/path\" // Optional\n      }\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n"
}