{
  "mcp_name": "addozhang/spring-rest-to-mcp",
  "mcp_description": "Effortlessly transform Spring Web REST APIs into MCP server tools using OpenRewrite recipes for seamless AI integration.",
  "mcp_id": "addozhang_spring-rest-to-mcp",
  "fetch_timestamp": "2025-06-23T00:14:28.094308Z",
  "github_url": "https://github.com/addozhang/spring-rest-to-mcp",
  "repository": {
    "name": "spring-rest-to-mcp",
    "full_name": "addozhang/spring-rest-to-mcp",
    "description": "Convert Spring REST API to MCP Server with OpenRewrite",
    "html_url": "https://github.com/addozhang/spring-rest-to-mcp",
    "created_at": "2025-04-05T10:24:09Z",
    "updated_at": "2025-06-21T07:50:06Z",
    "pushed_at": "2025-05-28T23:02:01Z",
    "size": 42,
    "stargazers_count": 24,
    "watchers_count": 24,
    "forks_count": 4,
    "open_issues_count": 1,
    "language": "Java",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "addozhang",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/2224492?v=4",
      "html_url": "https://github.com/addozhang"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 4,
    "subscribers_count": 1,
    "languages": {
      "Java": 46032
    },
    "language_percentages": {
      "Java": 100
    },
    "pull_requests_count": 1,
    "contributors_count": 2
  },
  "readme": "# Spring Web to MCP Converter üöÄ\n\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\nAn [OpenRewrite](https://docs.openrewrite.org/) recipe collection that automatically converts Spring Web REST APIs to Spring AI Model Context Protocol (MCP) server tools.\n\n## üìã Introduction\n\nThis project provides a set of OpenRewrite recipes that help you migrate traditional Spring Web REST APIs to Spring AI's Model Context Protocol (MCP) server tools. The transformation includes:\n\n1. üîÑ Converting Spring Web annotations to Spring AI MCP `@Tool` annotations\n2. üîß Adding necessary MCP configuration and components\n3. üì¶ Updating Maven dependencies to include Spring AI MCP server components\n\nThe recipes automatically extract documentation from your existing REST controllers to create properly documented MCP tools, making your APIs accessible to AI agents through the [Model Context Protocol](https://modelcontextprotocol.io/).\n\nFor more details about Spring AI's implementation of MCP, see the [Spring AI MCP documentation](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-overview.html).\n\n## üõ†Ô∏è How to Build and Install\n\n### Prerequisites\n\n- Java 17 or higher\n- Maven 3.6+\n\n### Prerequisites for Target REST API Projects\n\nTo successfully migrate your Spring Web REST API to MCP, your project should:\n\n- Use Spring Boot 3.2+ (3.2.0 or newer)\n- Use Spring Web MVC for REST controllers\n- Use Maven build tool\n\nThe recipe adds Spring AI MCP dependencies (version 1.0.0-SNAPSHOT or newer) to your project automatically.\n\n### Build Steps\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/yourusername/web-to-mcp.git\n   cd web-to-mcp\n   ```\n\n2. Build the project:\n   ```bash\n   mvn clean install\n   ```\n\nThis will compile the code and install the artifact to your local Maven repository.\n\n## üî• How to Use\n\nTo apply the recipes to your Spring Web project, run the following Maven command:\n\n```bash\nmvn org.openrewrite.maven:rewrite-maven-plugin:6.4.0:run \\\n  -Drewrite.activeRecipes=RewriteWebToMCP \\\n  -Drewrite.recipeArtifactCoordinates=com.atbug.rewrite:web-to-mcp:1.0-SNAPSHOT \\\n  -Drewrite.exportDatatables=true\n```\n\n**Important**: This command needs to be executed twice:\n1. First execution will update your pom.xml to add necessary repositories and dependencies\n2. Second execution will perform the actual code conversion of your Spring Web controllers to MCP tools\n\n## ‚ú® Features\n\nThe recipe performs several transformations that are organized into three main components:\n\n### 1. POM Updates (`UpdatePom`)\n- Adds Spring Snapshots repository (`https://repo.spring.io/snapshot`)\n- Adds Central Portal Snapshots repository (`https://central.sonatype.com/repository/maven-snapshots/`)\n- Adds Spring AI MCP server WebMVC dependency (`spring-ai-starter-mcp-server-webmvc`)\n\n### 2. Code Transformations\n- **`AddToolAnnotationToMappingMethod`**: Automatically converts Spring Web controller methods to MCP tools\n  - Adds `@Tool` annotations to methods with Spring Web mapping annotations (`@GetMapping`, `@PostMapping`, etc.)\n  - Extracts method descriptions from JavaDoc comments to populate the `description` attribute\n  - Adds `@ToolParam` annotations to method parameters, preserving their descriptions from JavaDoc\n  \n- **`AddToolCallbackProviderBean`**: Creates or updates a bean to register MCP tools\n  - Identifies Spring Boot application entry point class\n  - Creates a `ToolCallbackProvider` bean to register all controllers with `@Tool` annotations\n  - Intelligently updates existing provider beans if they already exist\n  \n- **`AddSpringAIMcpProperties`**: Configures MCP server properties \n  - Adds required MCP server configuration to `application.properties` or `application.yml`\n  - Sets server name, version, type, and message endpoints\n  - Supports both YAML and Properties file formats\n\n## üß™ Example\n\n### Before (Spring Web Controller)\n\n```java\n@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n    \n    /**\n     * Get a user by ID\n     * @param id The user identifier\n     * @return The user details\n     */\n    @GetMapping(\"/{id}\")\n    public User getUserById(@PathVariable Long id) {\n        // Implementation\n    }\n}\n```\n\n### After (MCP Tool)\n\n```java\n@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n    \n    /**\n     * Get a user by ID\n     * @param id The user identifier\n     * @return The user details\n     */\n    @GetMapping(\"/{id}\")\n    @Tool(description = \"Get a user by ID\")\n    public User getUserById(@ToolParam(description = \"The user identifier\") @PathVariable Long id) {\n        // Implementation\n    }\n}\n```\n\n### Generated MCP Configuration\n\nThe recipe will also automatically add MCP server configuration to your application properties:\n\n```properties\nspring.ai.mcp.server.name=webmvc-mcp-server\nspring.ai.mcp.server.sse-message-endpoint=/mcp/messages\nspring.ai.mcp.server.type=SYNC\nspring.ai.mcp.server.version=1.0.0\n```\n\nAnd automatically register your tools by adding a `ToolCallbackProvider` bean to your Spring Boot application class:\n\n```java\n@Bean\nToolCallbackProvider toolCallbackProvider(UserController userController) {\n    return MethodToolCallbackProvider.builder()\n            .toolObjects(userController)\n            .build();\n}\n```\n\n## üåü Demonstration\n\nYou can try out this conversion tool with a sample Spring Boot 3 REST API project that's ready for conversion.\n\n### Sample Project Setup\n\n1. Clone the sample project:\n   ```bash\n   git clone https://github.com/addozhang/spring-boot-3-rest-api-sample.git\n   cd spring-boot-3-rest-api-sample\n   ```\n\n2. Review the sample project structure:\n   - It's a standard Spring Boot 3 application with REST controllers\n   - Includes typical REST endpoints with various HTTP methods (GET, POST, PUT, DELETE)\n   - Contains proper JavaDoc comments that will be converted to MCP tool descriptions\n\n### Conversion Process\n\n1. First, run the Maven command to update the POM file with required dependencies:\n   ```bash\n   mvn org.openrewrite.maven:rewrite-maven-plugin:6.4.0:run \\\n     -Drewrite.activeRecipes=RewriteWebToMCP \\\n     -Drewrite.recipeArtifactCoordinates=com.atbug.rewrite:spring-rest-to-mcp:1.0-SNAPSHOT \\\n     -Drewrite.exportDatatables=true\n   ```\n\n2. Then, run the same command again to perform the actual code conversion:\n   ```bash\n   mvn org.openrewrite.maven:rewrite-maven-plugin:6.4.0:run \\\n     -Drewrite.activeRecipes=RewriteWebToMCP \\\n     -Drewrite.recipeArtifactCoordinates=com.atbug.rewrite:spring-rest-to-mcp:1.0-SNAPSHOT \\\n     -Drewrite.exportDatatables=true\n   ```\n\n3. Verify the changes:\n   - Check your controller classes for added `@Tool` and `@ToolParam` annotations\n   - Look for the new `ToolCallbackProvider` bean in your main application class\n   - Check that `application.properties` or `application.yml` has MCP server configuration\n\n4. Run the application:\n   ```bash\n   mvn spring-boot:run\n   ```\n\n5. Test your MCP server using the official MCP Inspector:\n   - Clone the MCP Inspector repository:\n     ```bash\n     git clone https://github.com/modelcontextprotocol/inspector.git\n     cd inspector\n     ```\n   - Install dependencies and start the inspector:\n     ```bash\n     npm install\n     npm run dev\n     ```\n   - Access the inspector in your browser at: http://localhost:5173/\n   - In the left side panel, configure your MCP server with:\n     - Type: SSE\n     - Address: http://localhost:8080/sse\n   - Once connected, you can:\n     - View all available tools in the main panel\n     - Test each tool interactively\n     - See the responses from your MCP server\n\n### What to Expect\n\nAfter conversion, your Spring Boot application will function both as a traditional REST API and as an MCP server. This means:\n\n- All your existing endpoints continue to work as before\n- Applications that support the MCP protocol can discover and interact with your API\n- AI assistants can understand how to use your tools through the MCP protocol's standardized format\n\nApplications consuming your MCP server can be configured to connect to it with configuration like:\n\n```json\n{\n  \"mcpServers\": {\n    \"spring-ai-mcp-sample\": {\n      \"autoApprove\": [],\n      \"disabled\": false,\n      \"timeout\": 60,\n      \"url\": \"http://localhost:8080/sse\",\n      \"transportType\": \"sse\"\n    }\n  }\n}\n```\n\nThis allows client applications to seamlessly discover and utilize the tools provided by your converted API.\n\n## üìÑ License\n\nThis project is licensed under the Apache License 2.0 - see the LICENSE file for details.\n\n## üë• Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## üìû Support\n\nIf you have any questions or need help, please open an issue on GitHub.\n"
}