{
  "mcp_name": "ArisaTaki/MCP-study",
  "mcp_description": "A TypeScript-based MCP server offering basic arithmetic operations and dynamic resource management.",
  "mcp_id": "ArisaTaki_MCP-study",
  "fetch_timestamp": "2025-06-23T01:15:48.414401Z",
  "github_url": "https://github.com/ArisaTaki/MCP-study",
  "repository": {
    "name": "MCP-study",
    "full_name": "ArisaTaki/MCP-study",
    "description": "使用typescript学习MCP架构的仓库",
    "html_url": "https://github.com/ArisaTaki/MCP-study",
    "created_at": "2025-04-28T08:07:29Z",
    "updated_at": "2025-04-30T02:14:13Z",
    "pushed_at": "2025-04-30T02:14:09Z",
    "size": 61,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "ArisaTaki",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/44470606?v=4",
      "html_url": "https://github.com/ArisaTaki"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 16941,
      "JavaScript": 1892
    },
    "language_percentages": {
      "TypeScript": 89.95,
      "JavaScript": 10.05
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "1.0.0"
  },
  "readme": "# MCP 计算器服务器\n\n这是一个简单的 MCP (Model Context Protocol) 服务器示例，提供基本的数字加法功能。\n\n## 功能\n\n该服务器提供一个工具 `add_numbers`，可以将两个数字相加并返回结果。\n\n## 安装\n\n```bash\n# 克隆仓库后，安装依赖\nnpm install\n\n# 构建项目\nnpm run build\n```\n\n## 使用方法\n\n### 本地直接运行\n\n```bash\nnpm start\n```\n\n### MCP API 说明\n\n本项目使用 MCP SDK 的高级 API 实现：\n\n- 使用 `McpServer` 类创建 MCP 服务器\n- 通过 `tool()` 方法注册工具\n- 简洁易读的代码风格\n\n### ResourceTemplate\n\n`ResourceTemplate` 是 MCP SDK 提供的一个重要功能，用于定义动态资源。通过它，你可以：\n\n1. **创建参数化资源**: 使用占位符定义资源 URI 模板\n2. **处理动态路径**: 自动解析 URI 参数并传递给处理函数\n3. **支持资源列表**: 可以配置资源是否支持列表操作\n\n例如，你可以这样添加一个带有参数的资源：\n\n```javascript\n// 添加一个动态的问候资源\nserver.resource(\n  \"greeting\",\n  new ResourceTemplate(\"greeting://{name}\", { list: undefined }),\n  async (uri, { name }) => ({\n    contents: [\n      {\n        uri: uri.href,\n        text: `你好，${name}！`,\n      },\n    ],\n  })\n);\n```\n\n使用这个资源时，客户端可以请求 `greeting://张三`，服务器会返回 \"你好，张三！\"。\n\n### 在 Claude 桌面版中配置\n\n1. 打开 Claude 桌面客户端\n2. 进入\"开发者 > 编辑配置\"\n3. 在 `claude_desktop_config.json` 文件中添加：\n\n```json\n{\n  \"mcpServers\": {\n    \"calculator-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\"/完整路径/mcp-demo/build/index.js\"]\n    }\n  }\n}\n```\n\n注意：请将 `/完整路径/mcp-demo/build/index.js` 替换为实际的文件路径。\n\n### 与 Claude 交互\n\n启用 MCP 服务器后，可以在 Claude 中使用加法功能，例如：\n\n> 请帮我计算 42 + 17 等于多少？\n\nClaude 将使用 MCP 服务器提供的工具进行计算并提供结果。\n\n## 调试\n\n可以使用 MCP inspector 工具进行调试：\n\n```bash\nnpm run inspect\n```\n\n# MCP (Model Context Protocol) 全面学习指南\n\n本指南将帮助你系统地学习和掌握 Model Context Protocol (MCP)，一种为大型语言模型 (LLM) 提供上下文和功能的标准协议。\n\n## 目录\n\n1. [MCP 基础概念](#mcp-基础概念)\n2. [环境准备](#环境准备)\n3. [基本架构组件](#基本架构组件)\n   - [Server (服务器)](#server-服务器)\n   - [Tools (工具)](#tools-工具)\n   - [Resources (资源)](#resources-资源)\n   - [Prompts (提示)](#prompts-提示)\n4. [实践学习路径](#实践学习路径)\n5. [进阶开发技巧](#进阶开发技巧)\n6. [调试和测试](#调试和测试)\n7. [常见问题解答](#常见问题解答)\n\n## MCP 基础概念\n\nMCP (Model Context Protocol) 是一种开放标准，用于连接大型语言模型 (如 Claude) 与各种数据源和功能。它使 LLM 能够：\n\n- 访问本地文件和数据\n- 连接数据库\n- 执行计算任务\n- 调用外部 API\n- 使用特定领域的工具\n\nMCP 服务器充当桥梁，为 LLM 提供受控的数据访问和功能执行能力。\n\n## 环境准备\n\n开始学习 MCP 前，确保已准备好以下环境：\n\n```bash\n# 已安装 Node.js 和 npm\n\n# 项目初始化\nnpm install @modelcontextprotocol/sdk zod\nnpm install -D typescript @types/node ts-node\n\n# 安装 MCP Inspector（调试工具）\nnpm install -g @modelcontextprotocol/inspector\n```\n\n## 基本架构组件\n\n### Server (服务器)\n\nMCP 服务器是整个架构的中心，负责处理请求并提供功能：\n\n```typescript\n// 创建 MCP 服务器\nconst server = new McpServer({\n  name: \"my-mcp-server\",\n  version: \"1.0.0\",\n  description: \"我的 MCP 服务器\",\n});\n\n// 连接到传输层\nconst transport = new StdioServerTransport();\nawait server.connect(transport);\n```\n\n### Tools (工具)\n\n工具允许 LLM 执行操作，如计算、API 调用等：\n\n```typescript\n// 注册一个简单计算工具\nserver.tool(\n  \"add\",\n  {\n    a: z.number().describe(\"第一个数字\"),\n    b: z.number().describe(\"第二个数字\"),\n  },\n  async ({ a, b }) => ({\n    content: [{ type: \"text\", text: `${a} + ${b} = ${a + b}` }],\n  })\n);\n```\n\n**学习要点**：\n\n- 工具名称应该简洁明了\n- 使用 Zod 验证输入参数\n- 正确处理错误情况\n- 返回格式化的结果\n\n### Resources (资源)\n\n资源为 LLM 提供数据和信息：\n\n```typescript\n// 静态资源\nserver.resource(\"welcome-message\", \"message://welcome\", async (uri) => ({\n  contents: [\n    {\n      uri: uri.href,\n      mimeType: \"text/plain\",\n      text: \"欢迎使用我的 MCP 服务器！\",\n    },\n  ],\n}));\n\n// 参数化动态资源\nserver.resource(\n  \"user-profile\",\n  new ResourceTemplate(\"user://{userId}\", { list: undefined }),\n  async (uri, { userId }) => ({\n    contents: [\n      {\n        uri: uri.href,\n        mimeType: \"application/json\",\n        text: JSON.stringify(await getUserProfile(userId)),\n      },\n    ],\n  })\n);\n```\n\n**学习要点**：\n\n- 静态 vs 动态资源\n- 资源 URI 设计\n- 支持 list 操作的资源\n- 不同 MIME 类型的资源\n\n### Prompts (提示)\n\n提示是预定义的消息模板，帮助 LLM 生成特定格式的响应：\n\n```typescript\n// 创建简单提示\nserver.prompt(\n  \"greet-user\",\n  {\n    name: z.string().describe(\"用户名称\"),\n  },\n  ({ name }) => ({\n    messages: [\n      {\n        role: \"user\",\n        content: {\n          type: \"text\",\n          text: `你好，${name}！请简要自我介绍。`,\n        },\n      },\n    ],\n  })\n);\n```\n\n**学习要点**：\n\n- 提示的结构和参数\n- 用户消息的设计\n- 提示模板的重用\n\n## 实践学习路径\n\n我们准备了两个实例供你学习：\n\n### 基础示例 (index.ts)\n\n一个简单的计算器服务器，实现基本的加法功能。\n\n运行方式：\n\n```bash\nnpm start\n```\n\n调试方式：\n\n```bash\nnpm run inspect\n```\n\n### 全功能示例 (comprehensive-mcp-server.ts)\n\n一个包含多种工具、资源和提示的全面 MCP 服务器。\n\n运行方式：\n\n```bash\nnpm run start:comprehensive\n```\n\n调试方式：\n\n```bash\nnpm run inspect:comprehensive\n```\n\n### 学习步骤\n\n1. **基础阶段**：运行并理解基础示例\n\n   - 分析代码结构\n   - 通过 MCP Inspector 测试加法功能\n   - 尝试修改参数和返回值\n\n2. **进阶阶段**：探索全功能示例\n\n   - 研究不同类型的工具实现\n   - 了解各种资源定义方式\n   - 测试提示模板的效果\n\n3. **实践阶段**：\n   - 添加自己的工具和资源\n   - 修改现有功能的行为\n   - 在 Claude 中测试你的服务器\n\n## 进阶开发技巧\n\n### 数据类型和验证\n\n使用 TypeScript 接口和 Zod 模式确保类型安全：\n\n```typescript\ninterface UserData {\n  id: string;\n  name: string;\n  email: string;\n}\n\nconst userSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  email: z.string().email(),\n});\n```\n\n### 错误处理\n\n优雅地处理错误情况：\n\n```typescript\ntry {\n  // 操作代码\n} catch (error) {\n  return {\n    isError: true,\n    content: [\n      {\n        type: \"text\",\n        text: `操作失败: ${\n          error instanceof Error ? error.message : \"未知错误\"\n        }`,\n      },\n    ],\n  };\n}\n```\n\n### 动态资源列表\n\n创建支持列表操作的资源：\n\n```typescript\nserver.resource(\n  \"documents\",\n  new ResourceTemplate(\"docs://{category}\", {\n    list: async () => ({\n      resources: [\n        { uri: \"docs://tech\", name: \"技术文档\" },\n        { uri: \"docs://user\", name: \"用户手册\" },\n      ],\n    }),\n  }),\n  async (uri, { category }) => ({\n    /* 处理特定资源 */\n  })\n);\n```\n\n## 调试和测试\n\n### 使用 MCP Inspector\n\nMCP Inspector 是一个强大的调试工具：\n\n- 查看所有注册的工具、资源和提示\n- 测试工具的执行\n- 查看资源的内容\n- 测试提示模板\n\n使用方法：\n\n```bash\nnpx @modelcontextprotocol/inspector node ./path/to/server.js\n```\n\n### 集成到 Claude\n\n1. 编辑 Claude 桌面客户端配置：\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"my-server\": {\n         \"command\": \"node\",\n         \"args\": [\"/完整路径/到你的/build/文件.js\"]\n       }\n     }\n   }\n   ```\n\n2. 重启 Claude 客户端\n3. 启用 MCP 插件\n4. 开始与 Claude 交互，使用你的 MCP 功能\n\n## 常见问题解答\n\n### Q: MCP 与普通 API 有什么区别？\n\nA: MCP 专为 LLM 交互设计，提供了标准化的资源、工具和提示抽象，更容易集成到 AI 对话流程中。\n\n### Q: 如何处理大型数据？\n\nA: 考虑分页或流式传输大型数据，或提供摘要信息让 LLM 决定是否需要完整数据。\n\n### Q: 如何保证 MCP 服务器的安全？\n\nA: 限制敏感操作，验证所有输入，实现适当的认证和授权机制。\n\n### Q: 最新版本的 SDK 有哪些变化？\n\nA: SDK 不断发展，从 `Server` API 向更简洁的 `McpServer` API 迁移。参考官方文档获取最新信息。\n\n---\n\n通过遵循本指南并探索提供的示例，你将能够全面理解 MCP 架构并开发自己的 MCP 服务器。祝你学习愉快！\n"
}