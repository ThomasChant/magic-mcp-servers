{
  "mcp_name": "Solana Agent Kit MCP Server",
  "mcp_description": "A Solana Agent Kit implementation using MCP for handling protocol operations on the Solana blockchain",
  "mcp_id": "sendaifun_solana-agent-kit",
  "fetch_timestamp": "2025-06-23T08:32:55.806783Z",
  "github_url": "https://github.com/sendaifun/solana-agent-kit/tree/main/examples/agent-kit-mcp-server",
  "repository": {
    "name": "solana-agent-kit",
    "full_name": "sendaifun/solana-agent-kit",
    "description": "connect any ai agents to solana protocols",
    "html_url": "https://github.com/sendaifun/solana-agent-kit",
    "created_at": "2024-11-17T09:10:19Z",
    "updated_at": "2025-06-22T16:19:47Z",
    "pushed_at": "2025-06-21T09:53:34Z",
    "size": 21513,
    "stargazers_count": 1485,
    "watchers_count": 1485,
    "forks_count": 780,
    "open_issues_count": 6,
    "language": "TypeScript",
    "license": "Apache License 2.0",
    "topics": [
      "ai",
      "langchain",
      "langchain-js",
      "solana",
      "solana-langchain",
      "web3js"
    ],
    "default_branch": "v2",
    "owner": {
      "login": "sendaifun",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/188793707?v=4",
      "html_url": "https://github.com/sendaifun"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": true,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 780,
    "subscribers_count": 19,
    "languages": {
      "TypeScript": 1303198
    },
    "language_percentages": {
      "TypeScript": 100
    },
    "pull_requests_count": 370,
    "contributors_count": 80,
    "latest_release": {
      "tag_name": "v2.0.5",
      "name": "v2.0.5",
      "published_at": "2025-05-23T21:12:57Z",
      "body": "## What's Changed\r\n* updating dependency for para-plugin-example to now using npm instead of building locally by @uratmangun in https://github.com/sendaifun/solana-agent-kit/pull/411\r\n* docs (drift.mdx): update link to article about perpetuals by @gap-editor in https://github.com/sendaifun/solana-agent-kit/pull/413\r\n* chore: fix some typos in comment by @eveneast in https://github.com/sendaifun/solana-agent-kit/pull/412\r\n* examples/update by @michaelessiet in https://github.com/sendaifun/solana-agent-kit/pull/406\r\n* Feature add okx v2 by @Julian-dev28 in https://github.com/sendaifun/solana-agent-kit/pull/414\r\n* Chore: update all plugin readmes by @michaelessiet in https://github.com/sendaifun/solana-agent-kit/pull/421\r\n* feature: add okx dex sdk by @0xobedient in https://github.com/sendaifun/solana-agent-kit/pull/428\r\n* docs: the link to the Ð°pache license was missing by @Olexandr88 in https://github.com/sendaifun/solana-agent-kit/pull/429\r\n* fix/public key undefined by @michaelessiet in https://github.com/sendaifun/solana-agent-kit/pull/416\r\n* fix/get token2022 mint by @michaelessiet in https://github.com/sendaifun/solana-agent-kit/pull/424\r\n* chore: missing links for npm and forks badges added to documentation by @Olexandr88 in https://github.com/sendaifun/solana-agent-kit/pull/430\r\n\r\n## New Contributors\r\n* @gap-editor made their first contribution in https://github.com/sendaifun/solana-agent-kit/pull/413\r\n* @eveneast made their first contribution in https://github.com/sendaifun/solana-agent-kit/pull/412\r\n* @0xobedient made their first contribution in https://github.com/sendaifun/solana-agent-kit/pull/428\r\n* @Olexandr88 made their first contribution in https://github.com/sendaifun/solana-agent-kit/pull/429\r\n\r\n**Full Changelog**: https://github.com/sendaifun/solana-agent-kit/compare/v2.0.4...v2.0.5",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v2.0.5",
        "commit_sha": "e72c9df23eb9d42d80950f4b10d288d1a2a65596"
      },
      {
        "name": "v2.0.4",
        "commit_sha": "68629a57e73d92f13a6881324cb855188cc19696"
      },
      {
        "name": "v2.0.2",
        "commit_sha": "cbb63007a290fa989818529e40c36e90861a9970"
      },
      {
        "name": "v2.0.0-beta.3",
        "commit_sha": "ac81e37a0880cc8bab57d4b1a3a8168bc47b26c2"
      },
      {
        "name": "v2.0.0-beta.2",
        "commit_sha": "26abcad9a3ef3928abdaf24a885e2dde3c2a0f0a"
      },
      {
        "name": "v2.0.0-beta.1",
        "commit_sha": "a6cbef060e282eb4e53ba671256edf9973930048"
      },
      {
        "name": "v1.4.9",
        "commit_sha": "7f83da4daca444a5481088632a953565537a19fd"
      },
      {
        "name": "v1.4.8",
        "commit_sha": "6ba0165899b0269e0db1449fdc33c5684486926e"
      },
      {
        "name": "v1.4.5",
        "commit_sha": "d508a7e43108d417a99946b9d94d28cea10fde79"
      },
      {
        "name": "v1.4.4",
        "commit_sha": "ecf874185e8e91b0f7198a90b50ce4486518ce3c"
      }
    ],
    "latest_version": "v2.0.5",
    "package_json_version": "2.0.7"
  },
  "readme": "<div align=\"center\">\n\n# Solana Agent Kit\n\n![SAKCover2](https://github.com/user-attachments/assets/a6072421-8958-4cee-934a-a10ea32ae75e)\n\n[![NPM Downloads](https://img.shields.io/npm/dm/solana-agent-kit?style=for-the-badge)](https://www.npmjs.com/package/solana-agent-kit)\n[![GitHub forks](https://img.shields.io/github/forks/sendaifun/solana-agent-kit?style=for-the-badge)](https://github.com/sendaifun/solana-agent-kit/network/members)\n[![GitHub License](https://img.shields.io/github/license/sendaifun/solana-agent-kit?style=for-the-badge)](https://github.com/sendaifun/solana-agent-kit/blob/v2/LICENSE)\n</div>\n\nAn open-source toolkit for connecting AI agents to Solana protocols. Now, any agent, using any model can autonomously perform 60+ Solana actions:\n\n- Trade tokens\n- Launch new tokens\n- Lend assets\n- Send compressed airdrops\n- Execute blinks\n- Launch tokens on AMMs\n- Bridge tokens across chains\n- And more...\n\nAnyone - whether an SF-based AI researcher or a crypto-native builder - can bring their AI agents trained with any model and seamlessly integrate with Solana.\n\n[![Run on Repl.it](https://replit.com/badge/github/sendaifun/solana-agent-kit)](https://replit.com/@sendaifun/Solana-Agent-Kit)\n> Replit template created by [Arpit Singh](https://github.com/The-x-35)\n\n## ðŸ”§ Core Blockchain Features\n\n- **Token Operations**\n  - Deploy SPL tokens by Metaplex\n  - Transfer assets\n  - Balance checks\n  - Stake SOL\n  - Zk compressed Airdrop by Light Protocol and Helius\n  - Bridge tokens across chains using Wormhole\n- **NFTs on 3.Land**\n  - Create your own collection\n  - NFT creation and automatic listing on 3.land\n  - List your NFT for sale in any SPL token\n- **NFT Management via Metaplex**\n  - Collection deployment\n  - NFT minting\n  - Metadata management\n  - Royalty configuration\n\n- **DeFi Integration**\n  - Jupiter Exchange swaps\n  - Launch on Pump via PumpPortal\n  - Raydium pool creation (CPMM, CLMM, AMMv4)\n  - Orca Whirlpool integration\n  - Manifest market creation, and limit orders\n  - Meteora Dynamic AMM, DLMM Pool, and Alpha Vault\n  - Openbook market creation\n  - Register and Resolve SNS\n  - Jito Bundles\n  - Pyth Price feeds for fetching Asset Prices\n  - Register/resolve Alldomains\n  - Perpetuals Trading with Adrena Protocol\n  - Drift Vaults, Perps, Lending and Borrowing\n  - Cross-chain bridging via deBridge DLN\n  - Cross chain bridging via Wormhole\n\n- **Solana Blinks**\n   - Lending by Lulo (Best APR for USDC)\n   - Send Arcade Games\n   - JupSOL staking\n   - Solayer SOL (sSOL)staking\n\n- **Non-Financial Actions**\n  - Gib Work for registering bounties\n\n- **Market Data Integration**\n  - CoinGecko Pro API integration\n  - Real-time token price data\n  - Trending tokens and pools\n  - Top gainers analysis\n  - Token information lookup\n  - Latest pool tracking\n\n## ðŸ¤– AI Integration Features\n\n- **LangChain Integration**\n  - Ready-to-use LangChain tools for blockchain operations\n  - Autonomous agent support with React framework\n  - Memory management for persistent interactions\n  - Streaming responses for real-time feedback\n\n- **Vercel AI SDK Integration**\n  - Vercel AI SDK for AI agent integration\n  - Framework agnostic support\n  - Quick and easy toolkit setup\n\n- **Autonomous Modes**\n  - Interactive chat mode for guided operations\n  - Autonomous mode for independent agent actions\n  - Configurable action intervals\n  - Built-in error handling and recovery\n\n- **AI Tools**\n  - DALL-E integration for NFT artwork generation\n  - Natural language processing for blockchain commands\n  - Price feed integration for market analysis\n  - Automated decision-making capabilities\n\n## ðŸ“ƒ Documentation\n\nYou can view the full documentation of the kit at [docs.sendai.fun](https://docs.sendai.fun/v0/introduction)\n\n## Why We Built V2 and Why Upgrade?\n\nThe Solana Agent Kit V2 is a major upgrade from V1, to learn why check out our [migration guide](./MIGRATING.md)\n\n## ðŸ“¦ Core Installation\n\n```bash\nnpm install solana-agent-kit\n```\n\n## ðŸ“¦ Plugin Installation\n\nYou can choose to install any of the plugins listed below or you could choose to install all of them to experience the full power of the Solana Agent Kit.\n\n1. Token plugin (`@solana-agent-kit/plugin-token`): Token operations for SPL tokens such as transferring assets, swapping, bridging, and rug checking.\n2. NFT plugin (`@solana-agent-kit/plugin-nft`): NFT operations for Metaplex NFTs such as minting, listing, and metadata management.\n3. DeFi plugin (`@solana-agent-kit/plugin-defi`): DeFi operations for Solana protocols such as staking, lending, borrowing, and spot and perpetual trading.\n4. Misc plugin (`@solana-agent-kit/plugin-misc`): Miscellaneous operations such as airdrops, price feeds, coingecko token information, and domain registration.\n5. Blinks plugin (`@solana-agent-kit/plugin-blinks`): Blinks operations for Solana protocols such as arcade games and more soon to come.\n\n```bash\nnpm install @solana-agent-kit/plugin-token @solana-agent-kit/plugin-nft @solana-agent-kit/plugin-defi @solana-agent-kit/plugin-misc @solana-agent-kit/plugin-blinks\n```\n\n## Quick Start\n\nInitializing the wallet interface and agent with plugins:\n\n```typescript\nimport { SolanaAgentKit, createVercelAITools, KeypairWallet } from \"solana-agent-kit\"; // or import createLangchainTools if using langchain or createOpenAITools for OpenAI agents\nimport TokenPlugin from \"@solana-agent-kit/plugin-token\";\nimport NFTPlugin from \"@solana-agent-kit/plugin-nft\";\nimport DefiPlugin from \"@solana-agent-kit/plugin-defi\";\nimport MiscPlugin from \"@solana-agent-kit/plugin-misc\";\nimport BlinksPlugin from \"@solana-agent-kit/plugin-blinks\";\n\nconst keyPair = Keypair.fromSecretKey(bs58.decode(\"YOUR_SECRET_KEY\"))\nconst wallet = new KeypairWallet(keyPair)\n\n// Initialize with private key and optional RPC URL\nconst agent = new SolanaAgentKit(\n  wallet,\n  \"YOUR_RPC_URL\",\n  {\n    OPENAI_API_KEY: \"YOUR_OPENAI_API_KEY\",\n  }\n) // Add the plugins you would like to use\n  .use(TokenPlugin)\n  .use(NFTPlugin)\n  .use(DefiPlugin)\n  .use(MiscPlugin)\n  .use(BlinksPlugin);\n\n// Create LangChain tools\nconst tools = createVercelAITools(agent, agent.actions);\n```\n\nYou can also make use of the wallet interface provided by the Solana wallet adapter for embedded wallets.\n\n## Usage Examples Using Tools From The Token, Defi, and Other Plugins\n\n### Deploy a New Token\n\n```typescript\nconst result = await agent.methods.deployToken(\n  agent,\n  \"my ai token\", // name\n  \"uri\", // uri\n  \"token\", // symbol\n  9, // decimals\n  {\n    mintAuthority: null, // by default, deployer account\n    freezeAuthority: null, // by default, deployer account\n    updateAuthority: undefined, // by default, deployer account\n    isMutable: false // by default, true\n  },\n  1000000 // initial supply\n);\n\nconsole.log(\"Token Mint Address:\", result.mint.toString());\n```\n\n### Deploy a New Token2022\n\n```typescript\nconst result = await agent.methods.deployToken2022(\n  \"my ai token 2022\", // name\n  \"uri\", // uri\n  \"token2022\", // symbol\n  9, // decimals\n  {\n    mintAuthority: null, // by default, deployer account\n    freezeAuthority: null, // by default, deployer account\n    updateAuthority: undefined, // by default, deployer account\n    isMutable: false // by default, true\n  },\n  1000000 // initial supply\n);\n\nconsole.log(\"Token2022 Mint Address:\", result.mint.toString());\n```\n\n### Create NFT Collection on 3Land\n```typescript\nconst isDevnet = false; // (Optional) if not present TX takes place in Mainnet\nconst priorityFeeParam = 1000000; // (Optional) if not present the default priority fee will be 50000\n\n const collectionOpts: CreateCollectionOptions = {\n    collectionName: \"\",\n    collectionSymbol: \"\",\n    collectionDescription: \"\",\n    mainImageUrl: \"\"\n  };\n\nconst result = await agent.methods.create3LandCollection(\n      collectionOpts,\n      isDevnet, // (Optional) if not present TX takes place in Mainnet\n      priorityFeeParam, //(Optional)\n    );\n```\n\n### Create NFT on 3Land\n\nWhen creating an NFT using 3Land's tool, it automatically goes for sale on 3.land website\n\n```typescript\nconst isDevnet = true; // (Optional) if not present TX takes place in Mainnet\nconst withPool = true; // (Optional) only present if NFT will be created with a Liquidity Pool for a specific SPL token\nconst priorityFeeParam = 1000000; // (Optional) if not present the default priority fee will be 50000\nconst collectionAccount = \"\"; //hash for the collection\nconst createItemOptions: CreateSingleOptions = {\n  itemName: \"\",\n  sellerFee: 500, //5%\n  itemAmount: 100, //total items to be created\n  itemSymbol: \"\",\n  itemDescription: \"\",\n  traits: [\n    { trait_type: \"\", value: \"\" },\n  ],\n  price: 0, //100000000 == 0.1 sol, can be set to 0 for a free mint\n  splHash: \"\", //present if listing is on a specific SPL token, if not present sale will be on $SOL, must be present if \"withPool\" is true\n  poolName: \"\", // Only present if \"withPool\" is true\n  mainImageUrl: \"\",\n};\nconst result = await agent.methods.create3LandSingle(\n  {},\n  collectionAccount,\n  createItemOptions,\n  isDevnet, // (Optional) if not present TX takes place in Mainnet\n  withPool\n  priorityFeeParam, //(Optional)\n);\n```\n\n### Create NFT Collection\n\n```typescript\nconst collection = await agent.methods.deployCollection(agent, {\n  name: \"My NFT Collection\",\n  uri: \"https://arweave.net/metadata.json\",\n  royaltyBasisPoints: 500, // 5%\n  creators: [\n    {\n      address: \"creator-wallet-address\",\n      percentage: 100,\n    },\n  ],\n});\n```\n\n### Swap Tokens\n\n```typescript\nimport { PublicKey } from \"@solana/web3.js\";\n\nconst signature = await agent.methods.trade(\n  agent,\n  new PublicKey(\"target-token-mint\"),\n  100, // amount\n  new PublicKey(\"source-token-mint\"),\n  300 // 3% slippage\n);\n```\n\n### Lend Tokens\n\n```typescript\nimport { PublicKey } from \"@solana/web3.js\";\n\nconst signature = await agent.methods.lendAssets(\n  agent,\n  100 // amount of USDC to lend\n);\n```\n\n### Stake SOL\n\n```typescript\nconst signature = await agent.methods.stakeWithJup(\n  agent,\n  1 // amount in SOL to stake\n);\n```\n\n### Stake SOL on Solayer\n\n```typescript\nconst signature = await agent.methods.stakeWithSolayer(\n  agent,\n  1 // amount in SOL to stake\n);\n\n```\n\n### Send an SPL Token Airdrop via ZK Compression\n\n```typescript\nimport { PublicKey } from \"@solana/web3.js\";\n\n(async () => {\n  console.log(\n    \"~Airdrop cost estimate:\",\n    getAirdropCostEstimate(\n      1000, // recipients\n      30_000 // priority fee in lamports\n    )\n  );\n\n  const signature = await agent.methods.sendCompressedAirdrop(\n    agent,\n    new PublicKey(\"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN\"), // mint\n    42, // amount per recipient\n    9,\n    [\n      new PublicKey(\"1nc1nerator11111111111111111111111111111111\"),\n      // ... add more recipients\n    ],\n    30_000 // priority fee in lamports\n  );\n})();\n```\n\n### Fetch Price Data from Pyth\n\n```typescript\n\nconst priceFeedID = await agent.methods.fetchPythPriceFeedID(\"SOL\");\n\nconst price = await agent.methods.fetchPythPrice(priceFeedID);\n\nconsole.log(\"Price of SOL/USD:\", price);\n```\n\n### Open PERP Trade\n\n```typescript\nimport { PublicKey } from \"@solana/web3.js\";\n\nconst signature = await agent.methods.openPerpTradeLong({\n  agent: agent,\n  price: 300, // $300 SOL Max price\n  collateralAmount: 10, // 10 jitoSOL in\n  collateralMint: new PublicKey(\"J1toso1uCk3RLmjorhTtrVwY9HJ7X8V9yYac6Y7kGCPn\"), // jitoSOL\n  leverage: 50000, // x5\n  tradeMint: new PublicKey(\"J1toso1uCk3RLmjorhTtrVwY9HJ7X8V9yYac6Y7kGCPn\"), // jitoSOL\n  slippage: 0.3, // 0.3%\n});\n```\n\n### Close PERP Trade\n\n```typescript\nimport { PublicKey } from \"@solana/web3.js\";\n\nconst signature = await agent.methods.closePerpTradeLong({\n  agent: agent,\n  price: 200, // $200 SOL price\n  tradeMint: new PublicKey(\"J1toso1uCk3RLmjorhTtrVwY9HJ7X8V9yYac6Y7kGCPn\"), // jitoSOL\n});\n```\n\n### Close Empty Token Accounts\n\n``` typescript\n\nconst { signature } = await agent.methods.closeEmptyTokenAccounts(agent);\n```\n\n### Create a Drift account\n\nCreate a drift account with an initial token deposit.\n\n```typescript\nconst result = await agent.methods.createDriftUserAccount(\n  agent,\n  // amount of token to deposit\n  100,\n  // token symbol to deposit\n  \"USDC\"\n)\n```\n\n### Create a Drift Vault\n\nCreate a drift vault.\n\n```typescript\nconst signature = await agent.methods.createDriftVault(agent, {\n  name: \"my-drift-vault\",\n  marketName: \"USDC-SPOT\",\n  redeemPeriod: 1, // in days\n  maxTokens: 100000, // in token units e.g 100000 USDC\n  minDepositAmount: 5, // in token units e.g 5 USDC\n  managementFee: 1, // 1%\n  profitShare: 10, // 10%\n  hurdleRate: 5, // 5%\n  permissioned: false, // public vault or whitelist\n})\n```\n\n### Deposit into a Drift Vault\n\nDeposit tokens into a drift vault.\n\n```typescript\nconst signature = await agent.methods.depositIntoDriftVault(agent, 100, \"41Y8C4oxk4zgJT1KXyQr35UhZcfsp5mP86Z2G7UUzojU\")\n```\n\n### Deposit into your Drift account\n\nDeposit tokens into your drift account.\n\n```typescript\nconst {txSig} = await agent.methods.depositToDriftUserAccount(agent, 100, \"USDC\")\n```\n\n### Derive a Drift Vault address\n\nDerive a drift vault address.\n\n```typescript\nconst vaultPublicKey = await agent.methods.deriveDriftVaultAddress(agent, \"my-drift-vault\")\n```\n\n### Do you have a Drift account\n\nCheck if agent has a drift account.\n\n```typescript\nconst {hasAccount, account} = await agent.methods.doesUserHaveDriftAccount(agent)\n```\n\n### Get Drift account information\n\nGet drift account information.\n\n```typescript\nconst accountInfo = await agent.methods.driftUserAccountInfo(agent)\n```\n\n### Request withdrawal from Drift vault\n\nRequest withdrawal from drift vault.\n\n```typescript\nconst signature = await agent.methods.requestWithdrawalFromDriftVault(agent, 100, \"41Y8C4oxk4zgJT1KXyQr35UhZcfsp5mP86Z2G7UUzojU\")\n```\n\n### Carry out a perpetual trade using a Drift vault\n\nOpen a perpetual trade using a drift vault that is delegated to you.\n\n```typescript\nconst signature = await agent.methods.tradeUsingDelegatedDriftVault(agent, {\n  vault: \"41Y8C4oxk4zgJT1KXyQr35UhZcfsp5mP86Z2G7UUzojU\",\n  amount: 500,\n  symbol: \"SOL\",\n  action: \"long\",\n  type: \"limit\",\n  price: 180 // Please long limit order at $180/SOL\n})\n```\n\n### Carry out a perpetual trade using your Drift account\n\nOpen a perpetual trade using your drift account.\n\n```typescript\nconst signature = await agent.methods.driftPerpTrade(agent, {\n  amount: 500,\n  symbol: \"SOL\",\n  action: \"long\",\n  type: \"limit\",\n  price: 180 // Please long limit order at $180/SOL\n})\n```\n\n### Update Drift vault parameters\n\nUpdate drift vault parameters.\n\n```typescript\nconst signature = await agent.methods.updateDriftVault(agent, {\n  name: \"my-drift-vault\",\n  marketName: \"USDC-SPOT\",\n  redeemPeriod: 1, // in days\n  maxTokens: 100000, // in token units e.g 100000 USDC\n  minDepositAmount: 5, // in token units e.g 5 USDC\n  managementFee: 1, // 1%\n  profitShare: 10, // 10%\n  hurdleRate: 5, // 5%\n  permissioned: false, // public vault or whitelist\n})\n```\n\n### Withdraw from Drift account\n\nWithdraw tokens from your drift account.\n\n```typescript\nconst {txSig} = await agent.methods.withdrawFromDriftUserAccount(agent, 100, \"USDC\")\n```\n\n### Borrow from Drift\n\nBorrow tokens from drift.\n\n```typescript\nconst {txSig} = await agent.methods.withdrawFromDriftUserAccount(agent, 1, \"SOL\", true)\n```\n\n### Repay Drift loan\n\nRepay a loan from drift.\n\n```typescript\nconst {txSig} = await agent.methods.depositToDriftUserAccount(agent, 1, \"SOL\", true)\n```\n\n### Withdraw from Drift vault\n\nWithdraw tokens from a drift vault after the redemption period has elapsed.\n\n```typescript\nconst signature = await agent.methods.withdrawFromDriftVault(agent,  \"41Y8C4oxk4zgJT1KXyQr35UhZcfsp5mP86Z2G7UUzojU\")\n```\n\n### Update the address a Drift vault is delegated to\n\nUpdate the address a drift vault is delegated to.\n\n```typescript\nconst signature = await agent.methods.updateDriftVaultDelegate(agent, \"41Y8C4oxk4zgJT1KXyQr35UhZcfsp5mP86Z2G7UUzojU\", \"new-address\")\n```\n\n### Get Voltr Vault Position Values\n\nGet the current position values and total value of assets in a Voltr vault.\n\n```typescript\nconst values = await agent.methods.voltrGetPositionValues(agent, \"7opUkqYtxmQRriZvwZkPcg6LqmGjAh1RSEsVrdsGDx5K\")\n```\n\n### Deposit into Voltr Strategy\n\nDeposit assets into a specific strategy within a Voltr vault.\n\n```typescript\nconst signature = await agent.methods.voltrDepositStrategy(\n  agent,\n  new BN(\"1000000000\"), // amount in base units (e.g., 1 USDC = 1000000)\n  \"7opUkqYtxmQRriZvwZkPcg6LqmGjAh1RSEsVrdsGDx5K\", // vault\n  \"9ZQQYvr4x7AMqd6abVa1f5duGjti5wk1MHsX6hogPsLk\"  // strategy\n)\n```\n\n### Withdraw from Voltr Strategy\n\nWithdraw assets from a specific strategy within a Voltr vault.\n\n```typescript\nconst signature = await agent.methods.voltrWithdrawStrategy(\n  agent,\n  new BN(\"1000000000\"), // amount in base units (e.g., 1 USDC = 1000000)\n  \"7opUkqYtxmQRriZvwZkPcg6LqmGjAh1RSEsVrdsGDx5K\", // vault\n  \"9ZQQYvr4x7AMqd6abVa1f5duGjti5wk1MHsX6hogPsLk\"  // strategy\n)\n```\n\n### Get a Solana asset by its ID\n\n```typescript\nconst asset = await agent.methods.getAsset(agent, \"41Y8C4oxk4zgJT1KXyQr35UhZcfsp5mP86Z2G7UUzojU\")\n```\n\n### Get a price inference from Allora\n\nGet the price for a given token and timeframe from Allora's API\n\n```typescript\nconst sol5mPrice = await agent.methods.getPriceInference(\"SOL\", \"5m\");\nconsole.log(\"5m price inference of SOL/USD:\", sol5mPrice);\n```\n\n### List all topics from Allora\n\n```typescript\nconst topics = await agent.methods.getAllTopics();\nconsole.log(\"Allora topics:\", topics);\n```\n\n### Get an inference for an specific topic from Allora\n\n```typescript\nconst inference = await agent.methods.getInferenceByTopicId(42);\nconsole.log(\"Allora inference for topic 42:\", inference);\n```\n\n### Simulate a Switchboard feed\n\nSimulate a given Switchboard feed. Find or create feeds [here](https://ondemand.switchboard.xyz/solana/mainnet).\n\n```typescript\nconst value = await agent.methods.simulateSwitchboardFeed(\n      \"9wcBMATS8bGLQ2UcRuYjsRAD7TPqB1CMhqfueBx78Uj2\", // TRUMP/USD\n      \"http://crossbar.switchboard.xyz\");;\nconsole.log(\"Simulation resulted in the following value:\", value);\n\n### Cross-Chain Bridge via deBridge\n\nThe Solana Agent Kit supports cross-chain token transfers using deBridge's DLN protocol. Here's how to use it:\n\n1. Check supported chains:\n```typescript\nconst chains = await agent.methods.getDebridgeSupportedChains();\nconsole.log(\"Available chains:\", chains);\n// Example output: { chains: [{ chainId: \"1\", chainName: \"Ethereum\" }, { chainId: \"7565164\", chainName: \"Solana\" }] }\n```\n\n2. Get available tokens (optional):\n```typescript\nconst tokens = await agent.methods.getDebridgeTokensInfo(\"1\", \"USDC\"); // Search for USDC on Ethereum\nconsole.log(\"Available tokens:\", tokens);\n// Shows tokens matching 'USDC' on the specified chain\n```\n\n3. Create bridge order (SOL -> ETH):\n```typescript\nconst orderInput = {\n  srcChainId: \"7565164\", // Solana\n  srcChainTokenIn: \"11111111111111111111111111111111\", // Native SOL\n  srcChainTokenInAmount: \"1000000000\", // 1 SOL (9 decimals)\n  dstChainId: \"1\", // Ethereum\n  dstChainTokenOut: \"0x0000000000000000000000000000000000000000\", // ETH\n  dstChainTokenOutRecipient: \"0x23C279e58ddF1018C3B9D0C224534fA2a83fb1d2\" // ETH recipient\n};\n\nconst order = await agent.methods.createDebridgeOrder(orderInput);\nconsole.log(\"Order created:\", order);\n// Contains transaction data and estimated amounts\n```\n\n4. Execute the bridge order:\n```typescript\nconst signature = await agent.methods.executeDebridgeOrder(order.tx.data);\nconsole.log(\"Bridge transaction sent:\", signature);\n```\n\n5. Check bridge status:\n```typescript\nconst status = await agent.methods.checkDebridgeTransactionStatus(signature);\nconsole.log(\"Bridge status:\", status);\n// Shows current status: Created, Fulfilled, etc.\n```\n\nNote: When bridging between chains:\n- To Solana: Use base58 addresses for recipients and token mints\n- From Solana: Use EVM addresses for recipients and ERC-20 format for tokens\n- Always verify addresses and amounts before executing bridge transactions\n\n### Get Token Price Data from CoinGecko\n\n```typescript\nconst priceData = await agent.methods.getTokenPriceData([\n  \"So11111111111111111111111111111111111111112\", // SOL\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"  // USDC\n]);\nconsole.log(\"Token prices:\", priceData);\n```\n\n### Get Trending Tokens\n\n```typescript\nconst trendingTokens = await agent.methods.getTrendingTokens();\nconsole.log(\"Trending tokens:\", trendingTokens);\n```\n\n### Get Latest Pools\n\n```typescript\nconst latestPools = await agent.methods.getLatestPools();\nconsole.log(\"Latest pools:\", latestPools);\n```\n\n### Get Token Information\n\n```typescript\nconst tokenInfo = await agent.methods.getTokenInfo(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\nconsole.log(\"Token info:\", tokenInfo);\n```\n\n### Get Top Gainers\n\n```typescript\nconst topGainers = await agent.methods.getTopGainers(\"24h\", \"all\");\nconsole.log(\"Top gainers:\", topGainers);\n```\n\n### Get Trending Pools\n\n```typescript\nconst trendingPools = await agent.methods.getTrendingPools(\"24h\");\nconsole.log(\"Trending pools:\", trendingPools);\n```\n\n### Parse Instruction Data\n\n```typescript\nconst parsedData = await agent.methods.parseInstruction(\n  \"<programId>\",\n  \"<instructionData>\" // base64\n)\n\nconsole.log(\"parsed data:\", parsedData)\n```\n\n### Parse Instruction Data\n\n```typescript\nconst parsedData = await agent.methods.parseAccount(\n  \"<programId>\",\n  \"<accountData>\" // base64\n)\n\nconsole.log(\"parsed data:\", parsedData)\n```\n\n### Get Sanctum LST Price\n\n```typescript\nconst prices = await agent.methods.getSanctumLSTPrice([\n  \"bSo13r4TkiE4KumL71LsHTPpL2euBYLFx6h9HP3piy1\",\n  \"7Q2afV64in6N6SeZsAAB81TJzwDoD6zpqmHkzi9Dcavn\"\n  ])\n\nconsole.log('prices', prices)\n```\n\n### Get Sanctum LST APY\n\n```typescript\nconst apys = await agent.methods.getSanctumLSTAPY([\n  \"bSo13r4TkiE4KumL71LsHTPpL2euBYLFx6h9HP3piy1\",\n  \"7Q2afV64in6N6SeZsAAB81TJzwDoD6zpqmHkzi9Dcavn\"\n  ])\n\nconsole.log('apys', apys)\n```\n\n### Get Sanctum LST TVL\n\n```typescript\nconst tvls = await agent.methods.getSanctumLSTTVL([\n  \"bSo13r4TkiE4KumL71LsHTPpL2euBYLFx6h9HP3piy1\",\n  \"7Q2afV64in6N6SeZsAAB81TJzwDoD6zpqmHkzi9Dcavn\"\n  ])\n\nconsole.log('tvls', tvls)\n```\n\n### Get Sanctum Owend LST\n\n```typescript\nconst lsts = await agent.methods.getSanctumOwnedLST()\n\nconsole.log('lsts', lsts)\n```\n\n### Add Liquidity to Sanctum Infinite Pool\n\n```typescript\nconst txId = await agent.methods.addSanctumLiquidity(\n  \"So11111111111111111111111111111111111111112\",\n  \"1000000000\",\n  \"1100000000\",\n  5000\n)\n\nconsole.log('txId', txId)\n```\n\n### Remove Liquidity from Sanctum Infinite Pool\n\n```typescript\nconst txId = await agent.methods.removeSanctumLiquidity(\n  \"So11111111111111111111111111111111111111112\",\n  \"1000000000\",\n  \"1100000000\",\n  5000\n)\n\nconsole.log('txId', txId)\n```\n\n### Swap Sanctum LST\n\n```typescript\nconst txId = await agent.methods.swapSanctumLST(\n  \"So11111111111111111111111111111111111111112\",\n  \"1000000000\",\n  \"1100000000\",\n  5000,\n  \"7Q2afV64in6N6SeZsAAB81TJzwDoD6zpqmHkzi9Dcavn\"\n)\n\nconsole.log('txId', txId)\n```\n\n\n### Get Chain Data\n\nNote: To use OKX DEX integration, you need to set up the following environment variables: Get OKX API keys from the [OKX Developer Portal] (https://www.okx.com/web3/build/dev-portal)\n- `OKX_API_KEY`\n- `OKX_SECRET_KEY`\n- `OKX_API_PASSPHRASE`\n- `OKX_PROJECT_ID`\n- `RPC_URL`\n- `SOLANA_PRIVATE_KEY`\n- `SOLANA_WALLET_ADDRESS`\n\n## Examples\n\n### LangGraph Multi-Agent System\n\nThe repository includes an advanced example of building a multi-agent system using LangGraph and Solana Agent Kit. Located in `examples/agent-kit-langgraph`, this example demonstrates:\n\n- Multi-agent architecture using LangGraph's StateGraph\n- Specialized agents for different tasks:\n  - General purpose agent for basic queries\n  - Transfer/Swap agent for transaction operations\n  - Read agent for blockchain data queries\n  - Manager agent for routing and orchestration\n- Fully typed TypeScript implementation\n- Environment-based configuration\n\nCheck out the [LangGraph example](examples/agent-kit-langgraph) for a complete implementation of an advanced Solana agent system.\n\n## Dependencies\n\nThe toolkit relies on several key Solana and Metaplex libraries:\n\n- @solana/web3.js\n- @solana/spl-token\n- @metaplex-foundation/digital-asset-standard-api\n- @metaplex-foundation/mpl-token-metadata\n- @metaplex-foundation/mpl-core\n- @metaplex-foundation/umi\n- @lightprotocol/compressed-token\n- @lightprotocol/stateless.js\n- @coingecko/sdk\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\nRefer to [CONTRIBUTING.md](CONTRIBUTING.md) for detailed guidelines on how to contribute to this project.\n\n## Contributors\n\n<a href=\"https://github.com/sendaifun/solana-agent-kit/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=sendaifun/solana-agent-kit\" />\n</a>\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=sendaifun/solana-agent-kit&type=Date)](https://star-history.com/#sendaifun/solana-agent-kit&Date)\n\n## License\n\nApache-2 License\n\n## Funding\n\nIf you wanna give back any tokens or donations to the OSS community -- The Public Solana Agent Kit Treasury Address:\n\nSolana Network : EKHTbXpsm6YDgJzMkFxNU1LNXeWcUW7Ezf8mjUNQQ4Pa\n\n## Security\n\nThis toolkit handles transaction generation, signing and sending, using provided wallets. Always ensure you're using it in a secure environment and never share your private keys.\n\n## Attributions\n\nSystem prompt logic adapted from Coinbase AgentKit (Apache 2.0)\n"
}