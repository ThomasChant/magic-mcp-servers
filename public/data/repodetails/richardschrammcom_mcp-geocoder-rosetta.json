{
  "mcp_name": "richardschrammcom/mcp-geocoder-rosetta",
  "mcp_description": "Showcases geocoding tool implementations using Google Maps API in Python and TypeScript, serving as a guide for developers to create MCP tools.",
  "mcp_id": "richardschrammcom_mcp-geocoder-rosetta",
  "fetch_timestamp": "2025-06-23T07:57:56.311439Z",
  "github_url": "https://github.com/richardschrammcom/mcp-geocoder-rosetta",
  "repository": {
    "name": "mcp-geocoder-rosetta",
    "full_name": "richardschrammcom/mcp-geocoder-rosetta",
    "description": "A \"rosetta stone\" repo that shows creating simple geocoder MCP servers in python (with googlemaps sdk and direct googlemaps API with urllib) and typescript. CLI clients and documentation on adding them to Claude Desktop App. ",
    "html_url": "https://github.com/richardschrammcom/mcp-geocoder-rosetta",
    "created_at": "2025-04-15T00:18:17Z",
    "updated_at": "2025-04-15T00:57:46Z",
    "pushed_at": "2025-04-15T00:54:33Z",
    "size": 41,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "richardschrammcom",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/207353872?v=4",
      "html_url": "https://github.com/richardschrammcom"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 61918,
      "Shell": 3481,
      "TypeScript": 2535
    },
    "language_percentages": {
      "Python": 91.14,
      "Shell": 5.12,
      "TypeScript": 3.73
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "tags": [
      {
        "name": "v1.0.0",
        "commit_sha": "300d6fdaf766fd408bdd02b3113d4db14b36d327"
      }
    ],
    "latest_version": "v1.0.0"
  },
  "readme": "# MCP Geocoder Rosetta\n\nA collection of Model Context Protocol (MCP) geocoder implementations in different languages and using different approaches. This repository serves as a \"Rosetta Stone\" for developers looking to create their own MCP tools.\n\n## What is MCP?\n\nThe Model Context Protocol (MCP) is a protocol for tools to interact with AI models, allowing AIs to perform actions in the real world, like making API calls or accessing databases. MCP provides a standardized way for AI models to use tools and for developers to create these tools.\n\n## Implementations\n\nThis repository contains three different implementations of a geocoding tool using Google Maps API:\n\n1. **Python + urllib** - Uses Python's standard library without additional dependencies\n2. **Python + Google Maps SDK** - Uses the official Google Maps Python client\n3. **TypeScript + Google Maps SDK** - Uses TypeScript and the Google Maps JavaScript client\n\n## Comparison of Implementations\n\n| Feature | Python + urllib | Python + Google Maps SDK | TypeScript + Google Maps SDK |\n|---------|----------------|------------------------|----------------------------|\n| Dependencies | Minimal (standard library) | googlemaps, mcp | @googlemaps/google-maps-services-js, @mcp/sdk |\n| Setup Complexity | Simple | Medium | Medium |\n| Error Handling | Basic | Enhanced | Enhanced |\n| Code Size | Small | Medium | Medium |\n| SDK Advantage | None - direct API calls | Type handling, validation | Type safety, Promise API |\n\n## Prerequisites\n\n- Google Maps API key ([Get one here](https://developers.google.com/maps/documentation/javascript/get-api-key))\n- Python 3.13+ (for Python implementations)\n- Node.js 16+ (for TypeScript implementation)\n- MCP CLI tools\n\n## Setup\n\n### 1. Clone the repository:\n```bash\ngit clone https://github.com/yourusername/mcp-geocoder-rosetta.git\ncd mcp-geocoder-rosetta\n```\n\n### 2. Set up your Google Maps API key:\n```bash\n# Set as environment variable\nexport GOOGLE_MAPS_API_KEY=your-api-key-here\n\n# Or create .env files in each implementation directory\necho \"GOOGLE_MAPS_API_KEY=your-api-key-here\" > python-urllib/.env\necho \"GOOGLE_MAPS_API_KEY=your-api-key-here\" > python-googlemaps/.env\necho \"GOOGLE_MAPS_API_KEY=your-api-key-here\" > typescript-googlemaps/.env\n```\n\n### 3. Install MCP CLI:\n```bash\n# Using pip\npip install mcp[cli]\n\n# Or using uv\nuv pip install mcp[cli]\n```\n\n### 4. Run the debugging script to check your environment:\n```bash\nchmod +x debug_mcp.sh\n./debug_mcp.sh\n```\n\n## Quick Start\n\n### Testing Python with urllib:\n```bash\n# Direct test with MCP client\npython test_direct.py urllib\n\n# Server CLI test\npython test_server.py urllib\n\n# Interactive client\npython run_geocoder.py urllib\n```\n\n### Testing Python with Google Maps SDK:\n```bash\n# Direct test with MCP client\npython test_direct.py googlemaps\n\n# Server CLI test\npython test_server.py googlemaps\n\n# Interactive client\npython run_geocoder.py googlemaps\n```\n\n### Testing TypeScript:\n```bash\n# Simply run the client which will handle dependencies and server startup\npython run_geocoder.py typescript\n\n# The script will:\n# - Check for npm and install dependencies if needed\n# - Start the TypeScript server automatically\n# - Connect and let you query addresses\n```\n\n## Individual Service Setup\n\n### Python with urllib\n```bash\ncd python-urllib\n\n# Method 1: Direct execution with dependencies\nexport GOOGLE_MAPS_API_KEY=\"your-api-key-here\"\nuv run --with mcp[cli] mcp run geocoder.py\n\n# Method 2: Using virtual environment\nuv venv -p 3.13 .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\nuv pip install -e .\nmcp run geocoder.py\n```\n\n### Python with Google Maps SDK\n```bash\ncd python-googlemaps\n\n# Method 1: Direct execution with dependencies\nexport GOOGLE_MAPS_API_KEY=\"your-api-key-here\"\nuv run --with mcp[cli] --with googlemaps mcp run geocoder.py\n\n# Method 2: Using virtual environment\nuv venv -p 3.13 .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\npip install googlemaps\nuv pip install -e .\nmcp run geocoder.py\n```\n\n### TypeScript with Google Maps SDK\n```bash\n# Method 1: Using run_geocoder.py (recommended)\n# This automatically handles dependencies and server startup\npython run_geocoder.py typescript\n\n# Method 2: Manual setup\ncd typescript-googlemaps\n\n# Install dependencies\nnpm install\n\n# Set up environment with your Google Maps API key\necho \"GOOGLE_MAPS_API_KEY=your-api-key-here\" > .env\n\n# Run the MCP server directly (only if needed)\nnpm start\n```\n\n## Available Scripts\n\n### Main Scripts\n- **run_geocoder.py**: Run client with server for any implementation\n- **test_direct.py**: Test direct MCP communication with server\n- **test_server.py**: Test server using direct Python approach\n- **debug_mcp.sh**: Debug script for troubleshooting\n\n### Running Options\n- **Regular Mode**: `python run_geocoder.py <implementation>`\n- **Server-Only Mode**: `python run_geocoder.py <implementation> --server-only`\n- **Client-Only Mode**: `python run_geocoder.py <implementation> --client-only`\n\n## Debugging Client-Server Connectivity\n\nIf you encounter issues with the client connecting to the server, there are a few ways to debug:\n\n### Method 1: Run Server and Client Separately\n\nRun the server in one terminal:\n```bash\npython run_geocoder.py urllib --server-only\n```\n\nThen run the client in another terminal:\n```bash\npython run_geocoder.py urllib --client-only\n```\n\nThis helps isolate whether the issue is with the server, the client, or the communication between them.\n\n### Method 2: Direct Server Testing\n\nUse the test scripts to directly test the server without involving the full client:\n```bash\n# Test with a direct MCP connection:\npython test_direct.py urllib\n\n# Or test the server with direct Python:\npython test_server.py urllib\n```\n\nThese scripts will start the server, test basic connectivity, and run a sample geocode request.\n\n### Common Issues\n\n1. **Missing API Key**: Make sure your Google Maps API key is set in the `.env` file in each implementation directory or as an environment variable.\n\n2. **Module Not Found**: If you get \"Module not found\" errors, install the required dependencies:\n   ```bash\n   pip install googlemaps mcp[cli]\n   ```\n\n3. **Connection Issues**: The client and server communicate over standard input/output. If there are issues, check:\n   - Python version compatibility (Python 3.13+ is recommended)\n   - MCP SDK version compatibility\n   - Permissions for executing the scripts\n\n4. **Debugging Guide**: Run the included debugging guide for more help:\n   ```bash\n   ./debug_mcp.sh\n   ```\n   \n   The debug script will:\n   - Check your Python installation\n   - Verify MCP module installation\n   - Check your Google Maps API key configuration\n   - Test the urllib implementation\n   - Provide troubleshooting command references\n\n## Integration with Claude Desktop\n\n### Accessing the Configuration File\n\n1. **Open Claude Desktop** application\n2. **Access Settings**: Click on the gear icon in the lower-left corner\n3. **Open Developer Tab**: Click on \"Developer\" in the sidebar\n4. **Edit Config**: Click the \"Edit Config\" button at the bottom of the page to open the configuration file in your default text editor\n\n### Adding MCP Tools to Configuration\n\nThe `claude_desktop_config.json` file contains a JSON object with `mcpServers` as the top-level key for MCP tools. Add your geocoder implementations to this section:\n\n```json\n{\n  \"mcpServers\": {\n    \"existing-server-1\": {\n      // existing configuration\n    },\n    \"existing-server-2\": {\n      // existing configuration\n    },\n    \n    // Add your geocoder implementations here\n  }\n}\n```\n\n⚠️ **IMPORTANT: Tool Disambiguation Warning** ⚠️\n\nInstall only ONE of these geocoder implementations at a time. Having multiple MCP servers with similar functionality can cause tool disambiguation issues, where Claude may not know which geocoding tool to use when processing requests.\n\nHere's how to add each implementation to your configuration:\n\n### TypeScript with Google Maps SDK\n\n```json\n\"mcpServers\": {\n  \"GeocoderNode\": {\n    \"command\": \"npx\",\n    \"args\": [\n      \"tsx\",\n      \"/path/to/mcp-geocoder-rosetta/typescript-googlemaps/geocoder.ts\"\n    ],\n    \"env\": {\n      \"GOOGLE_MAPS_API_KEY\": \"your-api-key-here\"\n    }\n  }\n}\n```\n\n### Python with Google Maps SDK\n\n```json\n\"mcpServers\": {\n  \"GeocoderGoogle\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"run\",\n      \"--with\",\n      \"mcp[cli]\",\n      \"--with\",\n      \"googlemaps\",\n      \"mcp\",\n      \"run\",\n      \"/path/to/mcp-geocoder-rosetta/python-googlemaps/geocoder.py\"\n    ],\n    \"env\": {\n      \"GOOGLE_MAPS_API_KEY\": \"your-api-key-here\"\n    }\n  }\n}\n```\n\n**Note**: The `--with googlemaps` parameter is critical for this implementation to work correctly.\n\n### Python with urllib\n\n```json\n\"mcpServers\": {\n  \"GeocoderREST\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"run\",\n      \"--with\",\n      \"mcp[cli]\",\n      \"mcp\",\n      \"run\",\n      \"/path/to/mcp-geocoder-rosetta/python-urllib/geocoder.py\"\n    ],\n    \"env\": {\n      \"GOOGLE_MAPS_API_KEY\": \"your-api-key-here\"\n    }\n  }\n}\n```\n\n### After Configuration\n\n1. **Save the file** after making your changes\n2. **Return to Claude Desktop** - the application will automatically reload the configuration\n3. **Verify in Settings**: In the Developer tab, you should now see your added geocoder tools in the list of MCP servers\n4. **Status Indicator**: A running status indicator will appear when the server starts successfully\n\n### Troubleshooting Configuration\n\n- Make sure your JSON is valid (no trailing commas, proper nesting)\n- Use absolute paths to your implementation files\n- Check the environment variables are correctly set\n- If a server fails to start, check the \"Advanced options\" dropdown for that server to see error logs\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Project Structure Notes\n\n### Temporary Directories\n\nThe repository contains several `temp/` directories that are used for dynamically generated test and debug scripts:\n\n- `/temp/`: Root temporary directory for main test scripts\n- `python-urllib/temp/`: Contains scripts for testing the urllib implementation\n- `python-googlemaps/temp/`: Contains scripts for testing the Google Maps API implementation\n- `typescript-googlemaps/temp/`: Contains scripts for TypeScript testing utilities\n\nThese directories are created and used by the test scripts to generate utility scripts for connecting to MCP servers, diagnosing connection issues, verifying tool availability, and testing functionality. They are added to `.gitignore` and should not be committed to the repository.\n\n### MCP Client Directory\n\nThe `mcp-client/` directory contains an older client implementation that has been largely superseded by direct MCP communication in `run_geocoder.py`. While still referenced and used as a fallback in some cases, the main functionality now uses the MCP library directly for more reliable communication.\n\n## Known Issues\n\n- Interactive input doesn't work well in non-interactive environments (like Claude Code)\n- Some environment setup required for implementations to work (API key, dependencies)\n- The `mcp tools` commands are not available in current MCP CLI versions, so we use a direct Python approach in test_server.py\n- Different implementations have different available tools (only urllib has debug_info)\n- Long-running processes in non-interactive environments may time out (especially TypeScript startup)"
}