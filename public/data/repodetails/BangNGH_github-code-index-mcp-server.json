{
  "mcp_name": "BangNGH/github-code-index-mcp-server",
  "mcp_description": "Facilitates code indexing, searching, and analysis for large language models across multiple programming languages.",
  "mcp_id": "BangNGH_github-code-index-mcp-server",
  "fetch_timestamp": "2025-06-23T01:34:12.606080Z",
  "github_url": "https://github.com/BangNGH/github-code-index-mcp-server",
  "repository": {
    "name": "github-code-index-mcp-server",
    "full_name": "BangNGH/github-code-index-mcp-server",
    "description": null,
    "html_url": "https://github.com/BangNGH/github-code-index-mcp-server",
    "created_at": "2025-04-04T04:33:24Z",
    "updated_at": "2025-04-09T04:56:34Z",
    "pushed_at": "2025-04-09T04:56:30Z",
    "size": 38,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "master",
    "owner": {
      "login": "BangNGH",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/110192009?v=4",
      "html_url": "https://github.com/BangNGH"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 51215
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 2
  },
  "readme": "# Code Index MCP\n\nCode Index MCP is a Model Context Protocol server that enables large language models (LLMs) to index, search, and analyze code in project directories.\n\n## Features\n\n- Index and navigate project file structures\n- Search for specific patterns in code\n- Get detailed file summaries\n- Analyze code structure and complexity\n- Support for multiple programming languages\n- Persistent storage of project settings\n\n## Installation\n\nThis project uses uv for environment management and dependency installation.\n\n1. Ensure you have Python 3.10 or later installed\n2. Install uv (recommended):\n\n   ```bash\n   # Windows\n   powershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n   # macOS/Linux\n   curl -LsSf https://astral.sh/uv/install.sh | sh\n   ```\n3. Getting the code:\n\n   ```bash\n   # Clone the repository\n   git clone https://github.com/your-username/code-index-mcp.git\n   ```\n\n## Usage\n\n### Running the Server Directly\n\n```bash\n# Run directly with uv - no additional dependency installation needed\nuv run run.py\n```\n\nUV will automatically handle all dependency installations based on the project's configuration.\n\n### Integrating with Claude Desktop\n\nYou can easily integrate Code Index MCP with Claude Desktop:\n\n1. Ensure you have UV installed (see installation section above)\n2. Find or create the Claude Desktop configuration file:\n\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - macOS/Linux: `~/Library/Application Support/Claude/claude_desktop_config.json`\n3. Add the following configuration (replace with your actual path):\n\n   **For Windows**:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"code-indexer\": {\n         \"command\": \"uv\",\n         \"args\": [\n            \"--directory\",\n            \"C:\\\\Users\\\\username\\\\path\\\\to\\\\code-index-mcp\",\n            \"run\",\n            \"run.py\"\n          ]\n       }\n     }\n   }\n   ```\n\n   **For macOS/Linux**:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"code-indexer\": {\n         \"command\": \"uv\",\n         \"args\": [\n            \"--directory\",\n            \"/home/username/path/to/code-index-mcp\",\n            \"run\",\n            \"run.py\"\n          ]\n       }\n     }\n   }\n   ```\n\n   **Note**: The `--directory` option is important as it ensures uv runs in the correct project directory and can properly load all dependencies.\n4. Restart Claude Desktop to use Code Indexer for analyzing code projects\n\nNo manual dependency installation is required - UV will automatically handle all dependencies when running the server.\n\n### Basic Workflow\n\n1. **Set Project Path** (required first step):\n\n   - When using for the first time, you must set the project path to analyze\n   - Through Claude command: \"I need to analyze a project, help me set up the project path\"\n   - Provide the complete project directory path\n2. **Code Search**:\n\n   - Search for specific keywords or patterns: \"Search for 'function name' in the project\"\n   - Filter by file type: \"Search for 'import' in all .py files\"\n3. **File Analysis**:\n\n   - Analyze specific files: \"Analyze the file src/main.py\"\n   - Get file summaries: \"Give me a list of functions in utils/helpers.js\"\n4. **Project Navigation**:\n\n   - View project structure: \"Show me the structure of this project\"\n   - Find files matching specific patterns: \"Find all test_*.py files\"\n\n## Technical Details\n\n### Persistent Storage\n\nAll index and settings data are stored in the `.code_indexer` folder within the project directory:\n\n- `config.json`: Project configuration information\n- `file_index.pickle`: File index data\n- `content_cache.pickle`: File content cache\n\nThis ensures that the entire project doesn't need to be re-indexed each time it's used.\n\n### Dependency Management with UV\n\nCode Index MCP uses UV for dependency management, which provides several advantages:\n\n- Automatic dependency resolution based on project requirements\n- Faster package installation and environment setup\n- Consistent dependency versions via the lock file\n\n### Supported File Types\n\nThe following file types are currently supported for indexing and analysis:\n\n- Python (.py)\n- JavaScript/TypeScript (.js, .ts, .jsx, .tsx)\n- Java (.java)\n- C/C++ (.c, .cpp, .h, .hpp)\n- C# (.cs)\n- Go (.go)\n- Ruby (.rb)\n- PHP (.php)\n- Swift (.swift)\n- Kotlin (.kt)\n- Rust (.rs)\n- Scala (.scala)\n- Shell (.sh, .bash)\n- HTML/CSS (.html, .css, .scss)\n- Markdown (.md)\n- JSON (.json)\n- XML (.xml)\n- YAML (.yml, .yaml)\n\n## Security Considerations\n\n- File path validation prevents directory traversal attacks\n- Absolute path access is not allowed\n- Project path must be explicitly set, with no default value\n- The `.code_indexer` folder includes a `.gitignore` file to prevent indexing data from being committed\n\n## Contributing\n\nContributions via issues or pull requests to add new features or fix bugs are welcome.\n\n---\n\n*For documentation in Chinese, please see [README_zh.md](README_zh.md).*\n"
}