{
  "mcp_name": "bright8192/esxi-mcp-server",
  "mcp_description": "üêç ‚òÅÔ∏è - A VMware ESXi/vCenter management server based on MCP (Model Control Protocol), providing simple REST API interfaces for virtual machine management.",
  "mcp_id": "bright8192_esxi-mcp-server",
  "fetch_timestamp": "2025-06-23T01:47:11.543106Z",
  "github_url": "https://github.com/bright8192/esxi-mcp-server",
  "repository": {
    "name": "esxi-mcp-server",
    "full_name": "bright8192/esxi-mcp-server",
    "description": "A VMware ESXi/vCenter management server based on MCP (Model Control Protocol), providing simple REST API interfaces for virtual machine management.",
    "html_url": "https://github.com/bright8192/esxi-mcp-server",
    "created_at": "2025-03-13T09:10:33Z",
    "updated_at": "2025-06-18T04:13:17Z",
    "pushed_at": "2025-03-13T09:22:27Z",
    "size": 14,
    "stargazers_count": 24,
    "watchers_count": 24,
    "forks_count": 9,
    "open_issues_count": 3,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "bright8192",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/136955838?v=4",
      "html_url": "https://github.com/bright8192"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 9,
    "subscribers_count": 2,
    "languages": {
      "Python": 34087
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 1,
    "contributors_count": 1
  },
  "readme": "# ESXi MCP Server\n\nA VMware ESXi/vCenter management server based on MCP (Model Control Protocol), providing simple REST API interfaces for virtual machine management.\n\n## Features\n\n- Support for ESXi and vCenter Server connections\n- Real-time communication based on SSE (Server-Sent Events)\n- RESTful API interface with JSON-RPC support\n- API key authentication\n- Complete virtual machine lifecycle management\n- Real-time performance monitoring\n- SSL/TLS secure connection support\n- Flexible configuration options (YAML/JSON/Environment Variables)\n\n## Core Functions\n\n- Virtual Machine Management\n  - Create VM\n  - Clone VM\n  - Delete VM\n  - Power On/Off operations\n  - List all VMs\n- Performance Monitoring\n  - CPU usage\n  - Memory usage\n  - Storage usage\n  - Network traffic statistics\n\n## Requirements\n\n- Python 3.7+\n- pyVmomi\n- PyYAML\n- uvicorn\n- mcp-core (Machine Control Protocol core library)\n\n## Quick Start\n\n1. Install dependencies:\n\n```bash\npip install pyvmomi pyyaml uvicorn mcp-core\n```\n\n2. Create configuration file `config.yaml`:\n\n```yaml\nvcenter_host: \"your-vcenter-ip\"\nvcenter_user: \"administrator@vsphere.local\"\nvcenter_password: \"your-password\"\ndatacenter: \"your-datacenter\"        # Optional\ncluster: \"your-cluster\"              # Optional\ndatastore: \"your-datastore\"          # Optional\nnetwork: \"VM Network\"                # Optional\ninsecure: true                       # Skip SSL certificate verification\napi_key: \"your-api-key\"             # API access key\nlog_file: \"./logs/vmware_mcp.log\"   # Log file path\nlog_level: \"INFO\"                    # Log level\n```\n\n3. Run the server:\n\n```bash\npython server.py -c config.yaml\n```\n\n## API Interface\n\n### Authentication\n\nAll privileged operations require authentication first:\n\n```http\nPOST /sse/messages\nAuthorization: Bearer your-api-key\n```\n\n### Main Tool Interfaces\n\n1. Create VM\n```json\n{\n    \"name\": \"vm-name\",\n    \"cpu\": 2,\n    \"memory\": 4096,\n    \"datastore\": \"datastore-name\",\n    \"network\": \"network-name\"\n}\n```\n\n2. Clone VM\n```json\n{\n    \"template_name\": \"source-vm\",\n    \"new_name\": \"new-vm-name\"\n}\n```\n\n3. Delete VM\n```json\n{\n    \"name\": \"vm-name\"\n}\n```\n\n4. Power Operations\n```json\n{\n    \"name\": \"vm-name\"\n}\n```\n\n### Resource Monitoring Interface\n\nGet VM performance data:\n```http\nGET vmstats://{vm_name}\n```\n\n## Configuration\n\n| Parameter | Description | Required | Default |\n|-----------|-------------|----------|---------|\n| vcenter_host | vCenter/ESXi server address | Yes | - |\n| vcenter_user | Login username | Yes | - |\n| vcenter_password | Login password | Yes | - |\n| datacenter | Datacenter name | No | Auto-select first |\n| cluster | Cluster name | No | Auto-select first |\n| datastore | Storage name | No | Auto-select largest available |\n| network | Network name | No | VM Network |\n| insecure | Skip SSL verification | No | false |\n| api_key | API access key | No | - |\n| log_file | Log file path | No | Console output |\n| log_level | Log level | No | INFO |\n\n## Environment Variables\n\nAll configuration items support environment variable settings, following these naming rules:\n- VCENTER_HOST\n- VCENTER_USER\n- VCENTER_PASSWORD\n- VCENTER_DATACENTER\n- VCENTER_CLUSTER\n- VCENTER_DATASTORE\n- VCENTER_NETWORK\n- VCENTER_INSECURE\n- MCP_API_KEY\n- MCP_LOG_FILE\n- MCP_LOG_LEVEL\n\n## Security Recommendations\n\n1. Production Environment:\n   - Use valid SSL certificates\n   - Enable API key authentication\n   - Set appropriate log levels\n   - Restrict API access scope\n\n2. Testing Environment:\n   - Set insecure: true to skip SSL verification\n   - Use more detailed log level (DEBUG)\n\n## License\n\nMIT License\n\n## Contributing\n\nIssues and Pull Requests are welcome!\n\n## Changelog\n\n### v0.0.1\n- Initial release\n- Basic VM management functionality\n- SSE communication support\n- API key authentication\n- Performance monitoring\n\n## Author\n\nBright8192\n\n## Acknowledgments\n\n- VMware pyvmomi team\n- MCP Protocol development team\n"
}