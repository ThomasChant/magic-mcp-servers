{
  "mcp_name": "djalal/quran-mcp-server",
  "mcp_description": "üìá ‚òÅÔ∏è MCP server to interact with Quran.com corpus via the official REST API v4.",
  "mcp_id": "djalal_quran-mcp-server",
  "fetch_timestamp": "2025-06-23T02:40:09.326452Z",
  "github_url": "https://github.com/djalal/quran-mcp-server",
  "repository": {
    "name": "quran-mcp-server",
    "full_name": "djalal/quran-mcp-server",
    "description": "Quran.com API integration for verse search, translation and tafsir",
    "html_url": "https://github.com/djalal/quran-mcp-server",
    "created_at": "2025-03-31T15:59:42Z",
    "updated_at": "2025-06-22T07:00:01Z",
    "pushed_at": "2025-06-12T18:53:07Z",
    "size": 95,
    "stargazers_count": 40,
    "watchers_count": 40,
    "forks_count": 10,
    "open_issues_count": 3,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "djalal",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/4036528?v=4",
      "html_url": "https://github.com/djalal"
    },
    "has_issues": true,
    "has_projects": false,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 10,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 119130,
      "JavaScript": 14219,
      "Dockerfile": 962
    },
    "language_percentages": {
      "TypeScript": 88.7,
      "JavaScript": 10.59,
      "Dockerfile": 0.72
    },
    "pull_requests_count": 4,
    "contributors_count": 1,
    "package_json_version": "v4"
  },
  "readme": "# MCP Server for Quran.com API\n\nMCP server to interact with Quran.com corpus via the official [REST API v4](https://api-docs.quran.com/docs/content_apis_versioned/4.0.0/content-apis).\n\n## Overview\n\nThis is a Model Context Protocol (MCP) server generated from the [OpenAPI specification](v4.json).\n\n## Endpoints\n\nThe following endpoints from the API have been made available as tools, that LLMs can use via compatible clients.\n\n### Chapters\n* GET /chapters - List Chapters\n* GET /chapters/{id} - Get Chapter\n* GET /chapters/{chapter_id}/info - Get Chapter Info\n\n### Verses\n* GET /verses/by_chapter/{chapter_number} - Get verses by Chapter / Surah number\n* GET /verses/by_page/{page_number} - Get all verses of a specific Madani Mushaf page\n* GET /verses/by_juz/{juz_number} - Get verses by Juz number\n* GET /verses/by_hizb/{hizb_number} - Get verses by Hizb number\n* GET /verses/by_rub/{rub_el_hizb_number} - Get verses by Rub el Hizb number\n* GET /verses/by_key/{verse_key} - Get verse by key\n* GET /verses/random - Get a random verse\n\n### Juzs\n* GET /juzs - Get list of all juzs\n\n### Search\n* GET /search - Search the Quran for specific terms\n\n### Translations\n* GET /resources/translations - Get list of available translations\n* GET /resources/translations/{translation_id}/info - Get information of a specific translation\n\n### Tafsirs\n* GET /resources/tafsirs - Get list of available tafsirs\n* GET /resources/tafsirs/{tafsir_id}/info - Get the information of a specific tafsir\n* GET /quran/tafsirs/{tafsir_id} - Get a single tafsir\n\n### Audio\n* GET /resources/chapter_reciters - List of Chapter Reciters\n* GET /resources/recitation_styles - Get the available recitation styles\n\n### Languages\n* GET /resources/languages - Get all languages\n\n## Setup\n\n### Requirements\n\n* Node.js 22+\n* Docker\n\n### Building the Docker Image\n\nBefore using the Docker-based production mode, you need to build the Docker image:\n\n```bash\n# Build the Docker image\ndocker build -t quran-mcp-server .\n```\n\n## Claude Desktop Integration\n\nTo use this MCP server with Claude Desktop, add the following configuration to your `claude_desktop_config.json` file (typically located at `~/Library/Application Support/Claude/claude_desktop_config.json` on macOS or `%APPDATA%\\Claude\\claude_desktop_config.json` on Windows):\n\n### Docker-based Production Mode\n\n```json\n{\n  \"mcpServers\": {\n    \"quran-api\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"--init\", \"-e\", \"API_KEY=your_api_key_if_needed\", \"-e\", \"VERBOSE_MODE=true\", \"quran-mcp-server\"],\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n### Production Mode (Node.js)\n\n```json\n{\n  \"mcpServers\": {\n    \"quran-api\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/quran-mcp-server/dist/src/server.js\"],\n      \"env\": {\n        \"API_KEY\": \"your_api_key_if_needed\",\n        \"VERBOSE_MODE\": \"true\" // Set to \"true\" to enable verbose logging\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n### Development Mode\n\n```json\n{\n  \"mcpServers\": {\n    \"quran-api\": {\n      \"command\": \"npx\",\n      \"args\": [\"ts-node\", \"/path/to/quran-mcp-server/src/server.ts\"],\n      \"env\": {\n        \"API_KEY\": \"your_api_key_if_needed\",\n        \"VERBOSE_MODE\": \"true\" // Set to \"true\" to enable verbose logging\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n**Important Notes:**\n- Replace `/path/to/quran-mcp-server` with the actual path to this repository on your system\n- You'll need to build the project first with `npm run build` or `docker build -t quran-mcp-server .` if using the production mode configuration\n- Replace `your_api_key_if_needed` with an actual API key if required by the Quran.com API\n- If you already have other MCP servers configured, add this configuration to the existing `mcpServers` object\n- After updating the configuration, restart Claude Desktop for the changes to take effect\n\n## Environment Variables\n\n* `API_KEY`: API key for authentication\n* `PORT`: Server port (default: 8000 or 3000 depending on language)\n* `VERBOSE_MODE`: Set to 'true' to enable verbose logging of API requests and responses (default: false)\n\n## Verbose Mode\n\nWhen `VERBOSE_MODE` is set to 'true', the server will log detailed information about API requests and responses to the console. This is useful for debugging and monitoring API interactions.\n\nThe verbose logging includes:\n\n* **Requests**: Logs the tool name and arguments for each incoming request\n* **Responses**: Logs the tool name and result data for each response\n* **Errors**: Logs detailed error information including error name, message, and stack trace when available\n\nEach log entry is timestamped and prefixed with the log type (REQUEST, RESPONSE, or ERROR) for easy identification.\n\n## Testing\n\n```bash\n# Run tests\nnpm test\n```\n\n## License\n\nThis project is licensed under the MIT License.\n"
}