{
  "mcp_name": "Panth1823/formula1-mcp",
  "mcp_description": "Experience the excitement of Formula 1 with real-time and historical racing data through a TypeScript-based MCP server.",
  "mcp_id": "Panth1823_formula1-mcp",
  "fetch_timestamp": "2025-06-23T07:26:39.218063Z",
  "github_url": "https://github.com/Panth1823/formula1-mcp",
  "repository": {
    "name": "formula1-mcp",
    "full_name": "Panth1823/formula1-mcp",
    "description": null,
    "html_url": "https://github.com/Panth1823/formula1-mcp",
    "created_at": "2025-04-11T08:23:57Z",
    "updated_at": "2025-05-14T14:36:31Z",
    "pushed_at": "2025-05-14T14:36:27Z",
    "size": 196,
    "stargazers_count": 11,
    "watchers_count": 11,
    "forks_count": 1,
    "open_issues_count": 1,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [
      "formula1",
      "mcp-server",
      "typescript"
    ],
    "default_branch": "master",
    "owner": {
      "login": "Panth1823",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/89696311?v=4",
      "html_url": "https://github.com/Panth1823"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 45073,
      "JavaScript": 6392,
      "Dockerfile": 343
    },
    "language_percentages": {
      "TypeScript": 87,
      "JavaScript": 12.34,
      "Dockerfile": 0.66
    },
    "pull_requests_count": 2,
    "contributors_count": 3,
    "package_json_version": "1.0.0"
  },
  "readme": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/panth1823-formula1-mcp-badge.png)](https://mseep.ai/app/panth1823-formula1-mcp)\n\n[![smithery badge](https://smithery.ai/badge/@Panth1823/formula1-mcp)](https://smithery.ai/server/@Panth1823/formula1-mcp)\n\n# The Formula1 MCP Server ! üèéÔ∏èüí®\n\nA TypeScript-based Formula 1 MCP server, bringing the thrill of real-time and historical F1 racing data straight to your fingertips via the Model Context Protocol. Faster than Verstappen on a hot lap! (Okay, maybe not _that_ fast, but it's trying!)\n\n### Resources\n\n- Access F1 session data via standardized URIs\n- Real-time telemetry data\n- Historical race information\n- Driver and constructor standings\n- Weather data\n- Circuit information\n\n## Getting Started\n\n### Quick Install via Smithery\n\nTo install the Formula 1 MCP Server automatically via Smithery:\n\n```bash\nnpx -y @smithery/cli install @Panth1823/formula1-mcp --client claude\n```\n\n### Manual Installation\n\n1. Clone the repo:\n```bash\ngit clone https://github.com/Panth1823/formula1-mcp\ncd formula1-mcp\n```\n\n2. Install:\n```bash\nnpm install\n```\n\n3. Build:\n```bash\nnpm run build\n```\n\n## Setup\n\nAdd to your MCP client config:\n\n```json\n{\n  \"mcpServers\": {\n    \"formula1\": {\n      \"command\": \"node\",\n      \"args\": [\"<path-to-your-cloned-repo>/build/index.js\"],\n      \"cwd\": \"<path-to-your-cloned-repo>\",\n      \"enabled\": true\n    }\n  }\n}\n```\n\nConfig locations:\n- Windows: `%APPDATA%\\.cursor\\mcp.json`\n- MacOS: `~/.cursor/mcp.json`\n- Linux: `~/.config/.cursor/mcp.json`\n\n## Available Tools\n\n### 1. `getLiveTimingData`\n\nGet real-time timing data for the current session.\n\n**Parameters:**\n- None required\n\n### 2. `getCurrentSessionStatus`\n\nGet status information about the current session.\n\n**Parameters:**\n- None required\n\n### 3. `getDriverInfo`\n\nGet information about a specific driver.\n\n**Parameters:**\n- `driverId` (string): Driver identifier (e.g., \"max_verstappen\", \"lewis_hamilton\")\n\n### 4. `getHistoricalSessions`\n\nFind session keys for historical events.\n\n**Parameters:**\n- `year` (number, optional): Season year (e.g., 2023)\n- `circuit_short_name` (string, optional): Circuit name (e.g., \"monza\", \"spa\")\n- `country_name` (string, optional): Country name (e.g., \"Italy\", \"Belgium\")\n- `session_name` (string, optional): Session type (e.g., \"Race\", \"Qualifying\")\n\n### 5. `getHistoricRaceResults`\n\nGet race results for a specific historical race.\n\n**Parameters:**\n- `year` (number): Season year (e.g., 2023)\n- `round` (number): Race number (e.g., 1, 2, 3)\n\n### 6. `getDriverStandings`\n\nGet driver championship standings.\n\n**Parameters:**\n- `year` (number): Season year (e.g., 2023)\n\n### 7. `getConstructorStandings`\n\nGet constructor championship standings.\n\n**Parameters:**\n- `year` (number): Season year (e.g., 2023)\n\n### 8. `getLapTimes`\n\nGet lap times for a specific driver.\n\n**Parameters:**\n- `year` (number): Season year (e.g., 2023)\n- `round` (number): Race number (e.g., 1, 2, 3)\n- `driverId` (string): Driver identifier (e.g., \"max_verstappen\", \"lewis_hamilton\")\n\n### 9. `getWeatherData`\n\nGet weather data for a session.\n\n**Parameters:**\n- `sessionKey` (string, optional): Session identifier\n\n### 10. `getCarData`\n\nGet detailed car telemetry data.\n\n**Parameters:**\n- `driverNumber` (string): Driver's car number (e.g., \"44\", \"33\")\n- `sessionKey` (string, optional): Session identifier\n- `filters` (string, optional): Data filters\n\n### 11. `getPitStopData`\n\nGet pit stop information.\n\n**Parameters:**\n- `driverNumber` (string, optional): Driver's car number\n- `sessionKey` (string, optional): Session identifier\n\n### 12. `getTeamRadio`\n\nGet team radio communications.\n\n**Parameters:**\n- `driverNumber` (string, optional): Driver's car number\n- `sessionKey` (string, optional): Session identifier\n\n### 13. `getRaceControlMessages`\n\nGet race control messages.\n\n**Parameters:**\n- `sessionKey` (string, optional): Session identifier\n\n### 14. `getRaceCalendar`\n\nGet the F1 race calendar.\n\n**Parameters:**\n- `year` (number): Season year (e.g., 2023)\n\n### 15. `getCircuitInfo`\n\nGet detailed circuit information.\n\n**Parameters:**\n- `circuitId` (string): Circuit identifier (e.g., \"monza\", \"spa\")\n\n### 16. `getSeasonList`\n\nGet a list of available F1 seasons.\n\n**Parameters:**\n- `limit` (number, optional): Number of seasons to return\n\n### 17. `getQualifyingResults`\n\nGet qualifying session results.\n\n**Parameters:**\n- `year` (number): Season year (e.g., 2023)\n- `round` (number): Race number (e.g., 1, 2, 3)\n\n### 18. `getDriverInformation`\n\nGet detailed driver information from Ergast API.\n\n**Parameters:**\n- `driverId` (string): Driver identifier (e.g., \"max_verstappen\", \"lewis_hamilton\")\n\n### 19. `getConstructorInformation`\n\nGet detailed constructor information from Ergast API.\n\n**Parameters:**\n- `constructorId` (string): Constructor identifier (e.g., \"red_bull\", \"mercedes\")\n\n### 20. `clearCache`\n\nClear the local cache for F1 data.\n\n**Parameters:**\n- None required\n\n### Data Sources\n\n- Live data: F1 Live Timing API (OpenF1)\n- Historical: Ergast API (FastF1)\n\n## Examples\n\n- \"Show 2023 Monaco GP results\"\n- \"Get current standings\"\n- \"Weather at Silverstone\"\n- \"Hamilton's lap times\"\n- \"Show 2024 calendar\"\n- \"Verstappen's info\"\n- \"Japanese GP qualifying\"\n\n## Debug\n\nUse [MCP Inspector](https://github.com/modelcontextprotocol/inspector) for debugging.\n\n## Help\n\n- Bugs? [Report here](https://github.com/Panth1823/formula1-mcp/issues)\n- Questions? Open an issue\n- Want to help? Submit a PR\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n"
}