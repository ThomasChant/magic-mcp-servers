{
  "mcp_name": "Verodat",
  "mcp_description": "Interact with Verodat AI Ready Data platform",
  "mcp_id": "Verodat_verodat-mcp-server",
  "fetch_timestamp": "2025-06-23T09:17:18.792503Z",
  "github_url": "https://github.com/Verodat/verodat-mcp-server",
  "repository": {
    "name": "verodat-mcp-server",
    "full_name": "Verodat/verodat-mcp-server",
    "description": "Verodat MCP Server Implementation",
    "html_url": "https://github.com/Verodat/verodat-mcp-server",
    "created_at": "2025-01-30T13:15:33Z",
    "updated_at": "2025-06-06T20:51:41Z",
    "pushed_at": "2025-05-27T13:00:16Z",
    "size": 111,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 5,
    "open_issues_count": 2,
    "language": "TypeScript",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "Verodat",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/197064028?v=4",
      "html_url": "https://github.com/Verodat"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 5,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 86912,
      "JavaScript": 7845,
      "Dockerfile": 1114
    },
    "language_percentages": {
      "TypeScript": 90.66,
      "JavaScript": 8.18,
      "Dockerfile": 1.16
    },
    "pull_requests_count": 2,
    "contributors_count": 6,
    "package_json_version": "1.0.0"
  },
  "readme": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/verodat-verodat-mcp-server-badge.png)](https://mseep.ai/app/verodat-verodat-mcp-server)\n\n# Verodat MCP Server \n[![MCP](https://img.shields.io/badge/MCP-Server-blue.svg)](https://github.com/modelcontextprotocol)\n[![smithery badge](https://smithery.ai/badge/@Verodat/verodat-mcp-server)](https://smithery.ai/server/@Verodat/verodat-mcp-server)\n\n## Overview\nA Model Context Protocol (MCP) server implementation for [Verodat](https://verodat.io), enabling seamless integration of Verodat's data management capabilities with AI systems like Claude Desktop.\n\n![image](https://github.com/user-attachments/assets/ec26c3e1-077f-46bb-915d-690cfde0833e)\n\n# Verodat MCP Server\n\nThis repository contains a Model Context Protocol (MCP) server implementation for Verodat, allowing AI models to interact with Verodat's data management capabilities through well-defined tools.\n\n## Overview\n\nThe Verodat MCP Server provides a standardized way for AI models to access and manipulate data in Verodat. It implements the Model Context Protocol specification, providing tools for data consumption, design, and management.\n\n## Tool Categories\n\nThe server is organized into three main tool categories, each offering a progressive set of capabilities:\n\n### 1. Consume (8 tools)\n\nThe base category focused on data retrieval operations:\n\n* `get-accounts`: Retrieve available accounts\n* `get-workspaces`: List workspaces within an account\n* `get-datasets`: List datasets in a workspace\n* `get-dataset-output`: Retrieve actual data from a dataset\n* `get-dataset-targetfields`: Retrieve field definitions for a dataset\n* `get-queries`: Retrieve existing AI queries\n* `get-ai-context`: Get workspace context and data structure\n* `execute-ai-query`: Execute AI-powered queries on datasets\n\n### 2. Design (9 tools)\n\nIncludes all tools from Consume, plus:\n\n* `create-dataset`: Create a new dataset with defined schema\n\n### 3. Manage (10 tools)\n\nIncludes all tools from Design, plus:\n\n* `upload-dataset-rows`: Upload data rows to existing datasets\n\n## Prerequisites\n\n* Node.js (v18 or higher)\n* Git\n* Claude Desktop (for Claude integration)\n* Verodat account and AI API key\n\n## Installation\n\n### Quick Start\n\n#### Installing via Smithery\n\nTo install Verodat MCP Server for Claude Desktop automatically via Smithery:\n\n```\nnpx -y @smithery/cli install @Verodat/verodat-mcp-server --client claude\n```\n\n#### Manual Installation\n\n1. Clone the repository:\n\n```\ngit clone https://github.com/Verodat/verodat-mcp-server.git\ncd verodat-mcp-server\n```\n\n2. Install dependencies and build:\n\n```\nnpm install\nnpm run build\n```\n\n3. Configure Claude Desktop:\n   Create or modify the config file:\n   * MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   * Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n   \n   Add the configuration which is mensioned below in configuration:\n\n\n### Getting Started with Verodat\n\n1. Sign up for a Verodat account at verodat.com\n2. Generate an AI API key from your Verodat dashboard\n3. Add the API key to your Claude Desktop configuration\n\n## Configuration\n\nThe server requires configuration for authentication and API endpoints. Create a configuration file for your AI model to use:\n\n```json\n{\n  \"mcpServers\": {\n    \"verodat-consume\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"path/to/verodat-mcp-server/build/src/consume.js\"\n      ],\n      \"env\": {\n        \"VERODAT_AI_API_KEY\": \"your-api-key\",\n        \"VERODAT_API_BASE_URL\": \"https://verodat.io/api/v3\"\n      }\n    }\n  }\n}\n```\n\n### Configuration Options\n\nYou can configure any of the three tool categories by specifying the appropriate JS file one at a time in claude:\n\n* **Consume only**: Use `consume.js` (8 tools for data retrieval)\n* **Design capabilities**: Use `design.js` (9 tools, includes dataset creation)\n* **Full management**: Use `manage.js` (10 tools, includes data upload)\n\nExample for configuring all three categories simultaneously:\n\n```json\n{\n  \"mcpServers\": {\n    \"verodat-consume\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"path/to/verodat-mcp-server/build/src/consume.js\"\n      ],\n      \"env\": {\n        \"VERODAT_AI_API_KEY\": \"your-api-key\",\n        \"VERODAT_API_BASE_URL\": \"https://verodat.io/api/v3\"\n      }\n    },\n    \"verodat-design\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"path/to/verodat-mcp-server/build/src/design.js\"\n      ],\n      \"env\": {\n        \"VERODAT_AI_API_KEY\": \"your-api-key\",\n        \"VERODAT_API_BASE_URL\": \"https://verodat.io/api/v3\"\n      }\n    },\n    \"verodat-manage\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"path/to/verodat-mcp-server/build/src/manage.js\"\n      ],\n      \"env\": {\n        \"VERODAT_AI_API_KEY\": \"your-api-key\",\n        \"VERODAT_API_BASE_URL\": \"https://verodat.io/api/v3\"\n      }\n    }\n  }\n}\n```\n\n### Environment Variables\n\n* `VERODAT_AI_API_KEY`: Your Verodat API key for authentication\n* `VERODAT_API_BASE_URL`: The base URL for the Verodat API (defaults to \"https://verodat.io/api/v3\" if not specified)\n\n## Tool Usage Guide\n\n### Available Commands\n\nThe server provides the following MCP commands:\n\n```\n// Account & Workspace Management\nget-accounts        // List accessible accounts\nget-workspaces      // List workspaces in an account\nget-queries         // Retrieve existing AI queries\n\n// Dataset Operations\ncreate-dataset      // Create a new dataset\nget-datasets        // List datasets in a workspace\nget-dataset-output  // Retrieve dataset records\nget-dataset-targetfields // Retrieve dataset targetfields\nupload-dataset-rows // Add new data rows to an existing dataset\n\n// AI Operations\nget-ai-context      // Get workspace AI context\nexecute-ai-query    // Run AI queries on datasets\n```\n\n### Selecting the Right Tool Category\n\n* **For read-only operations**: Use the `consume.js` server configuration\n* **For creating datasets**: Use the `design.js` server configuration\n* **For uploading data**: Use the `manage.js` server configuration\n\n## Security Considerations\n\n* Authentication is required via API key\n* Request validation ensures properly formatted data\n\n## Development\n\nThe codebase is written in TypeScript and organized into:\n\n* **Tool handlers**: Implementation of each tool's functionality\n* **Transport layer**: Handles communication with the AI model\n* **Validation**: Ensures proper data formats using Zod schemas\n\n### Debugging\n\nThe MCP server communicates over stdio, which can make debugging challenging. We provide an MCP Inspector tool to help:\n\n```\nnpm run inspector\n```\n\nThis will provide a URL to access debugging tools in your browser.\n\n## Contributing\n\nWe welcome contributions! Please feel free to submit a Pull Request.\n\n## License\n\n[LICENSE](LICENSE) file for details\n\n## Support\n\n- Documentation: [Verodat Docs](https://verodat.io/docs)\n- Issues: [GitHub Issues](https://github.com/Verodat/verodat-mcp-server/issues)\n- Community: [Verodat Community](https://github.com/orgs/Verodat/discussions)\n\n---\n"
}