{
  "mcp_name": "Collaborne/mcp-server",
  "mcp_description": "Facilitates interaction between Large Language Models and NEXT structured data, enabling operations like retrieving highlights and clusters.",
  "mcp_id": "Collaborne_mcp-server",
  "fetch_timestamp": "2025-06-23T02:14:36.358775Z",
  "github_url": "https://github.com/Collaborne/mcp-server",
  "repository": {
    "name": "mcp-server",
    "full_name": "Collaborne/mcp-server",
    "description": null,
    "html_url": "https://github.com/Collaborne/mcp-server",
    "created_at": "2025-04-16T11:59:06Z",
    "updated_at": "2025-04-29T13:04:43Z",
    "pushed_at": "2025-04-29T13:04:39Z",
    "size": 72,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "Collaborne",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/7239008?v=4",
      "html_url": "https://github.com/Collaborne"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 15392,
      "JavaScript": 1788,
      "Shell": 707
    },
    "language_percentages": {
      "TypeScript": 86.05,
      "JavaScript": 10,
      "Shell": 3.95
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "tags": [
      {
        "name": "v1.0.4",
        "commit_sha": "56943d307c52c7558eb3d84010f474dab1134cf3"
      },
      {
        "name": "v1.0.3",
        "commit_sha": "415fbe26449397d4da3482b83211c8c0d7740f66"
      },
      {
        "name": "v1.0.2",
        "commit_sha": "cbebaa22f6f9d682c7cdaf16ae2020ebe7073833"
      },
      {
        "name": "v1.0.1",
        "commit_sha": "8c42345c2773cd4eb53aa30555f6f1c128f8cadb"
      }
    ],
    "latest_version": "v1.0.4",
    "package_json_version": "1.0.4"
  },
  "readme": "# Next MCP server\n\nA NEXT Model Context Protocol (MCP) server that provides tools for interacting\nNEXT data.\n\n## Overview\n\nThis MCP server allows Large Language Models (LLMs) like Claude to interact with\nNEXT structured data. It provides tools for:\n\n- Getting highlights\n- Getting cluster\n\nThe server is built using TypeScript and the MCP SDK, providing a secure and standardized way for LLMs to interface with NEXT.\n\n## Installation\n\n### Prerequisites\n\n- Node.js 18 or higher\n- npm\n- NEXT api key\n\n### Setup\n\n1. Install via npm:\n\n```bash\n# Install globally via npm\nnpm install -g @collaborne/mcp-server\n\n# Or as a dependency in your project\nnpm install @collaborne/mcp-server\n```\n\n2. If building from source:\n\n```bash\n# Clone the repository\ngit clone https://github.com/Collaborne/mcp-server.git\ncd mcp-server\n\n# Install dependencies and build\nnpm install\nnpm run build\n```\n\n3. Configure NEXT access:\n\nCreate a `.env` file with your AWS configuration:\n\n```\nAPI_KEY=your-api-key\n```\n\nOr set these as environment variables.\n\n## Configuration\n\nThe server can be configured using the following environment variables:\n\n| Variable                | Description                                           | Default  |\n| ----------------------- | -------------------------------------------------     | -------- |\n| `API_KEY`               | NEXT api key that you can generate from your settings | ``       |\n\n## Running the Server\n\nYou can run the server with Node.js:\n\n```bash\n# Using npx (without installing)\nnpx @collaborne/mcp-server\n\n# If installed globally\nnpm install -g @collaborne/mcp-server\ncd mcp-server\n\n# If running from cloned repository\nnpm start\n\n# Or directly\nnode dist/index.js\n```\n\n## Debugging on MCP Inspector\n\nTo debug the server using MCP Inspector, you can run `sh run-inspector.sh`\n\n```bash\nsh run-inspector.sh\n```\n\n## Connecting to Claude Desktop\n\nTo use this server with Claude Desktop:\n\n1. Edit your Claude Desktop configuration file:\n\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n2. Add the NEXT MCP server to the configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"@collaborne/mcp-server\"],\n      \"env\": {\n        \"API_KEY\": \"your-api-key\"\n      }\n    }\n  }\n}\n```\n\n> **Important**: Please note the following when using the configuration above\n>\n> - Replace `NEXT_API_KEY` with your actual api key from next team-space. Access to the NEXT API is scoped to a specific team-space. Each API token is bound to one team-space and cannot access data outside of it.\n\n### ðŸ’£ If error occurs on Claude Desktop\n\nIf you encounter errors with the above configuration in Claude Desktop, try using absolute paths as follows:\n\n```bash\n# Get the path of node and mcp-server\nwhich node\nwhich @collaborne/mcp-server\n```\n\n```json\n{\n  \"globalShortcut\": \"\",\n  \"mcpServers\": {\n    \"next\": {\n      \"command\": \"your-absolute-path-to-node\",\n      \"args\": [\"your-absolute-path-to-mcp-server/dist/index.js\"],\n      \"env\": {\n        \"API_KEY\": \"your-api-key\",\n      }\n    }\n  }\n}\n```\n\n## Available Tools\n\n### next-get-highlights\n\nLists available NEXT highlights that the server has permission to access. This\ntool is limited to one team-space\n\n**Parameters:**\n\n- `searchFilters` (required): filters for highlights based on the user query\n\n**Example input:**\n\n```\nWhat are the user frustrations and issues mentioned in the last week \n```\n\n**Example output:**\n\n```json\n{\n  \"searchFilters\": {\n    \"dateFilter\": \"last week\",\n    \"typeFilters\": [\n      \"Pain Point\"\n    ]\n  }\n}\n```\n\n### next-get-clusters\n\nLists available NEXT clusters that the server has permission to access. This\ntool is limited to one team-space\n\n**Parameters:**\n\n- `searchQuery` (required): search query for clusters based on the user query\n\n**Example input:**\n\n```\nSummarize the main topics \n```\n\n**Example output:**\n\n```json\n{\n  \"searchQuery\": \"main topics\"\n}\n```\n\n## Security Considerations\n\n- The server will only access team-space specific data\n\n## Usage with Claude\n\nWhen interacting with Claude in the desktop app, you can ask it to perform NEXT operations like:\n\n- \"Summarize highlights about X topic\"\n- \"What are the main pain points mentioned in clusters\"\n\nClaude will use the appropriate MCP tool to carry out the request and show you the results.\n\n## License\n\nMIT\n"
}