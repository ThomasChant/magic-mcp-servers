{
  "mcp_name": "AB498/code-context-provider-mcp",
  "mcp_description": "Provides code context and analysis for AI assistants by extracting directory structures and code symbols using WebAssembly Tree-sitter parsers.",
  "mcp_id": "AB498_code-context-provider-mcp",
  "fetch_timestamp": "2025-06-23T00:10:40.495929Z",
  "github_url": "https://github.com/AB498/code-context-provider-mcp",
  "repository": {
    "name": "code-context-provider-mcp",
    "full_name": "AB498/code-context-provider-mcp",
    "description": "MCP server that provides code context and analysis for AI assistants. Extracts directory structure and code symbols using WebAssembly Tree-sitter parsers with Zero Native Dependencies.",
    "html_url": "https://github.com/AB498/code-context-provider-mcp",
    "created_at": "2025-04-14T13:34:17Z",
    "updated_at": "2025-06-19T21:57:46Z",
    "pushed_at": "2025-05-14T17:35:25Z",
    "size": 96,
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks_count": 2,
    "open_issues_count": 1,
    "language": "JavaScript",
    "license": "MIT License",
    "topics": [
      "context",
      "context-engine",
      "mcp",
      "provider"
    ],
    "default_branch": "main",
    "owner": {
      "login": "AB498",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/52972436?v=4",
      "html_url": "https://github.com/AB498"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 2,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 43558,
      "Dockerfile": 403,
      "Python": 47
    },
    "language_percentages": {
      "JavaScript": 98.98,
      "Dockerfile": 0.92,
      "Python": 0.11
    },
    "pull_requests_count": 2,
    "contributors_count": 2,
    "package_json_version": "1.0.10"
  },
  "readme": "# Code Context Provider MCP\n\n### MCP server that provides code context and analysis for AI assistants. Extracts directory structure and code symbols using WebAssembly Tree-sitter parsers with Zero Native Dependencies.\n\n<div style=\"text-align:center;font-family: monospace; display: flex; align-items: center; justify-content: center; width: 100%; gap: 10px\">\n        <a href=\"https://discord.gg/ZeeqSBpjU2\"><img src=\"https://img.shields.io/discord/1095854826786668545\" alt=\"Discord\"></a>\n        <a href=\"https://img.shields.io/badge/License-MIT-yellow.svg\"><img\n                src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" alt=\"License: MIT\"></a>\n        <a href=\"https://www.npmjs.com/package/code-context-provider-mcp\"><img src=\"https://img.shields.io/npm/v/code-context-provider-mcp\" alt=\"npm\"></a>\n</div>\n\n---\n\n## Features\n\n- Generate directory tree structure\n- Analyze JavaScript/TypeScript and Python files\n- Extract code symbols (functions, variables, classes, imports, exports)\n- Compatible with the MCP protocol for seamless integration with AI assistants\n\n## Quick Usage (MCP Setup)\n\n### Installing via Smithery\n\nTo install Code Context Provider for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@AB498/code-context-provider-mcp):\n\n```bash\nnpx -y @smithery/cli install @AB498/code-context-provider-mcp --client claude\n```\n\n### Windows\n\n```json\n{\n  \"mcpServers\": {\n    \"code-context-provider-mcp\": {\n      \"command\": \"cmd.exe\",\n      \"args\": [\n        \"/c\",\n        \"npx\",\n        \"-y\",\n        \"code-context-provider-mcp@latest\"\n      ]\n    }\n  }\n}\n```\n\n### MacOS/Linux\n\n```json\n{\n  \"mcpServers\": {\n    \"code-context-provider-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"code-context-provider-mcp@latest\"\n      ]\n    }\n  }\n}\n```\n\nOR install globally with `npm`:\n```bash\nnpm install -g code-context-provider-mcp\n```\nThen use it by running:\n```bash\ncode-context-provider-mcp # if you're not using @latest, you may want to clear the cache for latest version using `Remove-Item -Path \"$env:LOCALAPPDATA\\npm-cache\\_npx\" -Recurse -Force` for windows and `rm -rf ~/.npm/_npx` for linux/macos\n```\n\n## Available Tools\n\n### `get_code_context`\n\nAnalyzes a directory and returns its structure along with code symbols (optional).\n\nParameters:\n- `absolutePath` (string, required): Absolute path to the directory to analyze\n- `analyzeJs` (boolean, optional): Whether to analyze JavaScript/TypeScript and Python files (default: false)\n- `includeSymbols` (boolean, optional): Whether to include code symbols in the response (default: false)\n- `symbolType` (enum, optional): Type of symbols to include if includeSymbols is true (options: 'functions', 'variables', 'classes', 'imports', 'exports', 'all', default: 'all')\n- `filePatterns` (array of strings, optional): File patterns to analyze (e.g. ['*.js', '*.py', 'config.*'])\n- `maxDepth` (number, optional): Maximum directory depth to analyze (default: 5 levels)\n\nNote: Anonymous functions are automatically filtered out of the results.\n\n## Example Output Text On Tool Call\n\n```\nDirectory structure for: C:\\Users\\Admin\\Desktop\\mcp\\context-provider-mcp\n\nCode Analysis Summary:\n- Files analyzed: 3\n- Total functions: 29\n- Total variables: 162\n- Total classes: 0\n\nNote: Symbol analysis is supported for JavaScript/TypeScript (.js, .jsx, .ts, .tsx) and Python (.py) files only.\n\nCode analysis limited to a maximum depth of 5 directory levels (default).\n\n├── index.js (39 KB)\n│   └── [Analyzed: 22 functions, 150 variables, 0 classes]\n│       Functions:\n│       - initializeTreeSitter [39:0]\n│       - getLanguageFromExtension [107:0]\n│       - getPosition [138:24]\n```\n\n\n## File Pattern Examples\n\nYou can use the `filePatterns` parameter to specify which files to analyze. This is useful for complex projects with multiple languages or specific files of interest.\n\nExamples:\n- `[\"*.js\", \"*.py\"]` - Analyze all JavaScript and Python files\n- `[\"config.*\"]` - Analyze all configuration files regardless of extension\n- `[\"package.json\", \"*.config.js\"]` - Analyze package.json and any JavaScript config files\n- `[\".ts\", \".tsx\", \".py\"]` - Analyze TypeScript and Python files (using extension format)\n\nThe file pattern matching supports:\n- Simple glob patterns with wildcards (*)\n- Direct file extensions (with or without the dot)\n- Exact file names\n\n## Handling Large Projects\n\nFor very large projects, you can use the `maxDepth` parameter to limit how deeply the tool will traverse directories:\n\n- `maxDepth: 2` - Only analyze the root directory and one level of subdirectories\n- `maxDepth: 3` - Analyze the root, and two levels of subdirectories\n- `maxDepth: 0` - Only analyze files in the root directory\n\nThis is particularly useful when:\n- Working with large monorepos\n- Analyzing projects with many dependencies\n- Focusing only on the main source code and not third-party libraries\n\n## Supported Languages\n\nCode symbol analysis is supported for:\n- JavaScript (.js)\n- JSX (.jsx)\n- TypeScript (.ts)\n- TSX (.tsx)\n- Python (.py)\n\nUsing the `filePatterns` parameter allows you to include other file types in the directory structure, though symbolic analysis may be limited.\n\n## Development\n\n### Setting up the Development Environment\n\n```bash\n# Clone the repository\ngit clone https://github.com/your-username/code-context-provider-mcp.git\ncd code-context-provider-mcp\n\n# Install dependencies\nnpm install\n\n# Set up WASM parsers\nnpm run setup\n```\n\n### Post-Installation\n\nAfter installation, the package's `prepare` script automatically runs to download the WASM parsers. If for some reason the download fails, users can manually run the setup:\n\n```bash\nnpx code-context-provider-mcp-setup\n```\n\n## License\n\nMIT\n\n## For more information or help\n\n- [Email (abcd49800@gmail.com)](mailto:abcd49800@gmail.com)\n- [Discord (CodePlayground)](https://discord.gg/ZeeqSBpjU2)\n"
}