{
  "mcp_name": "ZebraRoy/review-toolkit-mcp",
  "mcp_description": "Facilitates AI-driven code review sessions with features for session management, file tracking, and report generation.",
  "mcp_id": "ZebraRoy_review-toolkit-mcp",
  "fetch_timestamp": "2025-06-23T09:45:13.375948Z",
  "github_url": "https://github.com/ZebraRoy/review-toolkit-mcp",
  "repository": {
    "name": "review-toolkit-mcp",
    "full_name": "ZebraRoy/review-toolkit-mcp",
    "description": null,
    "html_url": "https://github.com/ZebraRoy/review-toolkit-mcp",
    "created_at": "2025-04-23T05:29:01Z",
    "updated_at": "2025-05-11T02:45:35Z",
    "pushed_at": "2025-04-27T01:45:34Z",
    "size": 121,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "ZebraRoy",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/6883569?v=4",
      "html_url": "https://github.com/ZebraRoy"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 27122,
      "TypeScript": 10623
    },
    "language_percentages": {
      "JavaScript": 71.86,
      "TypeScript": 28.14
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "0.6.0"
  },
  "readme": "# Review Toolkit MCP\n\nA Model Context Protocol (MCP) service to help AI agents manage and track code review sessions.\n\n## Features\n\n- Start new review sessions or resume existing ones\n- Track files that need review\n- Track review status for each file\n- Store AI agent reviews for each file\n- Generate review reports including agent reviews\n- Token counting to manage context limits (includes file content and agent reviews)\n- Persistent sessions stored in user's home directory\n- Automatic token count reset when resuming sessions\n- Built-in agent instructions accessible via tool\n\n## Configuration\n\nThe MCP supports the following command-line arguments:\n\n- `--session-dir`: Custom directory path to store review sessions\n  - Default: `~/.review-toolkit-sessions/`\n\n## Setting up in Cursor\n\nTo use this MCP in Cursor, add the following configuration to your Cursor settings:\n\n### Mac/Linux\n\n```json\n{\n  \"mcpServers\": {\n    \"review-toolkit\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"review-toolkit-mcp\"]\n    }\n  }\n}\n```\n\n### Windows\n\n```json\n{\n  \"mcpServers\": {\n    \"review-toolkit\": {\n      \"command\": \"cmd\",\n      \"args\": [\"/c\", \"npx\", \"-y\", \"review-toolkit-mcp\"]\n    }\n  }\n}\n```\n\n### Custom Session Directory\n\nIf you want to specify a custom directory for storing sessions, you can add the `--session-dir` argument:\n\n#### Mac/Linux\n\n```json\n{\n  \"mcpServers\": {\n    \"review-toolkit\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"review-toolkit-mcp\",\n        \"--session-dir=/path/to/your/sessions/directory\"\n      ]\n    }\n  }\n}\n```\n\n#### Windows\n\n```json\n{\n  \"mcpServers\": {\n    \"review-toolkit\": {\n      \"command\": \"cmd\",\n      \"args\": [\n        \"/c\",\n        \"npx\",\n        \"-y\",\n        \"review-toolkit-mcp\",\n        \"--session-dir=C:\\\\path\\\\to\\\\your\\\\sessions\\\\directory\"\n      ]\n    }\n  }\n}\n```\n\n## Usage\n\nThis MCP provides tools for AI agents to manage code review sessions. It supports:\n\n1. Starting/resuming review sessions\n2. Tracking review progress\n3. Managing agent reviews for each file\n4. Generating reports\n5. Token management for context limits\n\n## Working with Agents\n\n### Preparation Before Starting a Review\n\nBefore initiating a code review, consider these preparation steps:\n\n1. **Create Code Review Rules**\n\n   - Define specific rules tailored to your project's needs and code review format\n   - Examples:\n     - Code style and formatting standards\n     - Architecture and design principles\n     - Security requirements\n     - Performance considerations\n     - Documentation requirements\n\n2. **Import Manual Rules**\n   - If your project has existing manual rules or style guides, provide them to the agent\n   - These could be company-wide standards, framework-specific conventions, or project-specific guidelines\n\n### Example Prompts\n\n#### Starting a New Code Review\n\n```\nI'd like you to perform a code review on my project. Please use the review-toolkit MCP to:\n\n1. Start a new review session using the \"glob\" mode with the pattern \"**/*.js\" (or \"changed\" mode to review recent changes)\n2. Review each file methodically, checking for:\n   - Code quality and best practices\n   - Potential bugs or errors\n   - Security vulnerabilities\n   - Performance concerns\n   - Documentation completeness\n3. For each file, provide specific feedback with line references\n4. After reviewing all files, generate a comprehensive report\n\nHere are my project-specific code review rules to follow:\n[List your custom rules here]\n```\n\n#### Resuming an Existing Review\n\n```\nLet's continue the code review session that was started earlier. Please:\n\n1. Resume the existing review session for my project\n2. Continue reviewing the remaining files\n3. Apply the same review criteria we established earlier\n4. Generate a final report once all files have been reviewed\n\nIf you encounter token limits, please let me know so we can start a new chat session while preserving the review progress.\n```\n\n## Tools\n\n### get-agent-instructions\n\nGet detailed instructions for how agents should use the review toolkit MCP tools. This is typically the first tool that an agent should call when working with the review toolkit.\n\nParameters:\n\n- None\n\n### start-review-session\n\nStart a new code review session or resume an existing one. This should be the first tool called when starting or resuming a review process. When resuming, token count is automatically reset.\n\nParameters:\n\n- `projectRoot` (string): The root directory of the project\n- `mode` (string): The mode for listing files: 'glob', 'changed', 'staged', or 'resume' to resume an existing session\n- `glob` (string | optional): The glob pattern to match files against (required if mode is 'glob')\n- `files` (string[] | optional): Array of file paths to review (overrides mode if provided)\n- `tokenLimit` (number | optional): Maximum token limit for the session (default: 10000)\n- `forceNew` (boolean | optional): Force creation of a new session even if one exists\n\n### get-next-review-file\n\nGet the next file that needs to be reviewed.\n\nParameters:\n\n- `key` (string): Session ID or project root path\n\n### submit-file-review\n\nSubmit a review for a file. The tool counts tokens for the file content and agent review.\n\nParameters:\n\n- `key` (string): Session ID or project root path\n- `filePath` (string): The file path that was reviewed\n- `agentReview` (string): The AI agent's review of the file\n- `projectRoot` (string | optional): The project root directory (if different from key)\n\n### complete-review-session\n\nMark a review session as completed.\n\nParameters:\n\n- `key` (string): Session ID or project root path\n\n### generate-review-report\n\nGenerate a report for a review session, including agent reviews.\n\nParameters:\n\n- `key` (string): Session ID or project root path\n\n## Session Persistence\n\nReview sessions are saved in `~/.review-toolkit-sessions/` directory. Each project can have one active session at a time.\n\n## License\n\nMIT\n"
}