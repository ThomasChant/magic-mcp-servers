{
  "mcp_name": "shaunporwal/DICOM-MCP",
  "mcp_description": "Facilitates interaction with DICOM images through a note storage system, enabling note summarization and management.",
  "mcp_id": "shaunporwal_DICOM-MCP",
  "fetch_timestamp": "2025-06-23T08:21:15.200097Z",
  "github_url": "https://github.com/shaunporwal/DICOM-MCP",
  "repository": {
    "name": "DICOM-MCP",
    "full_name": "shaunporwal/DICOM-MCP",
    "description": null,
    "html_url": "https://github.com/shaunporwal/DICOM-MCP",
    "created_at": "2025-04-08T00:20:04Z",
    "updated_at": "2025-04-08T14:38:32Z",
    "pushed_at": "2025-05-03T02:30:43Z",
    "size": 157,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "shaunporwal",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/50352150?v=4",
      "html_url": "https://github.com/shaunporwal"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "Python": 33661
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# DICOM-MCP MCP server\n\nMCP to work with DICOM images\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"DICOM-MCP\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/shaunporwal/Documents/GitHub/projects/DICOM-MCP\",\n        \"run\",\n        \"DICOM-MCP\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"DICOM-MCP\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"DICOM-MCP\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/shaunporwal/Documents/GitHub/projects/DICOM-MCP run dicom-mcp\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging."
}