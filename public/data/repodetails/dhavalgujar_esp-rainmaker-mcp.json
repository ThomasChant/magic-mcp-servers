{
  "mcp_name": "dhavalgujar/esp-rainmaker-mcp",
  "mcp_description": "Facilitates interaction with ESP RainMaker devices through MCP-compatible clients using the ESP-Rainmaker CLI.",
  "mcp_id": "dhavalgujar_esp-rainmaker-mcp",
  "fetch_timestamp": "2025-06-23T02:37:47.947851Z",
  "github_url": "https://github.com/dhavalgujar/esp-rainmaker-mcp",
  "repository": {
    "name": "esp-rainmaker-mcp",
    "full_name": "dhavalgujar/esp-rainmaker-mcp",
    "description": "MCP wrapper for ESP-Rainmaker CLI",
    "html_url": "https://github.com/dhavalgujar/esp-rainmaker-mcp",
    "created_at": "2025-04-13T16:57:09Z",
    "updated_at": "2025-04-13T17:50:13Z",
    "pushed_at": "2025-04-13T17:50:10Z",
    "size": 31,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "dhavalgujar",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/7974069?v=4",
      "html_url": "https://github.com/dhavalgujar"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 15022
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# ESP RainMaker MCP Server\n\nThis project provides a Model Context Protocol (MCP) server wrapper around the [`esp-rainmaker-cli`](https://github.com/espressif/esp-rainmaker-cli) Python library.  \nIt allows MCP-compatible clients (like LLMs or applications such as Claude Desktop) to interact with your [ESP RainMaker](https://rainmaker.espressif.com/) devices using the official CLI.\n\n## Prerequisites\n\n*   **Python:** Version 3.13 or higher\n*   **uv:** The `uv` Python package manager. Install from [Astral's uv documentation](https://docs.astral.sh/uv/getting-started/installation/).\n*   **ESP RainMaker CLI Login:** You *must* have successfully logged into ESP RainMaker using the standard `esp-rainmaker-cli login` command in your terminal at least once. This server relies on the credentials saved by that process.\n\n## Installation & Setup\n\n1.  **Clone the Repository:**\n    ```bash\n    git clone https://github.com/dhavalgujar/esp-rainmaker-mcp.git\n    cd esp-rainmaker-mcp\n    ```\n\n2.  **Install Dependencies using uv:**\n    This command installs `esp-rainmaker-cli`, `mcp[cli]`, and any other dependencies listed in `pyproject.toml` into a virtual environment managed by `uv`.\n    \n    ```bash\n    uv sync\n    ```\n    *(This assumes `uv` is installed)*\n\n3. **Login to ESP Rainmaker using `esp-rainmaker-cli`**\n    ```bash\n    uv run esp-rainmaker-cli login\n    ```\n\n## Available Tools\n\nThis MCP server exposes the following tools for interacting with ESP RainMaker:\n\n*   `login_instructions()`:\n    *   Provides instructions (formatted with Markdown) on how to log in using the standard `esp-rainmaker-cli login` command in your terminal.  \n        This server relies on the external CLI's browser-based login flow to securely store credentials.  \n        Rendering as Markdown depends on the MCP client's capabilities.\n*   `check_login_status()`:\n    *   Checks if a valid login session exists based on credentials stored locally by `esp-rainmaker-cli`.\n        Confirms if the server can communicate with the ESP RainMaker backend.\n*   `get_nodes()`:\n    *   Lists all node IDs associated with the logged-in user.\n*   `get_node_config(node_id: str)`:\n    *   Get the configuration details (device types, parameters, capabilities) for a specific node ID. Returns a dictionary.\n*   `get_node_status(node_id: str)`:\n    *   Get the online/offline connectivity status for a specific node ID. Returns a dictionary.\n*   `get_params(node_id: str)`:\n    *   Get the current parameters (state, e.g., Power, Brightness) for a specific node ID. Returns a dictionary.\n*   `set_params(node_id: str, params_json: str)`:\n    *   Set parameters for a specific node. Requires `params_json` to be a **string** containing valid JSON representing the desired state changes (e.g., `'{\"Thermostat\": {\"Power\": false}}'`). Returns a success or error message string.\n*   `logout()`:\n    *   Logout the current user from ESP RainMaker via API (if possible) and **clears the locally stored credentials**.\n    *   Use this if you explicitly want to end the session saved by `esp-rainmaker-cli login`.\n\n\n> [!NOTE]\n> Direct login via username/password within MCP is not supported for security reasons. Please use the standard CLI login flow first.\n\n\n## Client Configuration\n\nTo add this server to an MCP client (like Claude Desktop or Cursor, add an entry similar to the following to your client's configuration file (e.g., `claude_desktop_config.json` for Claude Desktop):\n\n```json\n{\n   \"mcpServers\": {\n      \"ESP-RainMaker-MCP\": {\n         \"command\": \"uv\",\n         \"args\": [\n            \"run\",\n            \"--with\",\n            \"esp-rainmaker-cli\",\n            \"--with\",\n            \"mcp[cli]\",\n            \"mcp\",\n            \"run\",\n            \"<absolute_path_to_repo>/server.py\"\n         ]\n      }\n   }\n}\n```\n\n> [!IMPORTANT]\n> Replace `<absolute_path_to_repo>/server.py` with the actual **absolute path** to the `server.py` file within the cloned `esp-rainmaker-mcp` directory on your system.\n\n> The `--with` arguments ensure `uv` includes the necessary dependencies when running the `mcp run` command.\n\n## How it Works\n\nThis server acts as a bridge. It uses the `mcp` library to handle the Model Context Protocol communication. When a tool is called:\n\n1.  It uses functions from the installed `esp-rainmaker-cli` library.\n2.  The library functions read locally stored authentication tokens.\n3.  It makes the necessary API calls to the ESP RainMaker cloud.\n4.  It returns the results (or errors) back through the MCP protocol.\n\n## Typical Workflow\n\n1.  Ensure you have logged in via `esp-rainmaker-cli login` in your terminal.\n2.  Start your MCP client configured with this server.\n3.  Use the `check_login_status` tool in the MCP client to verify the connection.\n4.  Use tools like `get_nodes`, `get_params`, and `set_params` to interact with your devices.\n\n## License\n\nThis project is licensed under the terms specified in the [LICENSE](LICENSE) file.\n"
}