{
  "mcp_name": "Supabase",
  "mcp_description": "🎖️ 📇 ☁️ - Official Supabase MCP server to connect AI assistants directly with your Supabase project and allows them to perform tasks like managing tables, fetching config, and querying data.",
  "mcp_id": "supabase-community_supabase-mcp",
  "fetch_timestamp": "2025-06-23T08:43:27.518703Z",
  "github_url": "https://github.com/supabase-community/supabase-mcp",
  "repository": {
    "name": "supabase-mcp",
    "full_name": "supabase-community/supabase-mcp",
    "description": "Connect Supabase to your AI assistants",
    "html_url": "https://github.com/supabase-community/supabase-mcp",
    "created_at": "2024-12-20T23:52:42Z",
    "updated_at": "2025-06-23T05:21:45Z",
    "pushed_at": "2025-06-20T20:58:26Z",
    "size": 515,
    "stargazers_count": 1662,
    "watchers_count": 1662,
    "forks_count": 149,
    "open_issues_count": 42,
    "language": "TypeScript",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "supabase-community",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/87650496?v=4",
      "html_url": "https://github.com/supabase-community"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 149,
    "subscribers_count": 22,
    "languages": {
      "TypeScript": 472383,
      "JavaScript": 2705
    },
    "language_percentages": {
      "TypeScript": 99.43,
      "JavaScript": 0.57
    },
    "pull_requests_count": 57,
    "contributors_count": 6,
    "latest_release": {
      "tag_name": "v0.4.5",
      "name": "v0.4.5",
      "published_at": "2025-06-20T20:58:50Z",
      "body": "## What's Changed\r\n* feat: allow enabling of specific feature groups + adds storage tools by @Ngineer101 in https://github.com/supabase-community/supabase-mcp/pull/98\r\n* feat: re-enable branching tools by default by @gregnr in https://github.com/supabase-community/supabase-mcp/pull/100\r\n* docs: update default feature groups by @gregnr in https://github.com/supabase-community/supabase-mcp/pull/101\r\n\r\n## New Contributors\r\n* @Ngineer101 made their first contribution in https://github.com/supabase-community/supabase-mcp/pull/98\r\n\r\n**Full Changelog**: https://github.com/supabase-community/supabase-mcp/compare/v0.4.4...v0.4.5",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.4.5",
        "commit_sha": "2a8cc28df10690a7d050cd3052467dd49f3c6100"
      },
      {
        "name": "v0.4.4",
        "commit_sha": "65e79ec8b55d5e1ad7b25a18c0d53e74046dff3e"
      },
      {
        "name": "v0.4.3",
        "commit_sha": "63a062f0688429cd2a50ce7bab47de82ee1c81d5"
      },
      {
        "name": "v0.4.2",
        "commit_sha": "b54f86e53bf7eeeb90dce80e8efe4cacadab34a2"
      },
      {
        "name": "v0.4.1",
        "commit_sha": "73c8eebb6ca73a46405f891b1cf25d951fe76e43"
      },
      {
        "name": "v0.4.0",
        "commit_sha": "13c730d015c589d598174cd172855bc0cab48821"
      },
      {
        "name": "v0.3.6",
        "commit_sha": "d1b02f19fd8892d23679a348b2ac34b1a1811039"
      },
      {
        "name": "v0.3.5",
        "commit_sha": "865e19db53189c130b59514e8fd726c2f0dbbce7"
      },
      {
        "name": "v0.3.4",
        "commit_sha": "355e04638f3d1029333f4eb9491047f5d2b4748d"
      },
      {
        "name": "v0.3.3",
        "commit_sha": "8bbf0ddfd902ddbaebd802f1280b0994d18c2fe1"
      }
    ],
    "latest_version": "v0.4.5"
  },
  "readme": "# Supabase MCP Server\n\n> Connect your Supabase projects to Cursor, Claude, Windsurf, and other AI assistants.\n\n![supabase-mcp-demo](https://github.com/user-attachments/assets/3fce101a-b7d4-482f-9182-0be70ed1ad56)\n\nThe [Model Context Protocol](https://modelcontextprotocol.io/introduction) (MCP) standardizes how Large Language Models (LLMs) talk to external services like Supabase. It connects AI assistants directly with your Supabase project and allows them to perform tasks like managing tables, fetching config, and querying data. See the [full list of tools](#tools).\n\n## Prerequisites\n\nYou will need Node.js installed on your machine. You can check this by running:\n\n```shell\nnode -v\n```\n\nIf you don't have Node.js installed, you can download it from [nodejs.org](https://nodejs.org/).\n\n## Setup\n\n### 1. Personal access token (PAT)\n\nFirst, go to your [Supabase settings](https://supabase.com/dashboard/account/tokens) and create a personal access token. Give it a name that describes its purpose, like \"Cursor MCP Server\".\n\nThis will be used to authenticate the MCP server with your Supabase account. Make sure to copy the token, as you won't be able to see it again.\n\n### 2. Configure MCP client\n\nNext, configure your MCP client (such as Cursor) to use this server. Most MCP clients store the configuration as JSON in the following format:\n\n```json\n{\n  \"mcpServers\": {\n    \"supabase\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@supabase/mcp-server-supabase@latest\",\n        \"--read-only\",\n        \"--project-ref=<project-ref>\"\n      ],\n      \"env\": {\n        \"SUPABASE_ACCESS_TOKEN\": \"<personal-access-token>\"\n      }\n    }\n  }\n}\n```\n\nReplace `<personal-access-token>` with the token you created in step 1. Alternatively you can omit `SUPABASE_ACCESS_TOKEN` in this config and instead set it globally on your machine. This allows you to keep your token out of version control if you plan on committing this configuration to a repository.\n\nThe following options are available:\n\n- `--read-only`: Used to restrict the server to read-only queries. Recommended by default. See [read-only mode](#read-only-mode).\n- `--project-ref`: Used to scope the server to a specific project. Recommended by default. If you omit this, the server will have access to all projects in your Supabase account. See [project scoped mode](#project-scoped-mode).\n- `--features`: Used to specify which tool groups to enable. See [feature groups](#feature-groups).\n\nIf you are on Windows, you will need to [prefix the command](#windows). If your MCP client doesn't accept JSON, the direct CLI command is:\n\n```shell\nnpx -y @supabase/mcp-server-supabase@latest --read-only --project-ref=<project-ref>\n```\n\n> Note: Do not run this command directly - this is meant to be executed by your MCP client in order to start the server. `npx` automatically downloads the latest version of the MCP server from `npm` and runs it in a single command.\n\n#### Windows\n\nOn Windows, you will need to prefix the command with `cmd /c`:\n\n```json\n{\n  \"mcpServers\": {\n    \"supabase\": {\n      \"command\": \"cmd\",\n      \"args\": [\n        \"/c\",\n        \"npx\",\n        \"-y\",\n        \"@supabase/mcp-server-supabase@latest\",\n        \"--read-only\",\n        \"--project-ref=<project-ref>\"\n      ],\n      \"env\": {\n        \"SUPABASE_ACCESS_TOKEN\": \"<personal-access-token>\"\n      }\n    }\n  }\n}\n```\n\nor with `wsl` if you are running Node.js inside WSL:\n\n```json\n{\n  \"mcpServers\": {\n    \"supabase\": {\n      \"command\": \"wsl\",\n      \"args\": [\n        \"npx\",\n        \"-y\",\n        \"@supabase/mcp-server-supabase@latest\",\n        \"--read-only\",\n        \"--project-ref=<project-ref>\"\n      ],\n      \"env\": {\n        \"SUPABASE_ACCESS_TOKEN\": \"<personal-access-token>\"\n      }\n    }\n  }\n}\n```\n\nMake sure Node.js is available in your system `PATH` environment variable. If you are running Node.js natively on Windows, you can set this by running the following commands in your terminal.\n\n1. Get the path to `npm`:\n\n   ```shell\n   npm config get prefix\n   ```\n\n2. Add the directory to your PATH:\n\n   ```shell\n   setx PATH \"%PATH%;<path-to-dir>\"\n   ```\n\n3. Restart your MCP client.\n\n### Project scoped mode\n\nWithout project scoping, the MCP server will have access to all organizations and projects in your Supabase account. We recommend you restrict the server to a specific project by setting the `--project-ref` flag on the CLI command:\n\n```shell\nnpx -y @supabase/mcp-server-supabase@latest --project-ref=<project-ref>\n```\n\nReplace `<project-ref>` with the ID of your project. You can find this under **Project ID** in your Supabase [project settings](https://supabase.com/dashboard/project/_/settings/general).\n\nAfter scoping the server to a project, [account-level](#project-management) tools like `list_projects` and `list_organizations` will no longer be available. The server will only have access to the specified project and its resources.\n\n### Read-only mode\n\nTo restrict the Supabase MCP server to read-only queries, set the `--read-only` flag on the CLI command:\n\n```shell\nnpx -y @supabase/mcp-server-supabase@latest --read-only\n```\n\nWe recommend you enable this by default. This prevents write operations on any of your databases by executing SQL as a read-only Postgres user. Note that this flag only applies to database tools (`execute_sql` and `apply_migration`) and not to other tools like `create_project` or `create_branch`.\n\n### Feature groups\n\nYou can enable or disable specific tool groups by passing the `--features` flag to the MCP server. This allows you to customize which tools are available to the LLM. For example, to enable only the [database](#database) and [docs](#knowledge-base) tools, you would run:\n\n```shell\nnpx -y @supabase/mcp-server-supabase@latest --features=database,docs\n```\n\nAvailable groups are: [`account`](#account), [`docs`](#knowledge-base), [`database`](#database), [`debug`](#debug), [`development`](#development), [`functions`](#edge-functions), [`storage`](#storage), and [`branching`](#branching-experimental-requires-a-paid-plan).\n\nIf this flag is not passed, the default feature groups are: `account`, `database`, `debug`, `development`, `docs`, `functions`, and `branching`.\n\n## Tools\n\n_**Note:** This server is pre-1.0, so expect some breaking changes between versions. Since LLMs will automatically adapt to the tools available, this shouldn't affect most users._\n\nThe following Supabase tools are available to the LLM, [grouped by feature](#feature-groups).\n\n#### Account\n\nEnabled by default when no `--project-ref` is passed. Use `account` to target this group of tools with the [`--features`](#feature-groups) option.\n\n_**Note:** these tools will be unavailable if the server is [scoped to a project](#project-scoped-mode)._\n\n- `list_projects`: Lists all Supabase projects for the user.\n- `get_project`: Gets details for a project.\n- `create_project`: Creates a new Supabase project.\n- `pause_project`: Pauses a project.\n- `restore_project`: Restores a project.\n- `list_organizations`: Lists all organizations that the user is a member of.\n- `get_organization`: Gets details for an organization.\n- `get_cost`: Gets the cost of a new project or branch for an organization.\n- `confirm_cost`: Confirms the user's understanding of new project or branch costs. This is required to create a new project or branch.\n\n#### Knowledge Base\n\nEnabled by default. Use `docs` to target this group of tools with the [`--features`](#feature-groups) option.\n\n- `search_docs`: Searches the Supabase documentation for up-to-date information. LLMs can use this to find answers to questions or learn how to use specific features.\n\n#### Database\n\nEnabled by default. Use `database` to target this group of tools with the [`--features`](#feature-groups) option.\n\n- `list_tables`: Lists all tables within the specified schemas.\n- `list_extensions`: Lists all extensions in the database.\n- `list_migrations`: Lists all migrations in the database.\n- `apply_migration`: Applies a SQL migration to the database. SQL passed to this tool will be tracked within the database, so LLMs should use this for DDL operations (schema changes).\n- `execute_sql`: Executes raw SQL in the database. LLMs should use this for regular queries that don't change the schema.\n\n#### Debug\n\nEnabled by default. Use `debug` to target this group of tools with the [`--features`](#feature-groups) option.\n\n- `get_logs`: Gets logs for a Supabase project by service type (api, postgres, edge functions, auth, storage, realtime). LLMs can use this to help with debugging and monitoring service performance.\n- `get_advisors`: Gets a list of advisory notices for a Supabase project. LLMs can use this to check for security vulnerabilities or performance issues.\n\n#### Development\n\nEnabled by default. Use `development` to target this group of tools with the [`--features`](#feature-groups) option.\n\n- `get_project_url`: Gets the API URL for a project.\n- `get_anon_key`: Gets the anonymous API key for a project.\n- `generate_typescript_types`: Generates TypeScript types based on the database schema. LLMs can save this to a file and use it in their code.\n\n#### Edge Functions\n\nEnabled by default. Use `functions` to target this group of tools with the [`--features`](#feature-groups) option.\n\n- `list_edge_functions`: Lists all Edge Functions in a Supabase project.\n- `deploy_edge_function`: Deploys a new Edge Function to a Supabase project. LLMs can use this to deploy new functions or update existing ones.\n\n#### Branching (Experimental, requires a paid plan)\n\nEnabled by default. Use `branching` to target this group of tools with the [`--features`](#feature-groups) option.\n\n- `create_branch`: Creates a development branch with migrations from production branch.\n- `list_branches`: Lists all development branches.\n- `delete_branch`: Deletes a development branch.\n- `merge_branch`: Merges migrations and edge functions from a development branch to production.\n- `reset_branch`: Resets migrations of a development branch to a prior version.\n- `rebase_branch`: Rebases development branch on production to handle migration drift.\n\n#### Storage\n\nDisabled by default to reduce tool count. Use `storage` to target this group of tools with the [`--features`](#feature-groups) option.\n\n- `list_storage_buckets`: Lists all storage buckets in a Supabase project.\n- `get_storage_config`: Gets the storage config for a Supabase project.\n- `update_storage_config`: Updates the storage config for a Supabase project (requires a paid plan).\n\n## Other MCP servers\n\n### `@supabase/mcp-server-postgrest`\n\nThe PostgREST MCP server allows you to connect your own users to your app via REST API. See more details on its [project README](./packages/mcp-server-postgrest).\n\n## Resources\n\n- [**Model Context Protocol**](https://modelcontextprotocol.io/introduction): Learn more about MCP and its capabilities.\n- [**From development to production**](/docs/production.md): Learn how to safely promote changes to production environments.\n\n## For developers\n\nThis repo uses npm for package management, and the latest LTS version of Node.js.\n\nClone the repo and run:\n\n```\nnpm install --ignore-scripts\n```\n\n> [!NOTE]\n> On recent versions of MacOS, you may have trouble installing the `libpg-query` transient dependency without the `--ignore-scripts` flag.\n\n## License\n\nThis project is licensed under Apache 2.0. See the [LICENSE](./LICENSE) file for details.\n"
}