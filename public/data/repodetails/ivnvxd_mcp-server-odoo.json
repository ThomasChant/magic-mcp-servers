{
  "mcp_name": "ivnvxd/mcp-server-odoo",
  "mcp_description": "🐍 ☁️/🏠 - Connect AI assistants to Odoo ERP systems for business data access, record management, and workflow automation.",
  "mcp_id": "ivnvxd_mcp-server-odoo",
  "fetch_timestamp": "2025-06-23T05:03:53.564531Z",
  "github_url": "https://github.com/ivnvxd/mcp-server-odoo",
  "repository": {
    "name": "mcp-server-odoo",
    "full_name": "ivnvxd/mcp-server-odoo",
    "description": "A Model Context Protocol (MCP) server that enables AI assistants to securely interact with Odoo ERP systems through standardized resources and tools for data retrieval and manipulation.",
    "html_url": "https://github.com/ivnvxd/mcp-server-odoo",
    "created_at": "2025-03-22T20:45:03Z",
    "updated_at": "2025-06-19T22:27:48Z",
    "pushed_at": "2025-06-19T22:35:26Z",
    "size": 581,
    "stargazers_count": 8,
    "watchers_count": 8,
    "forks_count": 8,
    "open_issues_count": 7,
    "language": "Python",
    "license": "Mozilla Public License 2.0",
    "topics": [
      "ai",
      "erp",
      "llm",
      "mcp",
      "mcp-server",
      "model-context-protocol",
      "odoo"
    ],
    "default_branch": "main",
    "owner": {
      "login": "ivnvxd",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/97749666?v=4",
      "html_url": "https://github.com/ivnvxd"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 8,
    "subscribers_count": 2,
    "languages": {
      "Python": 661532,
      "Shell": 2529
    },
    "language_percentages": {
      "Python": 99.62,
      "Shell": 0.38
    },
    "pull_requests_count": 2,
    "contributors_count": 2,
    "latest_release": {
      "tag_name": "v0.2.0",
      "name": "v0.2.0",
      "published_at": "2025-06-19T22:35:27Z",
      "body": "Release v0.2.0\r\n\r\n## Added\r\n- **Write Operations**: Enabled full CRUD functionality with `create_record`, `update_record`, and `delete_record` tools (#5)\r\n\r\n## Changed\r\n- **Resource Simplification**: Removed query parameters from resource URIs due to FastMCP limitations - use tools for advanced queries (#4)\r\n\r\n## Fixed\r\n- **Domain Parameter Parsing**: Fixed `search_records` tool to accept both JSON strings and Python-style domain strings\r\n\r\nThis release completes the Odoo MCP Server implementation by enabling write operations. Users can now create, read, update, and delete Odoo records through natural language commands.",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.2.0",
        "commit_sha": "f628712a2f3429923c40c262511dd8f3213b894f"
      },
      {
        "name": "v0.1.2",
        "commit_sha": "e35b22c94a68cca10033fadc3ce2c3b67c717b66"
      },
      {
        "name": "v0.1.1",
        "commit_sha": "34afb295192054d259b0fff17a345199f9252a17"
      },
      {
        "name": "v0.1.0",
        "commit_sha": "2221c3117dd6de0fea96ed402b490601ed444f59"
      }
    ],
    "latest_version": "v0.2.0"
  },
  "readme": "# MCP Server for Odoo\n\n[![CI](https://github.com/ivnvxd/mcp-server-odoo/actions/workflows/ci.yml/badge.svg)](https://github.com/ivnvxd/mcp-server-odoo/actions/workflows/ci.yml)\n[![codecov](https://codecov.io/gh/ivnvxd/mcp-server-odoo/branch/main/graph/badge.svg)](https://codecov.io/gh/ivnvxd/mcp-server-odoo)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)\n[![Checked with mypy](https://www.mypy-lang.org/static/mypy_badge.svg)](https://mypy-lang.org/)\n[![Python 3.10+](https://img.shields.io/badge/python-3.10+-blue.svg)](https://www.python.org/downloads/)\n[![License: MPL 2.0](https://img.shields.io/badge/License-MPL_2.0-brightgreen.svg)](https://opensource.org/licenses/MPL-2.0)\n\nAn MCP server that enables AI assistants like Claude to interact with Odoo ERP systems. Access business data, search records, create new entries, update existing data, and manage your Odoo instance through natural language.\n\n## Features\n\n- 🔍 **Search and retrieve** any Odoo record (customers, products, invoices, etc.)\n- ✨ **Create new records** with field validation and permission checks\n- ✏️ **Update existing data** with smart field handling\n- 🗑️ **Delete records** respecting model-level permissions\n- 📊 **Browse multiple records** and get formatted summaries\n- 🔢 **Count records** matching specific criteria\n- 📋 **Inspect model fields** to understand data structure\n- 🔐 **Secure access** with API key or username/password authentication\n- 🎯 **Smart pagination** for large datasets\n- 💬 **LLM-optimized output** with hierarchical text formatting\n\n## Installation\n\n### Prerequisites\n\n- Python 3.10 or higher\n- Access to an Odoo instance (version 18.0)\n- The [Odoo MCP module](https://apps.odoo.com/apps/modules/18.0/mcp_server) installed on your Odoo server\n- An API key generated in Odoo (Settings > Users > API Keys)\n\n### Install UV First\n\nThe MCP server runs on your **local computer** (where Claude Desktop is installed), not on your Odoo server. You need to install UV on your local machine:\n\n<details>\n<summary>macOS/Linux</summary>\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n</details>\n\n<details>\n<summary>Windows</summary>\n\n```powershell\npowershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n</details>\n\nAfter installation, restart your terminal to ensure UV is in your PATH.\n\n### Installing via MCP Settings (Recommended)\n\nAdd this configuration to your MCP settings:\n\n<details>\n<summary>Claude Desktop</summary>\n\nAdd to `~/Library/Application Support/Claude/claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"odoo\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-odoo\"],\n      \"env\": {\n        \"ODOO_URL\": \"https://your-odoo-instance.com\",\n        \"ODOO_API_KEY\": \"your-api-key-here\",\n        \"ODOO_DB\": \"your-database-name\"\n      }\n    }\n  }\n}\n```\n</details>\n\n<details>\n<summary>Cursor</summary>\n\nAdd to `~/.cursor/mcp_settings.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"odoo\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-odoo\"],\n      \"env\": {\n        \"ODOO_URL\": \"https://your-odoo-instance.com\",\n        \"ODOO_API_KEY\": \"your-api-key-here\",\n        \"ODOO_DB\": \"your-database-name\"\n      }\n    }\n  }\n}\n```\n</details>\n\n<details>\n<summary>VS Code (with GitHub Copilot)</summary>\n\nAdd to your VS Code settings (`~/.vscode/mcp_settings.json` or workspace settings):\n\n```json\n{\n  \"github.copilot.chat.mcpServers\": {\n    \"odoo\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-odoo\"],\n      \"env\": {\n        \"ODOO_URL\": \"https://your-odoo-instance.com\",\n        \"ODOO_API_KEY\": \"your-api-key-here\",\n        \"ODOO_DB\": \"your-database-name\"\n      }\n    }\n  }\n}\n```\n</details>\n\n<details>\n<summary>Zed</summary>\n\nAdd to `~/.config/zed/settings.json`:\n\n```json\n{\n  \"context_servers\": {\n    \"odoo\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-odoo\"],\n      \"env\": {\n        \"ODOO_URL\": \"https://your-odoo-instance.com\",\n        \"ODOO_API_KEY\": \"your-api-key-here\",\n        \"ODOO_DB\": \"your-database-name\"\n      }\n    }\n  }\n}\n```\n</details>\n\n### Alternative Installation Methods\n\n<details>\n<summary>Using pip</summary>\n\n```bash\n# Install globally\npip install mcp-server-odoo\n\n# Or use pipx for isolated environment\npipx install mcp-server-odoo\n```\n\nThen use `mcp-server-odoo` as the command in your MCP configuration.\n</details>\n\n<details>\n<summary>From source</summary>\n\n```bash\ngit clone https://github.com/ivnvxd/mcp-server-odoo.git\ncd mcp-server-odoo\npip install -e .\n```\n\nThen use the full path to the package in your MCP configuration.\n</details>\n\n## Configuration\n\n### Environment Variables\n\nThe server requires the following environment variables:\n\n| Variable | Required | Description | Example |\n|----------|----------|-------------|---------|\n| `ODOO_URL` | Yes | Your Odoo instance URL | `https://mycompany.odoo.com` |\n| `ODOO_API_KEY` | Yes* | API key for authentication | `0ef5b399e9ee9c11b053dfb6eeba8de473c29fcd` |\n| `ODOO_USER` | Yes* | Username (if not using API key) | `admin` |\n| `ODOO_PASSWORD` | Yes* | Password (if not using API key) | `admin` |\n| `ODOO_DB` | No | Database name (auto-detected if not set) | `mycompany` |\n\n*Either `ODOO_API_KEY` or both `ODOO_USER` and `ODOO_PASSWORD` are required.\n\n**Notes:**\n- If database listing is restricted on your server, you must specify `ODOO_DB`\n- API key authentication is recommended for better security\n\n### Transport Options\n\nThe server supports multiple transport protocols for different use cases:\n\n#### 1. **stdio** (Default)\nStandard input/output transport - used by desktop AI applications like Claude Desktop.\n\n```bash\n# Default transport - no additional configuration needed\nuvx mcp-server-odoo\n```\n\n#### 2. **streamable-http**\nStandard HTTP transport for REST API-style access and remote connectivity.\n\n```bash\n# Run with HTTP transport\nuvx mcp-server-odoo --transport streamable-http --host 0.0.0.0 --port 8000\n\n# Or use environment variables\nexport ODOO_MCP_TRANSPORT=streamable-http\nexport ODOO_MCP_HOST=0.0.0.0\nexport ODOO_MCP_PORT=8000\nuvx mcp-server-odoo\n```\n\nThe HTTP endpoint will be available at: `http://localhost:8000/mcp/`\n\n> **Note**: SSE (Server-Sent Events) transport has been deprecated in MCP protocol version 2025-03-26. Use streamable-http transport instead for HTTP-based communication. Requires MCP library v1.9.4 or higher for proper session management.\n\n#### Transport Configuration\n\n| Variable/Flag | Description | Default |\n|--------------|-------------|---------|\n| `ODOO_MCP_TRANSPORT` / `--transport` | Transport type: stdio, streamable-http | `stdio` |\n| `ODOO_MCP_HOST` / `--host` | Host to bind for HTTP transports | `localhost` |\n| `ODOO_MCP_PORT` / `--port` | Port to bind for HTTP transports | `8000` |\n\n**Example: Running streamable-http transport for remote access**\n\n```json\n{\n  \"mcpServers\": {\n    \"odoo-remote\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-odoo\", \"--transport\", \"streamable-http\", \"--port\", \"8080\"],\n      \"env\": {\n        \"ODOO_URL\": \"https://your-odoo-instance.com\",\n        \"ODOO_API_KEY\": \"your-api-key-here\",\n        \"ODOO_DB\": \"your-database-name\"\n      }\n    }\n  }\n}\n```\n\n### Setting up Odoo\n\n1. **Install the MCP module**:\n   - Download the [mcp_server module](https://github.com/ivnvxd/mcp-server-odoo/tree/main/odoo-apps/mcp_server)\n   - Install it in your Odoo instance\n   - Navigate to Settings > MCP Server\n\n2. **Enable models for MCP access**:\n   - Go to Settings > MCP Server > Enabled Models\n   - Add models you want to access (e.g., res.partner, product.product)\n   - Configure permissions (read, write, create, delete) per model\n\n3. **Generate an API key**:\n   - Go to Settings > Users & Companies > Users\n   - Select your user\n   - Under the \"API Keys\" tab, create a new key\n   - Copy the key for your MCP configuration\n\n## Usage Examples\n\nOnce configured, you can ask Claude:\n\n**Search & Retrieve:**\n- \"Show me all customers from Spain\"\n- \"Find products with stock below 10 units\"\n- \"List today's sales orders over $1000\"\n- \"Search for unpaid invoices from last month\"\n- \"Count how many active employees we have\"\n- \"Show me the contact information for Microsoft\"\n\n**Create & Manage:**\n- \"Create a new customer contact for Acme Corporation\"\n- \"Add a new product called 'Premium Widget' with price $99.99\"\n- \"Create a calendar event for tomorrow at 2 PM\"\n- \"Update the phone number for customer John Doe to +1-555-0123\"\n- \"Change the status of order SO/2024/001 to confirmed\"\n- \"Delete the test contact we created earlier\"\n\n## Available Tools\n\n### `search_records`\nSearch for records in any Odoo model with filters.\n\n```json\n{\n  \"model\": \"res.partner\",\n  \"domain\": [[\"is_company\", \"=\", true], [\"country_id.code\", \"=\", \"ES\"]],\n  \"fields\": [\"name\", \"email\", \"phone\"],\n  \"limit\": 10\n}\n```\n\n**Field Selection Options:**\n- Omit `fields` or set to `null`: Returns smart selection of common fields\n- Specify field list: Returns only those specific fields\n- Use `[\"__all__\"]`: Returns all fields (use with caution)\n\n### `get_record`\nRetrieve a specific record by ID.\n\n```json\n{\n  \"model\": \"res.partner\",\n  \"record_id\": 42,\n  \"fields\": [\"name\", \"email\", \"street\", \"city\"]\n}\n```\n\n**Field Selection Options:**\n- Omit `fields` or set to `null`: Returns smart selection of common fields with metadata\n- Specify field list: Returns only those specific fields\n- Use `[\"__all__\"]`: Returns all fields without metadata\n\n### `list_models`\nList all models enabled for MCP access.\n\n```json\n{}\n```\n\n### `create_record`\nCreate a new record in Odoo.\n\n```json\n{\n  \"model\": \"res.partner\",\n  \"values\": {\n    \"name\": \"New Customer\",\n    \"email\": \"customer@example.com\",\n    \"is_company\": true\n  }\n}\n```\n\n### `update_record`\nUpdate an existing record.\n\n```json\n{\n  \"model\": \"res.partner\",\n  \"record_id\": 42,\n  \"values\": {\n    \"phone\": \"+1234567890\",\n    \"website\": \"https://example.com\"\n  }\n}\n```\n\n### `delete_record`\nDelete a record from Odoo.\n\n```json\n{\n  \"model\": \"res.partner\",\n  \"record_id\": 42\n}\n```\n\n## Resources\n\nThe server also provides direct access to Odoo data through resource URIs:\n\n- `odoo://res.partner/record/1` - Get partner with ID 1\n- `odoo://product.product/search?domain=[[\"qty_available\",\">\",0]]` - Search products in stock\n- `odoo://sale.order/browse?ids=1,2,3` - Browse multiple sales orders\n- `odoo://res.partner/count?domain=[[\"customer_rank\",\">\",0]]` - Count customers\n- `odoo://product.product/fields` - List available fields for products\n\n## Security\n\n- Always use HTTPS in production environments\n- Keep your API keys secure and rotate them regularly\n- Configure model access carefully - only enable necessary models\n- The MCP module respects Odoo's built-in access rights and record rules\n- Each API key is linked to a specific user with their permissions\n\n## Troubleshooting\n\n<details>\n<summary>Connection Issues</summary>\n\nIf you're getting connection errors:\n1. Verify your Odoo URL is correct and accessible\n2. Check that the MCP module is installed: visit `https://your-odoo.com/mcp/health`\n3. Ensure your firewall allows connections to Odoo\n</details>\n\n<details>\n<summary>Authentication Errors</summary>\n\nIf authentication fails:\n1. Verify your API key is active in Odoo\n2. Check that the user has appropriate permissions\n3. Try regenerating the API key\n4. For username/password auth, ensure 2FA is not enabled\n</details>\n\n<details>\n<summary>Model Access Errors</summary>\n\nIf you can't access certain models:\n1. Go to Settings > MCP Server > Enabled Models in Odoo\n2. Ensure the model is in the list and has appropriate permissions\n3. Check that your user has access to that model in Odoo's security settings\n</details>\n\n<details>\n<summary>\"spawn uvx ENOENT\" Error</summary>\n\nThis error means UV is not installed or not in your PATH:\n\n**Solution 1: Install UV** (see Installation section above)\n\n**Solution 2: macOS PATH Issue**\nClaude Desktop on macOS doesn't inherit your shell's PATH. Try:\n1. Quit Claude Desktop completely (Cmd+Q)\n2. Open Terminal\n3. Launch Claude from Terminal:\n   ```bash\n   open -a \"Claude\"\n   ```\n\n**Solution 3: Use Full Path**\nFind UV location and use full path:\n```bash\nwhich uvx\n# Example output: /Users/yourname/.local/bin/uvx\n```\n\nThen update your config:\n```json\n{\n  \"command\": \"/Users/yourname/.local/bin/uvx\",\n  \"args\": [\"mcp-server-odoo\"]\n}\n```\n</details>\n\n<details>\n<summary>Database Configuration Issues</summary>\n\nIf you see \"Access Denied\" when listing databases:\n- This is normal - some Odoo instances restrict database listing for security\n- Make sure to specify `ODOO_DB` in your configuration\n- The server will use your specified database without validation\n\nExample configuration:\n```json\n{\n  \"env\": {\n    \"ODOO_URL\": \"https://your-odoo.com\",\n    \"ODOO_API_KEY\": \"your-key\",\n    \"ODOO_DB\": \"your-database-name\"\n  }\n}\n```\nNote: `ODOO_DB` is required if database listing is restricted on your server.\n</details>\n\n<details>\n<summary>Debug Mode</summary>\n\nEnable debug logging for more information:\n\n```json\n{\n  \"env\": {\n    \"ODOO_URL\": \"https://your-odoo.com\",\n    \"ODOO_API_KEY\": \"your-key\",\n    \"ODOO_MCP_LOG_LEVEL\": \"DEBUG\"\n  }\n}\n```\n</details>\n\n## Development\n\n<details>\n<summary>Running from source</summary>\n\n```bash\n# Clone the repository\ngit clone https://github.com/ivnvxd/mcp-server-odoo.git\ncd mcp-server-odoo\n\n# Install in development mode\npip install -e \".[dev]\"\n\n# Run tests\npytest --cov\n\n# Run the server\npython -m mcp_server_odoo\n```\n</details>\n\n<details>\n<summary>Testing with MCP Inspector</summary>\n\n```bash\n# Using uvx\nnpx @modelcontextprotocol/inspector uvx mcp-server-odoo\n\n# Using local installation\nnpx @modelcontextprotocol/inspector python -m mcp_server_odoo\n```\n</details>\n\n## Testing\n\n### Transport Tests\n\nYou can test both stdio and streamable-http transports to ensure they're working correctly:\n\n```bash\n# Run comprehensive transport tests\npython tests/run_transport_tests.py\n```\n\nThis will test:\n- **stdio transport**: Basic initialization and communication\n- **streamable-http transport**: HTTP endpoint, session management, and tool calls\n\n### Unit Tests\n\nFor complete testing including unit and integration tests:\n\n```bash\n# Run all tests\nuv run pytest --cov\n\n# Run specific test categories\nuv run pytest tests/test_tools.py -v\nuv run pytest tests/test_server_foundation.py -v\n```\n\n## License\n\nThis project is licensed under the Mozilla Public License 2.0 (MPL-2.0) - see the [LICENSE](LICENSE) file for details.\n\n## Contributing\n\nContributions are very welcome! Please see the [CONTRIBUTING](CONTRIBUTING.md) guide for details.\n\n## Support\n\nThank you for using this project! If you find it helpful and would like to support my work, kindly consider buying me a coffee. Your support is greatly appreciated!\n\n<a href=\"https://www.buymeacoffee.com/ivnvxd\" target=\"_blank\"><img src=\"https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png\" alt=\"Buy Me A Coffee\" style=\"height: 60px !important;width: 217px !important;\" ></a>\n\nAnd do not forget to give the project a star if you like it! :star:"
}