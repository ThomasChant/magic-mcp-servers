{
  "mcp_name": "Paperless-MCP",
  "mcp_description": "An MCP server for interacting with a Paperless-NGX API server. This server provides tools for managing documents, tags, correspondents, and document types in your Paperless-NGX instance.",
  "mcp_id": "baruchiro_paperless-mcp",
  "fetch_timestamp": "2025-06-23T07:26:54.845510Z",
  "github_url": "https://github.com/baruchiro/paperless-mcp",
  "repository": {
    "name": "paperless-mcp",
    "full_name": "baruchiro/paperless-mcp",
    "description": "An MCP (Model Context Protocol) server for interacting with a Paperless-NGX API server. This server provides tools for managing documents, tags, correspondents, and document types in your Paperless-NGX instance.",
    "html_url": "https://github.com/baruchiro/paperless-mcp",
    "created_at": "2025-05-12T05:22:52Z",
    "updated_at": "2025-06-13T11:09:28Z",
    "pushed_at": "2025-06-05T05:46:08Z",
    "size": 92,
    "stargazers_count": 12,
    "watchers_count": 12,
    "forks_count": 0,
    "open_issues_count": 3,
    "language": "TypeScript",
    "license": "ISC License",
    "topics": [
      "ai",
      "document-management",
      "mcp",
      "mcp-server",
      "paperless-ngx"
    ],
    "default_branch": "main",
    "owner": {
      "login": "baruchiro",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/17686879?v=4",
      "html_url": "https://github.com/baruchiro"
    },
    "has_issues": true,
    "has_projects": false,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 13,
    "subscribers_count": 0,
    "languages": {
      "TypeScript": 33000,
      "JavaScript": 4664,
      "Dockerfile": 478
    },
    "language_percentages": {
      "TypeScript": 86.52,
      "JavaScript": 12.23,
      "Dockerfile": 1.25
    },
    "pull_requests_count": 9,
    "contributors_count": 5,
    "package_json_version": "0.0.2"
  },
  "readme": "# Paperless-NGX MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@baruchiro/paperless-mcp)](https://smithery.ai/server/@baruchiro/paperless-mcp)\n\nAn MCP (Model Context Protocol) server for interacting with a Paperless-NGX API server. This server provides tools for managing documents, tags, correspondents, and document types in your Paperless-NGX instance.\n\n## Quick Start\n\n[![Install MCP Server](https://cursor.com/deeplink/mcp-install-light.svg)](https://cursor.com/install-mcp?name=paperless&config=eyJjb21tYW5kIjoibnB4IC15IEBiYXJ1Y2hpcm8vcGFwZXJsZXNzLW1jcEBsYXRlc3QiLCJlbnYiOnsiUEFQRVJMRVNTX1VSTCI6Imh0dHA6Ly95b3VyLXBhcGVybGVzcy1pbnN0YW5jZTo4MDAwIiwiUEFQRVJMRVNTX0FQSV9LRVkiOiJ5b3VyLWFwaS10b2tlbiJ9fQ%3D%3D)\n\n### Installing via Smithery\n\nTo install Paperless NGX MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@baruchiro/paperless-mcp):\n\n```bash\nnpx -y @smithery/cli install @baruchiro/paperless-mcp --client claude\n```\n\n### Manual Installation\n\nAdd these to your MCP config file:\n\n// STDIO mode (recommended for local or CLI use)\n```json\n\"paperless\": {\n  \"command\": \"npx\",\n  \"args\": [\n    \"-y\",\n    \"@baruchiro/paperless-mcp@latest\",\n  ],\n  \"env\": {\n    \"PAPERLESS_URL\": \"http://your-paperless-instance:8000\",\n    \"PAPERLESS_API_KEY\": \"your-api-token\"\n  }\n}\n```\n\n// HTTP mode (recommended for Docker or remote use)\n```json\n\"paperless\": {\n  \"command\": \"docker\",\n  \"args\": [\n    \"run\",\n    \"-i\",\n    \"--rm\",\n    \"ghcr.io/baruchiro/paperless-mcp:latest\",\n  ],\n  \"env\": {\n    \"PAPERLESS_URL\": \"http://your-paperless-instance:8000\",\n    \"PAPERLESS_API_KEY\": \"your-api-token\"\n  }\n}\n```\n\n3. Get your API token:\n   1. Log into your Paperless-NGX instance\n   2. Click your username in the top right\n   3. Select \"My Profile\"\n   4. Click the circular arrow button to generate a new token\n\n4. Replace the placeholders in your MCP config:\n   - `http://your-paperless-instance:8000` with your Paperless-NGX URL\n   - `your-api-token` with the token you just generated\n\nThat's it! Now you can ask Claude to help you manage your Paperless-NGX documents.\n\n### Example Usage\n\nHere are some things you can ask Claude to do:\n\n- \"Show me all documents tagged as 'Invoice'\"\n- \"Search for documents containing 'tax return'\"\n- \"Create a new tag called 'Receipts' with color #FF0000\"\n- \"Download document #123\"\n- \"List all correspondents\"\n- \"Create a new document type called 'Bank Statement'\"\n\n## Available Tools\n\n### Document Operations\n\n#### list_documents\nGet a paginated list of all documents.\n\nParameters:\n- page (optional): Page number\n- page_size (optional): Number of documents per page\n\n```typescript\nlist_documents({\n  page: 1,\n  page_size: 25\n})\n```\n\n#### get_document\nGet a specific document by ID.\n\nParameters:\n- id: Document ID\n\n```typescript\nget_document({\n  id: 123\n})\n```\n\n#### search_documents\nFull-text search across documents.\n\nParameters:\n- query: Search query string\n\n```typescript\nsearch_documents({\n  query: \"invoice 2024\"\n})\n```\n\n#### download_document\nDownload a document file by ID.\n\nParameters:\n- id: Document ID\n- original (optional): If true, downloads original file instead of archived version\n\n```typescript\ndownload_document({\n  id: 123,\n  original: false\n})\n```\n\n#### bulk_edit_documents\nPerform bulk operations on multiple documents.\n\nParameters:\n- documents: Array of document IDs\n- method: One of:\n  - set_correspondent: Set correspondent for documents\n  - set_document_type: Set document type for documents\n  - set_storage_path: Set storage path for documents\n  - add_tag: Add a tag to documents\n  - remove_tag: Remove a tag from documents\n  - modify_tags: Add and/or remove multiple tags\n  - delete: Delete documents\n  - reprocess: Reprocess documents\n  - set_permissions: Set document permissions\n  - merge: Merge multiple documents\n  - split: Split a document into multiple documents\n  - rotate: Rotate document pages\n  - delete_pages: Delete specific pages from a document\n- Additional parameters based on method:\n  - correspondent: ID for set_correspondent\n  - document_type: ID for set_document_type\n  - storage_path: ID for set_storage_path\n  - tag: ID for add_tag/remove_tag\n  - add_tags: Array of tag IDs for modify_tags\n  - remove_tags: Array of tag IDs for modify_tags\n  - permissions: Object for set_permissions with owner, permissions, merge flag\n  - metadata_document_id: ID for merge to specify metadata source\n  - delete_originals: Boolean for merge/split\n  - pages: String for split \"[1,2-3,4,5-7]\" or delete_pages \"[2,3,4]\"\n  - degrees: Number for rotate (90, 180, or 270)\n\nExamples:\n```typescript\n// Add a tag to multiple documents\nbulk_edit_documents({\n  documents: [1, 2, 3],\n  method: \"add_tag\",\n  tag: 5\n})\n\n// Set correspondent and document type\nbulk_edit_documents({\n  documents: [4, 5],\n  method: \"set_correspondent\",\n  correspondent: 2\n})\n\n// Merge documents\nbulk_edit_documents({\n  documents: [6, 7, 8],\n  method: \"merge\",\n  metadata_document_id: 6,\n  delete_originals: true\n})\n\n// Split document into parts\nbulk_edit_documents({\n  documents: [9],\n  method: \"split\",\n  pages: \"[1-2,3-4,5]\"\n})\n\n// Modify multiple tags at once\nbulk_edit_documents({\n  documents: [10, 11],\n  method: \"modify_tags\",\n  add_tags: [1, 2],\n  remove_tags: [3, 4]\n})\n```\n\n#### post_document\nUpload a new document to Paperless-NGX.\n\nParameters:\n- file: Base64 encoded file content\n- filename: Name of the file\n- title (optional): Title for the document\n- created (optional): DateTime when the document was created (e.g. \"2024-01-19\" or \"2024-01-19 06:15:00+02:00\")\n- correspondent (optional): ID of a correspondent\n- document_type (optional): ID of a document type\n- storage_path (optional): ID of a storage path\n- tags (optional): Array of tag IDs\n- archive_serial_number (optional): Archive serial number\n- custom_fields (optional): Array of custom field IDs\n\n```typescript\npost_document({\n  file: \"base64_encoded_content\",\n  filename: \"invoice.pdf\",\n  title: \"January Invoice\",\n  created: \"2024-01-19\",\n  correspondent: 1,\n  document_type: 2,\n  tags: [1, 3],\n  archive_serial_number: \"2024-001\"\n})\n```\n\n### Tag Operations\n\n#### list_tags\nGet all tags.\n\n```typescript\nlist_tags()\n```\n\n#### create_tag\nCreate a new tag.\n\nParameters:\n- name: Tag name\n- color (optional): Hex color code (e.g. \"#ff0000\")\n- match (optional): Text pattern to match\n- matching_algorithm (optional): One of \"any\", \"all\", \"exact\", \"regular expression\", \"fuzzy\"\n\n```typescript\ncreate_tag({\n  name: \"Invoice\",\n  color: \"#ff0000\",\n  match: \"invoice\",\n  matching_algorithm: \"fuzzy\"\n})\n```\n\n### Correspondent Operations\n\n#### list_correspondents\nGet all correspondents.\n\n```typescript\nlist_correspondents()\n```\n\n#### create_correspondent\nCreate a new correspondent.\n\nParameters:\n- name: Correspondent name\n- match (optional): Text pattern to match\n- matching_algorithm (optional): One of \"any\", \"all\", \"exact\", \"regular expression\", \"fuzzy\"\n\n```typescript\ncreate_correspondent({\n  name: \"ACME Corp\",\n  match: \"ACME\",\n  matching_algorithm: \"fuzzy\"\n})\n```\n\n### Document Type Operations\n\n#### list_document_types\nGet all document types.\n\n```typescript\nlist_document_types()\n```\n\n#### create_document_type\nCreate a new document type.\n\nParameters:\n- name: Document type name\n- match (optional): Text pattern to match\n- matching_algorithm (optional): One of \"any\", \"all\", \"exact\", \"regular expression\", \"fuzzy\"\n\n```typescript\ncreate_document_type({\n  name: \"Invoice\",\n  match: \"invoice total amount due\",\n  matching_algorithm: \"any\"\n})\n```\n\n## Error Handling\n\nThe server will show clear error messages if:\n- The Paperless-NGX URL or API token is incorrect\n- The Paperless-NGX server is unreachable\n- The requested operation fails\n- The provided parameters are invalid\n\n## Development\n\nWant to contribute or modify the server? Here's what you need to know:\n\n1. Clone the repository\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Make your changes to server.js\n4. Test locally:\n```bash\nnode server.js http://localhost:8000 your-test-token\n```\n\nThe server is built with:\n- [litemcp](https://github.com/wong2/litemcp): A TypeScript framework for building MCP servers\n- [zod](https://github.com/colinhacks/zod): TypeScript-first schema validation\n\n## API Documentation\n\nThis MCP server implements endpoints from the Paperless-NGX REST API. For more details about the underlying API, see the [official documentation](https://docs.paperless-ngx.com/api/).\n\n## Running the MCP Server\n\nThe MCP server can be run in two modes:\n\n### 1. stdio (default)\n\nThis is the default mode. The server communicates over stdio, suitable for CLI and direct integrations.\n\n```\nnpm run start -- <baseUrl> <token>\n```\n\n### 2. HTTP (Streamable HTTP Transport)\n\nTo run the server as an HTTP service, use the `--http` flag. You can also specify the port with `--port` (default: 3000). This mode requires [Express](https://expressjs.com/) to be installed (it is included as a dependency).\n\n```\nnpm run start -- <baseUrl> <token> --http --port 3000\n```\n\n- The MCP API will be available at `POST /mcp` on the specified port.\n- Each request is handled statelessly, following the [StreamableHTTPServerTransport](https://github.com/modelcontextprotocol/typescript-sdk) pattern.\n- GET and DELETE requests to `/mcp` will return 405 Method Not Allowed.\n\n# Credits\n\nThis project is a fork of [nloui/paperless-mcp](https://github.com/nloui/paperless-mcp). Many thanks to the original author for their work. Contributions and improvements may be returned upstream.\n"
}