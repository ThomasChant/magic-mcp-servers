{
  "mcp_name": "SLineroDev/github-releases-mcp",
  "mcp_description": "Manage and analyze GitHub repository releases with detailed comparisons and rich formatting.",
  "mcp_id": "SLineroDev_github-releases-mcp",
  "fetch_timestamp": "2025-06-23T08:29:42.799425Z",
  "github_url": "https://github.com/SLineroDev/github-releases-mcp",
  "repository": {
    "name": "github-releases-mcp",
    "full_name": "SLineroDev/github-releases-mcp",
    "description": "A powerful Model Context Protocol (MCP) toolkit for GitHub releases management. This server provides comprehensive tools for accessing, comparing, and analyzing GitHub repository releases with rich formatting and detailed information.",
    "html_url": "https://github.com/SLineroDev/github-releases-mcp",
    "created_at": "2025-04-26T12:34:00Z",
    "updated_at": "2025-05-05T04:44:32Z",
    "pushed_at": "2025-04-26T17:12:14Z",
    "size": 44,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "SLineroDev",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/44357391?v=4",
      "html_url": "https://github.com/SLineroDev"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 10638,
      "TypeScript": 6761
    },
    "language_percentages": {
      "JavaScript": 61.14,
      "TypeScript": 38.86
    },
    "pull_requests_count": 1,
    "contributors_count": 1,
    "package_json_version": "0.2.0"
  },
  "readme": "# GitHub Releases MCP Server\n\nA powerful Model Context Protocol (MCP) toolkit for GitHub releases management. This server provides comprehensive tools for accessing, comparing, and analyzing GitHub repository releases with rich formatting and detailed information.\n\n## Features\n\n- üîç **Detailed Release Information**: Get comprehensive details about specific releases\n- üìä **Version Comparison**: Compare changes between any two versions\n- üìã **Release Listing**: Get formatted lists of releases with filtering options\n- üè∑Ô∏è **Semantic Version Support**: Handles various version formats (v1.0.0, @1.0.0, 1.0.0)\n- üéØ **Pre-release Filtering**: Option to include or exclude pre-releases\n- üìù **Rich Formatting**: Emoji-enhanced output for better readability\n- üîÑ **Pagination Support**: Handles repositories with many releases\n- üîí **Authentication**: Optional GitHub token support for private repositories and extended rate limit\n\n## Configuration\n\nThe server accepts the following optional environment variables:\n\n- `GITHUB_PERSONAL_ACCESS_TOKEN`: GitHub Personal Access Token (optional). If provided, it will be used to authenticate API requests, allowing for higher rate limits and access to private repositories.\n\n## Quick Start\n\nYou can run this MCP server using npx:\n\n```bash\n# Using environment variables\nGITHUB_PERSONAL_ACCESS_TOKEN=your_token npx @slinerodev/github-releases-mcp\n\n# Or using a .env file\necho \"GITHUB_PERSONAL_ACCESS_TOKEN=your_token\" > .env\nnpx @slinerodev/github-releases-mcp\n```\n\n## Client Configuration\n\nThe server can be used with various MCP clients. Add the following configuration to your client's config file:\n\n- Cursor: `~/.cursor/mcp.json`\n- VS Code: `.vscode/settings.json` (use `mcp.servers` instead of `mcpServers`)\n- Claude Desktop: `claude_desktop_config.json`\n- Windsurf: `windsurf_config.json`\n\n### Using Published Version\n\n```json\n{\n  \"mcpServers\": {\n    \"github-releases\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@slinerodev/github-releases-mcp\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"your_token_here\"\n      }\n    }\n  }\n}\n```\n\n### Using Local Development Version\n\n```json\n{\n  \"mcpServers\": {\n    \"github-releases\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"tsx\",\n        \"${workspaceRoot}/main.ts\"\n      ]\n    }\n  }\n}\n```\n\nNote:\n\n- For VS Code, replace `mcpServers` with `mcp.servers` in the configuration.\n- Replace `your_token_here` with your GitHub Personal Access Token if you want to access private repositories or need higher rate limits.\n\n## Available Tools\n\nThe server provides three specialized tools for working with GitHub releases:\n\n### 1. github_release_info\n\nGet detailed information about a specific release version.\n\n```typescript\nconst result = await mcp.invoke(\"github_release_info\", {\n  owner: \"owner-name\",\n  repo: \"repo-name\",\n  version: \"1.0.0\" // Supports v1.0.0, @1.0.0, 1.0.0\n});\n```\n\nPerfect for:\n\n- Understanding what changed in a specific version\n- Documentation purposes\n- Release note retrieval\n\n### 2. github_releases_compare\n\nCompare changes between two versions.\n\n```typescript\nconst result = await mcp.invoke(\"github_releases_compare\", {\n  owner: \"owner-name\",\n  repo: \"repo-name\",\n  fromVersion: \"1.0.0\",\n  toVersion: \"2.0.0\"\n});\n```\n\nPerfect for:\n\n- Generating changelogs\n- Understanding feature evolution\n- Migration guides\n- Breaking change analysis\n\n### 3. github_releases_list\n\nList all releases with filtering options.\n\n```typescript\nconst result = await mcp.invoke(\"github_releases_list\", {\n  owner: \"owner-name\",\n  repo: \"repo-name\",\n  limit: 10, // Optional: limit number of releases\n  includePreReleases: false // Optional: include pre-releases\n});\n```\n\nPerfect for:\n\n- Project release history overview\n- Finding latest versions\n- Release frequency monitoring\n- Pre-release tracking\n\n### Example Response Format\n\nAll tools return responses in a consistent, emoji-enhanced format:\n\n```\nüîñ v1.0.0 (First stable release)\nüóìÔ∏è 2024-03-15T10:30:00Z\nüìù This is the release description...\n\n---\n\nüîñ v0.9.0 (Beta) (Pre-release)\nüóìÔ∏è 2024-03-01T08:15:00Z\nüìù Beta version with new features...\n```\n\n## Error Handling\n\nThe tools handle various error cases gracefully:\n\n- Invalid repository names\n- Non-existent versions\n- Invalid version formats\n- API rate limits\n- Network issues\n- Authentication errors\n\nEach error returns a clear message explaining what went wrong.\n\n## Development\n\n1. Install dependencies:\n\n    ```bash\n    pnpm install\n    ```\n\n2. Run the server:\n\n    ```bash\n    pnpm start\n    ```\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nISC\n\n## Author\n\nSergio Linero\n"
}