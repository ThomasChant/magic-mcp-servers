{
  "mcp_name": "Deniscartin/mcp-cli",
  "mcp_description": "A comprehensive toolkit for interacting with Model Context Protocol servers, offering a GUI, CLI, and API for managing server configurations and executing queries.",
  "mcp_id": "Deniscartin_mcp-cli",
  "fetch_timestamp": "2025-06-23T02:35:10.806545Z",
  "github_url": "https://github.com/Deniscartin/mcp-cli",
  "repository": {
    "name": "mcp-cli",
    "full_name": "Deniscartin/mcp-cli",
    "description": null,
    "html_url": "https://github.com/Deniscartin/mcp-cli",
    "created_at": "2025-04-08T23:06:17Z",
    "updated_at": "2025-05-31T03:43:17Z",
    "pushed_at": "2025-04-09T00:09:45Z",
    "size": 67,
    "stargazers_count": 17,
    "watchers_count": 17,
    "forks_count": 2,
    "open_issues_count": 1,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "Deniscartin",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/100749943?v=4",
      "html_url": "https://github.com/Deniscartin"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 2,
    "subscribers_count": 1,
    "languages": {
      "Python": 56481,
      "TypeScript": 48826,
      "CSS": 488,
      "JavaScript": 474
    },
    "language_percentages": {
      "Python": 53.15,
      "TypeScript": 45.95,
      "CSS": 0.46,
      "JavaScript": 0.45
    },
    "pull_requests_count": 1,
    "contributors_count": 1
  },
  "readme": "# MCP CLI, GUI & API - Model Context Protocol Client\n\nA comprehensive toolkit for interacting with Model Context Protocol (MCP) servers. This project provides both a graphical user interface and command-line tools for managing MCP servers, running queries against them using OpenAI models, and discovering available tools.\n\n## What is Model Context Protocol?\n\nThe Model Context Protocol (MCP) is an open standard for exposing tools and capabilities to large language models (LLMs). It enables LLMs to access external tools like web browsers, databases, and APIs in a standardized way. This project provides a client implementation that makes it easy to:\n\n- Connect to MCP-compatible servers\n- Manage multiple server configurations\n- Run natural language queries that leverage MCP tool capabilities\n- Explore available tools and their functionality\n\n## Project Components\n\nThis project consists of three main components:\n\n1. **Command-Line Interface (CLI)**: For managing servers and running queries in a terminal\n2. **Graphical User Interface (GUI)**: A PyQt5-based desktop application for visual interaction\n3. **API Server**: A RESTful API that exposes MCP CLI functionality via HTTP, enabling integration with web applications and other services\n\n## Directory Structure\n\n```\nmcp-cli-project/\n├── mcp_cli/                 # Core Python package\n│   ├── api/                 # RESTful API server implementation\n│   │   ├── server.py        # Flask-based API server\n│   │   └── README.md        # API documentation\n│   ├── gui/                 # GUI implementation using PyQt5\n│   ├── core.py              # Core functionality shared by CLI, implementation\n├── mcpgui/                  # Web-based GUI (Next.js frontend)\n│   ├── src/                 # Source code for the web interface\n│   └── public/              # Static assets\n├── bin/                     # Executable scripts\n│   ├── mcp_gui.py           # Script to start the GUI\n│   └── mcp_cli.py           # Script to run CLI commands\n├── config/                  # Configuration files\n│   └── config.json          # Server configurations\n├── docs/                    # Documentation\n└── setup.py                 # Package installation configuration\n```\n\n## Features\n\n### Core Features\n\n- **Server Management**: Add, remove, list, and update MCP server configurations\n- **Query Execution**: Run natural language queries against MCP servers\n- **Tool Discovery**: View available tools and their capabilities\n- **Configuration Import/Export**: Share configurations between installations\n\n### GUI Features\n\n- **User-friendly Interface**: Intuitive desktop application for managing MCP servers\n- **Query History**: View and reuse previous queries\n- **Real-time Output**: See query results as they arrive\n- **Tool Explorer**: Visual interface to browse available tools\n\n### API Features\n\n- **RESTful Interface**: HTTP endpoints for all MCP CLI functionality\n- **JSON-based**: Consistent request/response formats\n- **Cross-Platform**: Accessible from any programming language\n- **Async Operations**: Handles long-running queries efficiently\n\n## Installation\n\n### Prerequisites\n\n- Python 3.8+\n- pip\n- PyQt5 (for the GUI)\n- An OpenAI API key\n\n### Installation Steps\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/your-org/mcp-cli-project.git\n   cd mcp-cli-project\n   ```\n\n2. Install the package:\n   ```bash\n   pip install -e .\n   ```\n\n3. Create a `.env` file in your working directory with your OpenAI API key:\n   ```\n   OPENAI_API_KEY=your_api_key_here\n   ```\n\n## Usage\n\n### GUI Application\n\nStart the graphical user interface:\n\n```bash\n# Using the installed package\nmcp-gui\n\n# Using the Python module\npython -m mcp_cli\n\n# Using the script directly\npython bin/mcp_gui.py\n```\n\n### Command Line Interface\n\n```bash\n# List all configured MCP servers\nmcp list\n\n# Add a new MCP server\nmcp add <name> <command> [args...] [--env KEY=VALUE...]\n\n# Remove an MCP server\nmcp remove <name>\n\n# Get detailed information about a server\nmcp info <server>\n\n# List all tools available from a server\nmcp tools <server>\n\n# Run a query against an MCP server\nmcp run <server> \"<query>\"\n\n# Export configuration to a file\nmcp export <filepath>\n\n# Import configuration from a file\nmcp import <filepath>\n```\n\n### API Server\n\nStart the RESTful API server:\n\n```bash\n# Using the installed package\nmcp-server\n\n# With custom host and port\nmcp-server --host 127.0.0.1 --port 8080\n\n# In debug mode\nmcp-server --debug\n```\n\n## Common Use Cases\n\n### Web Browsing with Playwright\n\n```bash\n# Add the Playwright server\nmcp add playwright npx @playwright/mcp@latest --env DISPLAY=:1\n\n# Run a web search query\nmcp run playwright \"Find information about climate change solutions\"\n```\n\n### Accommodation Search with Airbnb\n\n```bash\n# Add the Airbnb server\nmcp add airbnb npx -y @openbnb/mcp-server-airbnb --ignore-robots-txt\n\n# Search for accommodations\nmcp run airbnb \"Find a two-bedroom apartment in Paris for a week in July\"\n```\n\n### Local File Access\n\n```bash\n# Add the Filesystem server\nmcp add filesystem npx -y @modelcontextprotocol/server-filesystem /path/to/directory\n\n# Work with local files\nmcp run filesystem \"List all Python files and summarize their content\"\n```\n\n## Configuration\n\nThe application stores its configuration in `config/config.json` in the project directory. This file contains all your MCP server configurations and can be exported or imported.\n\nA sample configuration looks like:\n\n```json\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\"@playwright/mcp@latest\"],\n      \"env\": {\"DISPLAY\": \":1\"}\n    },\n    \"airbnb\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@openbnb/mcp-server-airbnb\", \"--ignore-robots-txt\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\n## API Documentation\n\nFor detailed API documentation, see:\n- [API Reference](mcp_cli/api/README.md): Complete endpoint reference\n- [API Quickstart](mcp_cli/api/QUICKSTART.md): Getting started with the API\n- [Technical Documentation](mcp_cli/api/TECHNICAL_DOCS.md): Implementation details\n\n## Extending\n\nYou can add any MCP-compatible server to this application. The Model Context Protocol is designed to be standardized, so any server following the protocol can be added and used through this interface.\n\nTo create your own MCP server, refer to the [Model Context Protocol documentation](https://github.com/modelcontextprotocol/docs).\n\n## Troubleshooting\n\n- **Error connecting to server**: Make sure the MCP server is installed and available. For NPM-based servers, try installing them globally first.\n- **API key errors**: Ensure your OpenAI API key is set correctly in the `.env` file or as an environment variable.\n- **Tool not found**: Some tools might require specific server configurations or additional setup. Check the server documentation.\n- **GUI not starting**: Make sure PyQt5 is installed correctly: `pip install PyQt5`.\n\n## Development\n\n### Setting Up Development Environment\n\n1. Clone the repository\n2. Install development dependencies:\n   ```bash\n   pip install -e \".[dev]\"\n   ```\n3. Install pre-commit hooks:\n   ```bash\n   pre-commit install\n   ```\n\n### Running Tests\n\n```bash\npytest\n```\n\n## Related Projects\n\n- [MCP-Use](https://github.com/pietrozullo/mcp-use): The library used by this application\n- [Model Context Protocol](https://github.com/modelcontextprotocol/docs): Official MCP documentation\n- [MCP Servers](https://github.com/modelcontextprotocol/servers): Collection of official MCP servers\n\n## License MIT\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request. "
}