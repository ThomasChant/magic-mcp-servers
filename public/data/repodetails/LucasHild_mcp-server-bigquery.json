{
  "mcp_name": "BigQuery",
  "mcp_description": "üêç ‚òÅÔ∏è - BigQuery database integration with schema inspection and query capabilities",
  "mcp_id": "LucasHild_mcp-server-bigquery",
  "fetch_timestamp": "2025-06-23T01:38:05.250617Z",
  "github_url": "https://github.com/LucasHild/mcp-server-bigquery",
  "repository": {
    "name": "mcp-server-bigquery",
    "full_name": "LucasHild/mcp-server-bigquery",
    "description": "A Model Context Protocol server that provides access to BigQuery",
    "html_url": "https://github.com/LucasHild/mcp-server-bigquery",
    "created_at": "2024-12-03T18:09:19Z",
    "updated_at": "2025-06-21T16:20:29Z",
    "pushed_at": "2025-05-30T06:31:33Z",
    "size": 58,
    "stargazers_count": 100,
    "watchers_count": 100,
    "forks_count": 26,
    "open_issues_count": 3,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "bigquery",
      "mcp",
      "mcp-server"
    ],
    "default_branch": "main",
    "owner": {
      "login": "LucasHild",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/20486366?v=4",
      "html_url": "https://github.com/LucasHild"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 26,
    "subscribers_count": 2,
    "languages": {
      "Python": 8941,
      "Dockerfile": 1178
    },
    "language_percentages": {
      "Python": 88.36,
      "Dockerfile": 11.64
    },
    "pull_requests_count": 10,
    "contributors_count": 4,
    "latest_release": {
      "tag_name": "v0.3.1",
      "name": "v0.3.1",
      "published_at": "2025-05-30T06:31:33Z",
      "body": "## What's Changed\r\n* Cross Project Schema Support by @LukeLalor in https://github.com/LucasHild/mcp-server-bigquery/pull/17\r\n\r\n**Full Changelog**: https://github.com/LucasHild/mcp-server-bigquery/commits/v0.3.1",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.3.1",
        "commit_sha": "d8c3ad9c5d558d3cfe6e4abc907d97ae1c5345d7"
      }
    ],
    "latest_version": "v0.3.1"
  },
  "readme": "# BigQuery MCP server\n\n[![smithery badge](https://smithery.ai/badge/mcp-server-bigquery)](https://smithery.ai/server/mcp-server-bigquery)\n\nA Model Context Protocol server that provides access to BigQuery. This server enables LLMs to inspect database schemas and execute queries.\n\n## Components\n\n### Tools\n\nThe server implements one tool:\n\n- `execute-query`: Executes a SQL query using BigQuery dialect\n- `list-tables`: Lists all tables in the BigQuery database\n- `describe-table`: Describes the schema of a specific table\n\n## Configuration\n\nThe server can be configured either with command line arguments or environment variables.\n\n| Argument     | Environment Variable | Required | Description                                                                                                                                                                                                                                                                                                                                                    |\n| ------------ | -------------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `--project`  | `BIGQUERY_PROJECT`   | Yes      | The GCP project ID.                                                                                                                                                                                                                                                                                                                                            |\n| `--location` | `BIGQUERY_LOCATION`  | Yes      | The GCP location (e.g. `europe-west9`).                                                                                                                                                                                                                                                                                                                        |\n| `--dataset`  | `BIGQUERY_DATASETS`  | No       | Only take specific BigQuery datasets into consideration. Several datasets can be specified by repeating the argument (e.g. `--dataset my_dataset_1 --dataset my_dataset_2`) or by joining them with a comma in the environment variable (e.g. `BIGQUERY_DATASETS=my_dataset_1,my_dataset_2`). If not provided, all datasets in the project will be considered. |\n| `--key-file` | `BIGQUERY_KEY_FILE`  | No       | Path to a service account key file for BigQuery. If not provided, the server will use the default credentials.                                                                                                                                                                                                                                                 |\n\n## Quickstart\n\n### Install\n\n#### Installing via Smithery\n\nTo install BigQuery Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-server-bigquery):\n\n```bash\nnpx -y @smithery/cli install mcp-server-bigquery --client claude\n```\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n##### Development/Unpublished Servers Configuration</summary>\n\n```json\n\"mcpServers\": {\n  \"bigquery\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"--directory\",\n      \"{{PATH_TO_REPO}}\",\n      \"run\",\n      \"mcp-server-bigquery\",\n      \"--project\",\n      \"{{GCP_PROJECT_ID}}\",\n      \"--location\",\n      \"{{GCP_LOCATION}}\"\n    ]\n  }\n}\n```\n\n##### Published Servers Configuration\n\n```json\n\"mcpServers\": {\n  \"bigquery\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"mcp-server-bigquery\",\n      \"--project\",\n      \"{{GCP_PROJECT_ID}}\",\n      \"--location\",\n      \"{{GCP_LOCATION}}\"\n    ]\n  }\n}\n```\n\nReplace `{{PATH_TO_REPO}}`, `{{GCP_PROJECT_ID}}`, and `{{GCP_LOCATION}}` with the appropriate values.\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Increase the version number in `pyproject.toml`\n\n2. Sync dependencies and update lockfile:\n\n```bash\nuv sync\n```\n\n3. Build package distributions:\n\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n4. Publish to PyPI:\n\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory {{PATH_TO_REPO}} run mcp-server-bigquery\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n"
}