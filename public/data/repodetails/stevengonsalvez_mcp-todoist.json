{
  "mcp_name": "stevengonsalvez/mcp-todoist",
  "mcp_description": "Integrates Todoist with language models for seamless task management through natural language commands.",
  "mcp_id": "stevengonsalvez_mcp-todoist",
  "fetch_timestamp": "2025-06-23T08:40:10.229531Z",
  "github_url": "https://github.com/stevengonsalvez/mcp-todoist",
  "repository": {
    "name": "mcp-todoist",
    "full_name": "stevengonsalvez/mcp-todoist",
    "description": "MCP server for Todoist integration for Natural language task management",
    "html_url": "https://github.com/stevengonsalvez/mcp-todoist",
    "created_at": "2025-04-15T22:42:27Z",
    "updated_at": "2025-04-16T22:57:54Z",
    "pushed_at": "2025-04-16T20:52:54Z",
    "size": 119,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 1,
    "open_issues_count": 1,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "stevengonsalvez",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/9320602?v=4",
      "html_url": "https://github.com/stevengonsalvez"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": true,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "Python": 86612
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 7,
    "contributors_count": 1,
    "latest_release": {
      "tag_name": "0.5.1",
      "name": "0.5.1",
      "published_at": "2025-04-16T19:51:35Z",
      "body": "# Changelog\n\n",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "0.5.1",
        "commit_sha": "3c0da78086e7ecf3bcc9e1d79630ced98dd60679"
      },
      {
        "name": "0.5.0",
        "commit_sha": "6f8abc74fd10f337f9c135e04a98e09265d03b40"
      },
      {
        "name": "0.4.0",
        "commit_sha": "0d381e9941c99f0b77716edd140cf3b1ac23abb2"
      },
      {
        "name": "0.3.0",
        "commit_sha": "dffb0eba5b8e61c1b3f3fe9b361461e7aaa24f4e"
      },
      {
        "name": "0.2.0",
        "commit_sha": "5cc940198212ac4e5074e33f2239a5c515e71f8e"
      }
    ],
    "latest_version": "0.5.1"
  },
  "readme": "# MCP-Todoist Integration\n\nThis project provides a [Model Context Protocol (MCP)](https://modelcontextprotocol.io) server that integrates with Todoist, allowing language models to interact with Todoist tasks and projects.\n\n## Features\n\n- Complete Todoist API integration\n- Create, read, update, and delete tasks, projects, sections, labels, and comments\n- Access project collaborators\n- Filter tasks by various criteria\n- Well-documented tools and resources for use with language models\n\n## Requirements\n\n- Python 3.10 or higher\n- Todoist account with API token\n- MCP-compatible client (like Claude Desktop)\n\n## Usage with Claude Desktop\n\nTo use this MCP server with Claude Desktop, you have two options:\n\n### Option 1: Using uvx (Recommended)\n\n1. Install the package using uvx:\n   ```bash\n   uvx install mcp-todoist\n   ```\n\n2. Add the server to Claude Desktop's MCP configuration:\n   - Open Claude Desktop\n   - Go to Settings > Advanced\n   - Under \"MCP Servers Configuration\", add to the JSON configuration:\n     ```json\n     \"mcpServers\": {\n       \"todoist\": {\n         \"command\": \"uvx\",\n         \"args\": [\"mcp-todoist\"],\n         \"env\": {\n           \"TODOIST_API_TOKEN\": \"your_todoist_api_token_here\"\n         }\n       }\n     }\n     ```\n\n### Option 2: Using cloned repository\n\n1. Clone and install the package in development mode:\n   ```bash\n   git clone https://github.com/your-username/mcp-todoist.git\n   cd mcp-todoist\n   pip install -e .\n   ```\n\n2. Add the server to Claude Desktop's MCP configuration:\n   - Open Claude Desktop\n   - Go to Settings > Advanced\n   - Under \"MCP Servers Configuration\", add to the JSON configuration:\n     ```json\n     \"mcpServers\": {\n       \"todoist\": {\n         \"command\": \"python\",\n         \"args\": [\"/full/path/to/mcp-todoist/main.py\"],\n         \"env\": {\n           \"TODOIST_API_TOKEN\": \"your_todoist_api_token_here\"\n         }\n       }\n     }\n     ```\n\n### Option 3: Using uv\n\nuv is a fast Python package installer and resolver. To use it with this project:\n\n1. First make sure you have uv installed:\n   ```bash\n   # Install uv (if you haven't already)\n   brew install uv  # On macOS with Homebrew\n   pipx install uv  # Or use pipx\n   ```\n\n2. Clone the repository:\n   ```bash\n   git clone https://github.com/your-username/mcp-todoist.git\n   cd mcp-todoist\n   ```\n\n3. Create and maintain the lock file:\n   ```bash\n   # Create/update the lock file (do this when dependencies change)\n   uv pip sync requirements.txt\n   ```\n\n4. Run the MCP server using uv:\n   ```bash\n   uv run mcp dev main.py\n   ```\n\n5. Configure Claude Desktop:\n   ```json\n   \"mcpServers\": {\n     \"todoist\": {\n       \"command\": \"uv\",\n       \"args\": [\"run\", \"mcp\", \"dev\", \"/full/path/to/mcp-todoist/main.py\"],\n       \"env\": {\n         \"TODOIST_API_TOKEN\": \"your_todoist_api_token_here\"\n       }\n     }\n   }\n   ```\n\n3. Save the configuration and restart Claude Desktop\n\n4. You can now access the Todoist MCP server in your Claude conversations by asking Claude to use Todoist\n\n### Getting a Todoist API Token\n\nTo obtain your Todoist API token:\n\n1. Log in to your Todoist account\n2. Go to Settings > Integrations\n3. Copy your API token from the \"API token\" section\n\n## Installation\n\nIf you want to install the package from source:\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/your-username/mcp-todoist.git\n   cd mcp-todoist\n   ```\n\n2. Install dependencies:\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n3. Create a `.env` file with your Todoist API token:\n   ```bash\n   cp .env.example .env\n   # Edit .env file to add your Todoist API token\n   ```\n\n### Running with MCP Dev Tools\n\nFor testing and development, use the MCP dev tools:\n\n```bash\nmcp run main.py\n```\n\nThis will start the MCP server, allowing you to test it interactively.\n\nTo run with the MCP Inspector for visual interaction:\n\n```bash\nmcp dev main.py\n```\n\n## Available Tools\n\nThe following Todoist tools are available:\n\n### Task Management\n- `create_task` - Create a new task with title, due date, project, etc.\n- `get_tasks` - Get tasks based on filters\n- `get_task` - Get a specific task by ID\n- `update_task` - Update an existing task\n- `complete_task` - Mark a task as complete\n- `uncomplete_task` - Mark a completed task as incomplete\n- `delete_task` - Delete a task\n\n### Project Management\n- `get_projects` - Get all projects\n- `get_project` - Get a specific project by ID\n- `add_project` - Create a new project\n- `update_project` - Update an existing project\n- `delete_project` - Delete a project\n- `archive_project` - Archive a project\n- `unarchive_project` - Unarchive a project\n\n### Section Management\n- `get_sections` - Get all sections in a project\n- `get_section` - Get a specific section by ID\n- `add_section` - Create a new section\n- `update_section` - Update an existing section\n- `delete_section` - Delete a section\n\n### Label Management\n- `get_labels` - Get all labels\n- `get_label` - Get a specific label by ID\n- `add_label` - Create a new label\n- `update_label` - Update an existing label\n- `delete_label` - Delete a label\n\n### Comment Management\n- `get_comments` - Get comments for a task or project\n- `get_comment` - Get a specific comment by ID\n- `add_comment` - Add a comment to a task or project\n- `update_comment` - Update an existing comment\n- `delete_comment` - Delete a comment\n\n### Collaboration\n- `get_collaborators` - Get collaborators for a project\n\n## Available Resources\n\nThe following Todoist resources are available:\n\n- `todoist://tasks` - All tasks\n- `todoist://tasks/project/{project_id}` - Tasks in a specific project\n- `todoist://tasks/section/{section_id}` - Tasks in a specific section\n- `todoist://tasks/label/{label}` - Tasks with a specific label\n- `todoist://projects` - All projects\n- `todoist://sections/{project_id}` - Sections in a specific project\n- `todoist://labels` - All labels\n\n## Examples\n\n### Creating a Task\n\n```\nPlease create a new task in Todoist called \"Buy groceries\" due tomorrow.\n```\n\n### Getting Tasks from a Project\n\n```\nShow me all tasks in my \"Work\" project.\n```\n\n### Completing a Task\n\n```\nMark the \"Buy groceries\" task as complete.\n```\n\n### Adding a Comment to a Task\n\n```\nAdd a comment to the task with ID \"12345678\" saying \"Don't forget milk and eggs\".\n```\n\n### Creating a New Project with Sections\n\n```\nCreate a new project called \"Home Renovation\" and add sections for \"Kitchen\", \"Bathroom\", and \"Living Room\".\n```\n\n## Development\n\nTo contribute to the project or modify it for your needs:\n\n1. Fork the repository\n2. Make your changes\n3. Test with `mcp run main.py` or `mcp dev main.py`\n4. Submit a pull request\n\n### Using uv for Development\n\nThis project supports using `uv` for faster dependency management and running:\n\n1. Create/update the lock file when dependencies change:\n   ```bash\n   uv pip sync requirements.txt\n   ```\n\n2. Run the application with uv:\n   ```bash\n   uv run mcp dev main.py\n   ```\n\n3. If you're experiencing lock file issues, you can troubleshoot by:\n   ```bash\n   # Remove the lock file and regenerate it\n   rm uv.lock\n   uv pip sync requirements.txt\n\n   # Or run without using the lock file (temporary solution)\n   UV_LOCK=0 uv run mcp dev main.py\n   ```\n\n### Git Hooks\n\nThis project uses pre-commit hooks to ensure code quality and consistency:\n\n1. Install the development dependencies:\n   ```bash\n   pip install -e \".[dev]\"\n   ```\n\n2. Install the git hooks:\n   ```bash\n   pre-commit install\n   ```\n\n3. Now, each time you commit, the hooks will run:\n   - Black for code formatting\n   - isort for import sorting\n   - flake8 for linting\n   - Various file checks (trailing whitespace, YAML validation, etc.)\n\nIf any hook fails, the commit will be aborted. Fix the issues and try again.\n\nYou can also run the hooks manually on all files:\n```bash\npre-commit run --all-files\n```\n\n### Publishing to PyPI\n\nThis project uses `setuptools_scm` for automatic versioning based on git tags:\n\n1. Ensure all tests pass locally:\n   ```bash\n   pip install -e \".[dev]\"\n   flake8 . --exclude=.venv,venv,env\n   black --check .\n   isort --check-only --profile black .\n   pytest\n   ```\n\n2. Create a new release with semantic versioning (no \"v\" prefix):\n   ```bash\n   # For a new version (e.g., 0.1.0)\n   git tag 0.1.0\n   git push origin 0.1.0\n   ```\n\n3. The GitHub Actions workflow will automatically:\n   - Run tests\n   - Generate a changelog from PRs and commits\n   - Create a GitHub release with the changelog\n   - Build and publish the package to PyPI\n\n4. Publishing manually (if needed):\n   ```bash\n   pip install build twine\n   python -m build\n   twine check dist/*\n   twine upload --repository-url https://test.pypi.org/legacy/ dist/*  # Test first\n   twine upload dist/*  # Then to production PyPI\n   ```\n\n5. Alternative: Trigger manual workflow:\n   - Go to the GitHub repository → Actions → \"Build and Publish\" workflow\n   - Click \"Run workflow\"\n   - Choose \"test\" for Test PyPI or \"prod\" for production PyPI\n\n## License\n\nThis project is licensed under the [MIT License](LICENSE). See the [LICENSE](LICENSE) file for details.\n"
}