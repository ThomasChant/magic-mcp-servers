{
  "mcp_name": "RichardHFYU/MCP_Java_PSQL",
  "mcp_description": "A Spring Boot and Spring AI-based MCP server for inspecting PostgreSQL database schemas, supporting SSE transport for integration with Cursor and other MCP clients.",
  "mcp_id": "RichardHFYU_MCP_Java_PSQL",
  "fetch_timestamp": "2025-06-23T07:57:40.872749Z",
  "github_url": "https://github.com/RichardHFYU/MCP_Java_PSQL",
  "repository": {
    "name": "MCP_Java_PSQL",
    "full_name": "RichardHFYU/MCP_Java_PSQL",
    "description": "MCP for Cursor to connect local PSQL",
    "html_url": "https://github.com/RichardHFYU/MCP_Java_PSQL",
    "created_at": "2025-04-17T02:10:15Z",
    "updated_at": "2025-04-17T02:16:45Z",
    "pushed_at": "2025-04-17T02:16:41Z",
    "size": 9,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Java",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "RichardHFYU",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/83268276?v=4",
      "html_url": "https://github.com/RichardHFYU"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Java": 12222
    },
    "language_percentages": {
      "Java": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 2
  },
  "readme": "# Spring AI MCP Database Schema Server\n\nA Model Context Protocol (MCP) server built with Spring Boot and Spring AI that provides tools to inspect a PostgreSQL database schema. This server is designed to work with Cursor and other MCP clients that support SSE transport.\n\n## Features\n\n- Get schema (columns, types) for a specific table (`getTableSchema` tool)\n- Get outgoing foreign key dependencies for a table (`getTableDependencies` tool)\n- Get incoming foreign key references to a table (`getTableReferencedBy` tool)\n- **Execute arbitrary SQL SELECT queries (`executeSql` tool) - USE WITH EXTREME CAUTION!**\n- Uses Server-Sent Events (SSE) for communication.\n\n## Prerequisites\n\n- Java 17 or higher\n- Maven 3.6 or higher\n- PostgreSQL database accessible from where the server runs\n- An MCP Client that supports SSE transport (e.g., Cursor)\n\n## Configuration\n\n1.  **Database Connection:** Update the database connection details (URL, username, password) in `src/main/resources/application.yml`.\n    **Security Warning:** It is strongly recommended to configure a read-only database user in `application.yml` if you intend to use the `executeSql` tool, to minimize potential damage from unintended queries.\n\n## Building the Server\n\nTo build the server, run:\n\n```bash\nmvn clean package\n```\n\nThis will create an executable JAR file in the `target` directory (e.g., `mcp-weather-spring-1.0-SNAPSHOT.jar`).\n\n## Running the Server\n\nRun the server using the standard Spring Boot command:\n\n```bash\njava -jar target/mcp-weather-spring-1.0-SNAPSHOT.jar\n```\n\nThe server will start on port 8080 by default and attempt to connect to the configured database.\n\n## Configuring Cursor\n\n1.  Ensure the server is running.\n2.  Open your Cursor MCP configuration file:\n    -   **Project Specific**: `.cursor/mcp.json` in your project root.\n    -   **Global**: `~/.cursor/mcp.json` in your home directory.\n3.  Add or update the server configuration to use SSE:\n\n```json\n{\n  \"mcpServers\": {\n    \"PostgresSchemaServer\": {\n      \"transport\": \"sse\",\n      \"url\": \"http://localhost:8080/sse\"\n    }\n    // Add other servers here if needed\n  }\n}\n```\n\n4.  Restart Cursor.\n\n## Usage Examples in Cursor\n\nOnce the server is running, connected to the database, and Cursor is configured and restarted:\n\n-   Open the chat or use the Agent (`Cmd+K` / `Ctrl+K`).\n-   The tools `getTableSchema`, `getTableDependencies`, `getTableReferencedBy`, and `executeSql` from `PostgresSchemaServer` should be available.\n-   Ask questions like:\n    -   \"Use PostgresSchemaServer to get the schema for the 'users' table.\"\n    -   \"What are the dependencies of the 'orders' table?\"\n    -   \"Which tables reference the 'products' table?\"\n    -   **(Use with Caution!)** \"Execute the SQL query 'SELECT first_name, email FROM customers WHERE customer_id = 1' using the executeSql tool.\"\n    -   **(Use with Caution!)** \"First get the schema for the customers table, then execute a SQL query to select the email for the customer named Alice Smith.\"\n\n**WARNING:** The `executeSql` tool allows running SQL queries provided by the LLM. This is inherently risky. Only use this tool if you understand the risks and have appropriate security measures in place (like a read-only database user).\n\n## Troubleshooting\n\n-   **Server Connection Issues:**\n    -   Verify the server is running (check the terminal output).\n    -   Ensure the `url` in `.cursor/mcp.json` matches the server's address and port (default: `http://localhost:8080/sse`).\n    -   Check for firewall issues blocking the connection between Cursor and the server.\n-   **Database Connection Errors:**\n    -   Check the server startup logs for errors related to database connection.\n    -   Verify the database credentials and URL in `application.yml` are correct.\n    -   Ensure the PostgreSQL server is running and accessible.\n-   **Tool Not Found/Working:**\n    -   Restart Cursor after configuring `mcp.json`.\n    -   Check the server logs for errors when a tool is called (e.g., table not found, SQL errors).\n-   **executeSql Errors:**\n    -   The tool currently only allows queries starting with `SELECT` (case-insensitive).\n    -   Check server logs for detailed SQL execution errors from the database driver. "
}