{
  "mcp_name": "Atlassian",
  "mcp_description": "üêç ‚òÅÔ∏è - MCP server for Atlassian products (Confluence and Jira). Supports Confluence Cloud, Jira Cloud, and Jira Server/Data Center. Provides comprehensive tools for searching, reading, creating, and managing content across Atlassian workspaces.",
  "mcp_id": "sooperset_mcp-atlassian",
  "fetch_timestamp": "2025-06-23T01:20:45.306199Z",
  "github_url": "https://github.com/sooperset/mcp-atlassian",
  "repository": {
    "name": "mcp-atlassian",
    "full_name": "sooperset/mcp-atlassian",
    "description": "MCP server for Atlassian tools (Confluence, Jira)",
    "html_url": "https://github.com/sooperset/mcp-atlassian",
    "created_at": "2024-12-03T09:25:20Z",
    "updated_at": "2025-06-22T22:43:38Z",
    "pushed_at": "2025-06-19T16:34:40Z",
    "size": 1596,
    "stargazers_count": 2054,
    "watchers_count": 2054,
    "forks_count": 362,
    "open_issues_count": 44,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "atlassian",
      "confluence",
      "jira",
      "mcp"
    ],
    "default_branch": "main",
    "owner": {
      "login": "sooperset",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/32061883?v=4",
      "html_url": "https://github.com/sooperset"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 362,
    "subscribers_count": 11,
    "languages": {
      "Python": 1738141,
      "Shell": 5888,
      "Dockerfile": 1723
    },
    "language_percentages": {
      "Python": 99.56,
      "Shell": 0.34,
      "Dockerfile": 0.1
    },
    "pull_requests_count": 302,
    "contributors_count": 39,
    "latest_release": {
      "tag_name": "v0.11.7",
      "name": "v0.11.7",
      "published_at": "2025-06-19T16:05:38Z",
      "body": "This release addresses critical compatibility issues affecting Windows environments, Jira Server status transitions, and Confluence page operations with numeric IDs. These fixes enhance cross-platform stability and improve LLM client integration.\r\n\r\n## üêõ Fixed\r\n\r\n**Windows Server Shutdown Stability**: Resolved \"ValueError: I/O operation on closed file\" errors that occurred during server shutdown, particularly affecting Windows environments and Claude Desktop integration. The fix gracefully handles cases where parent processes close stdio pipes before the cleanup phase completes, ensuring clean exits without crashes ([#532](https://github.com/sooperset/mcp-atlassian/issues/532))\r\n\r\n**Jira Status Transitions**: Fixed Method Resolution Order (MRO) conflict that prevented status updates on Jira Server/Data Center instances. The issue manifested as empty transition lists in error messages despite available transitions. The fix properly integrates TransitionsMixin methods and provides clear feedback about available status transitions ([#455](https://github.com/sooperset/mcp-atlassian/issues/455))\r\n\r\n**Confluence Numeric Parent IDs**: Enhanced Confluence page operations to automatically handle numeric parent IDs sent by LLM clients (particularly Gemini). The API now seamlessly accepts both integer and string formats for parent_id parameters in create and update operations, preventing type validation failures ([#452](https://github.com/sooperset/mcp-atlassian/issues/452))\r\n\r\n## ‚öôÔ∏è Internal\r\n\r\n**Enhanced Error Handling**: Improved robustness in the shutdown sequence with comprehensive exception handling for various stream states, including closed streams, missing attributes, and flush failures ([#533](https://github.com/sooperset/mcp-atlassian/pull/533))\r\n\r\n**Test Coverage**: Added extensive test cases for edge conditions in stream handling during shutdown, ensuring reliability across different operating systems and process termination scenarios\r\n\r\n**Full Changelog**: https://github.com/sooperset/mcp-atlassian/compare/v0.11.6...v0.11.7",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.11.7",
        "commit_sha": "c71b45c296b28ed58fd446300fa9aec616ec9022"
      },
      {
        "name": "v0.11.6",
        "commit_sha": "4ab34c733805c0553803230be21ae4b42a78d02a"
      },
      {
        "name": "v0.11.5",
        "commit_sha": "de559ab3eae435867abce0ddf06da6b8088f8eda"
      },
      {
        "name": "v0.11.4",
        "commit_sha": "48967613e3f8ae61b661c9a64b0be6f224511fc9"
      },
      {
        "name": "v0.11.3",
        "commit_sha": "dbdb339625b577dc338ac447e7fb487e2369c1a0"
      },
      {
        "name": "v0.11.2",
        "commit_sha": "dd66c3110b68275096176ce843d33ac92fbc74dc"
      },
      {
        "name": "v0.11.1",
        "commit_sha": "b6d23dfa3cb310f4a3b8d145604765a4817a5044"
      },
      {
        "name": "v0.11.0",
        "commit_sha": "cd693291cd4a99d6af1b9a2bc816a4e5d1c319a0"
      },
      {
        "name": "v0.10.6",
        "commit_sha": "bcad8e831c1eff2b2247dc30b3891deaff5f6d3a"
      },
      {
        "name": "v0.10.5",
        "commit_sha": "29e3d1bc46d266063f90efd3f04bf15ae1c13bed"
      }
    ],
    "latest_version": "v0.11.7"
  },
  "readme": "# MCP Atlassian\n\n![PyPI Version](https://img.shields.io/pypi/v/mcp-atlassian)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/mcp-atlassian)\n![PePy - Total Downloads](https://static.pepy.tech/personalized-badge/mcp-atlassian?period=total&units=international_system&left_color=grey&right_color=blue&left_text=Total%20Downloads)\n[![Run Tests](https://github.com/sooperset/mcp-atlassian/actions/workflows/tests.yml/badge.svg)](https://github.com/sooperset/mcp-atlassian/actions/workflows/tests.yml)\n![License](https://img.shields.io/github/license/sooperset/mcp-atlassian)\n\nModel Context Protocol (MCP) server for Atlassian products (Confluence and Jira). This integration supports both Confluence & Jira Cloud and Server/Data Center deployments.\n\n## Example Usage\n\nAsk your AI assistant to:\n\n- **üìù Automatic Jira Updates** - \"Update Jira from our meeting notes\"\n- **üîç AI-Powered Confluence Search** - \"Find our OKR guide in Confluence and summarize it\"\n- **üêõ Smart Jira Issue Filtering** - \"Show me urgent bugs in PROJ project from last week\"\n- **üìÑ Content Creation & Management** - \"Create a tech design doc for XYZ feature\"\n\n### Feature Demo\n\nhttps://github.com/user-attachments/assets/35303504-14c6-4ae4-913b-7c25ea511c3e\n\n<details> <summary>Confluence Demo</summary>\n\nhttps://github.com/user-attachments/assets/7fe9c488-ad0c-4876-9b54-120b666bb785\n\n</details>\n\n### Compatibility\n\n| Product        | Deployment Type    | Support Status              |\n|----------------|--------------------|-----------------------------|\n| **Confluence** | Cloud              | ‚úÖ Fully supported           |\n| **Confluence** | Server/Data Center | ‚úÖ Supported (version 6.0+)  |\n| **Jira**       | Cloud              | ‚úÖ Fully supported           |\n| **Jira**       | Server/Data Center | ‚úÖ Supported (version 8.14+) |\n\n## Quick Start Guide\n\n### üîê 1. Authentication Setup\n\nMCP Atlassian supports three authentication methods:\n\n#### A. API Token Authentication (Cloud) - **Recommended**\n\n1. Go to https://id.atlassian.com/manage-profile/security/api-tokens\n2. Click **Create API token**, name it\n3. Copy the token immediately\n\n#### B. Personal Access Token (Server/Data Center)\n\n1. Go to your profile (avatar) ‚Üí **Profile** ‚Üí **Personal Access Tokens**\n2. Click **Create token**, name it, set expiry\n3. Copy the token immediately\n\n#### C. OAuth 2.0 Authentication (Cloud) - **Advanced**\n\n> [!NOTE]\n> OAuth 2.0 is more complex to set up but provides enhanced security features. For most users, API Token authentication (Method A) is simpler and sufficient.\n\n1. Go to [Atlassian Developer Console](https://developer.atlassian.com/console/myapps/)\n2. Create an \"OAuth 2.0 (3LO) integration\" app\n3. Configure **Permissions** (scopes) for Jira/Confluence\n4. Set **Callback URL** (e.g., `http://localhost:8080/callback`)\n5. Run setup wizard:\n   ```bash\n   docker run --rm -i \\\n     -p 8080:8080 \\\n     -v \"${HOME}/.mcp-atlassian:/home/app/.mcp-atlassian\" \\\n     ghcr.io/sooperset/mcp-atlassian:latest --oauth-setup -v\n   ```\n6. Follow prompts for `Client ID`, `Secret`, `URI`, and `Scope`\n7. Complete browser authorization\n8. Add obtained credentials to `.env` or IDE config:\n   - `ATLASSIAN_OAUTH_CLOUD_ID` (from wizard)\n   - `ATLASSIAN_OAUTH_CLIENT_ID`\n   - `ATLASSIAN_OAUTH_CLIENT_SECRET`\n   - `ATLASSIAN_OAUTH_REDIRECT_URI`\n   - `ATLASSIAN_OAUTH_SCOPE`\n\n> [!IMPORTANT]\n> Include `offline_access` in scope for persistent auth (e.g., `read:jira-work write:jira-work offline_access`)\n\n### üì¶ 2. Installation\n\nMCP Atlassian is distributed as a Docker image. This is the recommended way to run the server, especially for IDE integration. Ensure you have Docker installed.\n\n```bash\n# Pull Pre-built Image\ndocker pull ghcr.io/sooperset/mcp-atlassian:latest\n```\n\n## üõ†Ô∏è IDE Integration\n\nMCP Atlassian is designed to be used with AI assistants through IDE integration.\n\n> [!TIP]\n> **For Claude Desktop**: Locate and edit the configuration file directly:\n> - **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n> - **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n> - **Linux**: `~/.config/Claude/claude_desktop_config.json`\n>\n> **For Cursor**: Open Settings ‚Üí MCP ‚Üí + Add new global MCP server\n\n### ‚öôÔ∏è Configuration Methods\n\nThere are two main approaches to configure the Docker container:\n\n1. **Passing Variables Directly** (shown in examples below)\n2. **Using an Environment File** with `--env-file` flag (shown in collapsible sections)\n\n> [!NOTE]\n> Common environment variables include:\n>\n> - `CONFLUENCE_SPACES_FILTER`: Filter by space keys (e.g., \"DEV,TEAM,DOC\")\n> - `JIRA_PROJECTS_FILTER`: Filter by project keys (e.g., \"PROJ,DEV,SUPPORT\")\n> - `READ_ONLY_MODE`: Set to \"true\" to disable write operations\n> - `MCP_VERBOSE`: Set to \"true\" for more detailed logging\n> - `MCP_LOGGING_STDOUT`: Set to \"true\" to log to stdout instead of stderr\n> - `ENABLED_TOOLS`: Comma-separated list of tool names to enable (e.g., \"confluence_search,jira_get_issue\")\n>\n> See the [.env.example](https://github.com/sooperset/mcp-atlassian/blob/main/.env.example) file for all available options.\n\n\n### üìù Configuration Examples\n\n**Method 1 (Passing Variables Directly):**\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\", \"CONFLUENCE_URL\",\n        \"-e\", \"CONFLUENCE_USERNAME\",\n        \"-e\", \"CONFLUENCE_API_TOKEN\",\n        \"-e\", \"JIRA_URL\",\n        \"-e\", \"JIRA_USERNAME\",\n        \"-e\", \"JIRA_API_TOKEN\",\n        \"ghcr.io/sooperset/mcp-atlassian:latest\"\n      ],\n      \"env\": {\n        \"CONFLUENCE_URL\": \"https://your-company.atlassian.net/wiki\",\n        \"CONFLUENCE_USERNAME\": \"your.email@company.com\",\n        \"CONFLUENCE_API_TOKEN\": \"your_confluence_api_token\",\n        \"JIRA_URL\": \"https://your-company.atlassian.net\",\n        \"JIRA_USERNAME\": \"your.email@company.com\",\n        \"JIRA_API_TOKEN\": \"your_jira_api_token\"\n      }\n    }\n  }\n}\n```\n\n<details>\n<summary>Alternative: Using Environment File</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"--env-file\",\n        \"/path/to/your/mcp-atlassian.env\",\n        \"ghcr.io/sooperset/mcp-atlassian:latest\"\n      ]\n    }\n  }\n}\n```\n</details>\n\n<details>\n<summary>Server/Data Center Configuration</summary>\n\nFor Server/Data Center deployments, use direct variable passing:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"CONFLUENCE_URL\",\n        \"-e\", \"CONFLUENCE_PERSONAL_TOKEN\",\n        \"-e\", \"CONFLUENCE_SSL_VERIFY\",\n        \"-e\", \"JIRA_URL\",\n        \"-e\", \"JIRA_PERSONAL_TOKEN\",\n        \"-e\", \"JIRA_SSL_VERIFY\",\n        \"ghcr.io/sooperset/mcp-atlassian:latest\"\n      ],\n      \"env\": {\n        \"CONFLUENCE_URL\": \"https://confluence.your-company.com\",\n        \"CONFLUENCE_PERSONAL_TOKEN\": \"your_confluence_pat\",\n        \"CONFLUENCE_SSL_VERIFY\": \"false\",\n        \"JIRA_URL\": \"https://jira.your-company.com\",\n        \"JIRA_PERSONAL_TOKEN\": \"your_jira_pat\",\n        \"JIRA_SSL_VERIFY\": \"false\"\n      }\n    }\n  }\n}\n```\n\n> [!NOTE]\n> Set `CONFLUENCE_SSL_VERIFY` and `JIRA_SSL_VERIFY` to \"false\" only if you have self-signed certificates.\n\n</details>\n\n<details>\n<summary>OAuth 2.0 Configuration (Cloud Only)</summary>\n<a name=\"oauth-20-configuration-example-cloud-only\"></a>\n\nThis example shows how to configure `mcp-atlassian` in your IDE (like Cursor or Claude Desktop) when using OAuth 2.0 for Atlassian Cloud. Ensure you have completed the [OAuth setup wizard](#c-oauth-20-authentication-cloud-only) first.\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-v\", \"<path_to_your_home>/.mcp-atlassian:/home/app/.mcp-atlassian\",\n        \"-e\", \"JIRA_URL\",\n        \"-e\", \"CONFLUENCE_URL\",\n        \"-e\", \"ATLASSIAN_OAUTH_CLIENT_ID\",\n        \"-e\", \"ATLASSIAN_OAUTH_CLIENT_SECRET\",\n        \"-e\", \"ATLASSIAN_OAUTH_REDIRECT_URI\",\n        \"-e\", \"ATLASSIAN_OAUTH_SCOPE\",\n        \"-e\", \"ATLASSIAN_OAUTH_CLOUD_ID\",\n        \"ghcr.io/sooperset/mcp-atlassian:latest\",\n      ],\n      \"env\": {\n        \"JIRA_URL\": \"https://your-company.atlassian.net\",\n        \"CONFLUENCE_URL\": \"https://your-company.atlassian.net/wiki\",\n        \"ATLASSIAN_OAUTH_CLIENT_ID\": \"YOUR_OAUTH_APP_CLIENT_ID\",\n        \"ATLASSIAN_OAUTH_CLIENT_SECRET\": \"YOUR_OAUTH_APP_CLIENT_SECRET\",\n        \"ATLASSIAN_OAUTH_REDIRECT_URI\": \"http://localhost:8080/callback\",\n        \"ATLASSIAN_OAUTH_SCOPE\": \"read:jira-work write:jira-work read:confluence-content.all write:confluence-content offline_access\",\n        \"ATLASSIAN_OAUTH_CLOUD_ID\": \"YOUR_CLOUD_ID_FROM_SETUP_WIZARD\"\n      }\n    }\n  }\n}\n```\n\n> [!NOTE]\n> - `ATLASSIAN_OAUTH_CLOUD_ID` is obtained from the `--oauth-setup` wizard output.\n> - Other `ATLASSIAN_OAUTH_*` variables are those you configured for your OAuth app in the Atlassian Developer Console (and used as input to the setup wizard).\n> - `JIRA_URL` and `CONFLUENCE_URL` for your Cloud instances are still required.\n\n</details>\n\n<details>\n<summary>Proxy Configuration</summary>\n\nMCP Atlassian supports routing API requests through standard HTTP/HTTPS/SOCKS proxies. Configure using environment variables:\n\n- Supports standard `HTTP_PROXY`, `HTTPS_PROXY`, `NO_PROXY`, `SOCKS_PROXY`.\n- Service-specific overrides are available (e.g., `JIRA_HTTPS_PROXY`, `CONFLUENCE_NO_PROXY`).\n- Service-specific variables override global ones for that service.\n\nAdd the relevant proxy variables to the `args` (using `-e`) and `env` sections of your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\", \"... existing Confluence/Jira vars\",\n        \"-e\", \"HTTP_PROXY\",\n        \"-e\", \"HTTPS_PROXY\",\n        \"-e\", \"NO_PROXY\",\n        \"ghcr.io/sooperset/mcp-atlassian:latest\"\n      ],\n      \"env\": {\n        \"... existing Confluence/Jira vars\": \"...\",\n        \"HTTP_PROXY\": \"http://proxy.internal:8080\",\n        \"HTTPS_PROXY\": \"http://proxy.internal:8080\",\n        \"NO_PROXY\": \"localhost,.your-company.com\"\n      }\n    }\n  }\n}\n```\n\nCredentials in proxy URLs are masked in logs. If you set `NO_PROXY`, it will be respected for requests to matching hosts.\n\n</details>\n\n<details> <summary>Single Service Configurations</summary>\n\n**For Confluence Cloud only:**\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"CONFLUENCE_URL\",\n        \"-e\", \"CONFLUENCE_USERNAME\",\n        \"-e\", \"CONFLUENCE_API_TOKEN\",\n        \"ghcr.io/sooperset/mcp-atlassian:latest\"\n      ],\n      \"env\": {\n        \"CONFLUENCE_URL\": \"https://your-company.atlassian.net/wiki\",\n        \"CONFLUENCE_USERNAME\": \"your.email@company.com\",\n        \"CONFLUENCE_API_TOKEN\": \"your_api_token\"\n      }\n    }\n  }\n}\n```\n\nFor Confluence Server/DC, use:\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"CONFLUENCE_URL\",\n        \"-e\", \"CONFLUENCE_PERSONAL_TOKEN\",\n        \"ghcr.io/sooperset/mcp-atlassian:latest\"\n      ],\n      \"env\": {\n        \"CONFLUENCE_URL\": \"https://confluence.your-company.com\",\n        \"CONFLUENCE_PERSONAL_TOKEN\": \"your_personal_token\"\n      }\n    }\n  }\n}\n```\n\n**For Jira Cloud only:**\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"JIRA_URL\",\n        \"-e\", \"JIRA_USERNAME\",\n        \"-e\", \"JIRA_API_TOKEN\",\n        \"ghcr.io/sooperset/mcp-atlassian:latest\"\n      ],\n      \"env\": {\n        \"JIRA_URL\": \"https://your-company.atlassian.net\",\n        \"JIRA_USERNAME\": \"your.email@company.com\",\n        \"JIRA_API_TOKEN\": \"your_api_token\"\n      }\n    }\n  }\n}\n```\n\nFor Jira Server/DC, use:\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"JIRA_URL\",\n        \"-e\", \"JIRA_PERSONAL_TOKEN\",\n        \"ghcr.io/sooperset/mcp-atlassian:latest\"\n      ],\n      \"env\": {\n        \"JIRA_URL\": \"https://jira.your-company.com\",\n        \"JIRA_PERSONAL_TOKEN\": \"your_personal_token\"\n      }\n    }\n  }\n}\n```\n\n</details>\n\n### üë• HTTP Transport Configuration\n\nInstead of using `stdio`, you can run the server as a persistent HTTP service using either:\n- `sse` (Server-Sent Events) transport at `/sse` endpoint\n- `streamable-http` transport at `/mcp` endpoint\n\nBoth transport types support single-user and multi-user authentication:\n\n**Authentication Options:**\n- **Single-User**: Use server-level authentication configured via environment variables\n- **Multi-User**: Each user provides their own authentication:\n  - Cloud: OAuth 2.0 Bearer tokens\n  - Server/Data Center: Personal Access Tokens (PATs)\n\n<details> <summary>Basic HTTP Transport Setup</summary>\n\n1. Start the server with your chosen transport:\n\n    ```bash\n    # For SSE transport\n    docker run --rm -p 9000:9000 \\\n      --env-file /path/to/your/.env \\\n      ghcr.io/sooperset/mcp-atlassian:latest \\\n      --transport sse --port 9000 -vv\n\n    # OR for streamable-http transport\n    docker run --rm -p 9000:9000 \\\n      --env-file /path/to/your/.env \\\n      ghcr.io/sooperset/mcp-atlassian:latest \\\n      --transport streamable-http --port 9000 -vv\n    ```\n\n2. Configure your IDE (single-user example):\n\n    **SSE Transport Example:**\n    ```json\n    {\n      \"mcpServers\": {\n        \"mcp-atlassian-http\": {\n          \"url\": \"http://localhost:9000/sse\"\n        }\n      }\n    }\n    ```\n\n    **Streamable-HTTP Transport Example:**\n    ```json\n    {\n      \"mcpServers\": {\n        \"mcp-atlassian-service\": {\n          \"url\": \"http://localhost:9000/mcp\"\n        }\n      }\n    }\n    ```\n</details>\n\n<details> <summary>Multi-User Authentication Setup</summary>\n\nHere's a complete example of setting up multi-user authentication with streamable-HTTP transport:\n\n1. First, run the OAuth setup wizard to configure the server's OAuth credentials:\n   ```bash\n   docker run --rm -i \\\n     -p 8080:8080 \\\n     -v \"${HOME}/.mcp-atlassian:/home/app/.mcp-atlassian\" \\\n     ghcr.io/sooperset/mcp-atlassian:latest --oauth-setup -v\n   ```\n\n2. Start the server with streamable-HTTP transport:\n   ```bash\n   docker run --rm -p 9000:9000 \\\n     --env-file /path/to/your/.env \\\n     ghcr.io/sooperset/mcp-atlassian:latest \\\n     --transport streamable-http --port 9000 -vv\n   ```\n\n3. Configure your IDE's MCP settings:\n\n**Choose the appropriate Authorization method for your Atlassian deployment:**\n\n- **Cloud (OAuth 2.0):** Use this if your organization is on Atlassian Cloud and you have an OAuth access token for each user.\n- **Server/Data Center (PAT):** Use this if you are on Atlassian Server or Data Center and each user has a Personal Access Token (PAT).\n\n**Cloud (OAuth 2.0) Example:**\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian-service\": {\n      \"url\": \"http://localhost:9000/mcp\",\n      \"headers\": {\n        \"Authorization\": \"Bearer <USER_OAUTH_ACCESS_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n**Server/Data Center (PAT) Example:**\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian-service\": {\n      \"url\": \"http://localhost:9000/mcp\",\n      \"headers\": {\n        \"Authorization\": \"Token <USER_PERSONAL_ACCESS_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n4. Required environment variables in `.env`:\n   ```bash\n   JIRA_URL=https://your-company.atlassian.net\n   CONFLUENCE_URL=https://your-company.atlassian.net/wiki\n   ATLASSIAN_OAUTH_CLIENT_ID=your_oauth_app_client_id\n   ATLASSIAN_OAUTH_CLIENT_SECRET=your_oauth_app_client_secret\n   ATLASSIAN_OAUTH_REDIRECT_URI=http://localhost:8080/callback\n   ATLASSIAN_OAUTH_SCOPE=read:jira-work write:jira-work read:confluence-content.all write:confluence-content offline_access\n   ATLASSIAN_OAUTH_CLOUD_ID=your_cloud_id_from_setup_wizard\n   ```\n\n> [!NOTE]\n> - The server should have its own fallback authentication configured (e.g., via environment variables for API token, PAT, or its own OAuth setup using --oauth-setup). This is used if a request doesn't include user-specific authentication.\n> - **OAuth**: Each user needs their own OAuth access token from your Atlassian OAuth app.\n> - **PAT**: Each user provides their own Personal Access Token.\n> - The server will use the user's token for API calls when provided, falling back to server auth if not\n> - User tokens should have appropriate scopes for their needed operations\n\n</details>\n\n## Tools\n\n### Key Tools\n\n#### Jira Tools\n\n- `jira_get_issue`: Get details of a specific issue\n- `jira_search`: Search issues using JQL\n- `jira_create_issue`: Create a new issue\n- `jira_update_issue`: Update an existing issue\n- `jira_transition_issue`: Transition an issue to a new status\n- `jira_add_comment`: Add a comment to an issue\n\n#### Confluence Tools\n\n- `confluence_search`: Search Confluence content using CQL\n- `confluence_get_page`: Get content of a specific page\n- `confluence_create_page`: Create a new page\n- `confluence_update_page`: Update an existing page\n\n<details> <summary>View All Tools</summary>\n\n| Operation | Jira Tools                          | Confluence Tools               |\n|-----------|-------------------------------------|--------------------------------|\n| **Read**  | `jira_search`                       | `confluence_search`            |\n|           | `jira_get_issue`                    | `confluence_get_page`          |\n|           | `jira_get_all_projects`             | `confluence_get_page_children` |\n|           | `jira_get_project_issues`           | `confluence_get_comments`      |\n|           | `jira_get_worklog`                  | `confluence_get_labels`        |\n|           | `jira_get_transitions`              | `confluence_search_user`       |\n|           | `jira_search_fields`                |                                |\n|           | `jira_get_agile_boards`             |                                |\n|           | `jira_get_board_issues`             |                                |\n|           | `jira_get_sprints_from_board`       |                                |\n|           | `jira_get_sprint_issues`            |                                |\n|           | `jira_get_issue_link_types`         |                                |\n|           | `jira_batch_get_changelogs`*        |                                |\n|           | `jira_get_user_profile`             |                                |\n|           | `jira_download_attachments`         |                                |\n|           | `jira_get_project_versions`         |                                |\n| **Write** | `jira_create_issue`                 | `confluence_create_page`       |\n|           | `jira_update_issue`                 | `confluence_update_page`       |\n|           | `jira_delete_issue`                 | `confluence_delete_page`       |\n|           | `jira_batch_create_issues`          | `confluence_add_label`         |\n|           | `jira_add_comment`                  | `confluence_add_comment`       |\n|           | `jira_transition_issue`             |                                |\n|           | `jira_add_worklog`                  |                                |\n|           | `jira_link_to_epic`                 |                                |\n|           | `jira_create_sprint`                |                                |\n|           | `jira_update_sprint`                |                                |\n|           | `jira_create_issue_link`            |                                |\n|           | `jira_remove_issue_link`            |                                |\n|           | `jira_create_version`               |                                |\n|           | `jira_batch_create_versions`        |                                |\n\n</details>\n\n*Tool only available on Jira Cloud\n\n</details>\n\n### Tool Filtering and Access Control\n\nThe server provides two ways to control tool access:\n\n1. **Tool Filtering**: Use `--enabled-tools` flag or `ENABLED_TOOLS` environment variable to specify which tools should be available:\n\n   ```bash\n   # Via environment variable\n   ENABLED_TOOLS=\"confluence_search,jira_get_issue,jira_search\"\n\n   # Or via command line flag\n   docker run ... --enabled-tools \"confluence_search,jira_get_issue,jira_search\" ...\n   ```\n\n2. **Read/Write Control**: Tools are categorized as read or write operations. When `READ_ONLY_MODE` is enabled, only read operations are available regardless of `ENABLED_TOOLS` setting.\n\n## Troubleshooting & Debugging\n\n### Common Issues\n\n- **Authentication Failures**:\n    - For Cloud: Check your API tokens (not your account password)\n    - For Server/Data Center: Verify your personal access token is valid and not expired\n    - For older Confluence servers: Some older versions require basic authentication with `CONFLUENCE_USERNAME` and `CONFLUENCE_API_TOKEN` (where token is your password)\n- **SSL Certificate Issues**: If using Server/Data Center and encounter SSL errors, set `CONFLUENCE_SSL_VERIFY=false` or `JIRA_SSL_VERIFY=false`\n- **Permission Errors**: Ensure your Atlassian account has sufficient permissions to access the spaces/projects\n\n### Debugging Tools\n\n```bash\n# Using MCP Inspector for testing\nnpx @modelcontextprotocol/inspector uvx mcp-atlassian ...\n\n# For local development version\nnpx @modelcontextprotocol/inspector uv --directory /path/to/your/mcp-atlassian run mcp-atlassian ...\n\n# View logs\n# macOS\ntail -n 20 -f ~/Library/Logs/Claude/mcp*.log\n# Windows\ntype %APPDATA%\\Claude\\logs\\mcp*.log | more\n```\n\n## Security\n\n- Never share API tokens\n- Keep .env files secure and private\n- See [SECURITY.md](SECURITY.md) for best practices\n\n## Contributing\n\nWe welcome contributions to MCP Atlassian! If you'd like to contribute:\n\n1. Check out our [CONTRIBUTING.md](CONTRIBUTING.md) guide for detailed development setup instructions.\n2. Make changes and submit a pull request.\n\nWe use pre-commit hooks for code quality and follow semantic versioning for releases.\n\n## License\n\nLicensed under MIT - see [LICENSE](LICENSE) file. This is not an official Atlassian product.\n"
}