{
  "mcp_name": "phxdev1/archy-mcp",
  "mcp_description": "Archy transforms natural language and GitHub repository URLs into comprehensive architectural diagrams using Mermaid syntax.",
  "mcp_id": "phxdev1_archy-mcp",
  "fetch_timestamp": "2025-06-23T07:30:02.874124Z",
  "github_url": "https://github.com/phxdev1/archy-mcp",
  "repository": {
    "name": "archy-mcp",
    "full_name": "phxdev1/archy-mcp",
    "description": null,
    "html_url": "https://github.com/phxdev1/archy-mcp",
    "created_at": "2025-04-25T01:56:50Z",
    "updated_at": "2025-06-17T17:44:21Z",
    "pushed_at": "2025-04-26T21:39:21Z",
    "size": 143,
    "stargazers_count": 12,
    "watchers_count": 12,
    "forks_count": 4,
    "open_issues_count": 2,
    "language": "TypeScript",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "phxdev1",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/5504291?v=4",
      "html_url": "https://github.com/phxdev1"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 4,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 126315,
      "JavaScript": 15525
    },
    "language_percentages": {
      "TypeScript": 89.05,
      "JavaScript": 10.95
    },
    "pull_requests_count": 1,
    "contributors_count": 2,
    "package_json_version": "1.0.0"
  },
  "readme": "<a href=\"https://glama.ai/mcp/servers/@phxdev1/archy-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@phxdev1/archy-mcp/badge\" />\n</a>\n\n\n# Archy - Architectural Diagram Builder\n\nArchy is an MCP (Model Context Protocol) server that generates architectural diagrams using Mermaid syntax. It can process both natural language descriptions and GitHub repository URLs to create various types of diagrams.\n\n## Features\n\n- Generate diagrams from text descriptions\n- Generate diagrams from GitHub repositories\n- Support for all Mermaid diagram types:\n  - Flowcharts\n  - Sequence Diagrams\n  - Class Diagrams\n  - State Diagrams\n  - Entity Relationship Diagrams\n  - User Journeys\n  - Gantt Charts\n  - Pie Charts\n  - Quadrant Charts\n  - Requirement Diagrams\n  - Git Graphs\n  - C4 Diagrams\n\n## Installation\n\n### Prerequisites\n\n- Node.js (v16 or higher)\n- npm (v7 or higher)\n- TypeScript (v5.8 or higher, included in dependencies)\n\n### Install from Source\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/phxdev1/archy.git\n   cd archy\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n   This compiles the TypeScript source files to JavaScript in the `build` directory.\n\n### Automated MCP Installation\n\nArchy includes a convenient installation script that automatically configures the MCP server for both VS Code and Claude:\n\n```bash\nnpm run install-mcp\n```\n\nThis script:\n- Automatically detects the correct MCP settings locations for your operating system\n- Updates the MCP configuration files for VS Code and Claude\n- Prompts for a GitHub token for repository analysis (optional)\n- Makes the server executable\n\nNo need to manually edit JSON configuration files like some kind of cave-dwelling animal! The script handles all the tedious configuration work for you, so you can focus on creating beautiful diagrams instead of wrestling with file paths and permissions.\n\n## Configuration\n\n## Configuration\n\nArchy can be configured using environment variables:\n\n- `GITHUB_TOKEN`: GitHub API token for authenticated requests (optional)\n- `OPENROUTER_API_KEY`: OpenRouter API key for AI-powered diagram generation (optional)\n\n### OpenRouter Integration\n\nArchy includes integration with OpenRouter through LangChain, enabling enhanced AI-powered diagram generation. When an OpenRouter API key is configured, additional tools become available:\n\n- **AI-Enhanced Text-to-Diagram Generation**: Generate more sophisticated diagrams from text descriptions\n- **Code-to-Diagram Generation**: Analyze code and generate appropriate diagrams\n- **Diff Visualization**: Generate diagrams showing differences between code versions\n\nTo use these features:\n\n1. Sign up for an account at [OpenRouter](https://openrouter.ai/)\n2. Get your API key from the OpenRouter dashboard\n3. Set the `OPENROUTER_API_KEY` environment variable before running Archy\n\n### Image Export\n\nArchy supports exporting Mermaid diagrams to various image formats:\n\n- **PNG**: Raster image format suitable for web and documentation\n- **SVG**: Vector image format that scales without losing quality\n- **PDF**: Document format suitable for printing and sharing\n\nImages can be exported with customizable dimensions and background colors.\n\n### Repository Evolution Tracking\n\nArchy can analyze Git repositories to track their evolution over time:\n\n- **In-Memory Git**: Clone and analyze repositories without writing to the file system\n- **Commit History**: Track changes across multiple commits (limited to 10 by default)\n- **File Evolution**: Track how specific files change over time\n- **Evolution Visualization**: Generate diagrams showing the repository's evolution\n\n### MCP Integration\n\nTo use Archy with an MCP client, add it to your MCP settings file if you're a masochist:\n\n```json\n{\n  \"mcpServers\": {\n    \"archy\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/archy/build/index.js\"],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"your-github-token\"\n      }\n    }\n  }\n}\n```\n\n### Available Tools\n\n#### generate_diagram_from_text\n\nGenerates a Mermaid diagram from a text description.\n\n**Parameters:**\n- `description`: Text description of the diagram to generate\n- `diagramType`: Type of diagram to generate (e.g., 'flowchart', 'classDiagram', etc.)\n\n**Example:**\n```json\n{\n  \"description\": \"A user authentication system with login, registration, and password reset\",\n  \"diagramType\": \"flowchart\"\n}\n```\n\n#### generate_diagram_from_github\n\nGenerates a Mermaid diagram from a GitHub repository.\n\n**Parameters:**\n- `repoUrl`: URL of the GitHub repository\n- `diagramType`: Type of diagram to generate (e.g., 'classDiagram', 'sequenceDiagram', etc.)\n\n**Example:**\n```json\n{\n  \"repoUrl\": \"https://github.com/username/repository\",\n  \"diagramType\": \"classDiagram\"\n}\n```\n\n#### list_supported_diagram_types\n\nLists all supported diagram types with descriptions.\n\n**Parameters:** None\n\n### AI-Powered Tools\n\nThe following tools are available when an OpenRouter API key is configured:\n\n#### generate_diagram_from_text_with_ai\n\nGenerates a Mermaid diagram from a text description using AI (LangChain with OpenRouter).\n\n**Parameters:**\n- `description`: Text description of the diagram to generate\n- `diagramType`: Type of diagram to generate (e.g., 'flowchart', 'classDiagram', etc.)\n- `useAdvancedModel`: (Optional) Whether to use a more advanced AI model for complex diagrams\n\n**Example:**\n```json\n{\n  \"description\": \"A microservice architecture with user service, product service, and order service communicating through a message queue\",\n  \"diagramType\": \"flowchart\",\n  \"useAdvancedModel\": true\n}\n```\n\n#### generate_diagram_from_code\n\nGenerates a Mermaid diagram from code using AI.\n\n**Parameters:**\n- `code`: The code to analyze and generate a diagram from\n- `diagramType`: Type of diagram to generate (e.g., 'classDiagram', 'flowchart', etc.)\n\n**Example:**\n```json\n{\n  \"code\": \"class User { ... } class AuthService { ... }\",\n  \"diagramType\": \"classDiagram\"\n}\n```\n\n#### generate_diff_diagram\n\nGenerates a Mermaid diagram showing differences between two versions of code.\n\n**Parameters:**\n- `beforeCode`: The code before changes\n- `afterCode`: The code after changes\n- `diagramType`: Type of diagram to generate (e.g., 'classDiagram', 'flowchart', etc.)\n\n**Example:**\n```json\n{\n  \"beforeCode\": \"class User { ... }\",\n  \"afterCode\": \"class User { ... additional methods ... }\",\n  \"diagramType\": \"classDiagram\"\n}\n```\n\n#### export_diagram_to_image\n\nExports a Mermaid diagram to an image format (PNG, SVG, or PDF).\n\n**Parameters:**\n- `mermaidCode`: The Mermaid diagram code to export\n- `format`: (Optional) The image format to export to ('png', 'svg', 'pdf', default: 'png')\n- `width`: (Optional) The width of the image in pixels (default: 800)\n- `height`: (Optional) The height of the image in pixels (default: 600)\n- `backgroundColor`: (Optional) The background color of the image (CSS color or \"transparent\", default: '#ffffff')\n\n**Example:**\n```json\n{\n  \"mermaidCode\": \"flowchart TD\\n  A[Start] --> B[End]\",\n  \"format\": \"svg\",\n  \"width\": 1200,\n  \"height\": 800,\n  \"backgroundColor\": \"#f0f0f0\"\n}\n```\n\n#### generate_repository_evolution_diagram\n\nGenerates a diagram showing the evolution of a repository over time.\n\n**Parameters:**\n- `repoUrl`: URL of the GitHub repository\n- `diagramType`: Type of diagram to generate (e.g., 'gitGraph', 'flowchart', etc.)\n- `filepath`: (Optional) Path to a specific file to track\n- `commitLimit`: (Optional) Maximum number of commits to analyze (default: 10)\n\n**Example:**\n```json\n{\n  \"repoUrl\": \"https://github.com/username/repository\",\n  \"diagramType\": \"gitGraph\",\n  \"filepath\": \"src/main.js\",\n  \"commitLimit\": 5\n}\n```\n\n## Examples\n\n### Generating a Class Diagram from Text\n\n```\ngenerate_diagram_from_text({\n  \"description\": \"Create a class diagram for a library system with Book, Author, and Library classes. Books have titles and ISBNs. Authors have names and can write multiple books. Libraries contain many books.\",\n  \"diagramType\": \"classDiagram\"\n})\n```\n\nResult:\n```mermaid\nclassDiagram\n  class Book {\n    +String title\n    +String ISBN\n    +getDetails()\n  }\n  class Author {\n    +String name\n    +List books\n    +addBook(Book)\n  }\n  class Library {\n    +List books\n    +addBook(Book)\n    +findBookByISBN(String)\n  }\n  Author \"1\" -- \"n\" Book: writes\n  Library \"1\" -- \"n\" Book: contains\n```\n\n### Generating a Flowchart from GitHub\n\n```\ngenerate_diagram_from_github({\n  \"repoUrl\": \"https://github.com/username/api-service\",\n  \"diagramType\": \"flowchart\"\n})\n```\n\nResult:\n```mermaid\nflowchart TD\n  A[Client] --> B[API Gateway]\n  B --> C{Authentication}\n  C -->|Valid| D[Route Request]\n  C -->|Invalid| E[Return 401]\n  D --> F[Service 1]\n  D --> G[Service 2]\n  D --> H[Service 3]\n  F --> I[Database]\n  G --> I\n  H --> I\n```\n\n## Development\n\n### Running in Development Mode\n\nTo run the server in development mode with automatic reloading:\n\n```bash\nnpm run dev\n```\n\nThis uses `nodemon` and `ts-node` to run the TypeScript code directly without a separate build step, automatically restarting when files change.\n\n### Running the TypeScript Compiler\n\nYou can run the TypeScript compiler directly using the following methods:\n\n#### Using the locally installed TypeScript\n\n```bash\n# Using npx to run the local TypeScript installation\nnpx tsc\n\n# Compile with specific tsconfig file\nnpx tsc --project tsconfig.json\n\n# Watch mode - automatically recompile when files change\nnpx tsc --watch\n\n# Compile specific files\nnpx tsc src/index.ts src/server.ts\n```\n\n#### Using globally installed TypeScript\n\nIf you have TypeScript installed globally:\n\n```bash\n# Install TypeScript globally (if not already installed)\nnpm install -g typescript\n\n# Run the TypeScript compiler\ntsc\n\n# Compile with specific tsconfig file\ntsc --project tsconfig.json\n\n# Watch mode\ntsc --watch\n```\n\n#### Common TypeScript Compiler Options\n\n- `--outDir <directory>`: Specify output directory for compiled files\n- `--target <ES version>`: Specify ECMAScript target version (e.g., ES2020)\n- `--module <module system>`: Specify module system (e.g., NodeNext)\n- `--declaration`: Generate .d.ts declaration files\n- `--sourceMap`: Generate source map files for debugging\n- `--strict`: Enable all strict type checking options\n- `--noEmit`: Check for errors without generating output files\n- `--noImplicitAny`: Raise error on expressions with implied 'any' type\n\nFor a complete list of compiler options, run `npx tsc --help` or refer to the [TypeScript documentation](https://www.typescriptlang.org/docs/handbook/compiler-options.html).\n\n### TypeScript Configuration\n\nArchy is built with TypeScript using the following configuration:\n\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"NodeNext\",\n    \"moduleResolution\": \"NodeNext\",\n    \"esModuleInterop\": true,\n    \"strict\": true,\n    \"outDir\": \"build\",\n    \"declaration\": true,\n    \"sourceMap\": true,\n    \"resolveJsonModule\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\", \"build\"]\n}\n```\n\nKey TypeScript features used:\n- ES2020 target for modern JavaScript features\n- NodeNext module resolution for compatibility with Node.js\n- Declaration files generation for better type support\n- Source maps for easier debugging\n\n\n### Project Structure\n\n- `src/`: TypeScript source files\n  - `src/index.ts`: Main entry point and server implementation\n  - `src/server.ts`: Server implementation\n  - `src/generators/`: Diagram generation logic\n  - `src/utils/`: Utility functions and helpers\n- `build/`: Compiled JavaScript output\n- `examples/`: Example usage scripts\n- `test/`: Test files\n"
}