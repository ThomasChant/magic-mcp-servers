{
  "mcp_name": "MediFinderBot/medifinder-mcp",
  "mcp_description": "Facilitates secure communication for medicine inventory queries with AI assistants, offering location-based searches and WhatsApp integration.",
  "mcp_id": "MediFinderBot_medifinder-mcp",
  "fetch_timestamp": "2025-06-23T06:38:04.970636Z",
  "github_url": "https://github.com/MediFinderBot/medifinder-mcp",
  "repository": {
    "name": "medifinder-mcp",
    "full_name": "MediFinderBot/medifinder-mcp",
    "description": "Message Communication Protocol (MCP) server that facilitates secure, standardized communication between system components and the medicine inventory database. Provides RESTful endpoints for location-based medicine searches, availability queries, and optimized messaging for WhatsApp integration.",
    "html_url": "https://github.com/MediFinderBot/medifinder-mcp",
    "created_at": "2025-03-21T20:29:17Z",
    "updated_at": "2025-03-22T06:52:17Z",
    "pushed_at": "2025-03-22T06:52:11Z",
    "size": 32,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "MediFinderBot",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/204400497?v=4",
      "html_url": "https://github.com/MediFinderBot"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "Python": 65953
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# MedifinderMCP Server\n\nAn MCP (Model Context Protocol) server for medicine inventory queries, designed to work with AI assistants like Claude.\n\n## Overview\n\nThe MedifinderMCP Server provides tools and resources for querying a medicine inventory database through the Model Context Protocol (MCP). It allows AI assistants and other clients to:\n\n- Search for medicines by name or location\n- Check medicine availability at different healthcare facilities\n- Get stock information for specific medicines\n- View statistics on medicine availability by region\n- Analyze stock status across the healthcare system\n\n## Database Schema\n\nThe application uses a normalized database schema:\n\n```\nRegion\n  - region_id (PK)\n  - name\n  - code\n  - created_at\n  - updated_at\n\nMedicalCenter\n  - center_id (PK)\n  - code\n  - name\n  - region_id (FK -> Region)\n  - category\n  - reporter_name\n  - institution_type\n  - reporter_type\n  - address\n  - latitude\n  - longitude\n  - created_at\n  - updated_at\n\nProductType\n  - type_id (PK)\n  - code\n  - name\n  - description\n  - created_at\n  - updated_at\n\nProduct\n  - product_id (PK)\n  - code\n  - name\n  - type_id (FK -> ProductType)\n  - description\n  - dosage_form\n  - strength\n  - created_at\n  - updated_at\n\nInventory\n  - inventory_id (PK)\n  - center_id (FK -> MedicalCenter)\n  - product_id (FK -> Product)\n  - current_stock\n  - avg_monthly_consumption\n  - accumulated_consumption_4m\n  - measurement\n  - last_month_consumption\n  - last_month_stock\n  - status_indicator\n  - cpma_12_months_ago\n  - cpma_24_months_ago\n  - cpma_36_months_ago\n  - accumulated_consumption_12m\n  - report_date\n  - status\n  - created_at\n  - updated_at\n\nUser\n  - user_id (PK)\n  - phone_number\n  - name\n  - preferred_location\n  - created_at\n  - updated_at\n\nSearchHistory\n  - search_id (PK)\n  - user_id (FK -> User)\n  - product_query\n  - location_query\n  - search_radius\n  - results_count\n  - created_at\n```\n\n## Project Structure\n\n```\nmedifinder-mcp/\n├── app/\n│   ├── __init__.py\n│   ├── config.py            # Configuration management\n│   ├── db/\n│   │   ├── __init__.py\n│   │   ├── connection.py    # Database connection handling\n│   │   └── queries.py       # SQL queries\n│   ├── models/\n│   │   ├── __init__.py\n│   │   ├── base.py          # Base model with timestamp fields\n│   │   ├── region.py        # Region model\n│   │   ├── medical_center.py # Medical center model\n│   │   ├── product_type.py  # Product type model\n│   │   ├── product.py       # Product model\n│   │   ├── inventory.py     # Inventory model\n│   │   ├── user.py          # User model\n│   │   └── search_history.py # Search history model\n│   ├── mcp/\n│   │   ├── __init__.py\n│   │   ├── server.py        # MCP server setup\n│   │   ├── tools.py         # Tool implementations\n│   │   ├── resources.py     # Resource implementations\n│   │   └── prompts.py       # Prompt templates\n│   └── utils/\n│       ├── __init__.py\n│       └── helpers.py       # Helper functions\n├── main.py                  # Application entry point\n├── requirements.txt         # Dependencies\n└── README.md                # Documentation\n```\n\n## MCP Features\n\n### Tools\n\n- `search_medicines`: Search for medicines by name or location\n- `get_medicine_locations`: Find locations where a medicine is available\n- `get_medicine_stock`: Get stock information for a specific medicine\n- `get_regional_statistics`: Get medicine statistics by region\n- `get_medicine_status`: Get overall medicine statistics\n- `diagnose_database`: Check database connectivity and content\n- `troubleshoot_connection`: Detailed database connection diagnostics\n- `create_database_schema`: Create database tables based on models\n\n### Resources\n\n- `product://{id}`: Get product details by ID\n- `stock://{name}`: Get stock information for a product by name\n- `locations://{region}`: Get medical centers in a specific region\n- `statistics://stock`: Get overall stock statistics\n- `statistics://regions`: Get regional statistics\n\n### Prompts\n\n- `medicine_search_prompt`: Template for searching medicines by name\n- `medicine_availability_prompt`: Template for checking medicine availability\n- `medicine_statistics_prompt`: Template for analyzing medicine statistics\n- `regional_availability_prompt`: Template for analyzing regional medicine availability\n\n## Installation\n\n1. Clone the repository:\n   ```\n   git clone https://github.com/yourusername/medifinder-mcp.git\n   cd medifinder-mcp\n   ```\n\n2. Create a virtual environment and install dependencies:\n   ```\n   python -m venv venv\n   source venv/bin/activate  # On Windows: venv\\Scripts\\activate\n   pip install -r requirements.txt\n   ```\n\n3. Set up environment variables by creating a `.env` file:\n   ```\n   DB_HOST=localhost\n   DB_PORT=5432\n   DB_NAME=medifinderbot\n   DB_USER=your_user\n   DB_PASSWORD=your_password\n   DEBUG=True\n   ENV=development\n   SERVER_NAME=MedifinderMCP\n   SERVER_VERSION=1.0.0\n   MCP_SERVER_NAME=MedifinderMCP\n   MCP_SERVER_DESCRIPTION=MCP server for medicine inventory queries\n   MAX_SEARCH_RESULTS=50\n   SEARCH_SIMILARITY_THRESHOLD=0.3\n   ```\n\n4. Create the database:\n   ```\n   # Connect to PostgreSQL\n   psql -U postgres\n   \n   # Create database and user\n   CREATE DATABASE medifinderbot;\n   CREATE USER your_user WITH PASSWORD 'your_password';\n   GRANT ALL PRIVILEGES ON DATABASE medifinderbot TO your_user;\n   \n   # Exit PostgreSQL\n   \\q\n   ```\n\n5. Initialize the database schema:\n   After starting the server, use the `create_database_schema` tool to create the tables.\n\n## Usage\n\n### Running the Server Locally\n\nYou can run the MCP server directly:\n\n```\npython main.py\n```\n\n### Using MCP Inspector\n\nFor development and testing, the MCP Inspector provides a convenient way to interact with the server:\n\n1. Install MCP CLI:\n   ```\n   pip install mcp[cli]\n   ```\n\n2. Run the server in development mode:\n   ```\n   python -m mcp dev main.py\n   ```\n\n3. The MCP Inspector will open in your browser, allowing you to:\n   - Test tools and resources\n   - View the output of diagnostic tools\n   - Experiment with different queries\n\n### Integration with Claude Desktop\n\nTo use the server with Claude Desktop:\n\n1. Create a batch file for reliable startup (run-mcp-server.bat):\n   ```batch\n   @echo off\n   cd /d %~dp0\n   call venv\\Scripts\\activate.bat\n   python main.py\n   ```\n\n2. Install the server in Claude Desktop:\n   ```\n   mcp install run-mcp-server.bat -f .env\n   ```\n\n3. Alternatively, edit Claude Desktop's config file manually:\n   ```json\n   {\n     \"mcpServers\": {\n       \"MedifinderMCP\": {\n         \"command\": \"C:\\\\path\\\\to\\\\project\\\\venv\\\\Scripts\\\\python.exe\",\n         \"args\": [\"C:\\\\path\\\\to\\\\project\\\\main.py\"],\n         \"env\": {\n           \"DB_HOST\": \"localhost\",\n           \"DB_PORT\": \"5432\",\n           \"DB_NAME\": \"medifinderbot\",\n           \"DB_USER\": \"your_user\",\n           \"DB_PASSWORD\": \"your_password\",\n           \"DEBUG\": \"True\",\n           \"ENV\": \"development\",\n           \"SERVER_NAME\": \"MedifinderMCP\",\n           \"SERVER_VERSION\": \"1.0.0\",\n           \"MCP_SERVER_NAME\": \"MedifinderMCP\",\n           \"MCP_SERVER_DESCRIPTION\": \"MCP server for medicine inventory queries\",\n           \"MAX_SEARCH_RESULTS\": \"50\",\n           \"SEARCH_SIMILARITY_THRESHOLD\": \"0.3\"\n         }\n       }\n     }\n   }\n   ```\n\n4. In Claude Desktop, select the MedifinderMCP server from the servers dropdown to enable it for your conversation.\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Database Connection Issues**:\n   - Use the `troubleshoot_connection` tool to diagnose connection problems\n   - Verify your database credentials in the .env file\n   - Ensure PostgreSQL is running on the specified port\n\n2. **Missing Tables**:\n   - Use the `create_database_schema` tool to create the database tables\n   - Check logs for any errors during schema creation\n\n3. **Empty Results**:\n   - If queries return no results, there might not be any data in your tables\n   - You need to import data into the tables using your data ingestion process\n\n4. **Session Binding Errors**:\n   - If you see \"Instance is not bound to a Session\" errors, ensure model instances are converted to dictionaries within active sessions\n   - See how this is handled in the queries.py file for examples\n\n5. **Missing Dependencies**:\n   - Run `pip install -r requirements.txt` to ensure all dependencies are installed\n   - Common missing dependencies are: mcp, python-dotenv, psycopg2-binary\n\n### Diagnostic Tools\n\nWhen troubleshooting, use these built-in diagnostic tools:\n\n1. `diagnose_database`: Checks if:\n   - The database connection works\n   - Tables exist\n   - Tables contain data\n\n2. `troubleshoot_connection`: Provides detailed information about:\n   - Database connection settings\n   - Connection errors\n   - Table structure\n   - Recommended fixes\n\n3. `create_database_schema`: Creates the database tables and provides:\n   - List of created tables\n   - Any errors that occurred\n   - Test record creation results\n\n## License\n\n[MIT License](LICENSE)\n\n## Contributors\n\n- Lenin Carrasco - Initial work"
}