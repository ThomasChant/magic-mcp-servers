{
  "mcp_name": "hloiseaufcms/mcp-gopls",
  "mcp_description": "üèéÔ∏è üè† - A MCP server for interacting with [Go's Language Server Protocol (gopls)](https://github.com/golang/tools/tree/master/gopls) and benefit from advanced Go code analysis features.",
  "mcp_id": "hloiseaufcms_mcp-gopls",
  "fetch_timestamp": "2025-06-23T04:48:11.599831Z",
  "github_url": "https://github.com/hloiseaufcms/mcp-gopls",
  "repository": {
    "name": "mcp-gopls",
    "full_name": "hloiseaufcms/mcp-gopls",
    "description": null,
    "html_url": "https://github.com/hloiseaufcms/mcp-gopls",
    "created_at": "2025-04-05T15:25:05Z",
    "updated_at": "2025-06-20T11:37:39Z",
    "pushed_at": "2025-04-09T14:11:40Z",
    "size": 3312,
    "stargazers_count": 25,
    "watchers_count": 25,
    "forks_count": 4,
    "open_issues_count": 1,
    "language": "Go",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "hloiseaufcms",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/115726472?v=4",
      "html_url": "https://github.com/hloiseaufcms"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 4,
    "subscribers_count": 2,
    "languages": {
      "Go": 46882,
      "Makefile": 400
    },
    "language_percentages": {
      "Go": 99.15,
      "Makefile": 0.85
    },
    "pull_requests_count": 1,
    "contributors_count": 2
  },
  "readme": "# MCP LSP Go\n\nA Model Context Protocol (MCP) server that allows AI assistants like Claude to interact with Go's Language Server Protocol (LSP) and benefit from advanced Go code analysis features.\n\n## Overview\n\nThis MCP server helps AI assistants to:\n\n- Use LSP to analyze Go code\n- Navigate to definitions and find references\n- Check code diagnostics\n- Get hover information for symbols\n- Get completion suggestions\n\n## Architecture\n\nThis project uses the [mark3labs/mcp-go](https://github.com/mark3labs/mcp-go) library to implement the Model Context Protocol. The MCP integration enables seamless communication between AI assistants and Go tools.\n\nThe server communicates with [gopls](https://github.com/golang/tools/tree/master/gopls), the official language server for Go, via the Language Server Protocol (LSP).\n\n## Features\n\n- **LSP Integration**: Connection to Go's Language Server Protocol for code analysis\n- **Code Navigation**: Finding definitions and references in the code\n- **Code Quality**: Getting diagnostics and errors\n- **Advanced Information**: Hover information and completion suggestions\n\n## Project Structure\n\n```bash\n.\n‚îú‚îÄ‚îÄ cmd\n‚îÇ   ‚îî‚îÄ‚îÄ mcp-gopls        # Application entry point\n‚îú‚îÄ‚îÄ pkg\n‚îÇ   ‚îú‚îÄ‚îÄ lsp             # LSP client to communicate with gopls\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ client      # LSP client implementation\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ protocol    # LSP protocol types and features\n‚îÇ   ‚îú‚îÄ‚îÄ server          # MCP server\n‚îÇ   ‚îî‚îÄ‚îÄ tools           # MCP tools exposing LSP features\n```\n\n## Installation\n\n```bash\ngo install github.com/hloiseaufcms/mcp-gopls/cmd/mcp-gopls@latest\n```\n\n## Add to Cursor\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-gopls\": {\n      \"command\": \"mcp-gopls\"\n    }\n  }\n} \n```\n\n## MCP Tools\n\nThe MCP server provides the following tools:\n\n| Tool | Description |\n|-------|-------------|\n| `go_to_definition` | Navigate to the definition of a symbol |\n| `find_references` | Find all references to a symbol |\n| `check_diagnostics` | Get diagnostics for a file |\n| `get_hover_info` | Get detailed information about a symbol |\n| `get_completion` | Get completion suggestions at a position |\n| `analyze_coverage` | Analyze test coverage for Go code |\n\n## Usage Example\n\nUsing the server with AI assistants that support MCP:\n\n```Markdown\n# Ask the AI to get information about the code\nCan you find the definition of the `ServeStdio` function in this project?\n\n# Ask for diagnostics\nAre there any errors in my main.go file?\n\n# Ask for information about a symbol\nWhat does the Context.WithTimeout function do in Go?\n```\n\n## Development\n\n```bash\ngit clone https://github.com/hloiseaufcms/mcp-gopls.git\ncd mcp-gopls\ngo mod tidy\ngo build -o mcp-gopls cmd/mcp-gopls/main.go\n./mcp-gopls\n```\n\n## Prerequisites\n\n- Go 1.21 or higher\n- gopls installed (`go install golang.org/x/tools/gopls@latest`)\n\n## Integration with Ollama\n\nThis MCP server can be used with any tool that supports the MCP protocol. For Ollama integration:\n\n1. Make sure Ollama is running\n2. The MCP server runs independently and communicates through stdin/stdout\n3. Configure your client to use the MCP server as a tool provider\n\n## License\n\nApache License 2.0"
}