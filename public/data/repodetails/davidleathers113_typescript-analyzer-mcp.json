{
  "mcp_name": "davidleathers113/typescript-analyzer-mcp",
  "mcp_description": "Enhance TypeScript codebases by intelligently analyzing and replacing 'any' types with specific types, while offering React component interface generation and advanced error handling.",
  "mcp_id": "davidleathers113_typescript-analyzer-mcp",
  "fetch_timestamp": "2025-06-23T02:30:47.457074Z",
  "github_url": "https://github.com/davidleathers113/typescript-analyzer-mcp",
  "repository": {
    "name": "typescript-analyzer-mcp",
    "full_name": "davidleathers113/typescript-analyzer-mcp",
    "description": "Analyze and fix any types in TypeScript with an intelligent MCP server ‚Äì fast, extensible, and React-aware.",
    "html_url": "https://github.com/davidleathers113/typescript-analyzer-mcp",
    "created_at": "2025-04-08T17:01:06Z",
    "updated_at": "2025-05-06T14:41:07Z",
    "pushed_at": "2025-04-08T17:10:14Z",
    "size": 40,
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "davidleathers113",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/20269817?v=4",
      "html_url": "https://github.com/davidleathers113"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 81458
    },
    "language_percentages": {
      "TypeScript": 100
    },
    "pull_requests_count": 1,
    "contributors_count": 2,
    "package_json_version": "1.0.0"
  },
  "readme": "# TypeScript Analyzer MCP Server - Enterprise Edition\n\nA high-performance MCP (Model Context Protocol) server for analyzing and fixing TypeScript `any` types in your codebase, with advanced error handling, caching, and intelligent type inference.\n\n## Features\n\n- üîç **Analyze TypeScript Files**: Scan files for `any` types and get suggested replacements\n- üõ†Ô∏è **Fix TypeScript Files**: Automatically replace `any` types with more specific types\n- üìä **Batch Processing**: Process multiple files at once\n- üß© **Component Interface Generation**: Generate TypeScript interfaces for React components\n- ‚öôÔ∏è **Server Configuration**: Dynamically update server config (log level, caching, etc.)\n- üîß **Cache Management**: Clear and manage analysis caches\n\n## Installation\n\n1. **Clone this repository**\n2. **Install dependencies**:\n   ```bash\n   npm install\n   ```\n3. **Build the project**:\n   ```bash\n   npm run build\n   ```\n4. **Start the server**:\n   ```bash\n   npm run start\n   ```\n   or\n   ```bash\n   node dist/index.js\n   ```\n\n## Using with Claude Desktop\n\nTo use this MCP server with Claude Desktop, add it to your `.claude-app.json` configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"typescript-analyzer\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/typescript-analyzer-mcp/dist/index.js\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\n## Tools\n\n### `getServerInfo`\n\nRetrieves basic information about the analyzer server (name, version, description, features, configuration).\n\n**Example:**\n```\nPlease provide server info\n```\n\n### `configureServer`\n\nUpdates server configuration (log levels, caching, etc.) at runtime.\n\n**Parameters:**\n- `config`: A partial configuration object to merge with the current config\n\n**Example:**\n```\nPlease update the logLevel to 'debug' for the server\n```\n\n### `analyzeTypeScriptFile`\n\nAnalyzes a TypeScript file for `any` types.\n\n**Parameters:**\n- `filePath`: Path to the TypeScript file to analyze\n- `skipCache`: (optional) If true, forces a fresh analysis\n\n**Example:**\n```\nPlease analyze the TypeScript file src/components/Button.tsx for any types\n```\n\n### `fixTypeScriptFile`\n\nFixes `any` types in a single TypeScript file.\n\n**Parameters:**\n- `filePath`: Path to the TypeScript file to fix\n- `fixType`: Default type to use for replacement (default: \"unknown\")\n- `dryRun`: If true, show changes without applying them\n- `skipBackup`: If true, do not create a backup file before modifying\n\n**Example:**\n```\nPlease fix the TypeScript file src/components/Button.tsx, using Record<string, unknown> as the default replacement\n```\n\n### `batchFixTypeScriptFiles`\n\nBatch fixes `any` types in multiple TypeScript files.\n\n**Parameters:**\n- `directory`: Directory containing TypeScript files\n- `pattern`: Glob pattern for files to process (e.g. \"**/*.ts\")\n- `fixType`: Default type to use for replacement\n- `dryRun`: If true, show changes without applying them\n- `concurrency`: (optional) How many files to process in parallel\n\n**Example:**\n```\nPlease fix all TypeScript files in the src/components directory\n```\n\n### `generateComponentInterface`\n\nGenerates a proper TypeScript interface for React component props.\n\n**Parameters:**\n- `filePath`: Path to the React component file\n- `componentName`: Name of the component to analyze\n- `outputPath`: (optional) Path where to save the generated interface\n\n**Example:**\n```\nPlease generate an interface for the Button component in src/components/Button.tsx\n```\n\n### `clearCache`\n\nClears the analysis cache to force fresh analysis on subsequent operations.\n\n**Example:**\n```\nPlease clear the analysis cache\n```\n\n## Type Mapping Strategy\n\nThe server uses a set of predefined mappings for common patterns:\n\n| Pattern         | Replacement                                          |\n|-----------------|------------------------------------------------------|\n| `e: any`        | `e: React.SyntheticEvent`                            |\n| `event: any`    | `event: React.SyntheticEvent`                        |\n| `onChange: any` | `onChange: (value: unknown) => void`                 |\n| `onClick: any`  | `onClick: (event: React.MouseEvent<HTMLElement>) => void` |\n| `ref: any`      | `ref: React.RefObject<HTMLElement>`                  |\n| `data: any`     | `data: Record<string, unknown>`                      |\n| `options: any`  | `options: Record<string, unknown>`                   |\n| `config: any`   | `config: Record<string, unknown>`                    |\n| `props: any`    | `props: Record<string, unknown>`                     |\n| `items: any[]`  | `items: unknown[]`                                   |\n| `results: any[]`| `results: unknown[]`                                 |\n| `callback: any` | `callback: (...args: unknown[]) => unknown`          |\n\nFor patterns not covered by the mappings, it defaults to using `unknown`.\n\n## License\n\nMIT"
}