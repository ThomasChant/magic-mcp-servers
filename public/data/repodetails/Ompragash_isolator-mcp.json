{
  "mcp_name": "Ompragash/isolator-mcp",
  "mcp_description": "Facilitates secure execution of Python, Go, and JavaScript code snippets within isolated Docker containers, accessible via MCP.",
  "mcp_id": "Ompragash_isolator-mcp",
  "fetch_timestamp": "2025-06-23T07:17:45.414737Z",
  "github_url": "https://github.com/Ompragash/isolator-mcp",
  "repository": {
    "name": "isolator-mcp",
    "full_name": "Ompragash/isolator-mcp",
    "description": "MCP server providing secure code execution (Python, Go, JS) via containers.",
    "html_url": "https://github.com/Ompragash/isolator-mcp",
    "created_at": "2025-04-26T02:42:23Z",
    "updated_at": "2025-06-19T21:10:49Z",
    "pushed_at": "2025-04-26T02:52:05Z",
    "size": 37,
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "Go",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "devel",
    "owner": {
      "login": "Ompragash",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/21008429?v=4",
      "html_url": "https://github.com/Ompragash"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "Go": 18183,
      "JavaScript": 15851,
      "Python": 173
    },
    "language_percentages": {
      "Go": 53.16,
      "JavaScript": 46.34,
      "Python": 0.51
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "0.1.0"
  },
  "readme": "# Isolator MCP Server\n\n`isolator-mcp` is a [Model Context Protocol (MCP)](https://modelcontextprotocol.io/) server written in TypeScript. It acts as a wrapper around the embedded [`isolator` Go CLI tool](./isolator-cli), providing a secure code execution sandbox accessible via MCP.\n\nLLM applications (MCP Hosts) can connect to this server and use its `execute_code` tool to safely run Python, Go, or JavaScript code snippets provided directly or loaded from predefined snippet files.\n\n## Features\n\n*   Provides the `execute_code` MCP tool.\n*   Supports executing code provided directly (`language`, `entrypoint_code`) or via named snippets (`snippet_name`).\n*   Supports multiple languages (Python, Go, JavaScript, configurable).\n*   Uses the embedded `isolator` Go CLI (`isolator-cli/`) for secure Docker container execution.\n*   Configurable security defaults (timeout, resource limits, network) via `isolator_config.json`.\n*   Manages temporary directories on the host for code execution.\n*   Handles file copying into containers (by instructing the `isolator` CLI).\n*   Returns structured results (stdout, stderr, status) via MCP, setting `isError: true` on tool-level failures.\n\n## Prerequisites\n\n*   **Docker:** Required for container creation and execution by the `isolator-cli`. Ensure the Docker daemon is running.\n*   **Go:** Required to build the embedded `isolator-cli` Go binary.\n*   **Node.js and npm:** Required to install dependencies, build, and run the `isolator-mcp` TypeScript server.\n\n## Installation\n\n1.  **Build `isolator` Go CLI:** Navigate to the embedded Go CLI directory and build the binary:\n    ```bash\n    cd isolator-cli\n    go build -o isolator main.go\n    cd .. \n    ```\n    This creates the `./isolator-cli/isolator` executable needed by the server.\n2.  **Configure `isolator-mcp`:**\n    *   Edit `isolator_config.json`: Update `isolatorPath` to point to the absolute path of the built binary (e.g., `/Users/ompragash/Documents/Cline/MCP/isolator-mcp/isolator-cli/isolator`). Adjust default limits, container workdir, language images, or the `promptsDir` (used for snippets) location if needed.\n    *   Ensure the `prompts` directory exists (default: `./prompts`). Add code snippet files (e.g., `hello_world.py`). The filename base (e.g., `hello_world`) is used as the `snippet_name`.\n3.  **Install Server Dependencies:** Navigate to the main directory (`isolator-mcp`) and run:\n    ```bash\n    npm install\n    ```\n4.  **Build Server:** Compile the TypeScript code:\n    ```bash\n    npm run build\n    ```\n    This creates the executable script at `build/index.js`.\n5.  **Configure MCP Host:** Add the server to your MCP client's settings file (e.g., `cline_mcp_settings.json` for the VS Code extension):\n    ```json\n    {\n      \"mcpServers\": {\n        \"isolator\": {\n          \"command\": \"node\",\n          \"args\": [\"/Users/ompragash/Documents/Cline/MCP/isolator-mcp/build/index.js\"],\n          \"env\": {},\n          \"disabled\": false,\n          \"autoApprove\": []\n        }\n      }\n    }\n    ```\n    *(Adjust the path in `args` if necessary)*. The MCP Host should automatically detect and start the server.\n\n**Important Note:** Ensure the Docker images specified in `isolator_config.json` (e.g., `python:3.11-alpine`, `golang:1.21-alpine`) are pulled onto your system beforehand using `docker pull <image_name>`. The `isolator` tool does not automatically download missing images.\n\n## Local Development / Testing\n\nTo run the server locally for development or testing (without installing it via MCP Host settings):\n\n1.  **Build Go CLI:** Ensure the `isolator` Go CLI is built within its subdirectory: \n    ```bash\n    cd isolator-cli \n    go build -o isolator main.go\n    cd ..\n    ```\n2.  **Build TS Server:** In this main directory (`isolator-mcp`), run `npm install` and `npm run build`.\n3.  **Configure:** Make sure `isolator_config.json` correctly points to the built `./isolator-cli/isolator` binary via the `isolatorPath` key (use the absolute path).\n4.  **Run Server:** Execute the built server directly using Node:\n    ```bash\n    node build/index.js\n    ```\n    The server will start, connect via stdio, and print logs (including `console.error` messages from `index.ts`) to the console.\n5.  **Interact (Manual):** You can manually send JSON-RPC messages (e.g., `tools/list`, `tools/call`) to the server's standard input to test its responses. Tools like `@modelcontextprotocol/inspector` can also be helpful (`npm run inspector`).\n\n*(Remember to stop this manually run server before relying on the MCP Host to start it via the settings file.)*\n\n## Architecture & Flow\n\n1.  **MCP Host Request:** An LLM asks the MCP Host (e.g., VS Code Extension) to call the `isolator` server's `execute_code` tool with arguments.\n2.  **Server Processing (`index.ts`):**\n    *   Receives the `tools/call` request via stdio.\n    *   Validates arguments using Zod.\n    *   Loads configuration from `isolator_config.json`.\n    *   Determines the code source:\n        *   If `snippet_name` is provided, reads the corresponding file from the configured `promptsDir` and determines the language from the file extension.\n        *   If `entrypoint_code` and `language` are provided, uses them directly.\n    *   Creates a temporary directory on the host.\n    *   Writes the entrypoint code and any `additional_files` into the temporary directory.\n    *   Constructs the command-line arguments for the embedded `isolator` Go CLI, including security flags from the config and the path to the temporary directory.\n    *   Spawns the `isolator` process using Node.js `child_process.spawn`.\n3.  **Go CLI Execution (`isolator-cli/isolator run`):**\n    *   Parses flags (including the new `--env` flag).\n    *   Creates a tar stream of the temporary directory contents.\n    *   Uses the Docker SDK to create a container with specified image, resource limits, environment variables (from `--env`), and security settings (NO bind mount).\n    *   Uses `CopyToContainer` to copy the tar stream into the container's working directory.\n    *   Starts the container, which executes the requested command (e.g., `python /workspace/hello_world.py`).\n    *   Waits for completion, captures stdout/stderr.\n    *   Removes the container.\n    *   Prints the result (status, output, etc.) as JSON to its stdout.\n4.  **Server Result Handling (`index.ts`):**\n    *   Reads the JSON output from the finished `isolator` process stdout.\n    *   Parses the JSON result.\n    *   Formats the `CallToolResult` for MCP, combining stdout/stderr and setting `isError` if the Go CLI reported a non-success status.\n    *   Sends the result back to the MCP Host.\n    *   Cleans up the temporary directory on the host.\n5.  **MCP Host Response:** Relays the result back to the LLM, which then formulates a response for the user.\n\n## `execute_code` Tool\n\n### Description\nExecutes code (Python, Go, JavaScript) in a secure, isolated container environment.\n\n### Input Schema (`arguments`)\n\n*   `language` (string, optional): The programming language (e.g., \"python\", \"go\", \"javascript\"). Required if `snippet_name` is not provided.\n*   `entrypoint_code` (string, optional): The main code content to execute. Required if `snippet_name` is not provided.\n*   `entrypoint_filename` (string, optional): Filename for the main code (e.g., \"main.py\", \"script.js\"). Defaults based on language if not provided.\n*   `additional_files` (array, optional): Array of objects, each with:\n    *   `filename` (string, required): Name of the additional file.\n    *   `content` (string, required): Content of the additional file.\n*   `snippet_name` (string, optional): Name of a pre-defined code snippet file (without extension) located in the configured `promptsDir`. Mutually exclusive with `language` and `entrypoint_code`.\n\n**Constraint:** Either `snippet_name` OR both `language` and `entrypoint_code` must be provided.\n\n### Output (`CallToolResult`)\n\n*   `content`: An array containing a single `TextContent` object.\n    *   `type`: \"text\"\n    *   `text`: A string containing the combined stdout and stderr from the execution, formatted like:\n        ```\n        --- stdout ---\n        [Actual stdout output]\n        --- stderr ---\n        [Actual stderr output]\n        ```\n        If an error occurred *during* execution (non-zero exit code, timeout), the text will be prepended with `Execution Failed (status): [error message]\\n\\n`.\n*   `isError` (boolean): `true` if the execution status reported by the `isolator` CLI was \"error\" or \"timeout\", `false` otherwise.\n\n*(Protocol-level errors, like invalid arguments or failure to start the process, will result in a standard MCP error response instead of a `CallToolResult`)*.\n"
}