{
  "mcp_name": "albertdow/mcp-datapi",
  "mcp_description": "Facilitates access to ECMWF's Climate Data Store catalogues and job statuses through an MCP server interface.",
  "mcp_id": "albertdow_mcp-datapi",
  "fetch_timestamp": "2025-06-23T03:08:44.421904Z",
  "github_url": "https://github.com/albertdow/mcp-datapi",
  "repository": {
    "name": "mcp-datapi",
    "full_name": "albertdow/mcp-datapi",
    "description": "An MCP server for working with ECWMF data catalogues",
    "html_url": "https://github.com/albertdow/mcp-datapi",
    "created_at": "2025-04-25T23:32:08Z",
    "updated_at": "2025-06-11T14:55:02Z",
    "pushed_at": "2025-05-02T10:05:27Z",
    "size": 22,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "albertdow",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/25036752?v=4",
      "html_url": "https://github.com/albertdow"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 4157
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# Climate Data Store (CDS) MCP Server\n\n## Overview\n\nA Model Context Protocol (MCP) server implementation that provides the LLM an\ninterface to retrieve [CDS](https://cds.climate.copernicus.eu/) catalogue data and job statuses.\nThe underlying API is `datapi` - docs found [here](https://ecmwf-projects.github.io/datapi/).\n\n## Features\n\n- Tools:\n  - `get_jobs`: find the jobs available, optionally add a filter based on status.\n    Returns a list of job ids.\n  - `download_job_result`: downloads the job result using job id.\n  - `get_all_collections`: gets all available collection ids in the catalogue.\n  - `get_collection_by_id`: fetches information for a specified collection.\n  - `submit_job`: submits a download request.\n\n- Environment variable support using `.env`.\n\n## Prerequisites\n\n- Python 3.13 or higher.\n- CDS API Key: [here](https://cds.climate.copernicus.eu/)\n- MCP Host/Client: tested on Claude Desktop and the MCP Inspector.\n\n## Installation\n\n- Clone the repository:\n\n```bash\ngit clone git@github.com:albertdow/mcp-datapi.git\ncd mcp-datapi\n```\n\n- Install dependencies (using `uv`):\n\n```bash\nuv add \"mcp[cli]\" datapi python-dotenv\n```\n\n- Setup CDS API key by creating a `.env` file and adding the following:\n\n```bash\nDATAPI_URL=<DATAPI_URL>\nDATAPI_KEY=<DATAPI_KEY>\n```\n\nDetails on CDS API key setup can be found [here](https://cds.climate.copernicus.eu/how-to-api).\n\n## Usage\n\n### Dev Mode with MCP Inspector\n\nTest the server locally:\n\n```bash\nmcp dev datapi_server.py\n```\n\n### Integrate with Claude Desktop\n\n```bash\nmcp install datapi_server.py --name \"DatapiServer\" -f .env\n```\n\nOr directly put add to your `claude_desktop_config.json`:\n\n```json\n{\n    \"mcpServers\": {\n        \"DatapiServer\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"mcp-datapi\",\n                \"run\",\n                \"mcp_datapi/datapi_server.py\"\n            ],\n            \"env\": {\n                \"DATAPI_URL\": \"<DATAPI_URL>\",\n                \"DATAPI_KEY\": \"<DATAPI_KEY>\"\n            }\n        }\n    }\n}\n```\n\nNote:\n\n- I had to specify the path to `uv`, e.g. `/Users/username/.local/bin/uv`.\n"
}