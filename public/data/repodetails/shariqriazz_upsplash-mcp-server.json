{
  "mcp_name": "shariqriazz/upsplash-mcp-server",
  "mcp_description": "Facilitates interaction with the Unsplash API for photo searching and downloading through MCP tools.",
  "mcp_id": "shariqriazz_upsplash-mcp-server",
  "fetch_timestamp": "2025-06-23T08:20:59.097510Z",
  "github_url": "https://github.com/shariqriazz/upsplash-mcp-server",
  "repository": {
    "name": "upsplash-mcp-server",
    "full_name": "shariqriazz/upsplash-mcp-server",
    "description": null,
    "html_url": "https://github.com/shariqriazz/upsplash-mcp-server",
    "created_at": "2025-04-24T05:46:45Z",
    "updated_at": "2025-04-25T12:13:54Z",
    "pushed_at": "2025-04-25T12:13:50Z",
    "size": 15,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "shariqriazz",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/196900129?v=4",
      "html_url": "https://github.com/shariqriazz"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 14437
    },
    "language_percentages": {
      "JavaScript": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "0.1.1"
  },
  "readme": "# Unsplash MCP Server\n\nThis project implements a Model Context Protocol (MCP) server that provides tools for interacting with the Unsplash API, allowing users to search for and download photos.\n\n[![Unsplash MCP Server Badge](https://glama.ai/mcp/servers/@shariqriazz/unsplash-mcp-server/badge)](https://glama.ai/mcp/servers/@shariqriazz/unsplash-mcp-server)\n*(Note: Replace `@shariqriazz` with the correct username/namespace if needed)*\n\n**Git Repository:** [https://github.com/shariqriazz/upsplash-mcp-server](https://github.com/shariqriazz/upsplash-mcp-server) *(Please update if this is not the correct URL)*\n\n## Features\n\n*   Provides MCP tools to interact with the Unsplash API.\n*   Search for photos based on queries, pagination, and orientation.\n*   Download photos at specified resolutions (raw, full, regular, small).\n*   Requires an Unsplash Access Key configured via environment variables.\n*   Downloads photos to a local `unsplash/` directory within the workspace.\n\n## Tools Provided\n\n*   **`search_photos`**: Searches for photos on Unsplash.\n    *   **Input Schema:**\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"query\": { \"type\": \"string\", \"description\": \"The search term(s).\" },\n            \"page\": { \"type\": \"number\", \"description\": \"Page number (default: 1).\", \"default\": 1 },\n            \"per_page\": { \"type\": \"number\", \"description\": \"Items per page (default: 10, max: 30).\", \"default\": 10, \"maximum\": 30 },\n            \"orientation\": { \"type\": \"string\", \"enum\": [\"landscape\", \"portrait\", \"squarish\"], \"description\": \"Filter by orientation.\" }\n          },\n          \"required\": [\"query\"]\n        }\n        ```\n    *   **Output:** Returns JSON data containing search results and a formatted text summary with image links.\n\n*   **`download_photo`**: Downloads an Unsplash photo to the workspace's `unsplash/` folder after triggering the download tracking event.\n    *   **Input Schema:**\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"photo_id\": { \"type\": \"string\", \"description\": \"The ID of the photo to download.\" },\n            \"resolution\": { \"type\": \"string\", \"enum\": [\"raw\", \"full\", \"regular\", \"small\"], \"description\": \"Desired resolution (default: raw).\", \"default\": \"raw\" },\n            \"filename\": { \"type\": \"string\", \"description\": \"Optional filename (e.g., my-image.jpg). Defaults to sanitized description or {photo_id}.jpg.\" }\n          },\n          \"required\": [\"photo_id\"]\n        }\n        ```\n    *   **Output:** Returns a success message with the path to the downloaded file.\n\n*(Note: Schemas are illustrative. The server exposes the exact schemas via MCP.)*\n\n## Prerequisites\n\n*   Node.js (v18+ recommended)\n*   Bun (`npm install -g bun`)\n*   Unsplash Account and API Access Key ([https://unsplash.com/developers](https://unsplash.com/developers))\n\n## Setup & Installation\n\n1.  **Clone the Repository:**\n    ```bash\n    git clone https://github.com/shariqriazz/upsplash-mcp-server.git # Update URL if needed\n    cd upsplash-mcp-server\n    ```\n2.  **Install Dependencies:**\n    ```bash\n    bun install\n    ```\n3.  **Configure Environment:**\n    *   Create a `.env` file in the project root (or copy `.env.example` if provided).\n    *   Add your Unsplash Access Key:\n        ```dotenv\n        UNSPLASH_ACCESS_KEY=\"YOUR_UNSPLASH_ACCESS_KEY\"\n        ```\n4.  **Build the Server:**\n    ```bash\n    bun run build\n    ```\n    This compiles the TypeScript code to `build/index.js`.\n\n## Usage (Standalone / NPX)\n\n**Standalone (Local Build):**\n\nYou can run the compiled server directly using `bun` or `node`. Ensure the `UNSPLASH_ACCESS_KEY` environment variable is set in your shell or `.env` file.\n\n```bash\n# Ensure UNSPLASH_ACCESS_KEY is set\nbun run build/index.js\n# OR\nnode build/index.js\n```\n\n**Using NPX (If Published to npm):**\n\nIf this package is published to npm (e.g., as `unsplash-mcp-server`), you could run it directly using `npx`.\n\n```bash\n# Ensure UNSPLASH_ACCESS_KEY is set in your environment\nnpx -y unsplash-mcp-server\n```\n*Note: This requires the package to be published on npm under the specified name.*\n\n## Running with Cline\n\n1.  **Configure MCP Settings:** Add or update the configuration in your Cline MCP settings file (e.g., `.roo/mcp.json` or global settings). You have two primary options:\n\n    **Option A: Using Bun/Node (Direct Path - Recommended for Local Development)**\n\n    This method uses `bun` (or `node`) to run the compiled script directly from your local project directory.\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"unsplash-mcp-server\": {\n          \"command\": \"bun\", // Or \"node\"\n          \"args\": [\n            // Use the absolute path to the compiled index.js in your project\n            \"/path/to/your/upsplash-mcp-server/build/index.js\"\n          ],\n          \"env\": {\n            // Required: Ensure this matches your .env or is set here\n            \"UNSPLASH_ACCESS_KEY\": \"YOUR_UNSPLASH_ACCESS_KEY\" // Replace with your actual key\n          },\n          \"disabled\": false,\n          \"alwaysAllow\": [\n             \"search_photos\",\n             \"download_photo\"\n             // \"trigger_download\" // Include if this tool exists and is separate\n          ],\n          \"timeout\": 3600 // Optional: Timeout in seconds (e.g., 1 hour)\n        }\n        // Add other servers here...\n      }\n    }\n    ```\n    *   **Important:** Replace `/path/to/your/upsplash-mcp-server/build/index.js` with the correct absolute path on your system.\n    *   Replace `\"YOUR_UNSPLASH_ACCESS_KEY\"` with your actual key. Remove comments from the actual JSON file.\n\n    **Option B: Using NPX (Requires Package Published to npm)**\n\n    This method uses `npx` to automatically download and run the server package from the npm registry. This is convenient if you don't want to clone the repository locally or prefer using the published version.\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"unsplash-mcp-server\": {\n          \"command\": \"npx\",\n          \"args\": [\n            \"-y\", // Auto-confirm installation\n            \"unsplash-mcp-server\" // Assumed npm package name - update if different\n          ],\n          \"env\": {\n            // Required: Ensure this is set here or in your environment\n            \"UNSPLASH_ACCESS_KEY\": \"YOUR_UNSPLASH_ACCESS_KEY\" // Replace with your actual key\n          },\n          \"disabled\": false,\n          \"alwaysAllow\": [\n             \"search_photos\",\n             \"download_photo\"\n          ],\n          \"timeout\": 3600 // Optional: Timeout in seconds\n        }\n        // Add other servers here...\n      }\n    }\n    ```\n    *   Ensure the `env` block contains the necessary `UNSPLASH_ACCESS_KEY`.\n    *   Update `\"unsplash-mcp-server\"` in `args` if the published npm package name is different.\n\n2.  **Restart/Reload Cline:** Cline should detect the configuration change and start the server based on your chosen method.\n\n3.  **Use Tools:** You can now use the `search_photos` and `download_photo` tools via Cline.\n\n## Development\n\n*   **Watch Mode:** `bun run watch` (Typically starts the server and restarts on file changes)\n*   **Linting:** `bun run lint` (Checks code for style and potential errors)\n*   **Formatting:** `bun run format` (Formats code according to project standards)\n\n*(Note: Assumes standard `package.json` scripts like `watch`, `lint`, `format`. Update if your scripts differ.)*\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details."
}