{
  "mcp_name": "w1561778301/mcp-playwright-test",
  "mcp_description": "Automates Playwright tests by generating and executing UI and API test cases with detailed reporting.",
  "mcp_id": "w1561778301_mcp-playwright-test",
  "fetch_timestamp": "2025-06-23T09:20:41.198638Z",
  "github_url": "https://github.com/w1561778301/mcp-playwright-test",
  "repository": {
    "name": "mcp-playwright-test",
    "full_name": "w1561778301/mcp-playwright-test",
    "description": "A Model Context Protocol (MCP) server for automating Playwright tests",
    "html_url": "https://github.com/w1561778301/mcp-playwright-test",
    "created_at": "2025-04-28T07:58:51Z",
    "updated_at": "2025-05-21T07:30:35Z",
    "pushed_at": "2025-04-28T09:59:37Z",
    "size": 600,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": "Other",
    "topics": [],
    "default_branch": "master",
    "owner": {
      "login": "w1561778301",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/69661617?v=4",
      "html_url": "https://github.com/w1561778301"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 299175,
      "JavaScript": 2930
    },
    "language_percentages": {
      "TypeScript": 99.03,
      "JavaScript": 0.97
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "0.1.3"
  },
  "readme": "# MCP Playwright Test\n\n基于 Model Context Protocol (MCP)的 Playwright 测试自动化服务器。\n\n## 功能特点\n\n- 自动获取项目代码(支持 Git 仓库或本地项目)\n- 使用 Playwright 设置测试环境\n- 基于需求生成测试用例\n- 执行 UI 和 API 测试并生成详细报告\n- 捕获并分析网络请求和控制台日志\n\n## 快速开始\n\n### 安装\n\n```bash\n# 使用npm\nnpm install mcp-playwright-test\n\n# 或使用yarn\nyarn add mcp-playwright-test\n\n# 或使用pnpm\npnpm add mcp-playwright-test\n```\n\n### 配置环境变量\n\n```bash\n# 用于生成测试用例的Anthropic API密钥\nexport ANTHROPIC_API_KEY=your_api_key_here\n\n# 可选：服务器端口(默认8931)\nexport MCP_PORT=8931\n```\n\n### 启动服务器\n\n```bash\n# 使用npm脚本启动\nnpm run start\n\n# 或者直接运行\nnpx ts-node src/test-mcp.ts\n```\n\n## 配置文件说明\n\nMCP Playwright Test 支持通过`.playwright-mcp.json`文件进行配置，特别适合在 Claude Desktop 和 Cursor 等 AI 工具环境中使用。\n\n### 配置文件示例\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-playwright-test\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-playwright-test\"],\n      \"env\": {\n        \"CODE_PATH\": \".\",\n        \"SIMPLE_GIT_PATH\": \"git\",\n        \"SIMPLE_GIT_BRANCH\": \"main\",\n        \"SIMPLE_GIT_DEPTH\": 1,\n        \"SIMPLE_GIT_USERNAME\": \"username\",\n        \"SIMPLE_GIT_PASSWORD\": \"password\",\n        \"API_URL\": \"http://localhost:3000\",\n        \"API_KEY\": \"your-api-key\"\n      }\n    }\n  }\n}\n```\n\n### Claude Desktop 和 Cursor 配置\n\n1. **在 Claude Desktop 中使用**:\n\n   - 在项目根目录创建`.playwright-mcp.json`文件\n   - 在 Claude Desktop 设置中添加服务器配置指向该文件\n   - 使用\"自定义 MCP 服务器\"选项，选择\"mcp-server-alipay\"\n\n2. **在 Cursor 中使用**:\n   - 确保项目中存在`.playwright-mcp.json`文件\n   - 在 Cursor 的 MCP 配置中选择\"使用本地 MCP 服务器\"\n   - 指定服务器名称为\"mcp-server-alipay\"\n\n### 环境变量说明\n\n> **注意**：Git 相关参数和 CODE_PATH 参数为二选一关系，要么使用 Git 相关参数从远程仓库克隆代码，要么使用 CODE_PATH 指定本地已有的代码路径。\n\n> **提示**：API 相关配置（API_URL 和 API_KEY）是可选的，仅在需要进行 API 测试时才需要配置。如果您只使用 UI 测试功能，可以省略这些参数。\n\n> **灵活使用**：MCP Playwright Test 支持三种使用模式：1) 仅进行 UI 测试；2) 仅进行 API 测试；3) 同时进行 UI 和 API 测试。您可以根据项目需求选择适合的测试模式，并只配置相应的环境变量。\n\n| 变量名              | 说明               | 默认值                | 使用场景     |\n| ------------------- | ------------------ | --------------------- | ------------ |\n| CODE_PATH           | 本地代码路径       | .                     | 使用本地项目 |\n| SIMPLE_GIT_PATH     | Git 可执行文件路径 | git                   | 克隆远程仓库 |\n| SIMPLE_GIT_BRANCH   | 克隆时使用的分支   | -                     | 克隆远程仓库 |\n| SIMPLE_GIT_DEPTH    | 克隆深度           | -                     | 克隆远程仓库 |\n| SIMPLE_GIT_USERNAME | Git 用户名         | -                     | 克隆远程仓库 |\n| SIMPLE_GIT_PASSWORD | Git 密码或令牌     | -                     | 克隆远程仓库 |\n| API_URL             | API 基础 URL       | http://localhost:3000 | API 测试     |\n| API_KEY             | API 密钥           | -                     | API 测试     |\n| BROWSER_TYPE        | 浏览器类型         | chromium              | UI 测试      |\n| BROWSER_HEADLESS    | 是否使用无头模式   | true                  | UI 测试      |\n| TEST_STORAGE_DIR    | 测试结果存储目录   | ./test-results        | 通用         |\n\n## 可用工具\n\nMCP 服务器提供以下工具：\n\n- `clone-repository`: 克隆 Git 仓库进行测试\n- `use-local-project`: 使用本地项目进行测试\n- `launch-browser`: 启动浏览器进行测试\n- `generate-test-cases`: 从文本需求生成测试用例\n- `generate-tests-from-spec`: 从 API 规范文档自动生成 API 测试用例，支持多种格式\n- `execute-ui-tests`: 执行 UI 测试套件\n- `execute-api-tests`: 执行 API 测试套件\n\n## 支持的 API 规范格式\n\nMCP Playwright Test 支持多种 API 规范文档格式，可自动检测并解析：\n\n- **OpenAPI 3.0**: 最新的 OpenAPI 规范格式，广泛应用于 API 文档\n- **Swagger 2.0**: 传统的 API 文档格式，兼容大量现有系统\n- **Apifox**: 支持 Apifox 导出的 API 文档格式\n- **自动检测**: 可以自动分析文档格式并使用最合适的解析器\n\n生成测试用例时，可通过`format`参数指定格式，或使用`auto`让系统自动检测。\n\n## 可用资源\n\nMCP 服务器提供以下资源：\n\n- `reports`: 获取测试执行报告\n- `test-cases`: 检索测试用例\n\n## 开发\n\n### 安装依赖\n\n```bash\npnpm install\n```\n\n### 构建项目\n\n```bash\npnpm build\n```\n\n### 运行测试\n\n```bash\npnpm test\n```\n\n## 许可证\n\nMIT\n"
}