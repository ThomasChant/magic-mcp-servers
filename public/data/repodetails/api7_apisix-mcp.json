{
  "mcp_name": "APISIX-MCP",
  "mcp_description": "APISIX Model Context Protocol (MCP) server is used to bridge large language models (LLMs) with the APISIX Admin API, supporting querying and managing all resources in [Apache APISIX](https://github.com/apache/apisix).",
  "mcp_id": "api7_apisix-mcp",
  "fetch_timestamp": "2025-06-23T01:13:11.881305Z",
  "github_url": "https://github.com/api7/apisix-mcp",
  "repository": {
    "name": "apisix-mcp",
    "full_name": "api7/apisix-mcp",
    "description": "APISIX Model Context Protocol (MCP) server is used to bridge large language models (LLMs) with the APISIX Admin API.",
    "html_url": "https://github.com/api7/apisix-mcp",
    "created_at": "2025-03-27T06:46:33Z",
    "updated_at": "2025-06-20T08:02:33Z",
    "pushed_at": "2025-06-16T07:53:11Z",
    "size": 89,
    "stargazers_count": 25,
    "watchers_count": 25,
    "forks_count": 7,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": "Apache License 2.0",
    "topics": [
      "api-management",
      "apisix",
      "mcp",
      "mcp-server",
      "typescript"
    ],
    "default_branch": "main",
    "owner": {
      "login": "api7",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/61078451?v=4",
      "html_url": "https://github.com/api7"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 7,
    "subscribers_count": 4,
    "languages": {
      "TypeScript": 40412,
      "JavaScript": 1900,
      "Dockerfile": 407
    },
    "language_percentages": {
      "TypeScript": 94.6,
      "JavaScript": 4.45,
      "Dockerfile": 0.95
    },
    "pull_requests_count": 6,
    "contributors_count": 5,
    "package_json_version": "0.0.7"
  },
  "readme": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/api7-apisix-mcp-badge.png)](https://mseep.ai/app/api7-apisix-mcp)\n\n# APISIX Model Context Protocol (MCP) Server\n[![smithery badge](https://smithery.ai/badge/@api7/apisix-mcp)](https://smithery.ai/server/@api7/apisix-mcp)\n\nAPISIX Model Context Protocol (MCP) server is used to bridge large language models (LLMs) with the APISIX Admin API. It aims to enable natural language-based interaction for viewing and managing resources in APISIX through MCP-compatible AI clients.\n\nhttps://github.com/user-attachments/assets/081e878c-225e-4ff8-a9c5-5813f4784cfe\n\n## Support Operations\n\n### Common Operations\n\n- `get_resource`: Retrieve resources by type (routes, services, upstreams, etc.)\n- `delete_resource`: Remove resources by ID\n- `send_request_to_gateway`: Send a request or multiple requests to the APISIX gateway\n\n### API Resources Operations\n\n- `create_route`/`update_route`/`delete_route`: Manage routes\n- `create_service`/`update_service`/`delete_service`: Manage services\n- `create_upstream`/`update_upstream`/`delete_upstream`: Manage upstream\n- `create_ssl`/`update_ssl`/`delete_ssl`: Manage SSL certificates\n- `create_or_update_proto`: Manage protobuf definitions\n- `create_or_update_stream_route`: Manage stream routes\n\n### Plugin Operations\n\n- `get_all_plugin_names`: Get all available plugin names\n- `get_plugin_info`/`get_plugins_by_type`/`get_plugin_schema`: Retrieve plugins configuration\n- `create_plugin_config`/`update_plugin_config`: Manage plugin configurations\n- `create_global_rule`/`update_global_rule`: Manage plugin global rules\n- `get_plugin_metadata`/`create_or_update_plugin_metadata`/`delete_plugin_metadata`: Manage plugin metadata\n\n### Security Configuration\n\n- `get_secret_by_id`/`create_secret`/`update_secret`: Manage secrets\n- `create_or_update_consumer`/`delete_consumer`: Manage consumers\n- `get_credential`/`create_or_update_credential`/`delete_credential`/: Manage consumer credentials\n- `create_consumer_group`/`delete_consumer_group`: Manage consumer groups\n\n## Configuration in AI client\n\n### Prerequisite\n\nFollow the APISIX [Getting Started](https://docs.api7.ai/apisix/getting-started/) guide to set up and run APISIX.\n\n### Installing via Smithery\n\nTo install APISIX Model Context Protocol Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@api7/apisix-mcp):\n\n```bash\nnpx -y @smithery/cli install @api7/apisix-mcp --client claude\n```\n\n### Using npm\n\nConfigure your AI client (Cursor, Claude, Copilot, etc.) with following settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"apisix-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"apisix-mcp\"\n      ],\n      \"env\": {\n        \"APISIX_SERVER_HOST\": \"your-apisix-server-host\",\n        \"APISIX_SERVER_PORT\": \"your-apisix-server-port\",\n        \"APISIX_ADMIN_API_PORT\": \"your-apisix-admin-api-port\",\n        \"APISIX_ADMIN_API_PREFIX\": \"your-apisix-admin-api-prefix\",\n        \"APISIX_ADMIN_KEY\": \"your-apisix-api-key\"\n      }\n    }\n  }\n}\n```\n\n### Using source code\n\nFirst clone the apisix-mcp repository:\n\n```bash\ngit clone https://github.com/api7/apisix-mcp.git\ncd apisix-mcp\n```\n\nInstall the dependencies and build the project:\n\n```bash\npnpm install\npnpm build\n```\n\nConfigure your AI client (Cursor, Claude, Copilot, etc.) with following settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"apisix-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"your-apisix-mcp-path/dist/index.js\"\n      ],\n      \"env\": {\n        \"APISIX_SERVER_HOST\": \"your-apisix-server-host\",\n        \"APISIX_SERVER_PORT\": \"your-apisix-server-port\",\n        \"APISIX_ADMIN_API_PORT\": \"your-apisix-admin-api-port\",\n        \"APISIX_ADMIN_API_PREFIX\": \"your-apisix-admin-api-prefix\",\n        \"APISIX_ADMIN_KEY\": \"your-apisix-api-key\"\n      }\n    }\n  }\n}\n```\n\n## Environment Variables\n\n| Variable                  | Description                                 | Default Value                      |\n| ------------------------- | ------------------------------------------- | ---------------------------------- |\n| `APISIX_SERVER_HOST`      | Host that have access to your APISIX server | `http://127.0.0.1`                 |\n| `APISIX_SERVER_PORT`      | APISIX server port                          | `9080`                             |\n| `APISIX_ADMIN_API_PORT`   | Admin API port                              | `9180`                             |\n| `APISIX_ADMIN_API_PREFIX` | Admin API prefix                            | `/apisix/admin`                    |\n| `APISIX_ADMIN_KEY`        | Admin API authentication key                | `edd1c9f034335f136f87ad84b625c8f1` |\n\nTo view or modify Admin API configurations in APISIX, refer to the [Admin API](https://apisix.apache.org/docs/apisix/admin-api) documentation.\n\n\n## Resources \n\n### Open MCP Marketplace API Support \n![MCP Marketplace User Review Rating Badge](http://www.deepnlp.org/api/marketplace/svg?api7/apisix-mcp)|[GitHub](https://github.com/AI-Agent-Hub/mcp-marketplace)|[Doc](http://www.deepnlp.org/doc/mcp_marketplace)|[MCP Marketplace](http://www.deepnlp.org/store/ai-agent/mcp-server)\n- Allow AI App/Agent/LLM to find this MCP Server via common python/typescript API, search and explore relevant servers and tools\n\n***Example: Search Server and Tools***\n```python\n    import anthropic\n    import mcp_marketplace as mcpm\n\n    result_q = mcpm.search(query=\"apisix mcp\", mode=\"list\", page_id=0, count_per_page=100, config_name=\"deepnlp\") # search server by category choose various endpoint\n    result_id = mcpm.search(id=\"api7/apisix-mcp\", mode=\"list\", page_id=0, count_per_page=100, config_name=\"deepnlp\")      # search server by id choose various endpoint \n    tools = mcpm.list_tools(id=\"api7/apisix-mcp\", config_name=\"deepnlp_tool\")\n\n    # Call Claude to Choose Tools Function Calls \n    client = anthropic.Anthropic()\n    response = client.messages.create(model=\"claude-3-7-sonnet-20250219\", max_tokens=1024, tools=tools, messages=[])\n```\n\n\n"
}