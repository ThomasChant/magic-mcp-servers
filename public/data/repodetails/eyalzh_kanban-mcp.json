{
  "mcp_name": "eyalzh/kanban-mcp",
  "mcp_description": "Facilitates task management for AI-driven workflows using a kanban system, enabling structured planning and execution across multiple sessions.",
  "mcp_id": "eyalzh_kanban-mcp",
  "fetch_timestamp": "2025-06-23T02:57:16.437736Z",
  "github_url": "https://github.com/eyalzh/kanban-mcp",
  "repository": {
    "name": "kanban-mcp",
    "full_name": "eyalzh/kanban-mcp",
    "description": "MCP server providing kanban-based task management memory for complex multi-session workflows with AI agents",
    "html_url": "https://github.com/eyalzh/kanban-mcp",
    "created_at": "2025-04-21T18:35:47Z",
    "updated_at": "2025-06-21T14:18:06Z",
    "pushed_at": "2025-05-03T08:41:41Z",
    "size": 227,
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks_count": 2,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [
      "kanban",
      "mcp",
      "mcp-server",
      "memory-bank",
      "project-management"
    ],
    "default_branch": "main",
    "owner": {
      "login": "eyalzh",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/4525700?v=4",
      "html_url": "https://github.com/eyalzh"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 2,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 93184,
      "CSS": 2757,
      "JavaScript": 546,
      "Dockerfile": 534,
      "HTML": 299
    },
    "language_percentages": {
      "TypeScript": 95.75,
      "CSS": 2.83,
      "JavaScript": 0.56,
      "Dockerfile": 0.55,
      "HTML": 0.31
    },
    "pull_requests_count": 4,
    "contributors_count": 2
  },
  "readme": "# MCP Kanban Memory\nAn MCP tool set providing internal task management state for complex multi-session workflows with AI agents. This is similar to other memory MCP tools, with the additional structure, rules and visibility of a kanban-based task management system.\n\nThe main idea is to direct the AI agent to document and save its work in a kanban board, both in the planning session and in execution sessions.\n\n## Highlights\n- Column capacity / work-in-progress limits\n- Embedded DB (SQLite)\n- Web UI for observing the progress of the workflow, and for modifying tasks manually\n- Predefined prompts for starting and resuming a workflow\n\n## Usage\nUse the MCP prompts to start a project or to make progress on a project. \nAlternatively, ask the LLM assistant to record its plan by creating a kanban board. To make progress in a follow-up session, ask the assistant to locate a specific kanban board and resume work on it.\n\n## Installation\nClone this repo, then run:\n```sh\nnpm ci --prefix shared/db\nnpm ci --prefix mcp-server\nnpm run build --prefix shared/db\nnpm run build --prefix mcp-server\n```\n\nThen add the MCP server configuration to the MCP client (e.g. Claude Desktop):\n```json\n\"mcpServers\": {\n    \"kanban-mcp\": {\n        \"command\": \"node\",\n        \"args\": [\n            \"/path/to/repo/mcp-server/dist/server.js\"\n        ],\n        \"env\": {\n            \"MCP_KANBAN_DB_FOLDER_PATH\": \"/path/to/db\"\n        }\n    }\n}\n```\n\nReplace `/path/to/repo` with the location of the cloned repo.\n\nReplace `/path/to/db` with a folder that will contain the DB files. This can be any folder with read/write access. It will be created if it doesn't exist.\n\n## Installation with Docker\nBuild the Docker image:\n```sh\ndocker build -t mcp/mcp-kanban .\n```\n\nThen add the MCP server configuration to the MCP client (e.g. Claude Desktop):\n```json\n\"mcpServers\": {\n    \"kanban-mcp\": {\n        \"command\": \"docker\",\n        \"args\": [\n            \"run\",\n            \"--rm\",\n            \"-i\",\n            \"-v\",\n            \"/path/to/db:/mcp\",\n            \"mcp/mcp-kanban\"\n        ]\n    }\n}\n```\n\nReplace `/path/to/db` with a folder that will contain the DB files. This can be any folder with read/write access. It will be created if it doesn't exist.\n\n\n## Using the web UI\n\nBuild the web-ui and web-server:\n```sh\nnpm ci --prefix shared/db\nnpm run build --prefix shared/db\n\nnpm ci --prefix web-ui\nnpm ci --prefix web-server\nnpm run build --prefix web-ui\nnpm run build --prefix web-server\n```\n\nRun the web-server:\n```sh\nMCP_KANBAN_DB_FOLDER_PATH=/path/to/db npm run start --prefix web-server\n```\n\nOpen the browser at http://localhost:8221\n\n## API\n### Tools\n\n- **create-kanban-board**\n  - Create a new kanban board to plan and keep track of your tasks.\n  - Input:\n      - `name` (string): The name of the board\n      - `projectGoal` (string): The goal of the project.\n\n- **add-task-to-board**\n  - Add a new task to the landing column (to-do) of a kanban board.\n  - Input:\n      - `boardId` (string): The ID of the board to add the task to\n      - `title` (string): The title of the task\n      - `content` (string): The content of the task in markdown format\n\n- **move-task**\n  - Move a task from one column to another, respecting WIP limits.\n  - Input:\n      - `taskId` (string): The ID of the task to move\n      - `targetColumnId` (string): The ID of the column to move the task to\n      - `reason` (string, optional): The reason for moving the task\n\n- **delete-task**\n  - Delete a task.\n  - Input:\n      - `taskId` (string): The ID of the task to delete\n\n- **get-board-info**\n  - Get the full info of a kanban board, including columns and tasks.\n  - Input:\n      - `boardId` (string): The ID of the board to get info for\n  - Return detailed information about the board, including columns and tasks.\n\n- **get-task-info**\n  - Get the full info of a task, including its content.\n  - Input:\n      - `taskId` (string): The ID of the task to get info for\n  - Return detailed information about the task, including its content.\n\n- **list-boards**\n  - List all kanban boards in the database.\n  - Input: None\n  - Return a list of all boards in the database with their names, creation times, and goals.\n\n### Prompts\n\n- **create-kanban-based-project**\n  - Create a kanban board for a project, ask questions to divide the project into tasks, and add them to the board.\n  - Input:\n    - `description` (string): The description of the project\n\n\n- **make-progress-on-a-project**\n  - Make progress on an existing project by locating its kanban board, selecting the next task, and working on it.\n  - Input:\n    - `description` (string): The description of the project\n"
}