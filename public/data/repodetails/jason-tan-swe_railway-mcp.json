{
  "mcp_name": "jason-tan-swe/railway-mcp",
  "mcp_description": "Facilitates seamless integration with Railway.app, enabling natural language management of deployments, services, and variables.",
  "mcp_id": "jason-tan-swe_railway-mcp",
  "fetch_timestamp": "2025-06-23T05:19:40.112388Z",
  "github_url": "https://github.com/jason-tan-swe/railway-mcp",
  "repository": {
    "name": "railway-mcp",
    "full_name": "jason-tan-swe/railway-mcp",
    "description": "An unofficial and community-built MCP server for integrating with https://railway.app",
    "html_url": "https://github.com/jason-tan-swe/railway-mcp",
    "created_at": "2025-02-28T06:45:39Z",
    "updated_at": "2025-06-20T20:16:45Z",
    "pushed_at": "2025-06-07T05:15:43Z",
    "size": 176,
    "stargazers_count": 40,
    "watchers_count": 40,
    "forks_count": 18,
    "open_issues_count": 4,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [
      "claude",
      "cursor",
      "model-context-protocol",
      "railway",
      "railway-app",
      "windsurf"
    ],
    "default_branch": "main",
    "owner": {
      "login": "jason-tan-swe",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/37030567?v=4",
      "html_url": "https://github.com/jason-tan-swe"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 18,
    "subscribers_count": 2,
    "languages": {
      "TypeScript": 125789,
      "JavaScript": 1121,
      "Dockerfile": 494
    },
    "language_percentages": {
      "TypeScript": 98.73,
      "JavaScript": 0.88,
      "Dockerfile": 0.39
    },
    "pull_requests_count": 11,
    "contributors_count": 5,
    "latest_release": {
      "tag_name": "v1.3.0",
      "name": "v1.3.0",
      "published_at": "2025-06-07T05:15:48Z",
      "body": "# [1.3.0](https://github.com/jason-tan-swe/railway-mcp/compare/v1.2.1...v1.3.0) (2025-06-07)\n\n\n### Features\n\n* Support Templates ([#11](https://github.com/jason-tan-swe/railway-mcp/issues/11)) ([2fa7483](https://github.com/jason-tan-swe/railway-mcp/commit/2fa74834fd53f83526450608cff488ffd922e589))\n\n\n\n",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v1.3.0",
        "commit_sha": "eaaa8bad53a84ddca063e220b3d7e5124b46c4e8"
      },
      {
        "name": "v1.2.1",
        "commit_sha": "b16fd232f1856c3dc9a83f2b4b92232e1e3c66f5"
      },
      {
        "name": "v1.2.0",
        "commit_sha": "14fd0b08f0aabe839621126413626a61f289bd03"
      },
      {
        "name": "v1.1.0",
        "commit_sha": "de9518ae94bf56b7d7b49b31a2726ec4b816c3af"
      },
      {
        "name": "v1.0.2",
        "commit_sha": "ec07123838d8ed3effdc323bb7805129b8daacee"
      },
      {
        "name": "v1.0.1",
        "commit_sha": "57173bb0d0eea5489061bd829052c786511e44a1"
      },
      {
        "name": "v1.0.0",
        "commit_sha": "87ee6fb5898e61135d99591ee0960363ed969b13"
      }
    ],
    "latest_version": "v1.3.0",
    "package_json_version": "1.3.0"
  },
  "readme": "# Railway MCP Server\n\n<p align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://avatars.githubusercontent.com/u/66716858?s=200&v=4\" />\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://avatars.githubusercontent.com/u/66716858?s=200&v=4\" />\n    <img alt=\"Railway\" src=\"https://avatars.githubusercontent.com/u/66716858?s=200&v=4\" height=\"40\" />\n  </picture>\n  &nbsp;&nbsp;\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://github.com/user-attachments/assets/38db1bcd-50df-4a49-a106-1b5afd924cb2\" />\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://github.com/user-attachments/assets/82603097-07c9-42bb-9cbc-fb8f03560926\" />\n    <img alt=\"MCP\" src=\"https://github.com/user-attachments/assets/82603097-07c9-42bb-9cbc-fb8f03560926\" height=\"40\" />\n  </picture>\n</p>\n\n<p align=\"center\">\n  <strong>\n  Let Claude and other MCP clients manage your Railway.app infrastructure. Deploy services, manage variables, and monitor deployments - all through natural language.\n  </strong>\n</p>\n<p align=\"center\">\n  <table align=\"center\">\n    <th align=\"center\">\n       Please Note: This is under development and not all features are available yet. üöß \n    </th>\n  </table>\n</p>\n\n<a href=\"https://glama.ai/mcp/servers/lwn74iwigz\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/lwn74iwigz/badge\" alt=\"railway-mcp MCP server\" />\n</a>\n\nA [Model Context Protocol (MCP)](https://modelcontextprotocol.io/) server for integrating with the [Railway.app](https://railway.app) platform.\n\n[![smithery badge](https://smithery.ai/badge/@jason-tan-swe/railway-mcp)](https://smithery.ai/server/@jason-tan-swe/railway-mcp)\n\n## Table of Contents\n\n<p align=\"center\">\n  <a href=\"#features\">Features</a> ‚Ä¢\n  <a href=\"#installation\">Installation</a> ‚Ä¢\n  <a href=\"#available-tools\">Available Tools</a> ‚Ä¢\n  <a href=\"#example-workflows\">Example Workflows</a> ‚Ä¢\n  <a href=\"#security-considerations\">Security</a> ‚Ä¢\n  <a href=\"#troubleshooting\">Troubleshooting</a> ‚Ä¢\n  <a href=\"#contributing\">Contributing</a>\n</p>\n\n## Features\n\n\n| Status | Meaning |\n|--------|---------|\n| ‚úÖ | Complete |\n| üößüî®‚è≥ | Being Built or Needs Testing |\n| ‚ùå | Not Built at the moment |\n\n- ‚úÖ Authentication with Railway API tokens\n- ‚úÖ Project management (list, info, delete)\n- ‚úÖ Deployment management (list, restart)\n- ‚úÖ  Service management (create from GitHub repo or Docker image, list)\n- ‚úÖ  Variable management (list, create/update, delete)\n- ‚úÖ Service Network management\n- ‚úÖ Volume management\n- ‚ùå Full support for all templates\n   - üößüî®‚è≥\t Database template support\n   - Automatic database and networking workflows\n- üößüî®‚è≥\tMost commonly used workflows\n- ‚ùå Automatic GitHub repository linking for services\n\n## Installation\n\n### Prerequisites\n\n- Node.js 18+ (for built-in fetch API support)\n- An active Railway account\n- A Railway API token (create one at https://railway.app/account/tokens)\n\n\n#### Quick Start\n\nThis MCP server is designed to work with MCP Clients like:\n- Claude for Desktop | ‚úÖ Battle-Tested\n- Cursor | ‚úÖ Needs Testing\n- Cline | üößüî®‚è≥ Needs Testing\n- Windsurf | üößüî®‚è≥ Needs Testing\n- Other MCP Clients | üößüî®‚è≥ Needs Testing\n\n### Installing via Smithery\n\nTo install railway-mcp automatically, we recommend using [Smithery](https://smithery.ai/server/@jason-tan-swe/railway-mcp)\n\n**Claude Desktop**\n\n```bash\nnpx -y @smithery/cli install @jason-tan-swe/railway-mcp --client claude\n```\n\n**Cursor**\n```\nnpx -y @smithery/cli@latest run @jason-tan-swe/railway-mcp --config \"{\\\"railwayApiToken\\\":\\\"token\\\"}\"\n```\n\n\n<details>\n<summary> <h3>Manual Installation For Cursor</h3></summary>\n\n1. Head to your cursor settings and find the MCP section\n\n2. Click 'Add new MCP server'\n\n3. Name it however, you like, we recommend `railway-mcp` for better clarity\n\n4. Paste this command into the 'Command' section, where <RAILWAY_API_TOKEN> is your accounts Railway token:\n\n```bash\nnpx -y @jasontanswe/railway-mcp <RAILWAY_API_TOKEN>\n```\n</details>\n\n<details>\n\n<summary><h3>Manual Installation For Claude</h3></summary>\n\n1. Create or edit your Claude for Desktop config file:\n   - macOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n2. Add the railway-mcp server to your configuration with your API token:\n\n```json\n   \"railway\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@jasontanswe/railway-mcp\"],\n      \"env\": {\n         \"RAILWAY_API_TOKEN\": \"your-railway-api-token-here\"\n      }\n   }\n```\n\nWhen you have multiple MCP servers, your config file might look like this:\n\n```json\n{\n  \"mcpServers\": {\n    // ... All of your existing MCP servers ...\n\n    // Add the railway-mcp server to your configuration with your API token\n    \"railway\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@jasontanswe/railway-mcp\"],\n      \"env\": {\n        \"RAILWAY_API_TOKEN\": \"your-railway-api-token-here\"\n      }\n    }\n  }\n}\n```\n\n3. Restart Claude for Desktop\n\n4. You can now start using Railway tools directly in Claude. For example:\n\n```\nPlease list all my Railway projects\n```\n\n5. Alternatively, if you don't want to add your token to the configuration file, you can configure it within Claude using:\n\n```\nPlease configure the Railway API with my token: {YOUR_API_TOKEN_HERE}\n```\n</details>\n\n## Recommendations and Other Information\nThis server best combines with MCP-clients that have access to terminal or with Git **(Cursor, Windsurf)**. Using this MCP with others is recommended as railway-mcp orchestrates containers and streamlines your deployment process seamlessly.\n\n### Recommended MCP servers to combine with\n- Git || [Official Link](https://github.com/modelcontextprotocol/servers/tree/main/src/git)\n- GitHub || [Official](https://github.com/modelcontextprotocol/servers/tree/main/src/github) || [Smithery](https://smithery.ai/server/@smithery-ai/github)\n\n\n### For Claude\n- Out of the box, Claude does not have terminal access, so it cannot trigger deployments as it will not be able to get the latest commit.\n- Spinning up different services and monitoring them are the best use case with Claude.\n\n\n### For Cursor\n- Use with GitHub MCP or have the repository already setup on GitHub and cloned locally on your machine to leverage full integration with railway-mcp.\n- When Cursor makes a change, it may forget to push it's changes to GitHub causing it to try and deploy a commit that Railway cannot pull.\n  - **SOLUTION:** Always ask or include somewhere in your prompt: `Have you pushed our changes to GitHub yet?`\n\n## Security Considerations\n\n- Railway API tokens provide full access to your account. Keep them secure.\n- When using the environment variable method, your token is stored in the Claude Desktop configuration file.\n- Sensitive variable values are automatically masked when displayed.\n- All API calls use HTTPS for secure communication.\n- The server's memory-only token storage means your token is never written to disk outside of the configuration file.\n\n## Troubleshooting\n\nIf you encounter issues:\n\n1. **Token Authentication Issues**\n   - Ensure your API token is valid and has the necessary permissions\n   - If using the environment variable method, check that the token is correctly formatted in the config file\n   - Try using the `configure` tool directly in Claude if the environment token isn't working\n\n2. **Server Connection Issues**\n   - Check that you've installed the latest version of the server\n   - Verify that Node.js version 18 or higher is installed\n   - Restart Claude for Desktop after making changes to the configuration\n\n3. **API Errors**\n   - Verify that you're using correct project, environment, and service IDs\n   - Check Railway's status page for any service disruptions\n   - Railway API has rate limits - avoid making too many requests in a short period\n\n## Contributing\n\nWe welcome contributions from the community! Please see our [Contributing Guidelines](CONTRIBUTING.md) for details on how to get started, development guidelines, and debugging information.\n\n\n\n</details>\n\n## Available Tools\n\n<details>\n<summary>View All</summary>\n\n### Authentication\n- `configure` - Set your Railway API token (only needed if not provided in environment variables)\n\n### Projects\n- `project-list` - List all projects in your account\n- `project-info` - Get detailed information about a specific project\n- `project-create` - Create a new project with optional team ID\n- `project-delete` - Delete a project\n- `project-environments` - List all environments in a project\n\n### Services\n- `service-list` - List all services in a specific project\n- `service-info` - Get detailed information about a specific service\n- `service-create-from-repo` - Create a new service from a GitHub repository\n- `service-create-from-image` - Create a new service from a Docker image\n- `service-delete` - Delete a service from a project\n- `service-restart` - Restart a service in a specific environment\n- `service-update` - Update service configuration (build command, start command, etc.) | üöß Needs Testing\n\n### Deployments\n- `deployment-list` - List recent deployments for a service\n- `deployment-trigger` - Trigger a new deployment for a service\n- `deployment-logs` - Get logs for a specific deployment\n- `deployment-health-check` - Check the health/status of a deployment\n\n### Variables\n- `variable-list` - List variables for a service or environment\n- `variable-set` - Create or update a variable\n- `variable-delete` - Delete a variable\n- `variable-bulk-set` - Bulk update variables for a service | üöß Needs Testing\n- `variable-copy` - Copy variables between environments | üöß Needs Testing\n\n### Databases\n- `database-list-types` - List all available database types that can be deployed\n- `database-deploy` - Deploy a new database service\n</details>\n\n<details>\n<summary>Example Workflows</summary>\n\n### Setting up a new service\n\n1. List projects to get the project ID\n2. Create a new service from a template\n3. Add environment variables\n4. View the service deployment\n\n### Managing environment variables\n\n1. List projects to find your project ID\n2. List variables to see what's currently set\n3. Create or update variables as needed\n4. Delete any obsolete variables\n\n</details>"
}