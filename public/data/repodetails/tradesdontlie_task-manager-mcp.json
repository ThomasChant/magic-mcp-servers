{
  "mcp_name": "tradesdontlie/task-manager-mcp",
  "mcp_description": "Facilitates comprehensive task and project management with AI-driven task breakdown and tracking capabilities.",
  "mcp_id": "tradesdontlie_task-manager-mcp",
  "fetch_timestamp": "2025-06-23T09:03:26.738309Z",
  "github_url": "https://github.com/tradesdontlie/task-manager-mcp",
  "repository": {
    "name": "task-manager-mcp",
    "full_name": "tradesdontlie/task-manager-mcp",
    "description": "A task management MCP server that provides comprehensive project and task tracking capabilities",
    "html_url": "https://github.com/tradesdontlie/task-manager-mcp",
    "created_at": "2025-04-15T01:20:11Z",
    "updated_at": "2025-06-20T18:34:59Z",
    "pushed_at": "2025-04-16T17:41:46Z",
    "size": 1054,
    "stargazers_count": 12,
    "watchers_count": 12,
    "forks_count": 3,
    "open_issues_count": 1,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "tradesdontlie",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/196674484?v=4",
      "html_url": "https://github.com/tradesdontlie"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 3,
    "subscribers_count": 2,
    "languages": {
      "Python": 27408,
      "Dockerfile": 460
    },
    "language_percentages": {
      "Python": 98.35,
      "Dockerfile": 1.65
    },
    "pull_requests_count": 2,
    "contributors_count": 3
  },
  "readme": "# Task Manager MCP Server\n\nA template implementation of the [Model Context Protocol (MCP)](https://modelcontextprotocol.io) server for managing tasks and projects. This server provides a comprehensive task management system with support for project organization, task tracking, and PRD parsing.\n\n## Overview\n\nThis project demonstrates how to build an MCP server that enables AI agents to manage tasks, track project progress, and break down Product Requirements Documents (PRDs) into actionable tasks. It serves as a practical template for creating your own MCP servers with task management capabilities.\n\nThe implementation follows the best practices laid out by Anthropic for building MCP servers, allowing seamless integration with any MCP-compatible client.\n\n## Features\n\nThe server provides several essential task management tools:\n\n1. **Task Management**\n   - `create_task_file`: Create new project task files\n   - `add_task`: Add tasks to projects with descriptions and subtasks\n   - `update_task_status`: Update the status of tasks and subtasks\n   - `get_next_task`: Get the next uncompleted task from a project\n\n2. **Project Planning**\n   - `parse_prd`: Convert PRDs into structured tasks automatically\n   - `expand_task`: Break down tasks into smaller, manageable subtasks\n   - `estimate_task_complexity`: Estimate task complexity and time requirements\n   - `get_task_dependencies`: Track task dependencies\n\n3. **Development Support**\n   - `generate_task_file`: Generate file templates based on task descriptions\n   - `suggest_next_actions`: Get AI-powered suggestions for next steps\n\n## Prerequisites\n\n- Python 3.12+\n- API keys for your chosen LLM provider (OpenAI, OpenRouter, or Ollama)\n- Docker if running the MCP server as a container (recommended)\n\n## Installation\n\n### Using uv\n\n1. Install uv if you don't have it:\n   ```bash\n   pip install uv\n   ```\n\n2. Clone this repository:\n   ```bash\n   git clone https://github.com/coleam00/mcp-mem0.git\n   cd mcp-mem0\n   ```\n\n3. Install dependencies:\n   ```bash\n   uv pip install -e .\n   ```\n\n4. Create a `.env` file based on `.env.example`:\n   ```bash\n   cp .env.example .env\n   ```\n\n5. Configure your environment variables in the `.env` file (see Configuration section)\n\n### Using Docker (Recommended)\n\n1. Build the Docker image:\n   ```bash\n   docker build -t mcp/mem0 --build-arg PORT=8050 .\n   ```\n\n2. Create a `.env` file based on `.env.example` and configure your environment variables\n\n## Configuration\n\nThe following environment variables can be configured in your `.env` file:\n\n| Variable | Description | Example |\n|----------|-------------|----------|\n| `TRANSPORT` | Transport protocol (sse or stdio) | `sse` |\n| `HOST` | Host to bind to when using SSE transport | `0.0.0.0` |\n| `PORT` | Port to listen on when using SSE transport | `8050` |\n\n## Running the Server\n\n### Using Python 3\n\n```bash\n# Set TRANSPORT=sse in .env then:\npython3 src/main.py\n```\n\nThe server will start on the configured host and port (default: http://0.0.0.0:8050).\n\n### Using Docker\n\n```bash\ndocker build -t task-manager-mcp .\ndocker run --env-file .env -p 8050:8050 task-manager-mcp\n```\n\n## Using the Task Manager\n\n### Creating a New Project\n\n1. Create a task file for your project:\n```python\nawait mcp.create_task_file(project_name=\"my-project\")\n```\n\n2. Add tasks to your project:\n```python\nawait mcp.add_task(\n    project_name=\"my-project\",\n    title=\"Setup Development Environment\",\n    description=\"Configure the development environment with required tools\",\n    subtasks=[\n        \"Install dependencies\",\n        \"Configure linters\",\n        \"Set up testing framework\"\n    ]\n)\n```\n\n3. Parse a PRD to create tasks automatically:\n```python\nawait mcp.parse_prd(\n    project_name=\"my-project\",\n    prd_content=\"# Your PRD content...\"\n)\n```\n\n### Managing Tasks\n\n1. Update task status:\n```python\nawait mcp.update_task_status(\n    project_name=\"my-project\",\n    task_title=\"Setup Development Environment\",\n    subtask_title=\"Install dependencies\",\n    status=\"done\"\n)\n```\n\n2. Get the next task to work on:\n```python\nnext_task = await mcp.get_next_task(project_name=\"my-project\")\n```\n\n3. Expand a task into subtasks:\n```python\nawait mcp.expand_task(\n    project_name=\"my-project\",\n    task_title=\"Implement Authentication\"\n)\n```\n\n### Development Workflow\n\n1. Generate a file template for a task:\n```python\nawait mcp.generate_task_file(\n    project_name=\"my-project\",\n    task_title=\"User Authentication\"\n)\n```\n\n2. Get task complexity estimate:\n```python\ncomplexity = await mcp.estimate_task_complexity(\n    project_name=\"my-project\",\n    task_title=\"User Authentication\"\n)\n```\n\n3. Get suggestions for next actions:\n```python\nsuggestions = await mcp.suggest_next_actions(\n    project_name=\"my-project\",\n    task_title=\"User Authentication\"\n)\n```\n\n## Integration with MCP Clients\n\n### SSE Configuration\n\nTo connect to the server using SSE transport, use this configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"task-manager\": {\n      \"transport\": \"sse\",\n      \"url\": \"http://localhost:8050/sse\"\n    }\n  }\n}\n```\n\n### Stdio Configuration\n\nFor stdio transport, use this configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"task-manager\": {\n      \"command\": \"python3\",\n      \"args\": [\"src/main.py\"],\n      \"env\": {\n        \"TRANSPORT\": \"stdio\",\n        \"LLM_PROVIDER\": \"openai\",\n        \"LLM_API_KEY\": \"YOUR-API-KEY\",\n        \"LLM_CHOICE\": \"gpt-4\"\n      }\n    }\n  }\n}\n```\n\n## Building Your Own Server\n\nThis template provides a foundation for building more complex task management MCP servers. To extend it:\n\n1. Add new task management tools using the `@mcp.tool()` decorator\n2. Implement custom task analysis and automation features\n3. Add project-specific task templates and workflows\n4. Integrate with your existing development tools and processes\n"
}