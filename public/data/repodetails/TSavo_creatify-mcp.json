{
  "mcp_name": "Creatify",
  "mcp_description": "MCP Server that exposes Creatify AI API capabilities for AI video generation, including avatar videos, URL-to-video conversion, text-to-speech, and AI-powered editing tools.",
  "mcp_id": "TSavo_creatify-mcp",
  "fetch_timestamp": "2025-06-23T02:18:52.520951Z",
  "github_url": "https://github.com/TSavo/creatify-mcp",
  "repository": {
    "name": "creatify-mcp",
    "full_name": "TSavo/creatify-mcp",
    "description": "🎬 Enterprise-grade MCP Server for Creatify AI - 12 tools for AI video generation: avatar videos, URL-to-video, AI shorts, custom avatars, script generation, advanced lip-sync with emotion control. Complete API coverage with semantic versioning.",
    "html_url": "https://github.com/TSavo/creatify-mcp",
    "created_at": "2025-05-26T04:50:01Z",
    "updated_at": "2025-06-21T00:03:51Z",
    "pushed_at": "2025-05-26T07:37:55Z",
    "size": 211,
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks_count": 1,
    "open_issues_count": 2,
    "language": "TypeScript",
    "license": "Other",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "TSavo",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/877990?v=4",
      "html_url": "https://github.com/TSavo"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 0,
    "languages": {
      "TypeScript": 59773,
      "JavaScript": 2443
    },
    "language_percentages": {
      "TypeScript": 96.07,
      "JavaScript": 3.93
    },
    "pull_requests_count": 1,
    "contributors_count": 2,
    "latest_release": {
      "tag_name": "v1.0.2",
      "name": "v1.0.2",
      "published_at": "2025-05-26T07:38:03Z",
      "body": "## [1.0.2](https://github.com/TSavo/creatify-mcp/compare/v1.0.1...v1.0.2) (2025-05-26)\n\n\n### Bug Fixes\n\n* bumping semver for npm docs ([d62e689](https://github.com/TSavo/creatify-mcp/commit/d62e689d7c297c526e158e570468d3ac28b8a1de))\n\n\n\n",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v1.0.2",
        "commit_sha": "d62e689d7c297c526e158e570468d3ac28b8a1de"
      },
      {
        "name": "v1.0.1",
        "commit_sha": "307ba26473e275e7e9164c604cd17cb3c23a534d"
      },
      {
        "name": "v1.0.0",
        "commit_sha": "470bf5c67ab8e710857d835e97cd8409b4057ef9"
      }
    ],
    "latest_version": "v1.0.2",
    "package_json_version": "1.0.0"
  },
  "readme": "# 🎬 Creatify MCP Server\n\n[![npm version](https://badge.fury.io/js/%40tsavo%2Fcreatify-mcp.svg)](https://www.npmjs.com/package/@tsavo/creatify-mcp)\n[![npm downloads](https://img.shields.io/npm/dm/@tsavo/creatify-mcp.svg)](https://www.npmjs.com/package/@tsavo/creatify-mcp)\n[![CI](https://github.com/TSavo/creatify-mcp/actions/workflows/ci.yml/badge.svg)](https://github.com/TSavo/creatify-mcp/actions/workflows/ci.yml)\n[![TypeScript](https://img.shields.io/badge/TypeScript-007ACC?style=flat&logo=typescript&logoColor=white)](https://www.typescriptlang.org/)\n[![Node.js](https://img.shields.io/badge/Node.js-18%2B-green?logo=node.js)](https://nodejs.org/)\n[![MCP](https://img.shields.io/badge/MCP-Compatible-blue)](https://modelcontextprotocol.io/)\n[![Creatify AI](https://img.shields.io/badge/Creatify-AI%20Video%20Generation-purple)](https://creatify.ai)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![GitHub stars](https://img.shields.io/github/stars/TSavo/creatify-mcp?style=social)](https://github.com/TSavo/creatify-mcp)\n[![GitHub issues](https://img.shields.io/github/issues/TSavo/creatify-mcp)](https://github.com/TSavo/creatify-mcp/issues)\n[![Semantic Release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n> **The ultimate MCP server for AI video generation** - Bringing [Creatify AI](https://creatify.ai)'s powerful video creation capabilities to every AI assistant in the MCP ecosystem.\n\n## 🌟 Overview\n\nThe **Creatify MCP Server** is a comprehensive Model Context Protocol (MCP) server that exposes the full power of Creatify AI's video generation platform to AI assistants, chatbots, and automation tools. Built on top of the robust [`@tsavo/creatify-api-ts`](https://www.npmjs.com/package/@tsavo/creatify-api-ts) TypeScript client library, this server transforms complex video creation workflows into simple, natural language interactions.\n\n### 🎨 **Advanced MCP Features:**\n- **📝 Prompts** - Reusable video creation templates and workflows\n- **📊 Logging** - Structured logging with multiple severity levels\n- **🔍 Progress Tracking** - Real-time updates during video generation\n- **🤖 AI Self-Help** - `how_to_use` tool for AI assistants to understand parameters\n- **📊 Notifications** - Real-time status updates and progress notifications\n\n### 🎯 What This Enables\n\nImagine telling Claude Desktop: *\"Create a 16:9 avatar video of Anna saying 'Welcome to our product demo' and wait for it to complete\"* - and having it actually happen. That's the power of this MCP server.\n\n### 🏗️ Built With\n\n- **[Creatify AI API](https://creatify.ai/api)** - The world's leading AI video generation platform\n- **[@tsavo/creatify-api-ts](https://www.npmjs.com/package/@tsavo/creatify-api-ts)** - Comprehensive TypeScript client library\n- **[Model Context Protocol](https://modelcontextprotocol.io/)** - Standardized AI assistant integration\n- **TypeScript** - Full type safety and excellent developer experience\n\n## Features\n\n### 🛠️ MCP Tools (12 powerful actions)\n- **`create_avatar_video`** - Create AI avatar videos with lip-sync\n- **`create_url_to_video`** - Convert websites into professional videos\n- **`generate_text_to_speech`** - Generate natural-sounding speech from text\n- **`create_multi_avatar_conversation`** - Create videos with multiple avatars having conversations\n- **`create_custom_template_video`** - Generate videos using custom templates\n- **`create_ai_edited_video`** - Automatically edit and enhance videos\n- **`create_ai_shorts`** - Create short-form videos (perfect for TikTok, Instagram Reels)\n- **`generate_ai_script`** - Generate AI-powered scripts for videos\n- **`create_custom_avatar`** - Design and create your own custom avatars (DYOA)\n- **`manage_music`** - Upload, manage, and use background music\n- **`create_advanced_lipsync`** - Advanced lip-sync with emotion and gesture control\n- **`how_to_use`** - Get detailed usage information for any tool\n- **`get_video_status`** - Check the status of video generation tasks\n\n### 📚 MCP Resources (6 data sources)\n- **`creatify://avatars`** - List of available AI avatars\n- **`creatify://voices`** - List of available voices for text-to-speech\n- **`creatify://templates`** - Available custom video templates\n- **`creatify://music`** - Available background music library\n- **`creatify://credits`** - Remaining API credits\n- **`creatify://avatar/{avatarId}`** - Detailed information about specific avatars\n\n## 🏆 **Why Choose Creatify MCP Server?**\n\n### 🚀 **Complete API Coverage**\n- ✅ **12 MCP Tools** covering 100% of Creatify API functionality\n- ✅ **6 MCP Resources** for comprehensive data access\n- ✅ **5 Workflow Prompts** for common video creation scenarios\n- ✅ **Enterprise-grade logging** with 8 severity levels\n\n### 🤖 **AI-First Design**\n- ✅ **Self-documenting** with `how_to_use` tool for AI assistants\n- ✅ **Intelligent parameter validation** and error handling\n- ✅ **Real-time progress updates** during video generation\n- ✅ **Semantic versioning** with automated releases\n\n### 🎨 **Advanced Features**\n- ✅ **Emotion & gesture control** in advanced lip-sync\n- ✅ **Custom avatar creation** (DYOA - Design Your Own Avatar)\n- ✅ **AI-powered script generation** for any video type\n- ✅ **Short-form video optimization** for TikTok/Instagram/YouTube\n- ✅ **Background music management** and integration\n\n### 💼 **Production Ready**\n- ✅ **TypeScript** for type safety and better IDE support\n- ✅ **Comprehensive error handling** with detailed context\n- ✅ **Professional logging** for monitoring and debugging\n- ✅ **Automated testing** and continuous integration\n- ✅ **Semantic versioning** for reliable updates\n\n### 📝 MCP Prompts (5 workflow templates)\n- **`create-product-demo`** - Professional product demonstration workflow\n- **`create-social-content`** - Engaging social media content creation\n- **`create-educational-video`** - Educational and tutorial video workflow\n- **`create-marketing-campaign`** - Marketing campaign video creation\n- **`analyze-video-performance`** - Video performance analysis and optimization\n\n## Prerequisites\n\n- Node.js 18 or higher\n- Creatify API credentials (Pro plan or higher)\n  - Get your API credentials from [Creatify account settings](https://app.creatify.ai/account)\n\n## Installation\n\n### From npm (recommended)\n```bash\nnpm install -g @tsavo/creatify-mcp\n```\n\n### From source\n```bash\ngit clone https://github.com/TSavo/creatify-mcp.git\ncd creatify-mcp\nnpm install\nnpm run build\nnpm link\n```\n\n## 🎬 **Live Demo Examples**\n\n### **Create an AI Avatar Video**\n```\nUser: \"Create a professional avatar video with Anna saying 'Welcome to our company!' in 16:9 format\"\n\nClaude: I'll create a professional avatar video for you using the Creatify MCP Server.\n\n[Uses create_avatar_video tool with:\n- text: \"Welcome to our company!\"\n- avatarId: \"anna_costume1_cameraA\"\n- aspectRatio: \"16:9\"\n- voiceId: \"en-US-AriaNeural\"]\n\nYour professional avatar video has been created! Anna delivers your message with natural lip-sync and professional presentation.\n```\n\n### **Generate TikTok-Style Short Video**\n```\nUser: \"Make a 30-second TikTok video about coffee brewing tips\"\n\nClaude: I'll create an engaging short-form video perfect for TikTok!\n\n[Uses create_ai_shorts tool with:\n- prompt: \"Quick coffee brewing tips with energetic presentation\"\n- aspectRatio: \"9:16\"\n- duration: 30\n- style: \"energetic\"]\n\nYour TikTok-ready short video is being generated with optimal 9:16 aspect ratio and engaging content!\n```\n\n### **Convert Website to Video**\n```\nUser: \"Turn my product landing page into a marketing video\"\n\nClaude: I'll convert your website into a compelling marketing video.\n\n[Uses create_url_to_video tool with:\n- url: \"https://yourproduct.com\"\n- aspectRatio: \"16:9\"\n- style: \"marketing\"]\n\nYour landing page has been transformed into a professional marketing video showcasing your product!\n```\n\n### **AI-Powered Script Generation**\n```\nUser: \"Generate a script for a 60-second product demo video\"\n\nClaude: I'll create a compelling script for your product demo.\n\n[Uses generate_ai_script tool with:\n- topic: \"Product demonstration video\"\n- scriptType: \"commercial\"\n- duration: 60\n- tone: \"professional\"]\n\nYour script is ready! It includes engaging hooks, clear value propositions, and a strong call-to-action optimized for 60-second format.\n```\n\n## Configuration\n\nSet your Creatify API credentials as environment variables:\n\n```bash\nexport CREATIFY_API_ID=\"your-api-id\"\nexport CREATIFY_API_KEY=\"your-api-key\"\n```\n\nOr create a `.env` file:\n```env\nCREATIFY_API_ID=your-api-id\nCREATIFY_API_KEY=your-api-key\n```\n\n## Usage\n\n### With Claude Desktop\n\nAdd to your Claude Desktop configuration (`~/Library/Application Support/Claude/claude_desktop_config.json` on macOS):\n\n```json\n{\n  \"mcpServers\": {\n    \"creatify\": {\n      \"command\": \"creatify-mcp\",\n      \"env\": {\n        \"CREATIFY_API_ID\": \"your-api-id\",\n        \"CREATIFY_API_KEY\": \"your-api-key\"\n      }\n    }\n  }\n}\n```\n\n### 🎨 **Advanced MCP Features**\n\n#### 📝 **Using Prompts (Workflow Templates)**\n\nAI assistants can now use predefined workflow templates for common video creation scenarios:\n\n**Example: Product Demo Workflow**\n```\nUser: \"Use the create-product-demo prompt for 'Amazing Widget' with features 'fast, reliable, easy to use' targeting small business owners\"\n\nClaude: I'll use the product demo workflow template to create a professional demonstration video.\n\n[Claude automatically follows the complete workflow:\n1. Generates an engaging script using generate_ai_script\n2. Creates avatar video using create_avatar_video\n3. Optimizes for the target audience\n4. Includes clear call-to-action]\n```\n\n**Available Prompt Templates:**\n- `create-product-demo` - Professional product demonstrations\n- `create-social-content` - TikTok/Instagram/YouTube content\n- `create-educational-video` - Tutorials and educational content\n- `create-marketing-campaign` - Marketing and promotional videos\n- `analyze-video-performance` - Video optimization and analysis\n\n#### 📊 **Real-time Logging & Progress**\n\nThe server provides structured logging with multiple severity levels:\n\n```\n[INFO] Creatify MCP Server initialized\n[INFO] Creating avatar video {avatarId: \"anna_costume1_cameraA\", aspectRatio: \"16:9\"}\n[INFO] Waiting for avatar video completion...\n[INFO] Avatar video completed {videoId: \"video_abc123\"}\n```\n\n**Log Levels:** `debug`, `info`, `notice`, `warning`, `error`, `critical`, `alert`, `emergency`\n\n#### 🤖 **AI Self-Help System**\n\nAI assistants can now understand tool parameters better using the `how_to_use` tool:\n\n```\nClaude: Let me check how to use the avatar video tool...\n\n[Calls how_to_use tool with toolName: \"create_avatar_video\"]\n\n[Gets comprehensive documentation with:\n- Required parameters with descriptions\n- Optional parameters with usage notes\n- Real code examples\n- Tips and best practices]\n\nNow I understand exactly how to create your avatar video!\n```\n\n### With Custom MCP Client\n\n```typescript\nimport { Client } from \"@modelcontextprotocol/sdk/client/index.js\";\nimport { StdioClientTransport } from \"@modelcontextprotocol/sdk/client/stdio.js\";\n\nconst transport = new StdioClientTransport({\n  command: \"creatify-mcp\",\n  env: {\n    CREATIFY_API_ID: \"your-api-id\",\n    CREATIFY_API_KEY: \"your-api-key\"\n  }\n});\n\nconst client = new Client({\n  name: \"my-client\",\n  version: \"1.0.0\"\n});\n\nawait client.connect(transport);\n\n// List available tools\nconst tools = await client.listTools();\nconsole.log(\"Available tools:\", tools.tools.map(t => t.name));\n\n// Create an avatar video\nconst result = await client.callTool({\n  name: \"create_avatar_video\",\n  arguments: {\n    text: \"Hello, world! This is an AI-generated video.\",\n    avatarId: \"anna_costume1_cameraA\",\n    aspectRatio: \"16:9\",\n    waitForCompletion: true\n  }\n});\n```\n\n### Standalone Server\n\n```bash\n# Set environment variables\nexport CREATIFY_API_ID=\"your-api-id\"\nexport CREATIFY_API_KEY=\"your-api-key\"\n\n# Run the server\ncreatify-mcp\n```\n\n## Example Prompts for AI Assistants\n\nOnce configured with Claude Desktop or another MCP client, you can use natural language prompts like:\n\n- *\"Create a 16:9 avatar video of Anna saying 'Welcome to our product demo' and wait for it to complete\"*\n- *\"Convert the website https://example.com into a promotional video\"*\n- *\"Generate text-to-speech audio for 'Hello world' using a professional voice\"*\n- *\"Show me all available avatars and their details\"*\n- *\"Check my remaining Creatify credits\"*\n- *\"Create a conversation between two avatars discussing our new product\"*\n\n## API Reference\n\n### Tools\n\n#### `create_avatar_video`\nCreate an AI avatar video with lip-synced speech.\n\n**Parameters:**\n- `text` (string, required) - Text to be spoken\n- `avatarId` (string, required) - Avatar ID to use\n- `aspectRatio` (\"16:9\" | \"9:16\" | \"1:1\", required) - Video aspect ratio\n- `voiceId` (string, optional) - Voice ID for the avatar\n- `waitForCompletion` (boolean, optional) - Wait for video completion\n\n#### `create_url_to_video`\nConvert a website URL into a professional video.\n\n**Parameters:**\n- `url` (string, required) - URL to convert\n- `visualStyle` (string, optional) - Visual style template\n- `scriptStyle` (string, optional) - Script writing style\n- `aspectRatio` (\"16:9\" | \"9:16\" | \"1:1\", optional) - Video aspect ratio\n- `waitForCompletion` (boolean, optional) - Wait for video completion\n\n#### `generate_text_to_speech`\nGenerate natural-sounding speech from text.\n\n**Parameters:**\n- `text` (string, required) - Text to convert to speech\n- `voiceId` (string, required) - Voice ID to use\n- `waitForCompletion` (boolean, optional) - Wait for audio completion\n\n#### `get_video_status`\nCheck the status of a video generation task.\n\n**Parameters:**\n- `videoId` (string, required) - Video/task ID to check\n- `videoType` (string, required) - Type of task (\"lipsync\", \"url-to-video\", etc.)\n\n### Resources\n\n#### `creatify://avatars`\nReturns a JSON list of all available AI avatars with their IDs, names, and metadata.\n\n#### `creatify://voices`\nReturns a JSON list of all available voices for text-to-speech generation.\n\n#### `creatify://templates`\nReturns a JSON list of available custom video templates.\n\n#### `creatify://credits`\nReturns current account credit balance and usage information.\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Run in development mode with auto-reload\nnpm run dev\n\n# Run tests\nnpm test\n\n# Lint and format code\nnpm run check\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nMIT License - see [LICENSE](LICENSE) file for details.\n\n## Related Projects\n\n- [`@tsavo/creatify-api-ts`](https://github.com/TSavo/creatify-api-ts) - TypeScript client for Creatify API\n- [Model Context Protocol](https://modelcontextprotocol.io/) - Protocol specification\n- [Creatify AI](https://creatify.ai/) - AI video generation platform\n\n## 📚 Comprehensive Documentation\n\n### 🎬 Video Tutorials\n\n*Coming soon - comprehensive video tutorials showing real-world usage scenarios*\n\n### 📖 API Reference\n\nFor detailed API documentation, see:\n- **[Creatify API Documentation](https://creatify.ai/api)** - Official Creatify API docs\n- **[@tsavo/creatify-api-ts Documentation](https://github.com/TSavo/creatify-api-ts#readme)** - TypeScript client library docs\n- **[Model Context Protocol Specification](https://modelcontextprotocol.io/specification)** - MCP protocol details\n\n### 🔧 Advanced Configuration\n\n#### Environment Variables\n\n| Variable | Required | Description | Example |\n|----------|----------|-------------|----------|\n| `CREATIFY_API_ID` | ✅ | Your Creatify API ID | `your-api-id-here` |\n| `CREATIFY_API_KEY` | ✅ | Your Creatify API Key | `your-api-key-here` |\n| `MCP_LOG_LEVEL` | ❌ | Logging level | `debug`, `info`, `warn`, `error` |\n\n#### Claude Desktop Advanced Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"creatify\": {\n      \"command\": \"creatify-mcp\",\n      \"env\": {\n        \"CREATIFY_API_ID\": \"your-api-id\",\n        \"CREATIFY_API_KEY\": \"your-api-key\",\n        \"MCP_LOG_LEVEL\": \"info\"\n      },\n      \"args\": [\"--verbose\"]\n    }\n  }\n}\n```\n\n### 🚀 Performance Optimization\n\n#### Batch Operations\n\nFor multiple video creations, consider using the batch processing capabilities:\n\n```typescript\n// Example: Create multiple videos efficiently\nconst videos = await Promise.all([\n  client.callTool({\n    name: \"create_avatar_video\",\n    arguments: { text: \"Video 1\", avatarId: \"anna\", aspectRatio: \"16:9\" }\n  }),\n  client.callTool({\n    name: \"create_avatar_video\",\n    arguments: { text: \"Video 2\", avatarId: \"john\", aspectRatio: \"16:9\" }\n  })\n]);\n```\n\n#### Caching Strategies\n\n- **Avatar/Voice Lists**: Cache for 1 hour (they rarely change)\n- **Video Status**: Poll every 5-10 seconds for active tasks\n- **Templates**: Cache for 24 hours\n\n### 🔐 Security Best Practices\n\n1. **Never commit API keys** to version control\n2. **Use environment variables** for all sensitive data\n3. **Rotate API keys** regularly\n4. **Monitor API usage** to detect unauthorized access\n5. **Use HTTPS** for all webhook URLs\n\n### 🐛 Troubleshooting\n\n#### Common Issues\n\n**\"API credentials not found\"**\n```bash\n# Solution: Set environment variables\nexport CREATIFY_API_ID=\"your-api-id\"\nexport CREATIFY_API_KEY=\"your-api-key\"\n```\n\n**\"Video creation failed\"**\n- Check your Creatify account credits\n- Verify avatar/voice IDs exist\n- Ensure text is not empty\n- Check aspect ratio is valid\n\n**\"MCP connection failed\"**\n- Verify the server is running\n- Check Claude Desktop configuration\n- Ensure Node.js version >= 18\n\n#### Debug Mode\n\n```bash\n# Run with debug logging\nMCP_LOG_LEVEL=debug creatify-mcp\n```\n\n### 📊 Monitoring & Analytics\n\n#### Usage Tracking\n\nMonitor your Creatify API usage:\n\n```typescript\n// Check remaining credits\nconst credits = await client.readResource({ uri: \"creatify://credits\" });\nconsole.log(`Remaining credits: ${JSON.parse(credits.contents[0].text).remaining_credits}`);\n```\n\n#### Performance Metrics\n\n- **Video Creation Time**: Typically 2-5 minutes\n- **API Response Time**: Usually < 2 seconds\n- **Success Rate**: Monitor failed requests\n\n## 🤝 Contributing\n\nWe welcome contributions! Here's how to get started:\n\n### 🛠️ Development Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/TSavo/creatify-mcp.git\ncd creatify-mcp\n\n# Install dependencies\nnpm install\n\n# Set up environment variables\ncp .env.example .env\n# Edit .env with your API credentials\n\n# Run tests\nnpm test\n\n# Build the project\nnpm run build\n\n# Run in development mode\nnpm run dev\n```\n\n### 🧪 Testing\n\n```bash\n# Run all tests\nnpm test\n\n# Run tests in watch mode\nnpm run test:watch\n\n# Run type checking\nnpm run type-check\n\n# Run linting\nnpm run lint\n```\n\n### 📝 Code Style\n\nWe use:\n- **ESLint** for code linting\n- **Prettier** for code formatting\n- **TypeScript** for type safety\n- **Conventional Commits** for commit messages\n\n### 🔄 Pull Request Process\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Make your changes\n4. Add tests for new functionality\n5. Ensure all tests pass (`npm test`)\n6. Run linting (`npm run lint:fix`)\n7. Commit your changes (`git commit -m 'feat: add amazing feature'`)\n8. Push to the branch (`git push origin feature/amazing-feature`)\n9. Open a Pull Request\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\n- **[Creatify AI](https://creatify.ai)** - For providing the amazing AI video generation platform\n- **[@tsavo/creatify-api-ts](https://www.npmjs.com/package/@tsavo/creatify-api-ts)** - The robust TypeScript client library that powers this server\n- **[Anthropic](https://www.anthropic.com)** - For Claude and the Model Context Protocol\n- **[MCP Community](https://github.com/modelcontextprotocol)** - For the standardized protocol that makes this integration possible\n\n## 📞 Support\n\n- 📖 **[Creatify API Documentation](https://creatify.ai/api)** - Official API docs\n- 🐛 **[Report Issues](https://github.com/TSavo/creatify-mcp/issues)** - Bug reports and feature requests\n- 💬 **[MCP Community](https://github.com/modelcontextprotocol/specification/discussions)** - Community discussions\n- 📧 **[Contact Author](mailto:listentomy@nefariousplan.com)** - Direct support\n\n---\n\n<div align=\"center\">\n\n**Created with ❤️ by [T Savo](mailto:listentomy@nefariousplan.com)**\n\n🌐 **[Horizon City](https://www.horizon-city.com)** - *Ushering in the AI revolution and hastening the extinction of humans*\n\n*Making AI video generation accessible to every developer and AI assistant - one step closer to human obsolescence*\n\n</div>\n"
}