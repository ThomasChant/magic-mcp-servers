{
  "mcp_name": "mario-andreschak/mcp-gameboy",
  "mcp_description": "Facilitates LLM interaction with a GameBoy emulator, enabling ROM loading and control via a web interface or MCP client.",
  "mcp_id": "mario-andreschak_mcp-gameboy",
  "fetch_timestamp": "2025-06-23T06:25:11.551310Z",
  "github_url": "https://github.com/mario-andreschak/mcp-gameboy",
  "repository": {
    "name": "mcp-gameboy",
    "full_name": "mario-andreschak/mcp-gameboy",
    "description": "A gameboy emulator for LLM's",
    "html_url": "https://github.com/mario-andreschak/mcp-gameboy",
    "created_at": "2025-04-25T06:42:58Z",
    "updated_at": "2025-05-06T23:56:20Z",
    "pushed_at": "2025-04-28T12:36:54Z",
    "size": 155,
    "stargazers_count": 8,
    "watchers_count": 8,
    "forks_count": 4,
    "open_issues_count": 1,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "mario-andreschak",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/196235471?v=4",
      "html_url": "https://github.com/mario-andreschak"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 4,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 49133,
      "Dockerfile": 696
    },
    "language_percentages": {
      "TypeScript": 98.6,
      "Dockerfile": 1.4
    },
    "pull_requests_count": 3,
    "contributors_count": 3,
    "package_json_version": "1.0.0"
  },
  "readme": "# MCP GameBoy Server\n[![smithery badge](https://smithery.ai/badge/@mario-andreschak/mcp-gameboy)](https://smithery.ai/server/@mario-andreschak/mcp-gameboy)\n\n<a href=\"https://glama.ai/mcp/servers/@mario-andreschak/mcp-gameboy\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@mario-andreschak/mcp-gameboy/badge\" alt=\"GameBoy Server MCP server\" />\n</a>\n\n## Overview\nA Model Context Protocol (MCP) server for serverboy, allowing LLMs to interact with a GameBoy emulator.\nYour LLM can...\n- Load ROMS\n- Press Keys\n- Look at the Gameboy Screen\n- skip frames\n\nYou can...\n- control the gameboy emulator using the @modelcontextprotocol/inspector\n- control the gameboy emulator (and upload ROMs) using a web-interface at http://localhost:3001/emulator\n- install the gameboy emulator in your favorite MCP-Client\n\n![Screenshot 2025-04-25 183528](https://github.com/user-attachments/assets/a248ef8a-73bb-4fc7-9c7f-7832cea34498)\n\n![Screenshot 2025-04-25 081510](https://github.com/user-attachments/assets/dd47d7ea-fe93-4162-9da5-8da7d9aab469)\n\n![image](https://github.com/user-attachments/assets/b9565920-b2ae-41d5-8609-59d832a90d44)\n\n\n## Features\n\n- Supports both stdio and SSE transports\n- Provides tools for GameBoy controls (up, down, left, right, A, B, start, select)\n- Provides tools to load different ROMs\n- Provides tools to get the current screen\n- All tools return an ImageContent with the latest screen frame\n\n## Installation\n\n### Installing via Smithery\n\nTo install GameBoy Emulator Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@mario-andreschak/mcp-gameboy):\n\n```bash\nnpx -y @smithery/cli install @mario-andreschak/mcp-gameboy --client claude\n```\n\n### Installing in [FLUJO](https://github.com/mario-andreschak/FLUJO/)\n1. Click Add Server\n2. Copy & Paste Github URL into FLUJO\n3. Click Parse, Clone, Install, Build and Save.\n\n### Manual Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/mcp-gameboy.git\ncd mcp-gameboy\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n### Installing via Configuration Files\n\n!! **ATTENTION** : Many MCP Clients require to specify the ROM-Path in the .env vars as an **absolute path**\n\nTo integrate this MCP server with Cline or other MCP clients via configuration files:\n\n1. Open your Cline settings:\n   - In VS Code, go to File -> Preferences -> Settings\n   - Search for \"Cline MCP Settings\"\n   - Click \"Edit in settings.json\"\n\n2. Add the server configuration to the `mcpServers` object:\n   ```json\n   {\n     \"mcpServers\": {\n       \"mcp-gameboy\": {\n         \"command\": \"node\",\n         \"args\": [\n           \"/path/to/mcp-gameboy/dist/index.js\"\n         ],\n         \"disabled\": false,\n         \"autoApprove\": []\n       }\n     }\n   }\n   ```\n\n3. Replace `/path/to/mcp-gameboy/dist/index.js` with the actual path to the `index.js` file in your project directory. Use forward slashes (/) or double backslashes (\\\\\\\\) for the path on Windows.\n\n4. Save the settings file. Cline should automatically connect to the server.\n\n\n## Usage\n\n### Environment Variables\n!! **ATTENTION** : Many MCP Clients require to specify the ROM-Path in the .env vars as an **absolute path**\n\nCreate a `.env` file in the root directory with the following variables:\n\n```\n# Server configuration\nPORT=3001\n\n# ROM path for stdio mode\nROM_PATH=./roms/dangan.gb\n```\n\n### Running in stdio Mode\n\nIn stdio mode, the server uses the ROM path specified in the `ROM_PATH` environment variable. It will open a browser window to display the GameBoy screen.\n\n```bash\nnpm run start\n```\n\n### Running in SSE Mode\n\nIn SSE mode, the server starts an Express server that serves a web page for ROM selection.\n\n```bash\nnpm run start-sse\n```\n\nThen open your browser to `http://localhost:3001` to select a ROM.\n\n## Tools\n\nThe server provides the following tools:\n\n- `press_up`: Press the UP button on the GameBoy\n- `press_down`: Press the DOWN button on the GameBoy\n- `press_left`: Press the LEFT button on the GameBoy\n- `press_right`: Press the RIGHT button on the GameBoy\n- `press_a`: Press the A button on the GameBoy\n- `press_b`: Press the B button on the GameBoy\n- `press_start`: Press the START button on the GameBoy\n- `press_select`: Press the SELECT button on the GameBoy\n- `load_rom`: Load a GameBoy ROM file\n- `get_screen`: Get the current GameBoy screen\n\nAll tools return an ImageContent with the latest screen frame.\n\n## Implementation Details\n\nThis server is built using the Model Context Protocol (MCP) TypeScript SDK. It uses:\n\n- `McpServer` from `@modelcontextprotocol/sdk/server/mcp.js` for the server implementation\n- `StdioServerTransport` from `@modelcontextprotocol/sdk/server/stdio.js` for stdio transport\n- `SSEServerTransport` from `@modelcontextprotocol/sdk/server/sse.js` for SSE transport\n- `serverboy` for the GameBoy emulation\n- `express` for the web server in SSE mode\n- `canvas` for rendering the GameBoy screen\n\n## License\n\nMIT\n"
}