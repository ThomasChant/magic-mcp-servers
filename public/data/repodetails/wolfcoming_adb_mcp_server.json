{
  "mcp_name": "wolfcoming/adb_mcp_server",
  "mcp_description": "Facilitates remote control of Android devices via ADB using the MCP protocol, enabling device management, screen operations, input actions, app management, and more.",
  "mcp_id": "wolfcoming_adb_mcp_server",
  "fetch_timestamp": "2025-06-23T09:28:50.648389Z",
  "github_url": "https://github.com/wolfcoming/adb_mcp_server",
  "repository": {
    "name": "adb_mcp_server",
    "full_name": "wolfcoming/adb_mcp_server",
    "description": "Android ADB MCP 服务器 - 通过Claude或其他MCP客户端远程控制Android设备",
    "html_url": "https://github.com/wolfcoming/adb_mcp_server",
    "created_at": "2025-03-28T06:12:03Z",
    "updated_at": "2025-06-08T03:22:17Z",
    "pushed_at": "2025-03-28T06:13:57Z",
    "size": 38,
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks_count": 2,
    "open_issues_count": 2,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "wolfcoming",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/17529545?v=4",
      "html_url": "https://github.com/wolfcoming"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 2,
    "subscribers_count": 1,
    "languages": {
      "Python": 44749
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# Android ADB MCP 服务器\n\n![GitHub](https://img.shields.io/github/license/wolfcoming/adb_mcp_server)\n![GitHub stars](https://img.shields.io/github/stars/wolfcoming/adb_mcp_server)\n![GitHub last commit](https://img.shields.io/github/last-commit/wolfcoming/adb_mcp_server)\n\n这是一个基于 MCP 协议的 Android ADB 服务器，允许通过 Claude for Desktop 或其他 MCP 客户端远程控制连接到电脑的 Android 设备。\n\n## 功能特点\n\n- **设备管理**：列出已连接的 Android 设备\n- **屏幕操作**：截图、点击、滑动（上下左右）\n- **输入操作**：文本输入、按键模拟\n- **应用管理**：安装/卸载应用、启动应用\n- **系统操作**：获取屏幕分辨率等设备信息\n- **网络工具**：获取网络状态、端口扫描、WIFI管理\n- **文件工具**：文件上传/下载、文件管理\n- **高级工具**：UI测试、性能分析、录屏、日志收集、增强型启动应用\n\n## 前提条件\n\n1. Python 3.10 或更高版本\n2. ADB 已安装并添加到系统路径\n3. Android 设备已启用 USB 调试并连接到电脑\n\n## 安装\n\n```bash\n# 克隆此仓库\ngit clone https://github.com/wolfcoming/adb_mcp_server.git\ncd adb_mcp_server\n\n# 安装依赖\npip install -r requirements.txt\n\n# 确保 ADB 服务器已启动\nadb start-server\n```\n\n## 使用方法\n\n### 在 Claude for Desktop 中配置\n\n1. 安装 [Claude for Desktop](https://claude.ai/desktop)\n2. 配置 MCP 服务器:\n   - 找到 Claude for Desktop 配置文件，通常在 `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - 添加以下配置:\n\n```json\n{\n    \"mcpServers\": {\n        \"android_adb\": {\n            \"command\": \"python\",\n            \"args\": [\n                \"-m\",\n                \"src.adb_server\"\n            ],\n            \"cwd\": \"/path/to/adb_mcp_server\"\n        }\n    }\n}\n```\n\n3. 重启 Claude for Desktop\n\n### 在 Cursor 中配置\n\n1. 找到 Cursor 配置文件，通常在 `~/.cursor/mcp.json`\n2. 添加以下配置:\n\n```json\n{\n    \"mcpServers\": {\n        \"android_adb\": {\n            \"command\": \"python\",\n            \"args\": [\n                \"-m\",\n                \"src.adb_server\"\n            ],\n            \"cwd\": \"/path/to/adb_mcp_server\"\n        }\n    }\n}\n```\n\n3. 重启 Cursor\n\n## 支持的工具\n\n### 设备管理\n- `list_devices`: 列出所有连接的 Android 设备\n\n### 屏幕操作\n- `take_screenshot`: 截取设备屏幕\n- `tap_screen`: 点击屏幕上的指定位置\n- `swipe_up`: 向上滑动\n- `swipe_down`: 向下滑动\n- `swipe_left`: 向左滑动\n- `swipe_right`: 向右滑动\n\n### 输入操作\n- `input_text`: 输入文本\n- `press_key`: 按下指定按键\n- `press_back`: 按下返回键\n- `press_home`: 按下 Home 键\n\n### 应用管理\n- `start_app`: 启动应用\n- `install_apk`: 安装APK\n- `uninstall_app`: 卸载应用\n\n### 系统操作\n- `get_screen_resolution`: 获取屏幕分辨率\n\n### 网络工具\n- `get_ip_address`: 获取设备IP地址\n- `ping`: 测试网络连接\n- `scan_ports`: 扫描指定端口\n- `get_wifi_status`: 获取WIFI状态\n- `connect_wifi`: 连接到WIFI网络\n\n### 文件工具\n- `list_files`: 列出目录下的文件\n- `upload_file`: 上传文件到设备\n- `download_file`: 从设备下载文件\n- `create_file`: 创建文件\n- `delete_file`: 删除文件\n\n### 高级工具\n- `dump_ui_hierarchy`: 获取界面层次结构\n- `run_ui_test`: 执行UI测试步骤\n- `check_element_exists`: 检查界面元素是否存在\n- `tap_element_by_text`: 点击包含指定文本的UI元素\n- `collect_device_logs`: 收集设备日志\n- `analyze_performance`: 分析应用性能\n- `take_screen_recording`: 录制设备屏幕视频\n- `enhanced_start_app`: 增强型应用启动功能，可绕过权限限制\n\n## 示例用法\n\n在 Claude for Desktop 中，可以这样使用:\n\n```\n# 设备相关\n\"我想查看连接的 Android 设备\"\n\"请截取我的 Android 设备屏幕\"\n\n# 应用操作\n\"请安装这个APK文件: /path/to/app.apk\"\n\"请启动设置应用(com.android.settings)\"\n\"请使用增强型启动功能打开中国新闻网应用，即使遇到权限问题\"\n\n# 输入与交互\n\"请点击屏幕坐标 (500, 500)\"\n\"请在屏幕上从底部向上滑动\"\n\"请点击包含'设置'文本的按钮\"\n\n# 文件操作\n\"请列出设备上 /sdcard/ 目录下的文件\"\n\"请将设备上的 /sdcard/DCIM/pic.jpg 下载到我的电脑\"\n\n# 网络操作\n\"请检查设备的WIFI状态\"\n\"请连接到名为'MyWifi'的网络\"\n\n# 高级功能\n\"请分析'com.example.app'应用的性能，持续30秒\"\n\"请录制10秒钟的屏幕视频\"\n\"请收集最近的设备日志\"\n```\n\n## 提示\n\n- 如果遇到问题，确保 ADB 服务器已启动 (`adb start-server`)\n- 确保 Android 设备已授权您的电脑进行 USB 调试\n- 某些操作可能需要 root 权限\n- 如果遇到\"Permission Denial\"权限问题，请使用`enhanced_start_app`高级工具\n\n## 贡献\n\n欢迎提交问题和贡献代码！请随时提交 Pull Request 或创建 Issue。\n\n## 许可证\n\nMIT © [wolfcoming](https://github.com/wolfcoming) "
}