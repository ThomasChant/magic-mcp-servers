{
  "mcp_name": "arush15june/zammad-mcp-go",
  "mcp_description": "Facilitates interaction with the Zammad API for managing tickets and users through structured MCP resources and tools.",
  "mcp_id": "arush15june_zammad-mcp-go",
  "fetch_timestamp": "2025-06-23T01:18:23.932069Z",
  "github_url": "https://github.com/arush15june/zammad-mcp-go",
  "repository": {
    "name": "zammad-mcp-go",
    "full_name": "arush15june/zammad-mcp-go",
    "description": "MCP Server for Zammad API ",
    "html_url": "https://github.com/arush15june/zammad-mcp-go",
    "created_at": "2025-04-25T20:02:10Z",
    "updated_at": "2025-06-19T17:43:03Z",
    "pushed_at": "2025-04-27T10:06:46Z",
    "size": 95,
    "stargazers_count": 6,
    "watchers_count": 6,
    "forks_count": 2,
    "open_issues_count": 1,
    "language": "Go",
    "license": "MIT License",
    "topics": [],
    "default_branch": "master",
    "owner": {
      "login": "arush15june",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/17064824?v=4",
      "html_url": "https://github.com/arush15june"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 2,
    "subscribers_count": 1,
    "languages": {
      "Go": 18405
    },
    "language_percentages": {
      "Go": 100
    },
    "pull_requests_count": 1,
    "contributors_count": 1,
    "latest_release": {
      "tag_name": "v0.1.1",
      "name": "feat: initial realease",
      "published_at": "2025-04-27T10:12:13Z",
      "body": "",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.1.1",
        "commit_sha": "b85a53aaba94c96c5378ae468de84bcb04fa5210"
      },
      {
        "name": "v0.1.0",
        "commit_sha": "6e053cb10b5abf7a20857f9f6b0bb74fa9130ca2"
      }
    ],
    "latest_version": "v0.1.1"
  },
  "readme": "# zammad-go-mcp\r\n\r\nMCP Server for accessing the Zammad API. \r\n\r\nThis server enables:\r\n\r\n- Reading ticket and user lists.\r\n- Fetching details for specific tickets and users.\r\n- Searching for tickets and users.\r\n- Creating new tickets.\r\n- Adding notes (articles) to existing tickets.\r\n- Retrieving communication history (articles) for tickets.\r\n\r\n## Capabilities\r\n\r\nThe server exposes the following MCP Resources and Tools:\r\n\r\nResources allow the AI to read data from Zammad in a structured way using URIs.\r\n\r\n*   **`zammad://tickets`**\r\n    *   **Name:** List Tickets\r\n    *   **Description:** Lists all tickets accessible by the configured API token.\r\n    *   **MIME Type:** `application/json`\r\n*   **`zammad://tickets/{ticket_id}`** (Template)\r\n    *   **Name:** Show Ticket (Resource)\r\n    *   **Description:** Shows details for a specific ticket identified by its `{ticket_id}`.\r\n    *   **MIME Type:** `application/json`\r\n*   **`zammad://users`**\r\n    *   **Name:** List Users\r\n    *   **Description:** Lists all users accessible by the configured API token.\r\n    *   **MIME Type:** `application/json`\r\n*   **`zammad://users/{user_id}`** (Template)\r\n    *   **Name:** Show User (Resource)\r\n    *   **Description:** Shows details for a specific user identified by their `{user_id}`.\r\n    *   **MIME Type:** `application/json`\r\n\r\n### Tools\r\n\r\nTools allow the AI to perform actions or specific queries within Zammad.\r\n\r\n*   **`create_ticket`**: Creates a new ticket in Zammad.\r\n    *   Requires: `title`, `group`, `customer` (email or user ID), `body`.\r\n    *   Optional: `type` (article type, default: \"note\"), `internal` (boolean, default: false).\r\n*   **`search_tickets`**: Searches for tickets based on a query string.\r\n    *   Requires: `query`.\r\n    *   Optional: `limit` (default: 50).\r\n*   **`add_note_to_ticket`**: Adds an internal note (article) to an existing ticket.\r\n    *   Requires: `ticket_id`, `body`.\r\n    *   Optional: `internal` (boolean, default: true).\r\n*   **`get_ticket`**: Retrieves details for a specific ticket by its ID.\r\n    *   Requires: `ticket_id`.\r\n*   **`get_user`**: Retrieves details for a specific user by their ID.\r\n    *   Requires: `user_id`.\r\n*   **`search_users`**: Searches for users based on a query string (e.g., email, login, name).\r\n    *   Requires: `query`.\r\n    *   Optional: `limit` (default: 50).\r\n*   **`get_ticket_articles`**: Retrieves all articles (communications) for a specific ticket.\r\n    *   Requires: `ticket_id`.\r\n\r\n## Prerequisites\r\n\r\n*   **Go:** Version 1.24 or higher installed.\r\n*   **Zammad Instance:** Access to a running Zammad instance (URL).\r\n*   **Zammad API Token:** An API token generated within your Zammad instance with sufficient permissions.\r\n\r\n## Getting a Zammad API Token\r\n\r\nYou need to generate an API token within Zammad to allow this MCP server to authenticate and interact with the API.\r\n\r\n1.  **Log in** to your Zammad instance with an administrator account (or an account that has permission to manage API tokens).\r\n2.  Navigate to your **Profile** settings (usually by clicking your avatar/initials in the bottom-left).\r\n3.  Go to the **Token Access** section.\r\n4.  Click **\"Create\"** or the relevant button to generate a new token.\r\n5.  Give the token a descriptive **Label** (e.g., \"Claude MCP Server\").\r\n6.  **Crucially, assign the necessary permissions.** Based on the tools provided, you will likely need permissions like:\r\n    *   `ticket.agent` (or `ticket.customer` depending on use case) - To view, create, search tickets and add articles.\r\n    *   `user.reader` - To view and search users.\r\n    *   *(Optional)* `admin.user` might be needed for broader user searches or modifications if you add those tools later. Review Zammad's permission documentation for specifics.\r\n7.  Click **\"Create\"** or **\"Save\"**.\r\n8.  **Immediately copy the generated token.** Zammad will only show you the token *once*. Store it securely.\r\n\r\n## Installation & Setup\r\n\r\n1.  **Clone the repository:**\r\n    ```bash\r\n    git clone https://github.com/arush15june/zammad-mcp-go.git\r\n    cd zammad-mcp-go\r\n    ```\r\n\r\n2.  **Build the binary:**\r\n    ```bash\r\n    go build -o zammad-mcp-go main.go\r\n    ```\r\n    \r\n    This will create an executable file named `zammad-mcp-go` (or `zammad-mcp-go.exe` on Windows) in the current directory.\r\n\r\n\r\n# Claude Desktop Configuration\r\n\r\n```json\r\n{\r\n  \"mcpServers\": {\r\n        \"zammad\": {\r\n            \"command\": \"<path-to>/zammad-go-mcp.exe\",\r\n            \"args\": [],\r\n            \"env\": {\r\n                \"ZAMMAD_URL\": \"<zammad_url>\",\r\n                \"ZAMMAD_TOKEN\": \"<zammad_token>\"\r\n            }\r\n        }\r\n    }\r\n}\r\n```"
}