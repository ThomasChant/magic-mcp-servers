{
  "mcp_name": "Ludok-4/Ghidra",
  "mcp_description": "ghidraMCP enables LLMs to autonomously reverse engineer applications by integrating Ghidra's decompilation and analysis tools with MCP clients.",
  "mcp_id": "Ludok-4_Ghidra",
  "fetch_timestamp": "2025-06-23T06:17:19.083311Z",
  "github_url": "https://github.com/Ludok-4/Ghidra",
  "repository": {
    "name": "Ghidra",
    "full_name": "Ludok-4/Ghidra",
    "description": null,
    "html_url": "https://github.com/Ludok-4/Ghidra",
    "created_at": "2025-04-02T13:06:59Z",
    "updated_at": "2025-04-02T13:08:10Z",
    "pushed_at": "2025-04-02T13:08:12Z",
    "size": 29512,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Java",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "Ludok-4",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/180877933?v=4",
      "html_url": "https://github.com/Ludok-4"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Java": 19104,
      "Python": 4047
    },
    "language_percentages": {
      "Java": 82.52,
      "Python": 17.48
    },
    "pull_requests_count": 0,
    "contributors_count": 3,
    "tags": [
      {
        "name": "1.0",
        "commit_sha": "86b257aec017f3c81011fbed3c144e131220f133"
      }
    ],
    "latest_version": "1.0"
  },
  "readme": "[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://www.apache.org/licenses/LICENSE-2.0)\n[![GitHub release (latest by date)](https://img.shields.io/github/v/release/LaurieWired/GhidraMCP)](https://github.com/LaurieWired/GhidraMCP/releases)\n[![GitHub stars](https://img.shields.io/github/stars/LaurieWired/GhidraMCP)](https://github.com/LaurieWired/GhidraMCP/stargazers)\n[![GitHub forks](https://img.shields.io/github/forks/LaurieWired/GhidraMCP)](https://github.com/LaurieWired/GhidraMCP/network/members)\n[![GitHub contributors](https://img.shields.io/github/contributors/LaurieWired/GhidraMCP)](https://github.com/LaurieWired/GhidraMCP/graphs/contributors)\n[![Follow @lauriewired](https://img.shields.io/twitter/follow/lauriewired?style=social)](https://twitter.com/lauriewired)\n\n![ghidra_MCP_logo](https://github.com/user-attachments/assets/4986d702-be3f-4697-acce-aea55cd79ad3)\n\n\n# ghidraMCP\nghidraMCP is an Model Context Protocol server for allowing LLMs to autonomously reverse engineer applications. It exposes numerous tools from core Ghidra functionality to MCP clients.\n\nhttps://github.com/user-attachments/assets/36080514-f227-44bd-af84-78e29ee1d7f9\n\n\n# Features\nMCP Server + Ghidra Plugin\n\n- Decompile and analyze binaries in Ghidra\n- Automatically rename methods and data\n- List methods, classes, imports, and exports\n\n# Installation\n\n## Prerequisites\n- Install [Ghidra](https://ghidra-sre.org)\n- Python3\n- MCP [SDK](https://github.com/modelcontextprotocol/python-sdk)\n\n## Ghidra\nFirst, download the latest [release](https://github.com/LaurieWired/GhidraMCP/releases) from this repository. This contains the Ghidra plugin and Python MCP client. Then, you can directly import the plugin into Ghidra.\n\n1. Run Ghidra\n2. Select `File` -> `Install Extensions`\n3. Click the `+` button\n4. Select the `GhidraMCP-1-0.zip` (or your chosen version) from the downloaded release\n5. Restart Ghidra\n6. Make sure the GhidraMCPPlugin is enabled in `File` -> `Configure` -> `Developer`\n\nVideo Installation Guide:\n\n\nhttps://github.com/user-attachments/assets/75f0c176-6da1-48dc-ad96-c182eb4648c3\n\n\n\n## MCP Clients\n\nTheoretically, any MCP client should work with ghidraMCP.  Two examples are given below.\n\n## Example 1: Claude Desktop\nTo set up Claude Desktop as a Ghidra MCP client, go to `Claude` -> `Settings` -> `Developer` -> `Edit Config` -> `claude_desktop_config.json` and add the following:\n\n```json\n{\n  \"mcpServers\": {\n    \"ghidra\": {\n      \"command\": \"python\",\n      \"args\": [\n        \"/ABSOLUTE_PATH_TO/bridge_mcp_ghidra.py\"\n      ]\n    }\n  }\n}\n```\n\nAlternatively, edit this file directly:\n```\n/Users/YOUR_USER/Library/Application Support/Claude/claude_desktop_config.json\n```\n\n## Example 2: 5ire\nAnother MCP client that supports multiple models on the backend is [5ire](https://github.com/nanbingxyz/5ire). To set up GhidraMCP, open 5ire and go to `Tools` -> `New` and set the following configurations:\n\n1. Tool Key: ghidra\n2. Name: GhidraMCP\n3. Command: `python /ABSOLUTE_PATH_TO/bridge_mcp_ghidra.py`\n\n# Building from Source\nBuild with Maven by running:\n\n`mvn clean package assembly:single`\n\nThe generated zip file includes the built Ghidra plugin and its resources. These files are required for Ghidra to recognize the new extension.\n\n- lib/GhidraMCP.jar\n- extensions.properties\n- Module.manifest\n"
}