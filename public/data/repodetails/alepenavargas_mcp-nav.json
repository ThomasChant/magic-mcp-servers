{
  "mcp_name": "alepenavargas/mcp-nav",
  "mcp_description": "Facilitates navigation and content extraction from modelcontextprotocol.io using a configurable MCP server.",
  "mcp_id": "alepenavargas_mcp-nav",
  "fetch_timestamp": "2025-06-23T03:10:33.764240Z",
  "github_url": "https://github.com/alepenavargas/mcp-nav",
  "repository": {
    "name": "mcp-nav",
    "full_name": "alepenavargas/mcp-nav",
    "description": null,
    "html_url": "https://github.com/alepenavargas/mcp-nav",
    "created_at": "2025-04-15T12:58:55Z",
    "updated_at": "2025-04-17T17:41:14Z",
    "pushed_at": "2025-04-17T17:41:11Z",
    "size": 24,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "alepenavargas",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/65253585?v=4",
      "html_url": "https://github.com/alepenavargas"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 26936,
      "Shell": 1947,
      "Dockerfile": 1231
    },
    "language_percentages": {
      "Python": 89.45,
      "Shell": 6.47,
      "Dockerfile": 4.09
    },
    "pull_requests_count": 1,
    "contributors_count": 2,
    "tags": [
      {
        "name": "v0.3.0",
        "commit_sha": "0506beb66886c52b2738dbdd07926e4a804c8f70"
      }
    ],
    "latest_version": "v0.3.0"
  },
  "readme": "# MCP-NAV v0.3.0\n\nServidor MCP para navegar modelcontextprotocol.io con características avanzadas.\n\n## Características\n\n- Navegación y búsqueda en modelcontextprotocol.io\n- Caché de contenido con Redis\n- Búsqueda semántica con Elasticsearch\n- Gestión de usuarios y autenticación\n- Métricas con Prometheus\n- Trazabilidad con OpenTelemetry\n- Logging estructurado con structlog\n\n## Requisitos\n\n- Python 3.11+\n- Redis 5.0+\n- Elasticsearch 8.12+\n- Docker 20.10+ (opcional)\n- Docker Compose 2.0+ (opcional)\n\n## Instalación\n\n### Usando Poetry\n\n```bash\n# Instalar dependencias\npoetry install\n\n# Activar entorno virtual\npoetry shell\n```\n\n### Usando Docker\n\n```bash\n# Construir imagen\ndocker build -t mcp-nav .\n\n# Ejecutar contenedor\ndocker run -p 9090:9090 mcp-nav\n```\n\n### Usando Docker Compose\n\n```bash\n# Levantar servicios\ndocker-compose up -d\n```\n\n## Configuración\n\nLa configuración se realiza mediante variables de entorno:\n\n| Variable | Descripción | Valor por defecto |\n|----------|-------------|-------------------|\n| MCP_NAV_PORT | Puerto del servidor | 9090 |\n| MCP_NAV_HOST | Host del servidor | 0.0.0.0 |\n| MCP_NAV_REDIS_HOST | Host de Redis | localhost |\n| MCP_NAV_REDIS_PORT | Puerto de Redis | 6379 |\n| MCP_NAV_ES_HOST | Host de Elasticsearch | localhost |\n| MCP_NAV_ES_PORT | Puerto de Elasticsearch | 9200 |\n| MCP_NAV_CACHE_TTL | TTL del caché (segundos) | 3600 |\n| MCP_NAV_JWT_SECRET | Clave secreta para JWT | your-secret-key |\n\n## API REST\n\n### Usuarios\n\n#### Crear usuario\n```http\nPOST /users/\nContent-Type: application/json\n\n{\n    \"email\": \"user@example.com\",\n    \"name\": \"John Doe\",\n    \"password\": \"secret\"\n}\n```\n\n#### Obtener usuario\n```http\nGET /users/{user_id}\n```\n\n#### Actualizar usuario\n```http\nPUT /users/{user_id}\nContent-Type: application/json\n\n{\n    \"name\": \"Jane Doe\"\n}\n```\n\n#### Eliminar usuario\n```http\nDELETE /users/{user_id}\n```\n\n#### Actualizar foto de perfil\n```http\nPUT /users/{user_id}/profile-picture?picture_url=https://example.com/photo.jpg\n```\n\n## Desarrollo\n\n### Pruebas\n\n```bash\n# Ejecutar pruebas\npoetry run pytest\n\n# Con cobertura\npoetry run pytest --cov=app\n```\n\n### Linting y Formateo\n\n```bash\n# Formatear código\npoetry run black app tests\n\n# Ordenar imports\npoetry run isort app tests\n\n# Verificar tipos\npoetry run mypy app\n\n# Linting\npoetry run pylint app\n```\n\n### Pre-commit\n\nEl proyecto usa pre-commit para verificar el código antes de cada commit:\n\n```bash\n# Instalar hooks\npoetry run pre-commit install\n\n# Ejecutar manualmente\npoetry run pre-commit run --all-files\n```\n\n## Métricas y Monitoreo\n\n- Métricas expuestas en `/metrics` (Prometheus)\n- Trazas con OpenTelemetry\n- Logs estructurados con structlog\n\n## Licencia\n\nEste proyecto está licenciado bajo los términos de la licencia MIT. "
}