{
  "mcp_name": "Android MCP",
  "mcp_description": "üì≤ An MCP server that provides control over Android devices through ADB. Offers device screenshot capture, UI layout analysis, package management, and ADB command execution capabilities.",
  "mcp_id": "minhalvp_android-mcp-server",
  "fetch_timestamp": "2025-06-23T01:06:28.498937Z",
  "github_url": "https://github.com/minhalvp/android-mcp-server",
  "repository": {
    "name": "android-mcp-server",
    "full_name": "minhalvp/android-mcp-server",
    "description": "An MCP server that provides control over Android devices via adb",
    "html_url": "https://github.com/minhalvp/android-mcp-server",
    "created_at": "2025-02-28T12:20:34Z",
    "updated_at": "2025-06-22T04:24:00Z",
    "pushed_at": "2025-05-28T17:13:55Z",
    "size": 87,
    "stargazers_count": 423,
    "watchers_count": 423,
    "forks_count": 33,
    "open_issues_count": 1,
    "language": "Python",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "master",
    "owner": {
      "login": "minhalvp",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/35574445?v=4",
      "html_url": "https://github.com/minhalvp"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 33,
    "subscribers_count": 4,
    "languages": {
      "Python": 33728
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 3,
    "contributors_count": 3
  },
  "readme": "# Android MCP Server\n\nAn MCP (Model Context Protocol) server that provides programmatic control over\nAndroid devices through ADB (Android Debug Bridge). This server exposes\nvarious Android device management capabilities that can be accessed by MCP\nclients like [Claude desktop](https://modelcontextprotocol.io/quickstart/user)\nand Code editors\n(e.g. [Cursor](https://docs.cursor.com/context/model-context-protocol))\n\n## Features\n\n- üîß ADB Command Execution\n- üì∏ Device Screenshot Capture\n- üéØ UI Layout Analysis\n- üì± Device Package Management\n\n## Prerequisites\n\n- Python 3.x\n- ADB (Android Debug Bridge) installed and configured\n- Android device or emulator (not tested)\n\n## Installation\n\n1. Clone the repository:\n\n```bash\ngit clone https://github.com/minhalvp/android-mcp-server.git\ncd android-mcp-server\n```\n\n2. Install dependencies:\nThis project uses [uv](https://github.com/astral-sh/uv) for project\nmanagement via various methods of\n[installation](https://docs.astral.sh/uv/getting-started/installation/).\n\n```bash\nuv python install 3.11\nuv sync\n```\n\n## Configuration\n\nThe server supports flexible device configuration with multiple usage scenarios.\n\n### Device Selection Modes\n\n**1. Automatic Selection (Recommended for single device)**\n\n- No configuration file needed\n- Automatically connects to the only connected device\n- Perfect for development with a single test device\n\n**2. Manual Device Selection**\n\n- Use when you have multiple devices connected\n- Specify exact device in configuration file\n\n### Configuration File (Optional)\n\nThe configuration file (`config.yaml`) is **optional**. If not present, the server will automatically select the device if only one is connected.\n\n#### For Automatic Selection\n\nSimply ensure only one device is connected and run the server - no configuration needed!\n\n#### For Manual Selection\n\n1. Create a configuration file:\n\n```bash\ncp config.yaml.example config.yaml\n```\n\n2. Edit `config.yaml` and specify your device:\n\n```yaml\ndevice:\n  name: \"your-device-serial-here\" # Device identifier from 'adb devices'\n```\n\n**For auto-selection**, you can use any of these methods:\n\n```yaml\ndevice:\n  name: null              # Explicit null (recommended)\n  # name: \"\"              # Empty string  \n  # name:                 # Or leave empty/comment out\n```\n\n### Finding Your Device Serial\n\nTo find your device identifier, run:\n\n```bash\nadb devices\n```\n\nExample output:\n\n```\nList of devices attached\n13b22d7f        device\nemulator-5554   device\n```\n\nUse the first column value (e.g., `13b22d7f` or `emulator-5554`) as the device name.\n\n### Usage Scenarios\n\n| Scenario | Configuration Required | Behavior |\n|----------|----------------------|----------|\n| Single device connected | None | ‚úÖ Auto-connects to the device |\n| Multiple devices, want specific one | `config.yaml` with `device.name` | ‚úÖ Connects to specified device |\n| Multiple devices, no config | None | ‚ùå Shows error with available devices |\n| No devices connected | N/A | ‚ùå Shows \"no devices\" error |\n\n**Note**: If you have multiple devices connected and don't specify which one to use, the server will show an error message listing all available devices.\n\n## Usage\n\nAn MCP client is needed to use this server. The Claude Desktop app is an example\nof an MCP client. To use this server with Claude Desktop:\n\n1. Locate your Claude Desktop configuration file:\n\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n2. Add the Android MCP server configuration to the `mcpServers` section:\n\n```json\n{\n  \"mcpServers\": {\n    \"android\": {\n      \"command\": \"path/to/uv\",\n      \"args\": [\"--directory\", \"path/to/android-mcp-server\", \"run\", \"server.py\"]\n    }\n  }\n}\n```\n\nReplace:\n\n- `path/to/uv` with the actual path to your `uv` executable\n- `path/to/android-mcp-server` with the absolute path to where you cloned this\nrepository\n\n<https://github.com/user-attachments/assets/c45bbc17-f698-43e7-85b4-f1b39b8326a8>\n\n### Available Tools\n\nThe server exposes the following tools:\n\n```python\ndef get_packages() -> str:\n    \"\"\"\n    Get all installed packages on the device.\n    Returns:\n        str: A list of all installed packages on the device as a string\n    \"\"\"\n```\n\n```python\ndef execute_adb_command(command: str) -> str:\n    \"\"\"\n    Executes an ADB command and returns the output.\n    Args:\n        command (str): The ADB command to execute\n    Returns:\n        str: The output of the ADB command\n    \"\"\"\n```\n\n```python\ndef get_uilayout() -> str:\n    \"\"\"\n    Retrieves information about clickable elements in the current UI.\n    Returns a formatted string containing details about each clickable element,\n    including their text, content description, bounds, and center coordinates.\n\n    Returns:\n        str: A formatted list of clickable elements with their properties\n    \"\"\"\n```\n\n```python\ndef get_screenshot() -> Image:\n    \"\"\"\n    Takes a screenshot of the device and returns it.\n    Returns:\n        Image: the screenshot\n    \"\"\"\n```\n\n```python\ndef get_package_action_intents(package_name: str) -> list[str]:\n    \"\"\"\n    Get all non-data actions from Activity Resolver Table for a package\n    Args:\n        package_name (str): The name of the package to get actions for\n    Returns:\n        list[str]: A list of all non-data actions from the Activity Resolver\n        Table for the package\n    \"\"\"\n```\n\n## Contributing\n\nContributions are welcome!\n\n## Acknowledgments\n\n- Built with\n[Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction)\n"
}