{
  "mcp_name": "Trino MCP Server",
  "mcp_description": "A Go implementation of a Model Context Protocol (MCP) server for Trino, enabling LLM models to query distributed SQL databases through standardized tools.",
  "mcp_id": "tuannvm_mcp-trino",
  "fetch_timestamp": "2025-06-23T09:05:19.177463Z",
  "github_url": "https://github.com/tuannvm/mcp-trino",
  "repository": {
    "name": "mcp-trino",
    "full_name": "tuannvm/mcp-trino",
    "description": "A high-performance Model Context Protocol (MCP) server for Trino implemented in Go.",
    "html_url": "https://github.com/tuannvm/mcp-trino",
    "created_at": "2025-04-09T14:10:52Z",
    "updated_at": "2025-06-22T15:53:13Z",
    "pushed_at": "2025-06-23T06:10:34Z",
    "size": 178,
    "stargazers_count": 29,
    "watchers_count": 29,
    "forks_count": 9,
    "open_issues_count": 6,
    "language": "Go",
    "license": null,
    "topics": [
      "mcp",
      "mcp-server",
      "trino"
    ],
    "default_branch": "main",
    "owner": {
      "login": "tuannvm",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/1461216?v=4",
      "html_url": "https://github.com/tuannvm"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": true,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 9,
    "subscribers_count": 2,
    "languages": {
      "Go": 19625,
      "Makefile": 1491,
      "JavaScript": 1295,
      "Dockerfile": 765,
      "Shell": 721
    },
    "language_percentages": {
      "Go": 82.12,
      "Makefile": 6.24,
      "JavaScript": 5.42,
      "Dockerfile": 3.2,
      "Shell": 3.02
    },
    "pull_requests_count": 47,
    "contributors_count": 4,
    "latest_release": {
      "tag_name": "v1.4.6",
      "name": "mcp-trino v1.4.6",
      "published_at": "2025-06-19T05:14:47Z",
      "body": "## Changelog\n* 5d2065f82aee71f2c861274ce6197c49725907a0 ci(release): update goreleaser version to latest\n\n",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v1.4.6",
        "commit_sha": "5d2065f82aee71f2c861274ce6197c49725907a0"
      },
      {
        "name": "v1.4.5",
        "commit_sha": "ad31bf5212033970c5e7c7038d7c4323783301db"
      },
      {
        "name": "v1.4.4",
        "commit_sha": "06429dca9204d2a611911962bbccbdc44d270e75"
      },
      {
        "name": "v1.4.3",
        "commit_sha": "be50758e34055488d7153d394c69cb83762ca82f"
      },
      {
        "name": "v1.4.2",
        "commit_sha": "f9bd76fe06163218582f3f7a45d6cf3993bd56fd"
      },
      {
        "name": "v1.4.1",
        "commit_sha": "59547745a93f09a587142f8ec05f4d0a4f48155e"
      },
      {
        "name": "v1.4.0",
        "commit_sha": "67cf8b34095a163482098a1bba0dad6a43f74ae2"
      },
      {
        "name": "v1.3.3",
        "commit_sha": "18052633ce5e319f1d2f4090d18741dde90aa7ce"
      },
      {
        "name": "v1.3.2",
        "commit_sha": "025cabdb4dfa578af4d9afb638dc7fc4f3d7559a"
      },
      {
        "name": "v1.3.1",
        "commit_sha": "5bd11e8381e458ae0c01343bbf7e66549b6aae82"
      }
    ],
    "latest_version": "v1.4.6"
  },
  "readme": "# Trino MCP Server in Go\n\nA high-performance Model Context Protocol (MCP) server for Trino implemented in Go. This project enables AI assistants to seamlessly interact with Trino's distributed SQL query engine through standardized MCP tools.\n\n[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/tuannvm/mcp-trino/build.yml?branch=main&label=CI%2FCD&logo=github)](https://github.com/tuannvm/mcp-trino/actions/workflows/build.yml)\n[![Go Version](https://img.shields.io/github/go-mod/go-version/tuannvm/mcp-trino?logo=go)](https://github.com/tuannvm/mcp-trino/blob/main/go.mod)\n[![Trivy Scan](https://img.shields.io/github/actions/workflow/status/tuannvm/mcp-trino/build.yml?branch=main&label=Trivy%20Security%20Scan&logo=aquasec)](https://github.com/tuannvm/mcp-trino/actions/workflows/build.yml)\n[![SLSA 3](https://slsa.dev/images/gh-badge-level3.svg)](https://slsa.dev)\n[![Go Report Card](https://goreportcard.com/badge/github.com/tuannvm/mcp-trino)](https://goreportcard.com/report/github.com/tuannvm/mcp-trino)\n[![Go Reference](https://pkg.go.dev/badge/github.com/tuannvm/mcp-trino.svg)](https://pkg.go.dev/github.com/tuannvm/mcp-trino)\n[![Docker Image](https://img.shields.io/github/v/release/tuannvm/mcp-trino?sort=semver&label=GHCR&logo=docker)](https://github.com/tuannvm/mcp-trino/pkgs/container/mcp-trino)\n[![GitHub Release](https://img.shields.io/github/v/release/tuannvm/mcp-trino?sort=semver)](https://github.com/tuannvm/mcp-trino/releases/latest)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n\n## Overview\n\nThis project implements a Model Context Protocol (MCP) server for Trino in Go. It enables AI assistants to access Trino's distributed SQL query engine through standardized MCP tools.\n\nTrino (formerly PrestoSQL) is a powerful distributed SQL query engine designed for fast analytics on large datasets.\n\n## Features\n\n- ✅ MCP server implementation in Go\n- ✅ Trino SQL query execution through MCP tools\n- ✅ Catalog, schema, and table discovery\n- ✅ Docker container support\n- ✅ Supports both STDIO and HTTP transports\n- ✅ Server-Sent Events (SSE) support for Cursor and other MCP clients\n- ✅ Compatible with Cursor, Claude Desktop, Windsurf, ChatWise, and any MCP-compatible clients.\n\n## Installation\n\n### Homebrew (macOS and Linux)\n\nThe easiest way to install mcp-trino is using Homebrew:\n\n```bash\n# Add the tap repository\nbrew tap tuannvm/mcp\n\n# Install mcp-trino\nbrew install mcp-trino\n```\n\nTo update to the latest version:\n\n```bash\nbrew update && brew upgrade mcp-trino\n```\n\n### Alternative Installation Methods\n\n#### Manual Download\n\n1. Download the appropriate binary for your platform from the [GitHub Releases](https://github.com/tuannvm/mcp-trino/releases) page.\n2. Place the binary in a directory included in your PATH (e.g., `/usr/local/bin` on Linux/macOS)\n3. Make it executable (`chmod +x mcp-trino` on Linux/macOS)\n\n#### From Source\n\n```bash\ngit clone https://github.com/tuannvm/mcp-trino.git\ncd mcp-trino\nmake build\n# Binary will be in ./bin/\n```\n\n## Downloads\n\nYou can download pre-built binaries for your platform:\n\n| Platform | Architecture | Download Link |\n|----------|--------------|---------------|\n| macOS | x86_64 (Intel) | [Download](https://github.com/tuannvm/mcp-trino/releases/latest/download/mcp-trino-darwin-amd64) |\n| macOS | ARM64 (Apple Silicon) | [Download](https://github.com/tuannvm/mcp-trino/releases/latest/download/mcp-trino-darwin-arm64) |\n| Linux | x86_64 | [Download](https://github.com/tuannvm/mcp-trino/releases/latest/download/mcp-trino-linux-amd64) |\n| Linux | ARM64 | [Download](https://github.com/tuannvm/mcp-trino/releases/latest/download/mcp-trino-linux-arm64) |\n| Windows | x86_64 | [Download](https://github.com/tuannvm/mcp-trino/releases/latest/download/mcp-trino-windows-amd64.exe) |\n\nOr see all available downloads on the [GitHub Releases](https://github.com/tuannvm/mcp-trino/releases) page.\n## MCP Integration\n\nThis MCP server can be integrated with several AI applications:\n\n### Using Docker Image\n\nTo use the Docker image instead of a local binary:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-trino\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"--rm\", \"-i\",\n               \"-e\", \"TRINO_HOST=<HOST>\",\n               \"-e\", \"TRINO_PORT=<PORT>\",\n               \"-e\", \"TRINO_USER=<USERNAME>\",\n               \"-e\", \"TRINO_PASSWORD=<PASSWORD>\",\n               \"-e\", \"TRINO_SCHEME=http\",\n               \"ghcr.io/tuannvm/mcp-trino:latest\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\n> **Note**: The `host.docker.internal` special DNS name allows the container to connect to services running on the host machine. If your Trino server is running elsewhere, replace with the appropriate host.\n\nThis Docker configuration can be used in any of the below applications.\n\n### Cursor\n\nTo use with [Cursor](https://cursor.sh/), create or edit `~/.cursor/mcp.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-trino\": {\n      \"command\": \"mcp-trino\",\n      \"args\": [],\n      \"env\": {\n        \"TRINO_HOST\": \"<HOST>\",\n        \"TRINO_PORT\": \"<PORT>\",\n        \"TRINO_USER\": \"<USERNAME>\",\n        \"TRINO_PASSWORD\": \"<PASSWORD>\"\n      }\n    }\n  }\n}\n```\n\nReplace the environment variables with your specific Trino configuration.\n\nFor HTTP+SSE transport mode (supported for Cursor integration):\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-trino-http\": {\n      \"url\": \"http://localhost:9097/sse\"\n    }\n  }\n}\n```\n\nThen start the server in a separate terminal with:\n\n```bash\nMCP_TRANSPORT=http TRINO_HOST=<HOST> TRINO_PORT=<PORT> TRINO_USER=<USERNAME> TRINO_PASSWORD=<PASSWORD> mcp-trino\n```\n\n### Claude Desktop\n\nTo use with [Claude Desktop](https://claude.ai/desktop), edit your Claude configuration file:\n\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-trino\": {\n      \"command\": \"mcp-trino\",\n      \"args\": [],\n      \"env\": {\n        \"TRINO_HOST\": \"<HOST>\",\n        \"TRINO_PORT\": \"<PORT>\",\n        \"TRINO_USER\": \"<USERNAME>\",\n        \"TRINO_PASSWORD\": \"<PASSWORD>\"\n      }\n    }\n  }\n}\n```\n\nAfter updating the configuration, restart Claude Desktop. You should see the MCP tools available in the tools menu.\n\n### Windsurf\n\nTo use with [Windsurf](https://windsurf.com/refer?referral_code=sjqdvqozgx2wyi7r), create or edit your `mcp_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-trino\": {\n      \"command\": \"mcp-trino\",\n      \"args\": [],\n      \"env\": {\n        \"TRINO_HOST\": \"<HOST>\",\n        \"TRINO_PORT\": \"<PORT>\",\n        \"TRINO_USER\": \"<USERNAME>\",\n        \"TRINO_PASSWORD\": \"<PASSWORD>\"\n      }\n    }\n  }\n}\n```\n\nRestart Windsurf to apply the changes. The Trino MCP tools will be available to the Cascade AI.\n\n### ChatWise\n\nTo use with [ChatWise](https://chatwise.app?atp=uo1wzc), follow these steps:\n\n1. Open ChatWise and go to Settings\n2. Navigate to the Tools section\n3. Click the \"+\" icon to add a new tool\n4. Select \"Command Line MCP\"\n5. Configure with the following details:\n   - ID: `mcp-trino` (or any name you prefer)\n   - Command: `mcp-trino`\n   - Args: (leave empty)\n   - Env: Add the following environment variables:\n     ```\n     TRINO_HOST=<HOST>\n     TRINO_PORT=<PORT>\n     TRINO_USER=<USERNAME>\n     TRINO_PASSWORD=<PASSWORD>\n     ```\n\nAlternatively, you can import the configuration from JSON:\n\n1. Copy this JSON to your clipboard:\n   ```json\n   {\n     \"mcpServers\": {\n       \"mcp-trino\": {\n         \"command\": \"mcp-trino\",\n         \"args\": [],\n         \"env\": {\n           \"TRINO_HOST\": \"<HOST>\",\n           \"TRINO_PORT\": \"<PORT>\",\n           \"TRINO_USER\": \"<USERNAME>\",\n           \"TRINO_PASSWORD\": \"<PASSWORD>\"\n         }\n       }\n     }\n   }\n   ```\n2. In ChatWise Settings > Tools, click the \"+\" icon\n3. Select \"Import JSON from Clipboard\"\n4. Toggle the switch next to the tool to enable it\n\nOnce enabled, click the hammer icon below the input box in ChatWise to access Trino MCP tools.\n\n## Available MCP Tools\n\nThe server provides the following MCP tools:\n\n### execute_query\n\nExecute a SQL query against Trino with full SQL support for complex analytical queries.\n\n**Sample Prompt:**\n> \"How many customers do we have per region? Can you show them in descending order?\"\n\n**Example:**\n```json\n{\n  \"query\": \"SELECT region, COUNT(*) as customer_count FROM tpch.tiny.customer GROUP BY region ORDER BY customer_count DESC\"\n}\n```\n\n**Response:**\n```json\n{\n  \"columns\": [\"region\", \"customer_count\"],\n  \"data\": [\n    [\"AFRICA\", 5],\n    [\"AMERICA\", 5],\n    [\"ASIA\", 5],\n    [\"EUROPE\", 5],\n    [\"MIDDLE EAST\", 5]\n  ]\n}\n```\n\n### list_catalogs\n\nList all catalogs available in the Trino server, providing a comprehensive view of your data ecosystem.\n\n**Sample Prompt:**\n> \"What databases do we have access to in our Trino environment?\"\n\n**Example:**\n```json\n{}\n```\n\n**Response:**\n```json\n{\n  \"catalogs\": [\"tpch\", \"memory\", \"system\", \"jmx\"]\n}\n```\n\n### list_schemas\n\nList all schemas in a catalog, helping you navigate through the data hierarchy efficiently.\n\n**Sample Prompt:**\n> \"What schemas or datasets are available in the tpch catalog?\"\n\n**Example:**\n```json\n{\n  \"catalog\": \"tpch\"\n}\n```\n\n**Response:**\n```json\n{\n  \"schemas\": [\"information_schema\", \"sf1\", \"sf100\", \"sf1000\", \"tiny\"]\n}\n```\n\n### list_tables\n\nList all tables in a schema, giving you visibility into available datasets.\n\n**Sample Prompt:**\n> \"What tables are available in the tpch tiny schema? I need to know what data we can query.\"\n\n**Example:**\n```json\n{\n  \"catalog\": \"tpch\",\n  \"schema\": \"tiny\"\n}\n```\n\n**Response:**\n```json\n{\n  \"tables\": [\"customer\", \"lineitem\", \"nation\", \"orders\", \"part\", \"partsupp\", \"region\", \"supplier\"]\n}\n```\n\n### get_table_schema\n\nGet the schema of a table, understanding the structure of your data for better query planning.\n\n**Sample Prompt:**\n> \"What columns are in the customer table? I need to know the data types and structure before writing my query.\"\n\n**Example:**\n```json\n{\n  \"catalog\": \"tpch\",\n  \"schema\": \"tiny\",\n  \"table\": \"customer\"\n}\n```\n\n**Response:**\n```json\n{\n  \"columns\": [\n    {\n      \"name\": \"custkey\",\n      \"type\": \"bigint\",\n      \"nullable\": false\n    },\n    {\n      \"name\": \"name\",\n      \"type\": \"varchar\",\n      \"nullable\": false\n    },\n    {\n      \"name\": \"address\",\n      \"type\": \"varchar\",\n      \"nullable\": false\n    },\n    {\n      \"name\": \"nationkey\",\n      \"type\": \"bigint\",\n      \"nullable\": false\n    },\n    {\n      \"name\": \"phone\",\n      \"type\": \"varchar\",\n      \"nullable\": false\n    },\n    {\n      \"name\": \"acctbal\",\n      \"type\": \"double\",\n      \"nullable\": false\n    },\n    {\n      \"name\": \"mktsegment\",\n      \"type\": \"varchar\",\n      \"nullable\": false\n    },\n    {\n      \"name\": \"comment\",\n      \"type\": \"varchar\",\n      \"nullable\": false\n    }\n  ]\n}\n```\n\nThis information is invaluable for understanding the column names, data types, and nullability constraints before writing queries against the table.\n\n## End-to-End Example\n\nHere's a complete interaction example showing how an AI assistant might use these tools to answer a business question:\n\n**User Query:** \"Can you help me analyze our biggest customers? I want to know the top 5 customers with the highest account balances.\"\n\n**AI Assistant's workflow:**\n1. First, discover available catalogs\n   ```\n   > Using list_catalogs tool\n   > Discovers tpch catalog\n   ```\n\n2. Then, find available schemas\n   ```\n   > Using list_schemas tool with catalog \"tpch\"\n   > Discovers \"tiny\" schema\n   ```\n\n3. Explore available tables\n   ```\n   > Using list_tables tool with catalog \"tpch\" and schema \"tiny\"\n   > Finds \"customer\" table\n   ```\n\n4. Check the customer table schema\n   ```\n   > Using get_table_schema tool\n   > Discovers \"custkey\", \"name\", \"acctbal\" and other columns\n   ```\n\n5. Finally, execute the query\n   ```\n   > Using execute_query tool with:\n   > \"SELECT custkey, name, acctbal FROM tpch.tiny.customer ORDER BY acctbal DESC LIMIT 5\"\n   ```\n\n6. Returns the results to the user:\n   ```\n   The top 5 customers with highest account balances are:\n   1. Customer #65 (Customer#000000065): $9,222.78\n   2. Customer #13 (Customer#000000013): $8,270.47\n   3. Customer #89 (Customer#000000089): $7,990.56\n   4. Customer #11 (Customer#000000011): $7,912.91\n   5. Customer #82 (Customer#000000082): $7,629.41\n   ```\n\nThis seamless workflow demonstrates how the MCP tools enable AI assistants to explore and query data in a conversational manner.\n\n## Configuration\n\nThe server can be configured using the following environment variables:\n\n| Variable               | Description                       | Default   |\n| ---------------------- | --------------------------------- | --------- |\n| TRINO_HOST             | Trino server hostname             | localhost |\n| TRINO_PORT             | Trino server port                 | 8080      |\n| TRINO_USER             | Trino user                        | trino     |\n| TRINO_PASSWORD         | Trino password                    | (empty)   |\n| TRINO_CATALOG          | Default catalog                   | memory    |\n| TRINO_SCHEMA           | Default schema                    | default   |\n| TRINO_SCHEME           | Connection scheme (http/https)    | https     |\n| TRINO_SSL              | Enable SSL                        | true      |\n| TRINO_SSL_INSECURE     | Allow insecure SSL                | true      |\n| TRINO_ALLOW_WRITE_QUERIES | Allow non-read-only SQL queries | false     |\n| TRINO_QUERY_TIMEOUT    | Query timeout in seconds          | 30        |\n| MCP_TRANSPORT          | Transport method (stdio/http)     | stdio     |\n| MCP_PORT               | HTTP port for http transport      | 9097      |\n| MCP_HOST               | Host for HTTP callbacks           | localhost |\n\n> **Note**: When `TRINO_SCHEME` is set to \"https\", `TRINO_SSL` is automatically set to true regardless of the provided value.\n\n> **Important**: The default connection mode is HTTPS. If you're using an HTTP-only Trino server, you must set `TRINO_SCHEME=http` in your environment variables.\n\n> **Security Note**: By default, only read-only queries (SELECT, SHOW, DESCRIBE, EXPLAIN) are allowed to prevent SQL injection. If you need to execute write operations or other non-read queries, set `TRINO_ALLOW_WRITE_QUERIES=true`, but be aware this bypasses this security protection.\n\n> **For Cursor Integration**: When using with Cursor, set `MCP_TRANSPORT=http` and connect to the `/sse` endpoint. The server will automatically handle SSE (Server-Sent Events) connections.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## CI/CD and Releases\n\nThis project uses GitHub Actions for continuous integration and GoReleaser for automated releases.\n\n### Continuous Integration Checks\n\nOur CI pipeline performs the following checks on all PRs and commits to the main branch:\n\n#### Code Quality\n- **Linting**: Using golangci-lint to check for common code issues and style violations\n- **Go Module Verification**: Ensuring go.mod and go.sum are properly maintained\n- **Formatting**: Verifying code is properly formatted with gofmt\n\n#### Security\n- **Vulnerability Scanning**: Using govulncheck to check for known vulnerabilities in dependencies\n- **Dependency Scanning**: Using Trivy to scan for vulnerabilities in dependencies (CRITICAL, HIGH, and MEDIUM)\n- **SBOM Generation**: Creating a Software Bill of Materials for dependency tracking\n- **SLSA Provenance**: Creating verifiable build provenance for supply chain security\n\n#### Testing\n- **Unit Tests**: Running tests with race detection and code coverage reporting\n- **Build Verification**: Ensuring the codebase builds successfully\n\n#### CI/CD Security\n- **Least Privilege**: Workflows run with minimum required permissions\n- **Pinned Versions**: All GitHub Actions use specific versions to prevent supply chain attacks\n- **Dependency Updates**: Automated dependency updates via Dependabot\n\n### Release Process\n\nWhen changes are merged to the main branch:\n\n1. CI checks are run to validate code quality and security\n2. If successful, a new release is automatically created with:\n   - Semantic versioning based on commit messages\n   - Binary builds for multiple platforms\n   - Docker image publishing to GitHub Container Registry\n   - SBOM and provenance attestation\n"
}