{
  "mcp_name": "Nile Postgres",
  "mcp_description": "MCP server for Nile's Postgres platform - Manage and query Postgres databases, tenants, users, auth using LLMs",
  "mcp_id": "niledatabase_nile-mcp-server",
  "fetch_timestamp": "2025-06-23T07:07:34.733097Z",
  "github_url": "https://github.com/niledatabase/nile-mcp-server",
  "repository": {
    "name": "nile-mcp-server",
    "full_name": "niledatabase/nile-mcp-server",
    "description": "MCP server for Nile Database - Manage and query databases, tenants, users, auth using LLMs",
    "html_url": "https://github.com/niledatabase/nile-mcp-server",
    "created_at": "2025-02-04T07:55:42Z",
    "updated_at": "2025-03-25T23:54:15Z",
    "pushed_at": "2025-03-10T22:59:39Z",
    "size": 473,
    "stargazers_count": 14,
    "watchers_count": 14,
    "forks_count": 6,
    "open_issues_count": 2,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "alpha",
    "owner": {
      "login": "niledatabase",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/97133832?v=4",
      "html_url": "https://github.com/niledatabase"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 6,
    "subscribers_count": 5,
    "languages": {
      "TypeScript": 63794,
      "JavaScript": 2200,
      "Dockerfile": 418
    },
    "language_percentages": {
      "TypeScript": 96.06,
      "JavaScript": 3.31,
      "Dockerfile": 0.63
    },
    "pull_requests_count": 9,
    "contributors_count": 4,
    "latest_release": {
      "tag_name": "v1.0.0",
      "name": "v1.0.0",
      "published_at": "2025-03-04T06:54:28Z",
      "body": "# 1.0.0 (2025-03-04)\n\n\n### Features\n\n* change package name ([c95c40e](https://github.com/niledatabase/nile-mcp-server/commit/c95c40e89fa6165b94f2322128b932ba927242ea))\n* first release ([7922385](https://github.com/niledatabase/nile-mcp-server/commit/7922385fe9684457cc1759e3cf29f3503171db43))\n* fix release ([966d153](https://github.com/niledatabase/nile-mcp-server/commit/966d1533beff85e7e1890fad35c7eadba1ffafd8))\n* get changes ([809ad13](https://github.com/niledatabase/nile-mcp-server/commit/809ad13ee773297bc72c410bc3c29ee6e3d0f40e))\n* new flow ([18794e4](https://github.com/niledatabase/nile-mcp-server/commit/18794e4f3f5545fb710065ce8bcaed2cd66e972e))\n* new release ([59af4b8](https://github.com/niledatabase/nile-mcp-server/commit/59af4b8083a782657420d1ca0c75b27ee1c9bb4a))\n* new release ([c0d89a1](https://github.com/niledatabase/nile-mcp-server/commit/c0d89a14f731b9cd54d013be26420fd92019af1e))\n* package name ([be8cca4](https://github.com/niledatabase/nile-mcp-server/commit/be8cca4ee282e7cc804efc13c0f65b1b651935f9))\n* update new package ([c8aec96](https://github.com/niledatabase/nile-mcp-server/commit/c8aec962fdd5582ddb5ce34cf05abc6d8c1d9f70))\n* update package name ([224c1c6](https://github.com/niledatabase/nile-mcp-server/commit/224c1c619f5148e98463e0ef679bc100bd320a98))\n\n\n\n",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v1.4.0",
        "commit_sha": "6dd0175aeb7781c1fc11fbd9c0e76ae651914c78"
      },
      {
        "name": "v1.4.0-alpha.1",
        "commit_sha": "0e3288de6c219550fe31a40413cba2fa2c21d81f"
      },
      {
        "name": "v1.3.0",
        "commit_sha": "c363d240920230da5f31d59cd33d3124ed2ac23b"
      },
      {
        "name": "v1.3.0-alpha.2",
        "commit_sha": "5223778d2d8d01c0cea429652d99b21a12a7c0f2"
      },
      {
        "name": "v1.3.0-alpha.1",
        "commit_sha": "4907c291ded8ac26c098f225d5f370cc691d6c5f"
      },
      {
        "name": "v1.2.0",
        "commit_sha": "a51fa1e2983ebbe58e5939849a40d1c471ad6928"
      },
      {
        "name": "v1.2.0-alpha.3",
        "commit_sha": "10902ce126b3e1414d6f980ef13746e8320aaa27"
      },
      {
        "name": "v1.2.0-alpha.2",
        "commit_sha": "38fb8939330011f773f351d5c92a088988b9a2dc"
      },
      {
        "name": "v1.2.0-alpha.1",
        "commit_sha": "06b28a562dfbcedd817ce35c5de785456a87be0d"
      },
      {
        "name": "v1.1.0",
        "commit_sha": "4dbae79c872e336992be4c95b040070f10a13283"
      }
    ],
    "latest_version": "v1.4.0",
    "package_json_version": "1.6.0-alpha.1"
  },
  "readme": "<p align=\"center\">\n <a href=\"https://thenile.dev\" target=\"_blank\"><img width=\"96px\" src=\"https://www.thenile.dev/about-logo.png\" /></a>\n <h2 align=\"center\">Nile MCP Server\n  <br/>\n  <img src=\"https://img.shields.io/npm/v/@niledatabase/server\"/>\n </h2>\n <p align=\"center\">\n  <a href=\"https://thenile.dev/docs/ai-embeddings/nile-mcp-server\"><strong>Learn more ‚ÜóÔ∏è</strong></a>\n  <br />\n  <br />\n  <a href=\"https://discord.gg/akRKRPKA\">Discord</a>\n  üîµ\n  <a href=\"https://thenile.dev\">Website</a>\n  üîµ \n  <a href=\"https://github.com/orgs/niledatabase/discussions\">Issues</a>\n </p>\n</p>\n\n[![smithery badge](https://smithery.ai/badge/@niledatabase/nile-mcp-server)](https://smithery.ai/server/@niledatabase/nile-mcp-server)\n\nA Model Context Protocol (MCP) server implementation for Nile database platform. This server allows LLM applications to interact with Nile platform through a standardized interface.\n\n## Features\n\n- **Database Management**: Create, list, get details, and delete databases\n- **Credential Management**: Create and list database credentials\n- **Region Management**: List available regions for database creation\n- **SQL Query Support**: Execute SQL queries directly on Nile databases\n- **MCP Protocol Support**: Full implementation of the Model Context Protocol\n- **Type Safety**: Written in TypeScript with full type checking\n- **Error Handling**: Comprehensive error handling and user-friendly error messages\n- **Test Coverage**: Comprehensive test suite using Jest\n- **Environment Management**: Automatic loading of environment variables from .env file\n- **Input Validation**: Schema-based input validation using Zod\n\n## Installation\n\nInstall the stable version:\n```bash\nnpm install @niledatabase/nile-mcp-server\n```\n\nFor the latest alpha/preview version:\n```bash\nnpm install @niledatabase/nile-mcp-server@alpha\n```\nThis will install @niledatabase/nile-mcp-server in your node_modules folder. For example: node_modules/@niledatabase/nile-mcp-server/dist/\n\n### Manual Installation\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/nile-mcp-server.git\ncd nile-mcp-server\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n### Other mcp package managers\n1. npx @michaellatman/mcp-get@latest install @niledatabase/nile-mcp-server\n\n## Starting the Server\n\nThere are several ways to start the server:\n\n1. **Direct Node Execution**:\n   ```bash\n   node dist/index.js\n   ```\n2. **Development Mode** (with auto-rebuild):\n   ```bash\n   npm run dev\n   ```\n\nThe server will start and listen for MCP protocol messages. You should see startup logs indicating:\n- Environment variables loaded\n- Server instance created\n- Tools initialized\n- Transport connection established\n\nTo stop the server, press `Ctrl+C`.\n\n### Verifying the Server is Running\n\nWhen the server starts successfully, you should see logs similar to:\n```\n[info] Starting Nile MCP Server...\n[info] Loading environment variables...\n[info] Environment variables loaded successfully\n[info] Creating server instance...\n[info] Tools initialized successfully\n[info] Setting up stdio transport...\n[info] Server started successfully\n```\n\nIf you see these logs, the server is ready to accept commands from Claude Desktop.\n\n## Configuration\n\nCreate a `.env` file in the root directory with your Nile credentials:\n\n```env\nNILE_API_KEY=your_api_key_here\nNILE_WORKSPACE_SLUG=your_workspace_slug\n```\n\nTo create a Nile API key, log in to your [Nile account](console.thenile.dev), click Workspaces in the top-left, select your workspace, and navigate to the Security section in the left menu.\n\n## Using with Claude Desktop\n\n### Setup\n\n1. Install [Claude Desktop](https://claude.ai/desktop) if you haven't already\n2. Build the project:\n   ```bash\n   npm run build\n   ```\n3. Open Claude Desktop\n4. Go to Settings > MCP Servers\n5. Click \"Add Server\"\n6. Add the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"nile-database\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/your/nile-mcp-server/dist/index.js\"\n      ],\n      \"env\": {\n        \"NILE_API_KEY\": \"your_api_key_here\",\n        \"NILE_WORKSPACE_SLUG\": \"your_workspace_slug\"\n      }\n    }\n  }\n}\n```\n\nReplace:\n- `/path/to/your/nile-mcp-server` with the absolute path to your project directory\n- `your_api_key_here` with your Nile API key\n- `your_workspace_slug` with your Nile workspace slug\n\n## Using with Cursor\n\n### Setup\n\n1. Install [Cursor](https://cursor.sh) if you haven't already\n2. Build the project:\n   ```bash\n   npm run build\n   ```\n3. Open Cursor\n4. Go to Settings (‚åò,) > Features > MCP Servers\n5. Click \"Add New MCP Server\"\n6. Configure the server:\n   - Name: `nile-database` (or any name you prefer)\n   - Command: \n     ```bash\n     env NILE_API_KEY=your_key NILE_WORKSPACE_SLUG=your_workspace node /absolute/path/to/nile-mcp-server/dist/index.js\n     ```\n     Replace:\n     - `your_key` with your Nile API key\n     - `your_workspace` with your Nile workspace slug\n     - `/absolute/path/to` with the actual path to your project\n7. Click \"Save\"\n8. You should see a green indicator showing that the MCP server is connected\n9. Restart Cursor for the changes to take effect\n\n### Server Modes\n\nThe server supports two operational modes:\n\n#### STDIO Mode (Default)\nThe default mode uses standard input/output for communication, making it compatible with Claude Desktop and Cursor integrations.\n\n#### SSE Mode\nServer-Sent Events (SSE) mode enables real-time, event-driven communication over HTTP.\n\nTo enable SSE mode:\n1. Set `MCP_SERVER_MODE=sse` in your `.env` file\n2. The server will start an HTTP server (default port 3000)\n3. Connect to the SSE endpoint: `http://localhost:3000/sse`\n4. Send commands to: `http://localhost:3000/messages`\n\nExample SSE usage with curl:\n```bash\n# In terminal 1 - Listen for events\ncurl -N http://localhost:3000/sse\n\n# In terminal 2 - Send commands\ncurl -X POST http://localhost:3000/messages \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"type\": \"function\",\n    \"name\": \"list-databases\",\n    \"parameters\": {}\n  }'\n```\n\n### Example Prompts\n\nAfter setting up the MCP server in Cursor, you can use natural language to interact with Nile databases. Here are some example prompts:\n\n#### Database Management\n```\nCreate a new database named \"my_app\" in AWS_US_WEST_2 region\n\nList all my databases\n\nGet details for database \"my_app\"\n\nDelete database \"test_db\"\n```\n\n#### Creating Tables\n```\nCreate a users table in my_app database with columns:\n- tenant_id (UUID, references tenants)\n- id (INTEGER)\n- email (VARCHAR, unique per tenant)\n- name (VARCHAR)\n- created_at (TIMESTAMP)\n\nCreate a products table in my_app database with columns:\n- tenant_id (UUID, references tenants)\n- id (INTEGER)\n- name (VARCHAR)\n- price (DECIMAL)\n- description (TEXT)\n- created_at (TIMESTAMP)\n```\n\n#### Querying Data\n```\nExecute this query on my_app database:\nSELECT * FROM users WHERE tenant_id = 'your-tenant-id' LIMIT 5\n\nRun this query on my_app:\nINSERT INTO users (tenant_id, id, email, name) \nVALUES ('tenant-id', 1, 'user@example.com', 'John Doe')\n\nShow me all products in my_app database with price > 100\n```\n\n#### Schema Management\n```\nShow me the schema for the users table in my_app database\n\nAdd a new column 'status' to the users table in my_app database\n\nCreate an index on the email column of the users table in my_app\n```\n\n### Available Tools\n\nThe server provides the following tools for interacting with Nile databases:\n\n#### Database Management\n\n1. **create-database**\n   - Creates a new Nile database\n   - Parameters:\n     - `name` (string): Name of the database\n     - `region` (string): Either `AWS_US_WEST_2` (Oregon) or `AWS_EU_CENTRAL_1` (Frankfurt)\n   - Returns: Database details including ID, name, region, and status\n   - Example: \"Create a database named 'my-app' in AWS_US_WEST_2\"\n\n2. **list-databases**\n   - Lists all databases in your workspace\n   - No parameters required\n   - Returns: List of databases with their IDs, names, regions, and status\n   - Example: \"List all my databases\"\n\n3. **get-database**\n   - Gets detailed information about a specific database\n   - Parameters:\n     - `name` (string): Name of the database\n   - Returns: Detailed database information including API host and DB host\n   - Example: \"Get details for database 'my-app'\"\n\n4. **delete-database**\n   - Deletes a database\n   - Parameters:\n     - `name` (string): Name of the database to delete\n   - Returns: Confirmation message\n   - Example: \"Delete database 'my-app'\"\n\n#### Credential Management\n\n1. **list-credentials**\n   - Lists all credentials for a database\n   - Parameters:\n     - `databaseName` (string): Name of the database\n   - Returns: List of credentials with IDs, usernames, and creation dates\n   - Example: \"List credentials for database 'my-app'\"\n\n2. **create-credential**\n   - Creates new credentials for a database\n   - Parameters:\n     - `databaseName` (string): Name of the database\n   - Returns: New credential details including username and one-time password\n   - Example: \"Create new credentials for database 'my-app'\"\n   - Note: Save the password when it's displayed, as it won't be shown again\n\n#### Region Management\n\n1. **list-regions**\n   - Lists all available regions for creating databases\n   - No parameters required\n   - Returns: List of available AWS regions\n   - Example: \"What regions are available for creating databases?\"\n\n#### SQL Query Execution\n\n1. **execute-sql**\n   - Executes SQL queries on a Nile database\n   - Parameters:\n     - `databaseName` (string): Name of the database to query\n     - `query` (string): SQL query to execute\n     - `connectionString` (string, optional): Pre-existing connection string to use for the query\n   - Returns: Query results formatted as a markdown table with column headers and row count\n   - Features:\n     - Automatic credential management (creates new if not specified)\n     - Secure SSL connection to database\n     - Results formatted as markdown tables\n     - Detailed error messages with hints\n     - Support for using existing connection strings\n   - Example: \"Execute SELECT * FROM users LIMIT 5 on database 'my-app'\"\n\n#### Resource Management\n\n1. **read-resource**\n   - Reads schema information for database resources (tables, views, etc.)\n   - Parameters:\n     - `databaseName` (string): Name of the database\n     - `resourceName` (string): Name of the resource (table/view)\n   - Returns: Detailed schema information including:\n     - Column names and types\n     - Primary keys and indexes\n     - Foreign key relationships\n     - Column descriptions and constraints\n   - Example: \"Show me the schema for the users table in my-app\"\n\n2. **list-resources**\n   - Lists all resources (tables, views) in a database\n   - Parameters:\n     - `databaseName` (string): Name of the database\n   - Returns: List of all resources with their types\n   - Example: \"List all tables in my-app database\"\n\n#### Tenant Management\n\n1. **list-tenants**\n   - Lists all tenants in a database\n   - Parameters:\n     - `databaseName` (string): Name of the database\n   - Returns: List of tenants with their IDs and metadata\n   - Example: \"Show all tenants in my-app database\"\n\n2. **create-tenant**\n   - Creates a new tenant in a database\n   - Parameters:\n     - `databaseName` (string): Name of the database\n     - `tenantName` (string): Name for the new tenant\n   - Returns: New tenant details including ID\n   - Example: \"Create a tenant named 'acme-corp' in my-app\"\n\n3. **delete-tenant**\n   - Deletes tenants in the database\n   - Parameters:\n     - `databaseName` (string): Name of the database\n     - `tenantName` (string): Name for the tenant\n   - Returns: Success if the tenant is deleted\n   - Example: \"Delete tenant named 'acme-corp' in my-app\"\n\n### Example Usage\n\nHere are some example commands you can use in Claude Desktop:\n\n```\n# Database Management\nPlease create a new database named \"my-app\" in the AWS_US_WEST_2 region.\nCan you list all my databases?\nGet the details for database \"my-app\".\nDelete the database named \"test-db\".\n\n# Connection String Management\nGet a connection string for database \"my-app\".\n# Connection string format: postgres://<user>:<password>@<region>.db.thenile.dev:5432/<database>\n# Example: postgres://cred-123:password@us-west-2.db.thenile.dev:5432/my-app\n\n# SQL Queries\nExecute SELECT * FROM users LIMIT 5 on database \"my-app\"\nRun this query on my-app database: SELECT COUNT(*) FROM orders WHERE status = 'completed'\nUsing connection string \"postgres://user:pass@host:5432/db\", execute this query on my-app: SELECT * FROM products WHERE price > 100\n```\n\n### Response Format\n\nAll tools return responses in a standardized format:\n- Success responses include relevant data and confirmation messages\n- Error responses include detailed error messages and HTTP status codes\n- SQL query results are formatted as markdown tables\n- All responses are formatted for easy reading in Claude Desktop\n\n### Error Handling\n\nThe server handles various error scenarios:\n- Invalid API credentials\n- Network connectivity issues\n- Invalid database names or regions\n- Missing required parameters\n- Database operation failures\n- SQL syntax errors with helpful hints\n- Rate limiting and API restrictions\n\n### Troubleshooting\n\n1. If Claude says it can't access the tools:\n   - Check that the server path in the configuration is correct\n   - Ensure the project is built (`npm run build`)\n   - Verify your API key and workspace slug are correct\n   - Restart Claude Desktop\n\n2. If database creation fails:\n   - Check your API key permissions\n   - Ensure the database name is unique in your workspace\n   - Verify the region is one of the supported options\n\n3. If credential operations fail:\n   - Verify the database exists and is in the READY state\n   - Check that your API key has the necessary permissions\n\n## Development\n\n### Project Structure\n\n```\nnile-mcp-server/\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îú‚îÄ‚îÄ server.ts      # MCP server implementation\n‚îÇ   ‚îú‚îÄ‚îÄ tools.ts       # Tool implementations\n‚îÇ   ‚îú‚îÄ‚îÄ types.ts       # Type definitions\n‚îÇ   ‚îú‚îÄ‚îÄ logger.ts      # Logging utilities\n‚îÇ   ‚îú‚îÄ‚îÄ index.ts       # Entry point\n‚îÇ   ‚îî‚îÄ‚îÄ __tests__/     # Test files\n‚îÇ       ‚îî‚îÄ‚îÄ server.test.ts\n‚îú‚îÄ‚îÄ dist/             # Compiled JavaScript\n‚îú‚îÄ‚îÄ logs/            # Log files directory\n‚îú‚îÄ‚îÄ .env             # Environment configuration\n‚îú‚îÄ‚îÄ .gitignore       # Git ignore file\n‚îú‚îÄ‚îÄ package.json     # Project dependencies\n‚îî‚îÄ‚îÄ tsconfig.json    # TypeScript configuration\n```\n\n### Key Files\n\n- `server.ts`: Main server implementation with tool registration and transport handling\n- `tools.ts`: Implementation of all database operations and SQL query execution\n- `types.ts`: TypeScript interfaces for database operations and responses\n- `logger.ts`: Structured logging with daily rotation and debug support\n- `index.ts`: Server startup and environment configuration\n- `server.test.ts`: Comprehensive test suite for all functionality\n\n### Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Start the server in production mode\nnode dist/index.js\n\n# Start the server using npm script\nnpm start\n\n# Start in development mode with auto-rebuild\nnpm run dev\n\n# Run tests\nnpm test\n```\n\n### Development Scripts\n\nThe following npm scripts are available:\n- `npm run build`: Compiles TypeScript to JavaScript\n- `npm start`: Starts the server in production mode\n- `npm run dev`: Starts the server in development mode with auto-rebuild\n- `npm test`: Runs the test suite\n- `npm run lint`: Runs ESLint for code quality checking\n- `npm run clean`: Removes build artifacts\n\n### Testing\n\nThe project includes a comprehensive test suite that covers:\n- Tool registration and schema validation\n- Database management operations\n- Connection string generation\n- SQL query execution and error handling\n- Response formatting and error cases\n\nRun the tests with:\n```bash\nnpm test\n```\n\n### Logging\n\nThe server uses structured logging with the following features:\n- Daily rotating log files\n- Separate debug logs\n- JSON formatted logs with timestamps\n- Console output for development\n- Log categories: info, error, debug, api, sql, startup\n\n## License\n\nMIT License - See [LICENSE](LICENSE) for details.\n\n## Related Links\n\n- [Model Context Protocol](https://modelcontextprotocol.io)\n- [Nile Database](https://thenile.dev)\n- [Claude Desktop](https://claude.ai/desktop)\n- [Cursor](https://cursor.sh) \n"
}