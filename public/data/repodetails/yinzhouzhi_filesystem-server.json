{
  "mcp_name": "yinzhouzhi/filesystem-server",
  "mcp_description": "Facilitates local filesystem access and operations through a Model Context Protocol-based server.",
  "mcp_id": "yinzhouzhi_filesystem-server",
  "fetch_timestamp": "2025-06-23T09:39:46.629146Z",
  "github_url": "https://github.com/yinzhouzhi/filesystem-server",
  "repository": {
    "name": "filesystem-server",
    "full_name": "yinzhouzhi/filesystem-server",
    "description": "基于Model Context Protocol（MCP）的文件系统操作服务器，提供对本地文件系统的访问和操作能力",
    "html_url": "https://github.com/yinzhouzhi/filesystem-server",
    "created_at": "2025-04-26T09:12:12Z",
    "updated_at": "2025-04-26T09:25:26Z",
    "pushed_at": "2025-04-26T09:22:09Z",
    "size": 64,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": null,
    "topics": [],
    "default_branch": "master",
    "owner": {
      "login": "yinzhouzhi",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/50107414?v=4",
      "html_url": "https://github.com/yinzhouzhi"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 230724
    },
    "language_percentages": {
      "JavaScript": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "1.0.7"
  },
  "readme": "# MCP文件系统服务器\n\n[![版本](https://img.shields.io/npm/v/@yinzhouzhi/mcp-filesystem-server.svg)](https://www.npmjs.com/package/@yinzhouzhi/mcp-filesystem-server)\n[![许可证](https://img.shields.io/npm/l/@yinzhouzhi/mcp-filesystem-server.svg)](https://github.com/yinzhouzhi/mcp-filesystem-server/blob/main/LICENSE)\n[![node版本](https://img.shields.io/node/v/@yinzhouzhi/mcp-filesystem-server.svg)](https://www.npmjs.com/package/@yinzhouzhi/mcp-filesystem-server)\n\n基于Model Context Protocol（MCP）的文件系统操作服务器，提供对本地文件系统的访问和操作能力。\n\n## 目录\n\n- [功能特性](#功能特性)\n- [安装](#安装)\n- [命令行使用](#命令行使用)\n- [编程方式使用](#编程方式使用)\n- [可用工具](#可用工具)\n  - [文件操作](#文件操作)\n  - [Office文件操作](#office文件操作)\n  - [目录操作](#目录操作)\n  - [行操作](#行操作) \n  - [监控工具](#监控工具)\n  - [系统工具](#系统工具)\n- [用法示例](#用法示例)\n- [性能优化](#性能优化)\n- [监控器管理池](#监控器管理池)\n- [许可证](#许可证)\n\n## 功能特性\n\n- ✅ 基于MCP SDK实现，符合MCP规范\n- 📂 提供完整的文件操作能力：读写、复制、移动、删除等\n- 📁 支持目录操作：创建、删除、列表等\n- 📝 支持文件内容行级操作：读写特定行、搜索内容等\n- 👀 支持文件监控：监听文件和目录变更\n- 🔄 通过标准输入/输出（stdio）通信，易于集成\n- 🛠️ 包含命令行工具，方便直接使用\n- 📊 高性能设计：缓存机制、流处理、异步操作\n\n## Cursor\n```bash\n{\n    \"mcpServers\": {\n        \"filesystem\": {\n          \"command\": \"npx\",\n          \"args\": [\n            \"-y\",\n            \"@yinzhouzhi/mcp-filesystem-server\",\n            \"start\"\n          ],\n          \"autoConnect\": true\n        },\n    }\n}\n```\n\n## 安装\n\n```bash\n# 全局安装\nnpm install -g @yinzhouzhi/mcp-filesystem-server\n\n# 或者局部安装到项目\nnpm install --save @yinzhouzhi/mcp-filesystem-server\n\n# 无需安装，直接通过npx使用\nnpx @yinzhouzhi/mcp-filesystem-server <命令>\n```\n\n## 命令行使用\n\n### 基本命令\n\n```bash\n# 启动服务器\nmcp-filesystem-server start\n\n# 查看帮助\nmcp-filesystem-server --help\n\n# 列出所有可用工具\nmcp-filesystem-server list-tools\n\n# 查看连接示例\nmcp-filesystem-server example\n```\n\n### 使用npx（无需安装）\n\n```bash\n# 启动服务器\nnpx @yinzhouzhi/mcp-filesystem-server start\n\n# 查看帮助\nnpx @yinzhouzhi/mcp-filesystem-server --help\n\n# 列出所有可用工具\nnpx @yinzhouzhi/mcp-filesystem-server list-tools\n```\n\n### 启动选项\n\n```\nOptions:\n  -d, --debug              启用调试模式\n  -l, --log-level <level>  设置日志级别 (debug, info, warn, error) (默认: \"info\")\n  -p, --log-path <path>    设置日志文件路径 (默认: 当前目录下的logs文件夹)\n  -r, --rotation-type <type> 设置日志轮转类型 (size, daily, weekly, monthly) (默认: \"size\")\n  -s, --max-size <size>    设置日志文件最大大小 (如 10MB) (默认: 10MB)\n  -f, --max-files <num>    设置保留的轮转日志文件数量 (默认: 5)\n  --no-rotate              禁用日志轮转\n  --no-compress            禁用轮转日志压缩\n  -h, --help               显示帮助信息\n```\n\n## 编程方式使用\n\n### 作为服务器启动\n\n```javascript\nconst { startServer } = require('@yinzhouzhi/mcp-filesystem-server');\n\n// 启动服务器\nstartServer({\n  debug: true,\n  logLevel: 'debug',\n  logPath: './logs/server.log',\n  // 日志轮转配置\n  rotateLogFiles: true,             // 是否启用日志轮转\n  rotationType: 'daily',            // 轮转类型: 'size', 'daily', 'weekly', 'monthly'\n  maxLogFileSize: 20 * 1024 * 1024, // 按大小轮转时的最大文件大小 (20MB)\n  maxLogFiles: 10,                  // 保留的轮转日志文件数量\n  compressRotatedLogs: true         // 是否压缩轮转后的日志文件\n}).then(result => {\n  console.log('服务器启动成功:', result);\n}).catch(err => {\n  console.error('服务器启动失败:', err);\n});\n```\n\n### 连接到MCP服务器\n\n```javascript\nconst { McpClient } = require('@modelcontextprotocol/sdk/client/mcp.js');\nconst { StdioClientTransport } = require('@modelcontextprotocol/sdk/client/stdio.js');\nconst { spawn } = require('child_process');\n\nasync function connectToMcpServer() {\n  // 启动MCP服务器进程\n  const serverProcess = spawn('mcp-filesystem-server', ['start'], {\n    stdio: ['pipe', 'pipe', 'pipe']\n  });\n  \n  // 创建STDIO传输\n  const transport = new StdioClientTransport({\n    input: serverProcess.stdout,\n    output: serverProcess.stdin,\n    error: serverProcess.stderr\n  });\n  \n  // 创建客户端\n  const client = new McpClient();\n  await client.connect(transport);\n  \n  // 调用工具示例\n  const result = await client.invokeTool('read_file', {\n    path: './example.txt',\n    encoding: 'utf8'\n  });\n  \n  console.log('文件内容:', result);\n  \n  // 关闭连接\n  await client.disconnect();\n  serverProcess.kill();\n}\n\nconnectToMcpServer().catch(console.error);\n```\n\n### 通过npx连接到MCP服务器\n\n```javascript\nconst { spawn } = require('child_process');\nconst { McpClient } = require('@modelcontextprotocol/sdk/client/mcp.js');\nconst { StdioClientTransport } = require('@modelcontextprotocol/sdk/client/stdio.js');\n\nasync function connectWithNpx() {\n  // 使用npx启动MCP服务器\n  const serverProcess = spawn('npx', ['@yinzhouzhi/mcp-filesystem-server', 'start'], {\n    stdio: ['pipe', 'pipe', 'pipe']\n  });\n  \n  // 创建STDIO传输\n  const transport = new StdioClientTransport({\n    input: serverProcess.stdout,\n    output: serverProcess.stdin,\n    error: serverProcess.stderr\n  });\n  \n  // 创建客户端并连接\n  const client = new McpClient();\n  await client.connect(transport);\n  \n  // 调用MCP工具\n  const result = await client.invokeTool('read_file', {\n    path: './example.txt',\n    encoding: 'utf8'\n  });\n  \n  console.log('文件内容:', result);\n  \n  // 关闭连接\n  await client.disconnect();\n  serverProcess.kill();\n}\n\nconnectWithNpx().catch(console.error);\n```\n\n## 可用工具\n\n服务器提供以下MCP工具：\n\n### 文件操作\n\n| 工具名称 | 描述 | 主要参数 |\n|---------|------|---------|\n| `read_file` | 读取文件内容 | path, encoding |\n| `write_file` | 写入文件内容 | path, content, encoding |\n| `append_file` | 追加文件内容 | path, content, encoding |\n| `delete_file` | 删除文件 | path |\n| `copy_file` | 复制文件 | sourcePath, destinationPath, overwrite |\n| `move_file` | 移动文件 | sourcePath, destinationPath, overwrite |\n| `get_file_info` | 获取文件信息 | path |\n| `file_exists` | 检查文件是否存在 | path |\n\n### Office文件操作\n\n#### `read_word_document`\n\n读取Word文档内容并转换为文本（支持.doc和.docx格式）\n\n**参数：**\n- `path`: Word文件路径(.doc或.docx格式)【必需】\n- `outputFormat`: 输出格式，支持'text'和'html'，默认'text'\n- `extractImages`: 是否提取图片信息，默认false\n- `includeStyles`: 是否包含样式信息，默认false\n- `pagination`: 分页参数，用于大文档分页读取，格式如：`{pageSize: 1000, pageNum: 1}`\n- `range`: 读取范围，指定起始行和结束行，格式如：`{startLine: 1, endLine: 100}`\n- `splitByParagraphs`: 是否按段落拆分返回，默认false\n  \n#### `read_excel_file`\n\n读取Excel文件内容（支持.xlsx、.xls和.csv格式）\n\n**参数：**\n- `path`: Excel文件路径(.xlsx、.xls或.csv格式)【必需】\n- `sheet`: 工作表名称或索引(从0开始)，默认读取第一个工作表\n- `outputFormat`: 输出格式，支持'json'、'csv'和'array'，默认'array'\n- `range`: 读取范围，例如`{startRow:1, endRow:10, startCol:1, endCol:5}`\n- `includeFormulas`: 是否包含公式，默认false\n- `headerRow`: 是否将第一行作为表头，默认false\n\n### 目录操作\n\n| 工具名称 | 描述 | 主要参数 |\n|---------|------|---------|\n| `list_directory` | 列出目录内容 | path, recursive, pattern |\n| `create_directory` | 创建目录 | path, recursive |\n| `remove_directory` | 删除目录 | path, recursive, force |\n| `directory_exists` | 检查目录是否存在 | path |\n\n### 行操作\n\n| 工具名称 | 描述 | 主要参数 |\n|---------|------|---------|\n| `read_lines` | 读取文件指定行 | path, startLine, endLine, encoding |\n| `write_lines` | 写入文件指定行 | path, lineNumber, content, encoding |\n| `insert_line` | 插入行 | path, lineNumber, content, encoding |\n| `delete_lines` | 删除行 | path, startLine, endLine, encoding |\n| `search_file_content` | 搜索文件内容 | path, searchTerm, regex, caseSensitive |\n\n### 监控工具\n\n| 工具名称 | 描述 | 主要参数 |\n|---------|------|---------|\n| `watch_path` | 监控文件或目录变更 | path, recursive, events |\n| `stop_watch` | 停止监控 | watcherId |\n| `list_watchers` | 列出所有监控 | - |\n\n### 系统工具\n\n| 工具名称 | 描述 | 主要参数 |\n|---------|------|---------|\n| `get_server_status` | 获取服务器状态 | includeStats |\n\n## 用法示例\n\n### 文件读写\n\n```javascript\n// 读取文件\nconst content = await client.invokeTool('read_file', {\n  path: './example.txt',\n  encoding: 'utf8'\n});\n\n// 写入文件\nawait client.invokeTool('write_file', {\n  path: './output.txt',\n  content: '这是文件内容',\n  encoding: 'utf8'\n});\n\n// 追加内容\nawait client.invokeTool('append_file', {\n  path: './log.txt',\n  content: '新的日志条目\\n',\n  encoding: 'utf8'\n});\n```\n\n### 按行操作\n\n```javascript\n// 读取特定行\nconst lines = await client.invokeTool('read_lines', {\n  path: './data.txt',\n  startLine: 10,\n  endLine: 20\n});\n\n// 插入一行\nawait client.invokeTool('insert_line', {\n  path: './config.txt',\n  lineNumber: 5,\n  content: 'new_setting=value'\n});\n\n// 删除多行\nawait client.invokeTool('delete_lines', {\n  path: './log.txt',\n  startLine: 100,\n  endLine: 200\n});\n```\n\n### 文件与目录管理\n\n```javascript\n// 复制文件\nawait client.invokeTool('copy_file', {\n  sourcePath: './original.txt',\n  destinationPath: './backup/copy.txt',\n  overwrite: true\n});\n\n// 创建目录\nawait client.invokeTool('create_directory', {\n  path: './data/reports/2023',\n  recursive: true\n});\n\n// 列出目录内容\nconst files = await client.invokeTool('list_directory', {\n  path: './documents',\n  recursive: true,\n  pattern: '*.pdf'\n});\n```\n\n### 监控文件变化\n\n```javascript\n// 开始监控\nconst watcherId = await client.invokeTool('watch_path', {\n  path: './config',\n  recursive: true,\n  events: 'change,add,unlink'\n});\n\n// 列出所有监控\nconst watchers = await client.invokeTool('list_watchers');\n\n// 停止监控\nawait client.invokeTool('stop_watch', {\n  watcherId: watcherId\n});\n```\n\n## 性能优化\n\n文件系统服务器实现了多项性能优化，确保高吞吐量和低延迟：\n\n### 文件操作性能优化\n\n1. **文件缓存**\n   - 小型文件内容缓存，减少频繁IO操作\n   - 可配置缓存大小和过期时间\n   - 智能LRU（最近最少使用）清理策略\n\n2. **流式处理**\n   - 大文件自动使用流处理，降低内存占用\n   - 可配置流处理的文件大小阈值\n   - 支持读取、写入、追加和复制操作\n\n3. **异步操作**\n   - 文件压缩/解压采用异步流式处理\n   - 日志轮转采用异步压缩\n   - 大型目录操作采用优化的算法\n\n### 目录操作性能优化\n\n1. **目录内容缓存**\n   - 缓存目录列表结果，减少频繁读取\n   - 智能缓存失效机制，确保数据一致性\n   - 可配置缓存大小和生命周期\n\n2. **递归操作优化**\n   - 优化递归列表和删除操作\n   - 减少文件系统调用次数\n   - 平衡内存使用和性能\n\n### 日志系统优化\n\n1. **日志缓冲区**\n   - 使用内存缓冲区合并写入操作\n   - 减少磁盘IO次数，提高性能\n   - 可配置缓冲区大小和刷新间隔\n\n2. **日志轮转优化**\n   - 异步压缩轮转日志文件\n   - 智能检查间隔，减少不必要的文件检查\n   - 压缩队列处理，防止IO阻塞\n\n### 性能配置示例\n\n在`defaults.js`中可以自定义以下性能相关配置：\n\n```javascript\n// 文件操作配置\nconst fileOperations = {\n  // 文件缓存配置\n  fileCache: {\n    enabled: true,          // 是否启用文件缓存\n    maxSize: 100,           // 最大缓存文件数\n    maxAge: 60000,          // 缓存有效期 (ms)\n  },\n  // 流处理阈值（字节）\n  streamThresholds: {\n    read: 10 * 1024 * 1024,  // 10MB以上使用流读取\n    write: 5 * 1024 * 1024,  // 5MB以上使用流写入\n    append: 1 * 1024 * 1024, // 1MB以上使用流追加\n    copy: 10 * 1024 * 1024,  // 10MB以上使用流复制\n  },\n  // 压缩选项\n  compression: {\n    defaultLevel: 6,         // 默认压缩级别 (1-9)\n    useForLogs: true,        // 是否为日志启用压缩\n  }\n};\n\n// 日志配置\nconst loggerConfig = {\n  // ...基本配置...\n  \n  // 性能优化相关\n  useBuffer: true,           // 使用缓冲区\n  bufferSize: 64 * 1024,     // 缓冲区大小 (64KB)\n  flushInterval: 1000,       // 缓冲区刷新间隔 (ms)\n  asyncCompression: true,    // 异步压缩\n  checkRotationInterval: 60000 // 日志轮转检查间隔 (ms)\n};\n```\n\n## 监控器管理池\n\n文件系统服务器使用监控器管理池来控制和管理系统中的文件和目录监控器数量，防止资源泄漏。\n\n### 主要功能\n\n- **资源限制控制**：限制系统中监控器的总数量、每个路径的监控器数量和每个进程的监控器数量\n- **自动资源回收**：定期清理长时间未使用的监控器，确保系统资源不被浪费\n- **智能资源管理**：当达到系统限制时，移除最旧的监控器腾出空间\n- **统计和监控**：提供完整的监控器使用统计信息\n\n### 配置选项\n\n```javascript\n// 在 src/config/defaults.js 中配置\nconst watchPool = {\n  maxWatchers: 200,            // 最大监控器数量\n  maxPerPath: 5,               // 每个路径的最大监控器数量\n  maxPerProcess: 50,           // 每个进程的最大监控器数量\n  cleanupInterval: 3600000,    // 清理间隔 (1小时)\n  maxIdleTime: 7200000         // 最大闲置时间 (2小时)\n};\n```\n\n### 监控池API示例\n\n```javascript\n// 导入监控工具模块\nconst watchTools = require('./src/tools/watch-tools');\n\n// 设置文件变更监控\nconst watcher = watchTools.setFileChangeCallback(\n  '/path/to/file.txt',\n  (event, path) => {\n    console.log(`文件 ${path} 发生事件: ${event}`);\n  }\n);\n\n// 设置目录变更监控\nconst dirWatcher = watchTools.setDirChangeCallback(\n  '/path/to/directory',\n  (event, path) => {\n    console.log(`目录内文件 ${path} 发生事件: ${event}`);\n  },\n  { recursive: true }\n);\n\n// 关闭监控器\nwatchTools.closeWatcher(watcher);\n\n// 获取监控池状态\nconst status = watchTools.getMonitorPoolStatus();\nconsole.log(status);\n```\n\n### 测试监控池功能\n\n```bash\nnpm run test:monitor\n```\n\n测试脚本将验证监控池的关键功能，包括资源限制、自动清理和资源回收。\n\n## 许可证\n\nMIT License "
}