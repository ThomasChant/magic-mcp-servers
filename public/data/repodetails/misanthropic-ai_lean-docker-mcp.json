{
  "mcp_name": "misanthropic-ai/lean-docker-mcp",
  "mcp_description": "Facilitates the execution of Lean4 code in isolated Docker containers for LLM-powered agents, offering both transient and persistent environments.",
  "mcp_id": "misanthropic-ai_lean-docker-mcp",
  "fetch_timestamp": "2025-06-23T06:48:49.187143Z",
  "github_url": "https://github.com/misanthropic-ai/lean-docker-mcp",
  "repository": {
    "name": "lean-docker-mcp",
    "full_name": "misanthropic-ai/lean-docker-mcp",
    "description": "MCP Lean 4 dockerised execution environment",
    "html_url": "https://github.com/misanthropic-ai/lean-docker-mcp",
    "created_at": "2025-04-08T04:54:54Z",
    "updated_at": "2025-04-17T05:19:49Z",
    "pushed_at": "2025-04-17T05:19:46Z",
    "size": 186,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "misanthropic-ai",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/139028970?v=4",
      "html_url": "https://github.com/misanthropic-ai"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 118817,
      "Dockerfile": 2358,
      "Shell": 1504
    },
    "language_percentages": {
      "Python": 96.85,
      "Dockerfile": 1.92,
      "Shell": 1.23
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# lean-docker-mcp\n\nDockerized Lean4 execution environment for AI agents.\n\n## Overview\n\nThis MCP server provides a safe, sandboxed Lean4 execution environment for LLM-powered agents. It allows agents to:\n\n- Execute Lean4 code in isolated Docker containers\n- Choose between transient or persistent execution environments\n- Maintain state between execution steps\n\n## Installation\n\n### Requirements\n\n- Docker must be installed and running on the host system\n- Python 3.11 or later\n- `uv` for package management (recommended)\n\n### Install from PyPI\n\n```bash\n# Using uv (recommended)\nuv pip install lean-docker-mcp\n\n# Using pip\npip install lean-docker-mcp\n```\n\n### Install from Source\n\n```bash\n# Clone the repository\ngit clone https://github.com/artivus/lean-docker-mcp.git\ncd lean-docker-mcp\n\n# Install with uv\nuv pip install -e .\n\n# Or with pip\npip install -e .\n```\n\n## Quick Start\n\n### Running the Server\n\nThe lean-docker-mcp server can be started directly using the module:\n\n```bash\npython -m lean_docker_mcp\n```\n\nThis will start the MCP server and listen for JSONRPC requests on stdin/stdout.\n\n## Components\n\n### Docker Execution Environment\n\nThe server implements two types of execution environments:\n\n1. **Transient Environment**\n   - Each execution is isolated in a fresh container\n   - State isn't maintained between calls\n   - Safer for one-off code execution\n\n2. **Persistent Environment**\n   - Maintains state between executions\n   - Variables and functions defined in one execution are available in subsequent executions\n   - Suitable for interactive, stateful REPL-like sessions\n\n### Tools\n\nThe server provides the following tools:\n\n- **execute-lean**: Run Lean4 code in a transient Docker container\n  - Takes `code` (required) parameter\n  - Returns execution results\n\n- **execute-lean-persistent**: Run Lean4 code in a persistent Docker container\n  - Takes `code` (required) and `session_id` (optional) parameters\n  - Returns execution results\n  - Maintains state between calls\n\n- **cleanup-session**: Clean up a persistent session\n  - Takes `session_id` (required) parameter\n  - Stops and removes the associated Docker container\n\n## Configuration\n\nThe server can be configured via a YAML configuration file. By default, it looks for a file at `~/.lean-docker-mcp/config.yaml`.\n\n### Configuration File Structure\n\nExample configuration:\n\n```yaml\ndocker:\n  image: lean-docker-mcp:latest\n  working_dir: /home/leanuser/project\n  memory_limit: 256m\n  cpu_limit: 0.5\n  timeout: 30\n  network_disabled: true\n  read_only: false\n\nlean:\n  allowed_imports:\n    - Lean\n    - Init\n    - Std\n    - Mathlib\n  blocked_imports:\n    - System.IO.Process\n    - System.FilePath\n```\n\n### Docker Configuration Options\n\n| Option | Description | Default |\n|--------|-------------|---------|\n| `image` | Docker image to use for execution | `lean-docker-mcp:latest` |\n| `working_dir` | Working directory inside container | `/home/leanuser/project` |\n| `memory_limit` | Memory limit for container | `256m` |\n| `cpu_limit` | CPU limit (0.0-1.0) | `0.5` |\n| `timeout` | Execution timeout in seconds | `30` |\n| `network_disabled` | Disable network access | `true` |\n| `read_only` | Run container in read-only mode | `false` |\n| `pool_enabled` | Enable container pooling | `true` |\n| `pool_size` | Number of containers to keep in pool (0 to disable) | `32` |\n| `pool_max_age` | Maximum age of a container in seconds | `300` |\n| `max_concurrent_creations` | Maximum containers to create concurrently | `5` |\n\n### Container Pooling\n\nThe Lean Docker MCP service includes a container pooling system to efficiently handle high-throughput environments. Pooling allows the service to:\n\n1. Pre-create a pool of containers ready for immediate use\n2. Reuse containers between executions (with full isolation between runs)\n3. Limit the rate of container creation to avoid Docker rate limits\n4. Scale gracefully for both single-agent and high-parallelism scenarios\n\n#### How Container Pooling Works\n\n- When the service starts, it initializes a pool of containers (configurable pool size)\n- Each request gets a container from the pool instead of creating a new one\n- After execution, containers are reset (processes killed, temp files removed) and returned to the pool\n- Containers older than the max age setting are removed and replaced with fresh ones\n\n#### Configuration Example\n\n```yaml\ndocker:\n  # Standard Docker settings\n  image: lean-docker-mcp:latest\n  memory_limit: 256m\n  cpu_limit: 0.5\n  \n  # Container pooling settings\n  pool_enabled: true  # Enable container pooling\n  pool_size: 32       # Keep up to 32 containers in the pool\n  pool_max_age: 300   # Replace containers after 5 minutes (300 seconds)\n  max_concurrent_creations: 5  # Limit parallel container creation \n```\n\n#### When to Adjust Pool Settings\n\n- **High-traffic environments**: Increase `pool_size` to handle more concurrent requests\n- **Memory-constrained hosts**: Decrease `pool_size` or increase `pool_max_age` to reduce overhead\n- **Large clusters**: Increase `max_concurrent_creations` if Docker can handle higher creation rates\n- **Single-agent use**: Set `pool_size` to a small number (e.g., 5) for minimal resource usage\n- **No pooling**: Set `pool_enabled: false` or `pool_size: 0` to disable pooling entirely\n\n#### Security Considerations\n\nContainer pooling maintains the same security guarantees as non-pooled execution:\n\n- Each execution is completely isolated from previous ones\n- All user state is wiped between executions\n- The container is reset to a clean state after each use\n- Security-related Docker settings (memory limits, CPU limits, network access) are preserved\n\n## Integration with Claude and Anthropic Products\n\n### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n\n  ```json\n  \"mcpServers\": {\n    \"lean-docker-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/lean-docker-mcp\",\n        \"run\",\n        \"lean-docker-mcp\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n\n  ```json\n  \"mcpServers\": {\n    \"lean-docker-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"lean-docker-mcp\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Configuration with Environment Variables</summary>\n\n  ```json\n  \"mcpServers\": {\n    \"lean-docker-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"lean-docker-mcp\"\n      ],\n      \"env\": {\n        \"LEAN_DOCKER_MCP_POOL_SIZE\": \"64\",\n        \"LEAN_DOCKER_MCP_POOL_MAX_AGE\": \"600\",\n        \"LEAN_DOCKER_MCP_MAX_CONCURRENT_CREATIONS\": \"10\",\n        \"LEAN_DOCKER_MCP_POOL_ENABLED\": \"true\",\n        \"LEAN_DOCKER_MCP_MEMORY_LIMIT\": \"512m\",\n        \"LEAN_DOCKER_MCP_CPU_LIMIT\": \"0.8\"\n      }\n    }\n  }\n  ```\n</details>\n\n### Environment Variable Configuration\n\nYou can configure the container pooling system and other settings using environment variables, which is especially useful in the MCP configuration files:\n\n| Environment Variable | Description | Example Value |\n|----------------------|-------------|---------------|\n| `LEAN_DOCKER_MCP_POOL_SIZE` | Number of containers to keep in pool | `64` |\n| `LEAN_DOCKER_MCP_POOL_MAX_AGE` | Maximum container age in seconds | `600` |\n| `LEAN_DOCKER_MCP_MAX_CONCURRENT_CREATIONS` | Maximum concurrent container creations | `10` |\n| `LEAN_DOCKER_MCP_POOL_ENABLED` | Enable/disable pooling | `true` |\n| `LEAN_DOCKER_MCP_MEMORY_LIMIT` | Container memory limit | `512m` |\n| `LEAN_DOCKER_MCP_CPU_LIMIT` | Container CPU limit (0.0-1.0) | `0.8` |\n| `LEAN_DOCKER_MCP_TIMEOUT` | Execution timeout in seconds | `30` |\n| `LEAN_DOCKER_MCP_CONFIG` | Path to custom config file | `/path/to/config.yaml` |\n\nFor high-scale RL training environments with many parallel agents, recommended settings:\n\n```json\n\"env\": {\n  \"LEAN_DOCKER_MCP_POOL_SIZE\": \"64\",\n  \"LEAN_DOCKER_MCP_MAX_CONCURRENT_CREATIONS\": \"10\",\n  \"LEAN_DOCKER_MCP_POOL_MAX_AGE\": \"600\"\n}\n```\n\nFor single-agent usage scenarios:\n\n```json\n\"env\": {\n  \"LEAN_DOCKER_MCP_POOL_SIZE\": \"5\",\n  \"LEAN_DOCKER_MCP_MAX_CONCURRENT_CREATIONS\": \"3\"\n}\n```\n\n## Example MCP Usage\n\n### Transient Execution\n\n```\n# Define and use a simple function\nresult = await call_tool(\"execute-lean\", {\n  \"code\": \"def hello (name : String) : String := s!\\\"Hello, {name}\\\"\\n\\ndef main : IO Unit := IO.println (hello \\\"Lean4!\\\")\"\n})\n```\n\n### Persistent Session\n\n```\n# Create a persistent session and define a function\nresult = await call_tool(\"execute-lean-persistent\", {\n  \"code\": \"def add (a b : Nat) : Nat := a + b\\n\\ndef main : IO Unit := IO.println \\\"Function defined\\\"\"\n})\n\n# Use the function in a subsequent call with the same session\nresult = await call_tool(\"execute-lean-persistent\", {\n  \"session_id\": \"previous_session_id\",\n  \"code\": \"def main : IO Unit := IO.println (toString (add 10 20))\"\n})\n```\n\n## Development\n\n### Development Setup\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/artivus/lean-docker-mcp.git\ncd lean-docker-mcp\n```\n\n2. Set up development environment:\n```bash\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\nuv pip install -e \".[dev]\"\n```\n\n3. Install pre-commit hooks:\n```bash\npre-commit install\n```\n\n### Running Tests\n\n```bash\n# Run all tests\npytest\n\n# Run tests with coverage\npytest --cov=src/lean_docker_mcp\n\n# Run specific test categories\npytest tests/unit/\npytest tests/integration/\n```\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /path/to/lean-docker-mcp run lean-docker-mcp\n```\n\n## License\n\n[License information]\n\n## Contributing\n\nContributions are welcome! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.\n\n## Performance Tuning\n\n### High-Scale RL Training\n\nFor environments running multiple parallel trajectories (like reinforcement learning trainers), use container pooling with these recommended settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"lean-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"lean-docker-mcp\"\n      ],\n      \"env\": {\n        \"LEAN_DOCKER_MCP_POOL_ENABLED\": \"true\",\n        \"LEAN_DOCKER_MCP_POOL_SIZE\": \"64\",\n        \"LEAN_DOCKER_MCP_POOL_MAX_AGE\": \"3600\",\n        \"LEAN_DOCKER_MCP_MAX_CONCURRENT_CREATIONS\": \"10\",\n        \"LEAN_DOCKER_MCP_MEMORY_LIMIT\": \"512m\",\n        \"LEAN_DOCKER_MCP_CPU_LIMIT\": \"0.5\"\n      }\n    }\n  }\n}\n```\n\nKey settings to adjust:\n\n- `LEAN_DOCKER_MCP_POOL_SIZE`: Set this to your maximum expected concurrent trajectories\n- `LEAN_DOCKER_MCP_MAX_CONCURRENT_CREATIONS`: Limit to avoid Docker rate limits\n- `LEAN_DOCKER_MCP_POOL_MAX_AGE`: Increase for longer-lived containers (in seconds)\n- `LEAN_DOCKER_MCP_MEMORY_LIMIT`: Adjust based on your cluster's resources\n\n### Local Development\n\nFor single-agent development on a local machine:\n\n```json\n{\n  \"mcpServers\": {\n    \"lean-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"-m\",\n        \"lean_docker_mcp\"\n      ],\n      \"env\": {\n        \"LEAN_DOCKER_MCP_POOL_ENABLED\": \"true\",\n        \"LEAN_DOCKER_MCP_POOL_SIZE\": \"3\",\n        \"LEAN_DOCKER_MCP_POOL_MAX_AGE\": \"1800\",\n        \"LEAN_DOCKER_MCP_MAX_CONCURRENT_CREATIONS\": \"2\"\n      }\n    }\n  }\n}\n```\n\n### Setting Reasonable Values\n\n| Environment | Pool Size | Max Concurrent Creations | Pool Max Age |\n|-------------|-----------|--------------------------|--------------|\n| Small laptop | 2-3 | 1-2 | 1800 (30 min) |\n| Developer workstation | 5-10 | 3-5 | 1800 (30 min) |\n| Server environment | 20-30 | 5-10 | 3600 (1 hour) |\n| RL training cluster | 32-128 | 10-20 | 3600+ (1+ hour) |"
}