{
  "mcp_name": "cr7258/elasticsearch-mcp-server",
  "mcp_description": "üêç üè† - MCP Server implementation that provides Elasticsearch interaction",
  "mcp_id": "cr7258_elasticsearch-mcp-server",
  "fetch_timestamp": "2025-06-23T02:18:06.344742Z",
  "github_url": "https://github.com/cr7258/elasticsearch-mcp-server",
  "repository": {
    "name": "elasticsearch-mcp-server",
    "full_name": "cr7258/elasticsearch-mcp-server",
    "description": "A Model Context Protocol (MCP) server implementation that provides Elasticsearch and OpenSearch interaction.",
    "html_url": "https://github.com/cr7258/elasticsearch-mcp-server",
    "created_at": "2025-01-09T04:20:03Z",
    "updated_at": "2025-06-21T13:34:50Z",
    "pushed_at": "2025-06-12T01:58:16Z",
    "size": 626,
    "stargazers_count": 163,
    "watchers_count": 163,
    "forks_count": 34,
    "open_issues_count": 6,
    "language": "Python",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "cr7258",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/40051120?v=4",
      "html_url": "https://github.com/cr7258"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 34,
    "subscribers_count": 1,
    "languages": {
      "Python": 32754,
      "Java": 1788,
      "Dockerfile": 794,
      "Makefile": 715
    },
    "language_percentages": {
      "Python": 90.85,
      "Java": 4.96,
      "Dockerfile": 2.2,
      "Makefile": 1.98
    },
    "pull_requests_count": 24,
    "contributors_count": 6,
    "latest_release": {
      "tag_name": "v2.0.6",
      "name": "v2.0.6",
      "published_at": "2025-06-12T01:44:26Z",
      "body": "# Changelog\n\n## [2.0.6](https://github.com/cr7258/elasticsearch-mcp-server/compare/v2.0.5..v2.0.6) - 2025-06-12\n\n### üêõ Bug Fixes\n\n- parse arguments - ([2dde8de](https://github.com/cr7258/elasticsearch-mcp-server/commit/2dde8de504852824ad702fc58223e5683631abbd)) - @cr7258\n\n### Release\n\n- update version to 2.0.6 - ([3a489ef](https://github.com/cr7258/elasticsearch-mcp-server/commit/3a489ef56519846cd961aa90f017e497682af6b2)) - @cr7258\n\n<!-- generated by git-cliff -->\n",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v2.0.6",
        "commit_sha": "3a489ef56519846cd961aa90f017e497682af6b2"
      },
      {
        "name": "v2.0.5",
        "commit_sha": "279128e88abdc8b6a2bccacbe3f66ef9ae13c434"
      },
      {
        "name": "v2.0.4",
        "commit_sha": "586b76c87edc20f4f861cb560863b400d7969ac4"
      },
      {
        "name": "v2.0.3",
        "commit_sha": "5b0bdc4a03f8c04073863f0545a38d334400406a"
      },
      {
        "name": "v2.0.2",
        "commit_sha": "7f61263c1b239ffe256759f8dbaa60133eb8d6e6"
      },
      {
        "name": "v2.0.1",
        "commit_sha": "b95c56f7092305c9c1a3bed376d11fd07d9520a2"
      },
      {
        "name": "v2.0.0",
        "commit_sha": "8cde3d4c93c1e6fe52d6d60ca923a97739405602"
      },
      {
        "name": "v1.0.0",
        "commit_sha": "6e6c35db56530817806bf3cb7fb5a76ee1720c16"
      }
    ],
    "latest_version": "v2.0.6"
  },
  "readme": "\n# Elasticsearch/OpenSearch MCP Server\n\n[![smithery badge](https://smithery.ai/badge/elasticsearch-mcp-server)](https://smithery.ai/server/elasticsearch-mcp-server)\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/cr7258-elasticsearch-mcp-server-badge.png)](https://mseep.ai/app/cr7258-elasticsearch-mcp-server)\n\n## Overview\n\nA Model Context Protocol (MCP) server implementation that provides Elasticsearch and OpenSearch interaction. This server enables searching documents, analyzing indices, and managing cluster through a set of tools.\n\n<a href=\"https://glama.ai/mcp/servers/b3po3delex\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/b3po3delex/badge\" alt=\"Elasticsearch MCP Server\" /></a>\n\n## Demo\n\nhttps://github.com/user-attachments/assets/f7409e31-fac4-4321-9c94-b0ff2ea7ff15\n\n## Features\n\n### General Operations\n\n- `general_api_request`: Perform a general HTTP API request. Use this tool for any Elasticsearch/OpenSearch API that does not have a dedicated tool.\n\n### Index Operations\n\n- `list_indices`: List all indices.\n- `get_index`: Returns information (mappings, settings, aliases) about one or more indices.\n- `create_index`: Create a new index.\n- `delete_index`: Delete an index.\n\n### Document Operations\n\n- `search_documents`: Search for documents.\n- `index_document`: Creates or updates a document in the index.\n- `get_document`: Get a document by ID.\n- `delete_document`: Delete a document by ID.\n- `delete_by_query`: Deletes documents matching the provided query.\n\n### Cluster Operations\n\n- `get_cluster_health`: Returns basic information about the health of the cluster.\n- `get_cluster_stats`: Returns high-level overview of cluster statistics.\n\n### Alias Operations\n\n- `list_aliases`: List all aliases.\n- `get_alias`: Get alias information for a specific index.\n- `put_alias`: Create or update an alias for a specific index.\n- `delete_alias`: Delete an alias for a specific index.\n\n## Configure Environment Variables\n\nCopy the `.env.example` file to `.env` and update the values accordingly.\n\n## Start Elasticsearch/OpenSearch Cluster\n\nStart the Elasticsearch/OpenSearch cluster using Docker Compose:\n\n```bash\n# For Elasticsearch\ndocker-compose -f docker-compose-elasticsearch.yml up -d\n\n# For OpenSearch\ndocker-compose -f docker-compose-opensearch.yml up -d\n```\n\nThe default Elasticsearch username is `elastic` and password is `test123`. The default OpenSearch username is `admin` and password is `admin`.\n\nYou can access Kibana/OpenSearch Dashboards from http://localhost:5601.\n\n## Stdio\n\n### Option 1: Using uvx\n\nUsing `uvx` will automatically install the package from PyPI, no need to clone the repository locally. Add the following configuration to 's config file `claude_desktop_config.json`.\n\n```json\n// For Elasticsearch\n{\n  \"mcpServers\": {\n    \"elasticsearch-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"elasticsearch-mcp-server\"\n      ],\n      \"env\": {\n        \"ELASTICSEARCH_HOSTS\": \"https://localhost:9200\",\n        \"ELASTICSEARCH_USERNAME\": \"elastic\",\n        \"ELASTICSEARCH_PASSWORD\": \"test123\"\n      }\n    }\n  }\n}\n\n// For OpenSearch\n{\n  \"mcpServers\": {\n    \"opensearch-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"opensearch-mcp-server\"\n      ],\n      \"env\": {\n        \"OPENSEARCH_HOSTS\": \"https://localhost:9200\",\n        \"OPENSEARCH_USERNAME\": \"admin\",\n        \"OPENSEARCH_PASSWORD\": \"admin\"\n      }\n    }\n  }\n}\n```\n\n### Option 2: Using uv with local development\n\nUsing `uv` requires cloning the repository locally and specifying the path to the source code. Add the following configuration to Claude Desktop's config file `claude_desktop_config.json`.\n\n```json\n// For Elasticsearch\n{\n  \"mcpServers\": {\n    \"elasticsearch-mcp-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"path/to/src/elasticsearch_mcp_server\",\n        \"run\",\n        \"elasticsearch-mcp-server\"\n      ],\n      \"env\": {\n        \"ELASTICSEARCH_HOSTS\": \"https://localhost:9200\",\n        \"ELASTICSEARCH_USERNAME\": \"elastic\",\n        \"ELASTICSEARCH_PASSWORD\": \"test123\"\n      }\n    }\n  }\n}\n\n// For OpenSearch\n{\n  \"mcpServers\": {\n    \"opensearch-mcp-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"path/to/src/elasticsearch_mcp_server\",\n        \"run\",\n        \"opensearch-mcp-server\"\n      ],\n      \"env\": {\n        \"OPENSEARCH_HOSTS\": \"https://localhost:9200\",\n        \"OPENSEARCH_USERNAME\": \"admin\",\n        \"OPENSEARCH_PASSWORD\": \"admin\"\n      }\n    }\n  }\n}\n```\n\n## SSE\n\n### Option 1: Using uvx\n\n```bash\n# export environment variables\nexport ELASTICSEARCH_HOSTS=\"https://localhost:9200\"\nexport ELASTICSEARCH_USERNAME=\"elastic\"\nexport ELASTICSEARCH_PASSWORD=\"test123\"\n\n# By default, the SSE MCP server will serve on http://127.0.0.1:8000/sse\nuvx elasticsearch-mcp-server --transport sse\n\n# The host, port, and path can be specified using the --host, --port, and --path options\nuvx elasticsearch-mcp-server --transport sse --host 0.0.0.0 --port 8000 --path /sse\n```\n\n### Option 2: Using uv\n\n```bash\n# By default, the SSE MCP server will serve on http://127.0.0.1:8000/sse\nuv run src/server.py elasticsearch-mcp-server --transport sse\n\n# The host, port, and path can be specified using the --host, --port, and --path options\nuv run src/server.py elasticsearch-mcp-server --transport sse --host 0.0.0.0 --port 8000 --path /sse\n```\n\n## Streamable HTTP\n\n### Option 1: Using uvx\n\n```bash\n# export environment variables\nexport ELASTICSEARCH_HOSTS=\"https://localhost:9200\"\nexport ELASTICSEARCH_USERNAME=\"elastic\"\nexport ELASTICSEARCH_PASSWORD=\"test123\"\n\n# By default, the Streamable HTTP MCP server will serve on http://127.0.0.1:8000/mcp\nuvx elasticsearch-mcp-server --transport streamable-http\n\n# The host, port, and path can be specified using the --host, --port, and --path options\nuvx elasticsearch-mcp-server --transport streamable-http --host 0.0.0.0 --port 8000 --path /mcp\n```\n\n### Option 2: Using uv\n\n```bash\n# By default, the Streamable HTTP MCP server will serve on http://127.0.0.1:8000/mcp\nuv run src/server.py elasticsearch-mcp-server --transport streamable-http\n\n# The host, port, and path can be specified using the --host, --port, and --path options\nuv run src/server.py elasticsearch-mcp-server --transport streamable-http --host 0.0.0.0 --port 8000 --path /mcp\n```\n\n## License\n\nThis project is licensed under the Apache License Version 2.0 - see the [LICENSE](LICENSE) file for details.\n"
}