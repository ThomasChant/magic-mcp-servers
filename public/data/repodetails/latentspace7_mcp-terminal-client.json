{
  "mcp_name": "dolwinf/mcp-terminal-client",
  "mcp_description": "A terminal-based interactive chat client for communicating with MCP servers using Anthropic's Claude models.",
  "mcp_id": "latentspace7_mcp-terminal-client",
  "fetch_timestamp": "2025-06-23T02:42:03.795713Z",
  "github_url": "https://github.com/dolwinf/mcp-terminal-client",
  "repository": {
    "name": "mcp-terminal-client",
    "full_name": "latentspace7/mcp-terminal-client",
    "description": "A Python MCP terminal client",
    "html_url": "https://github.com/latentspace7/mcp-terminal-client",
    "created_at": "2025-04-12T12:37:33Z",
    "updated_at": "2025-04-20T12:13:52Z",
    "pushed_at": "2025-04-20T12:13:48Z",
    "size": 92,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "latentspace7",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/19882175?v=4",
      "html_url": "https://github.com/latentspace7"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 27942
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 1,
    "contributors_count": 1
  },
  "readme": "# 🖥️ MCP Terminal Chat Client\n\nA terminal-based interactive chat client for communicating with Model Context Protocol (MCP) servers using Anthropic's Claude models.\n\nDesigned for developers building and testing tools via the MCP spec.\n\n---\n\n## 💡 Features\n\n- 🧑‍💻 Terminal chat interface with Claude\n- 🔍 Auto-discovers tools from an MCP server\n- 🧰 Executes Claude's `tool_use` calls live\n- ✅ Validates tool inputs via JSON Schema\n- 🪵 Full structured logging and debugging\n- 🔁 Multi-turn conversation loop with memory\n- 📎 File Attachments for Images and PDF\n\n---\n\n## ⚙️ Requirements\n\n- Python 3.11+\n- MCP tool server (conforming to the spec)\n- `.env` file with Anthropic API key\n\n### 📦 Python Packages\n\nInstall with `uv` (recommended) or `pip`:\n\n```bash\nuv pip install -r requirements.txt\n# or\npip install -r requirements.txt\n```\n\nDependencies:\n- `anthropic`\n- `anyio`\n- `mcp`\n- `python-dotenv`\n- `jsonschema`\n\n---\n\n## 🧾 Configuration\n\n### 🔑 `llm_config.json`\n\n```json\n{\n  \"provider\": \"anthropic\",\n  \"model\": \"claude-3-haiku-20240307\"\n}\n```\n\n### ⚙️ `mcp_servers.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"default\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"your_mcp_tool_server\"],\n      \"env\": {\n        \"MY_ENV_VAR\": \"value\"\n      }\n    }\n  }\n}\n```\n\n### 🔐 `.env`\n\n```env\nANTHROPIC_API_KEY=your-api-key-here\n```\n\n---\n\n## 🧪 Usage\n\nRun with default config:\n\n```bash\npython main.py\n```\n\nCustom configs:\n\n```bash\npython main.py --llm_config custom_llm_config.json --mcp_config custom_mcp_servers.json\n```\n\n---\n\n## 💬 Conversation Flow\n\n1. You send a prompt in terminal\n2. Claude replies with text or `tool_use` blocks\n3. MCP client validates and calls the appropriate tool\n4. Tool results are returned to Claude\n5. Claude completes the response\n\n> All without leaving your terminal.\n\n---\n\n## 📎 File Attachments\n\nYou can attach **PDF** and **image** files (`.png`, `.jpg`, `.webp`) to your prompt using the `--file` flag.\n\nThese files will be sent to Claude along with your message using base64 encoding and the correct MIME type.\n\n### 🖼️ Supported Types\n\n- `application/pdf`\n- `image/png`\n- `image/jpeg`\n- `image/webp`\n\n---\n\n### 📁 Example Usage\n\n```bash\npython main.py --file ./sample.pdf\n```\n\n---\n\n## 🛠 Tool Handling\n\n- Tools are discovered via `tools/list`\n- Input schemas are parsed and validated\n- Tool outputs must return a string (per Claude API)\n- Errors are passed back as strings with `content`\n\n---\n\n## 🐛 Troubleshooting\n\n- Make sure `ANTHROPIC_API_KEY` is in `.env`\n- Set log level to `DEBUG` for full trace\n- If Claude throws 400 errors:\n  - Ensure `tool_result.content` is a **string**\n  - Validate tool inputs match declared schema\n\n---\n\n## 📌 TODO\n\n- [ ] Support OpenAI, VertexAI\n- [ ] Vendor-agnostic LLM integration\n- [ ] SSE support\n- [ ] Packaging\n- [ ] Add tests and CLI improvements"
}