{
  "mcp_name": "borgius/jobspy-mcp-server",
  "mcp_description": "Facilitates job searches across multiple platforms using AI assistants, offering structured data output and multiple transport options.",
  "mcp_id": "borgius_jobspy-mcp-server",
  "fetch_timestamp": "2025-06-23T01:44:36.457609Z",
  "github_url": "https://github.com/borgius/jobspy-mcp-server",
  "repository": {
    "name": "jobspy-mcp-server",
    "full_name": "borgius/jobspy-mcp-server",
    "description": "MCP server to search for jobs across multiple job listing platforms",
    "html_url": "https://github.com/borgius/jobspy-mcp-server",
    "created_at": "2025-04-14T17:51:54Z",
    "updated_at": "2025-06-18T09:38:48Z",
    "pushed_at": "2025-04-30T19:47:40Z",
    "size": 220,
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks_count": 2,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "borgius",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/868919?v=4",
      "html_url": "https://github.com/borgius"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 2,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 36662,
      "Python": 5002,
      "Dockerfile": 151
    },
    "language_percentages": {
      "JavaScript": 87.68,
      "Python": 11.96,
      "Dockerfile": 0.36
    },
    "pull_requests_count": 0,
    "contributors_count": 2,
    "package_json_version": "1.0.0"
  },
  "readme": "# JobSpy MCP Server\n\nA Model Context Protocol (MCP) server that enables AI assistants like Claude to search for jobs across multiple job listing platforms using the [JobSpy](https://github.com/yourusername/jobspy) tool.\n\n## Features\n\n- Search for jobs across multiple platforms (Indeed, LinkedIn, Glassdoor, etc.)\n- Filter by search terms, location, time frames, and more\n- Get structured job data that AI models can easily process\n- Format results as JSON or CSV\n- Multiple transport options: stdio for Claude integration, SSE for web clients\n\n## Prerequisites\n\n- Node.js 16+\n- Python 3.6+\n- The JobSpy tool installed and available\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/jobspy-mcp-server.git\ncd jobspy-mcp-server\n\n# Install dependencies\nnpm install\n\n# Make sure the JobSpy tool is properly set up\ncd ../jobSpy\npip install -r requirements.txt\nchmod +x run.sh\n```\n\n## Configuration\n\nThe server will automatically try to locate the JobSpy script in standard locations:\n- `../jobSpy/run.sh` (relative to the server directory)\n- `./run.sh` (in the current directory)\n- `/app/run.sh` (for Docker environments)\n\n### Environment Variables\n\nYou can configure the server using the following environment variables:\n\n| Environment Variable    | Description                              | Default     |\n|-------------------------|------------------------------------------|-------------|\n| `JOBSPY_DOCKER_IMAGE`   | Docker image to use for JobSpy           | `jobspy`    |\n| `JOBSPY_ACCESS_TOKEN`   | Access token for JobSpy API (if required)| none        |\n| `PORT`                  | Port for the MCP server                  | `9423`      |\n| `HOST`                  | Host for HTTP server                     | '0.0.0.0'   |\n| `ENABLE_SSE`            | Enable Server-Sent Events transport      | 0        |\n\n## Setting Up Configuration\n\nYou can set these configuration values in multiple ways:\n\n### 1. Using environment variables directly\n\n```bash\nexport JOBSPY_DOCKER_IMAGE=jobspy\nexport JOBSPY_HOST='0.0.0.0'\nexport JOBSPY_PORT=9423\nexport ENABLE_SSE=1\n```\n\n### 2. Using a .env file\n\nCreate a `.env` file in the root directory with your configuration:\n\n```\nJOBSPY_DOCKER_IMAGE=jobspy\nJOBSPY_HOST='0.0.0.0'\nJOBSPY_PORT=9423\nENABLE_SSE=1\n```\n\n## Usage\n\n### Starting the server\n\n```bash\nnpm start\n```\n\n### Connecting with Claude Desktop\n\nAdd the following to your Claude Desktop config file (typically at `~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"jobspy\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/jobspy-mcp-server/src/index.js\"],\n      \"env\": {\n        \"ENABLE_SSE\": 0\n      }\n    }\n  }\n}\n```\n\n### Using with Web Clients (SSE Transport)\n\nThe server exposes HTTP endpoints that allow web applications to interact with the JobSpy MCP server:\n\n- **Connect for updates**: `GET /mcp/connect`\n  - Establishes a Server-Sent Events (SSE) connection for real-time updates\n  - Returns progress updates and job search results\n\n- **Send requests**: `POST /mcp/request`\n  - Accepts tool invocation requests in MCP format\n  - Returns tool responses\n\nExample JavaScript client for browser:\n\n```javascript\n// Connect to SSE endpoint\nconst eventSource = new EventSource('http://localhost:9423/mcp/connect');\n\n// Listen for updates\neventSource.onmessage = function(event) {\n  const data = JSON.parse(event.data);\n  console.log('Received update:', data);\n  \n  // Handle progress updates\n  if (data.type === 'progress') {\n    updateProgressBar(data.progress);\n  }\n};\n\n// Send a search request\nasync function searchJobs() {\n  const response = await fetch('http://localhost:9423/mcp/request', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      tool: 'search_jobs',\n      params: {\n        search_term: 'software engineer',\n        location: 'San Francisco, CA',\n        site_names: 'indeed,linkedin'\n      }\n    })\n  });\n  \n  return await response.json();\n}\n```\n\n### API Usage\n\nThe server exposes the following endpoints:\n\n#### Search Jobs\n\n```\nGET /search\n```\n\nQuery parameters:\n- `site_names`: Comma-separated list of job sites to search\n- `search_term`: Term to search for\n- `location`: Job location\n- And other JobSpy parameters as needed\n\n### Available Tools\n\n#### search_jobs\n\nSearches for jobs across various job listing websites.\n\n**Parameters:**\n\n| Parameter | Type | Description | Default |\n|-----------|------|-------------|---------|\n| site_names | string | Comma-separated list of job sites to search (indeed,linkedin,zip_recruiter,glassdoor,google,bayt,naukri) | \"indeed\" |\n| search_term | string | Search term for jobs | \"software engineer\" |\n| location | string | Location for job search | \"San Francisco, CA\" |\n| google_search_term | string | Google specific search term | null |\n| results_wanted | integer | Number of results wanted | 20 |\n| hours_old | integer | How many hours old the jobs can be | 72 |\n| country_indeed | string | Country for Indeed search | \"USA\" |\n| linkedin_fetch_description | boolean | Whether to fetch LinkedIn job descriptions (slower) | false |\n| format | string | Output format (json or csv) | \"json\" |\n| output | string | Output filename without extension | \"jobs\" |\n\n**Example usage with Claude:**\n\n```\nI need to find senior software engineer jobs in Boston posted in the last 24 hours on both LinkedIn and Indeed.\n```\n\n## Docker Support\n\nA Dockerfile is provided to containerize the MCP server:\n\n```bash\n# Build the Docker image\ndocker build -t jobspy-mcp-server .\n\n# Run the container\ndocker run -p 9423:9423 jobspy-mcp-server\n```\n\n## Development\n\n### Running in development mode\n\n```bash\nnpm run dev\n```\n\n### Running tests\n\n```bash\nnpm test\n```\n\n```bash\ncurl -X POST \"http://localhost:9423/api\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"method\": \"search_jobs\",\n    \"params\": {\n      \"search_term\": \"software engineer\",\n      \"location\": \"San Francisco, CA\",\n      \"site_names\": \"indeed,linkedin\",\n      \"results_wanted\": 10,\n      \"format\": \"json\"\n    }\n  }'\n```  \n\n## License\n\nMIT\n"
}