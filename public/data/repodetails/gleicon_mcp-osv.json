{
  "mcp_name": "gleicon/mcp-osv",
  "mcp_description": "Facilitates code security reviews by integrating with OSV.dev and AI models to identify vulnerabilities.",
  "mcp_id": "gleicon_mcp-osv",
  "fetch_timestamp": "2025-06-23T03:50:07.173134Z",
  "github_url": "https://github.com/gleicon/mcp-osv",
  "repository": {
    "name": "mcp-osv",
    "full_name": "gleicon/mcp-osv",
    "description": "A MCP (Model Context Protocol) server to allow code security reviews using https://osv.dev (Open Source Vulnerabilities Database)",
    "html_url": "https://github.com/gleicon/mcp-osv",
    "created_at": "2025-04-08T16:06:04Z",
    "updated_at": "2025-05-13T14:59:32Z",
    "pushed_at": "2025-05-13T14:59:28Z",
    "size": 501,
    "stargazers_count": 7,
    "watchers_count": 7,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Go",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "gleicon",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/38321?v=4",
      "html_url": "https://github.com/gleicon"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Go": 15145,
      "Makefile": 1064
    },
    "language_percentages": {
      "Go": 93.44,
      "Makefile": 6.56
    },
    "pull_requests_count": 1,
    "contributors_count": 1
  },
  "readme": "# MCP Security Analyst\n\n[![Go](https://github.com/gleicon/mcp-osv/actions/workflows/go.yml/badge.svg)](https://github.com/gleicon/mcp-osv/actions/workflows/go.yml)\n\nA Model Context Protocol (MCP) server that provides security analysis capabilities by integrating with OSV.dev and AI models to help identify and analyze potential vulnerabilities in your codebase.\n\n## Features\n\n- Vulnerability checking using OSV.dev database\n- Basic security analysis of code files\n- Integration with AI models for security insights\n- MCP protocol support for seamless integration with various AI tools\n- Optional static code analysis using Semgrep (if installed)\n\n## Cursor/Cline and other co-pilots IDE supply-chain preventions\n\n`mcp-osv` is the ideal companion for co-pilot coding. Use the [supply-chain-security-check.mdc] ruleset in this repo or build your own to manage dependencies and reduce risk. See below how to setup your IDE.\n\n\n## Requirements\n\n### Core Requirements\n```bash\nmake deps\nmake install\n```\n\n### Optional: Semgrep Installation\nFor enhanced static code analysis, you can install Semgrep:\n\n#### macOS\n```bash\nbrew install semgrep\n```\n\n#### Linux\n```bash\npython3 -m pip install semgrep\n```\n\n#### Other platforms\nVisit [Semgrep Installation Guide](https://semgrep.dev/docs/getting-started/) for detailed instructions.\n\nThe MCP server will work without Semgrep installed, but will skip the static analysis portion when analyzing directories.\n\n## Installation\n\n```bash\nmake deps\nmake install\n```\n\nThe mcp-osv command will be installed on PATH and use the stdin/stdout method.\n\nConfigure your LLM to use mcp-osv as an agent. \n\nFor ***Cursor*** use the configuration below on `configuration` -> `MCP` tab:\n\n```json\n{\"mcpServers\":{\"security_analyst\":{\"name\":\"Security Analyst\",\"type\":\"stdio\",\"command\":\"/usr/local/bin/mcp-osv\"}}}\n```\n\nIf you are using ***Claude*** just configure it under Settings -> Developer using the config below:\n\n```json\n{\n    \"mcpServers\": {\n        \"mcp-osv\": {\n            \"command\": \"/usr/local/bin/mcp-osv\",\n            \"args\": []\n        }\n    }\n}\n```\n\n1. The server provides the following tools:\n\n### check_vulnerabilities\n\nCheck for known vulnerabilities in dependencies using OSV.dev database.\n\nParameters:\n\n- `package_name`: Name of the package to check\n- `version`: Version of the package to check\n\n### analyze_security\n\nAnalyze code for potential security issues based on https://osv.dev - a comprehensive database of open-source vulnerabilities. \n\nParameters:\n\n- `file_path`: Path to the file to analyze\n\n## Integration with AI Models\n\nThis server is designed to work with AI models like Claude and Cursor through the MCP protocol. The AI models can use the provided tools to:\n\n1. Check dependencies for known vulnerabilities\n2. Analyze code for security issues\n3. Provide recommendations for security improvements\n\n## Connecting with Cursor\n\n### Sample output\n![output-1](screenshots/mcp-output-1.png)\n![output-2](screenshots/mcp-output-2.png)\n![output-3](screenshots/mcp-output-3.png)\n\n### Usage\n\nSee mcp.json-template for an example that works with Cursor IDE.\n\nAfter the setup, restart and ask something like \"Analyze the security of my project using mcp-osv\". \n\nTo Debug in VSCode go to Help -> Toggle developer tools and at the console look for mcp.\n\nTo test the security analysis capabilities:\n   \n\n```bash\n# Check for vulnerabilities in a package\n\"Check for vulnerabilities in the package 'express' version '4.17.1'\"\n\n# Analyze a specific file\n\"Analyze the security of the file 'main.go'\"\n```\n\nThe server will process your requests and provide security insights through the MCP protocol.\n\n\n## Connect to Claude\n\nEdit the config file and add the following section (that's the whole file, consider the mcp_osv section if you already have other tools installed.)\n\n```json\n{\n    \"mcpServers\": {\n        \"mcp_osv\": {\n            \"command\": \"/usr/local/bin/mcp-osv\",\n            \"args\": []\n        }\n    }\n}\n````\n\n## Development\n\nTo add new security analysis capabilities:\n\n1. Create a new tool using `mcp.NewTool`\n2. Implement the tool handler\n3. Add the tool to the server using `s.AddTool`\n4. check <https://github.com/mark3labs/mcp-go> for a comprehensive framework to build MCPs in Go.\n\n## License\n\nMIT \n"
}