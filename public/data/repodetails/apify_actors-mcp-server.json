{
  "mcp_name": "Apify",
  "mcp_description": "[Actors MCP Server](https://apify.com/apify/actors-mcp-server): Use 3,000+ pre-built cloud tools to extract data from websites, e-commerce, social media, search engines, maps, and more",
  "mcp_id": "apify_actors-mcp-server",
  "fetch_timestamp": "2025-06-23T01:12:25.308204Z",
  "github_url": "https://github.com/apify/actors-mcp-server",
  "repository": {
    "name": "actors-mcp-server",
    "full_name": "apify/actors-mcp-server",
    "description": "Model Context Protocol (MCP) Server for Apify's Actors",
    "html_url": "https://github.com/apify/actors-mcp-server",
    "created_at": "2025-01-02T15:43:09Z",
    "updated_at": "2025-06-20T06:14:48Z",
    "pushed_at": "2025-06-22T04:44:39Z",
    "size": 1131,
    "stargazers_count": 237,
    "watchers_count": 237,
    "forks_count": 28,
    "open_issues_count": 20,
    "language": "TypeScript",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "master",
    "owner": {
      "login": "apify",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/24586296?v=4",
      "html_url": "https://github.com/apify"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 28,
    "subscribers_count": 3,
    "languages": {
      "TypeScript": 174786,
      "JavaScript": 3656,
      "Dockerfile": 2668,
      "Python": 1761
    },
    "language_percentages": {
      "TypeScript": 95.58,
      "JavaScript": 2,
      "Dockerfile": 1.46,
      "Python": 0.96
    },
    "pull_requests_count": 103,
    "contributors_count": 10,
    "latest_release": {
      "tag_name": "v0.2.6",
      "name": "0.2.6",
      "published_at": "2025-06-13T09:55:26Z",
      "body": "## [0.2.6](https://github.com/apify/actors-mcp-server/releases/tag/v0.2.6) (2025-06-13)\n\n### üêõ Bug Fixes\n\n- Fixed ajv compile also for MCP proxy tools ([#140](https://github.com/apify/actors-mcp-server/pull/140)) ([5e6e618](https://github.com/apify/actors-mcp-server/commit/5e6e6189984b1cd8bcbbd986d63888810695367a)) by @MQ37\n\n",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.2.6",
        "commit_sha": "c25ef3010f31b1e70db511ad4186d0cba7f99292"
      },
      {
        "name": "v0.2.5",
        "commit_sha": "2a01189f044db82493b21bbad418722f151d58dc"
      },
      {
        "name": "v0.2.4",
        "commit_sha": "bc8369e2c5975c8683305efac678717e4987ffbc"
      },
      {
        "name": "v0.2.3",
        "commit_sha": "2de1fb6e17b218faf94aa425c32be403a2c45e7d"
      },
      {
        "name": "v0.2.2",
        "commit_sha": "68563f2b5bfcc6dd417bd4d620ca3959a26b513f"
      },
      {
        "name": "v0.2.1",
        "commit_sha": "302e5821d5c443b7be1edec1fe6c53a6119ae7d2"
      },
      {
        "name": "v0.2.0",
        "commit_sha": "07de99356f69c233eb03e18f0d8518e773c5603f"
      },
      {
        "name": "v0.1.30",
        "commit_sha": "c89202178992949d57f52904c110d809e94095b3"
      },
      {
        "name": "v0.1.29",
        "commit_sha": "433aca71ad57f29be5b24e5925a75b5b6f356d46"
      },
      {
        "name": "v0.1.28",
        "commit_sha": "6abd1eb62c1ca689bc8cb3766880dbd4c1fb24ef"
      }
    ],
    "latest_version": "v0.2.6",
    "package_json_version": "0.2.7"
  },
  "readme": "# Apify Model Context Protocol (MCP) Server\n\n[![Actors MCP Server](https://apify.com/actor-badge?actor=apify/actors-mcp-server)](https://apify.com/apify/actors-mcp-server)\n\nImplementation of an MCP server for all [Apify Actors](https://apify.com/store).\nThis server enables interaction with one or more Apify Actors that can be defined in the MCP Server configuration.\n\nThe server can be used in two ways:\n- **üá¶ [MCP Server Actor](https://apify.com/apify/actors-mcp-server)** ‚Äì HTTP server accessible via Server-Sent Events (SSE), see [guide](#-mcp-server-actor)\n- **‚æï MCP Server Stdio** ‚Äì Local server available via standard input/output (stdio), see [guide](#-mcp-server-at-a-local-host)\n\nYou can also interact with the MCP server using a chat-like UI with üí¨ [Tester MCP Client](https://apify.com/jiri.spilka/tester-mcp-client)\n\n# üéØ What does Apify MCP server do?\n\nThe MCP Server Actor allows an AI assistant to use any [Apify Actor](https://apify.com/store) as a tool to perform a specific task.\nFor example, it can:\n- Use [Facebook Posts Scraper](https://apify.com/apify/facebook-posts-scraper) to extract data from Facebook posts from multiple pages/profiles\n- Use [Google Maps Email Extractor](https://apify.com/lukaskrivka/google-maps-with-contact-details) to extract Google Maps contact details\n- Use [Google Search Results Scraper](https://apify.com/apify/google-search-scraper) to scrape Google Search Engine Results Pages (SERPs)\n- Use [Instagram Scraper](https://apify.com/apify/instagram-scraper) to scrape Instagram posts, profiles, places, photos, and comments\n- Use [RAG Web Browser](https://apify.com/apify/web-scraper) to search the web, scrape the top N URLs, and return their content\n\n# MCP Clients\n\nTo interact with the Apify MCP server, you can use MCP clients such as:\n- [Claude Desktop](https://claude.ai/download) (only Stdio support)\n- [Visual Studio Code](https://code.visualstudio.com/) (Stdio and SSE support)\n- [LibreChat](https://www.librechat.ai/) (Stdio and SSE support, yet without Authorization header)\n- [Apify Tester MCP Client](https://apify.com/jiri.spilka/tester-mcp-client) (SSE support with Authorization headers)\n- Other clients at [https://modelcontextprotocol.io/clients](https://modelcontextprotocol.io/clients)\n- More clients at [https://glama.ai/mcp/clients](https://glama.ai/mcp/clients)\n\nWhen you have Actors integrated with the MCP server, you can ask:\n- \"Search the web and summarize recent trends about AI Agents\"\n- \"Find the top 10 best Italian restaurants in San Francisco\"\n- \"Find and analyze the Instagram profile of The Rock\"\n- \"Provide a step-by-step guide on using the Model Context Protocol with source URLs\"\n- \"What Apify Actors can I use?\"\n\nThe following image shows how the Apify MCP server interacts with the Apify platform and AI clients:\n\n![Actors-MCP-server](https://raw.githubusercontent.com/apify/actors-mcp-server/refs/heads/master/docs/actors-mcp-server.png)\n\nWith the MCP Tester client you can load Actors dynamically but this is not yet supported by other MCP clients.\nWe also plan to add more features, see [Roadmap](#-roadmap-march-2025) for more details.\n\n# üîÑ What is the Model Context Protocol?\n\nThe Model Context Protocol (MCP) allows AI applications (and AI agents), such as Claude Desktop, to connect to external tools and data sources.\nMCP is an open protocol that enables secure, controlled interactions between AI applications, AI Agents, and local or remote resources.\n\nFor more information, see the [Model Context Protocol](https://modelcontextprotocol.org/) website or the blog post [What is MCP and why does it matter?](https://blog.apify.com/what-is-model-context-protocol/).\n\n\n# ü§ñ How is MCP Server related to AI Agents?\n\nThe Apify MCP Server exposes Apify's Actors through the MCP protocol, allowing AI Agents or frameworks that implement the MCP protocol to access all Apify Actors as tools for data extraction, web searching, and other tasks.\n\nTo learn more about AI Agents, explore our blog post: [What are AI Agents?](https://blog.apify.com/what-are-ai-agents/) and browse Apify's curated [AI Agent collection](https://apify.com/store/collections/ai_agents).\nInterested in building and monetizing your own AI agent on Apify? Check out our [step-by-step guide](https://blog.apify.com/how-to-build-an-ai-agent/) for creating, publishing, and monetizing AI agents on the Apify platform.\n\n# üß± Components\n\n## Tools\n\n### Actors\n\nAny [Apify Actor](https://apify.com/store) can be used as a tool.\nBy default, the server is pre-configured with the Actors specified below, but this can be overridden by providing Actor input.\n\n```text\n'apify/rag-web-browser'\n```\nThe MCP server loads the Actor input schema and creates MCP tools corresponding to the Actors.\nSee this example of input schema for the [RAG Web Browser](https://apify.com/apify/rag-web-browser/input-schema).\n\nThe tool name must always be the full Actor name, such as `apify/rag-web-browser`.\nThe arguments for an MCP tool represent the input parameters of the Actor.\nFor example, for the `apify/rag-web-browser` Actor, the arguments are:\n\n```json\n{\n  \"query\": \"restaurants in San Francisco\",\n  \"maxResults\": 3\n}\n```\nYou don't need to specify the input parameters or which Actor to call; everything is managed by an LLM.\nWhen a tool is called, the arguments are automatically passed to the Actor by the LLM.\nYou can refer to the specific Actor's documentation for a list of available arguments.\n\n### Helper tools\nOne of the powerful features of MCP with Apify is dynamic actor tooling ‚Äì the ability for an AI agent to find new tools (Actors) as needed and incorporate them. Here are some special MCP operations and how Apify MCP Server supports them:\n\n- Actor discovery and management: Search for Actors (`search-actors`), view details (`get-actor-details`), and dynamically add or remove tools (`add-actor`, `remove-actor`).\n- Actor execution and monitoring: Start Actor runs, fetch run results (`get-actor-run`), logs (`get-actor-log`), and abort runs (`abort-actor-run`).\n- Dataset access: List datasets, retrieve dataset info and items (`get-dataset`, `get-dataset-list`, `get-dataset-items`).\n- Key-value store access: List key-value stores, view keys, and retrieve records (`get-key-value-store-list`, `get-key-value-store`, `get-key-value-store-keys`, `get-key-value-store-record`).\n- Built-in help tool: A static helper (`apify-actor-help-tool`) that returns usage info for the Apify MCP Server.\n\n## Prompt & Resources\n\nThe server does not provide any resources and prompts.\nWe plan to add [Apify's dataset](https://docs.apify.com/platform/storage/dataset) and [key-value store](https://docs.apify.com/platform/storage/key-value-store) as resources in the future.\n\n# ‚öôÔ∏è Usage\n\nThe Apify MCP Server can be used in two ways: **as an Apify Actor** running on the Apify platform\nor as a **local server** running on your machine.\n\n## üá¶ MCP Server Actor\n\n### Standby web server\n\nThe Actor runs in [**Standby mode**](https://docs.apify.com/platform/actors/running/standby) with an HTTP web server that receives and processes requests.\n\nTo start the server with default Actors, send an HTTP GET request with your [Apify API token](https://console.apify.com/settings/integrations) to the following URL:\n```\nhttps://actors-mcp-server.apify.actor?token=<APIFY_TOKEN>\n```\nIt is also possible to start the MCP server with a different set of Actors.\nTo do this, create a [task](https://docs.apify.com/platform/actors/running/tasks) and specify the list of Actors you want to use.\n\nThen, run the task in Standby mode with the selected Actors:\n```shell\nhttps://USERNAME--actors-mcp-server-task.apify.actor?token=<APIFY_TOKEN>\n```\n\nYou can find a list of all available Actors in the [Apify Store](https://apify.com/store).\n\n#### üí¨ Interact with the MCP Server over SSE\n\nOnce the server is running, you can interact with Server-Sent Events (SSE) to send messages to the server and receive responses.\nThe easiest way is to use [Tester MCP Client](https://apify.com/jiri.spilka/tester-mcp-client) on Apify.\n\n[Claude Desktop](https://claude.ai/download) currently lacks SSE support, but you can use it with Stdio transport; see [MCP Server at a local host](#-mcp-server-at-a-local-host) for more details.\nNote: The free version of Claude Desktop may experience intermittent connection issues with the server.\n\nIn the client settings, you need to provide server configuration:\n```json\n{\n    \"mcpServers\": {\n        \"apify\": {\n            \"type\": \"sse\",\n            \"url\": \"https://actors-mcp-server.apify.actor/sse\",\n            \"env\": {\n                \"APIFY_TOKEN\": \"your-apify-token\"\n            }\n        }\n    }\n}\n```\n\n## ‚æï MCP Server at a local host\n\nYou can run the Apify MCP Server on your local machine by configuring it with Claude Desktop or any other [MCP client](https://modelcontextprotocol.io/clients).\nYou can also use [Smithery](https://smithery.ai/server/@apify/actors-mcp-server) to install the server automatically.\n\n### Prerequisites\n\n- MacOS or Windows\n- The latest version of Claude Desktop must be installed (or another MCP client)\n- [Node.js](https://nodejs.org/en) (v18 or higher)\n- [Apify API Token](https://docs.apify.com/platform/integrations/api#api-token) (`APIFY_TOKEN`)\n\nMake sure you have the `node` and `npx` installed properly:\n```bash\nnode -v\nnpx -v\n```\nIf not, follow this guide to install Node.js: [Downloading and installing Node.js and npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm).\n\n#### Claude Desktop\n\nTo configure Claude Desktop to work with the MCP server, follow these steps. For a detailed guide, refer to the [Claude Desktop Users Guide](https://modelcontextprotocol.io/quickstart/user) or watch the [video tutorial](https://youtu.be/gf5WXeqydUU?t=440).\n\n1. Download Claude for desktop\n   - Available for Windows and macOS.\n   - For Linux users, you can build a Debian package using this [unofficial build script](https://github.com/aaddrick/claude-desktop-debian).\n2. Open the Claude Desktop app and enable **Developer Mode** from the top-left menu bar.\n3. Once enabled, open **Settings** (also from the top-left menu bar) and navigate to the **Developer Option**, where you'll find the **Edit Config** button.\n4. Open the configuration file and edit the following file:\n\n    - On macOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n    - On Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n    - On Linux: `~/.config/Claude/claude_desktop_config.json`\n\n    ```json\n    {\n     \"mcpServers\": {\n       \"actors-mcp-server\": {\n         \"command\": \"npx\",\n         \"args\": [\"-y\", \"@apify/actors-mcp-server\"],\n         \"env\": {\n            \"APIFY_TOKEN\": \"your-apify-token\"\n         }\n       }\n     }\n    }\n    ```\n    Alternatively, you can use the `actors` argument to select one or more Apify Actors:\n    ```json\n   {\n    \"mcpServers\": {\n      \"actors-mcp-server\": {\n        \"command\": \"npx\",\n        \"args\": [\n          \"-y\", \"@apify/actors-mcp-server\",\n          \"--actors\", \"lukaskrivka/google-maps-with-contact-details,apify/instagram-scraper\"\n        ],\n        \"env\": {\n           \"APIFY_TOKEN\": \"your-apify-token\"\n        }\n      }\n    }\n   }\n    ```\n5. Restart Claude Desktop\n\n    - Fully quit Claude Desktop (ensure it's not just minimized or closed).\n    - Restart Claude Desktop.\n    - Look for the üîå icon to confirm that the Actors MCP server is connected.\n\n6. Open the Claude Desktop chat and ask \"What Apify Actors can I use?\"\n\n   ![Claude-desktop-with-Actors-MCP-server](https://raw.githubusercontent.com/apify/actors-mcp-server/refs/heads/master/docs/claude-desktop.png)\n\n7. Examples\n\n   You can ask Claude to perform tasks, such as:\n    ```text\n    Find and analyze recent research papers about LLMs.\n    Find the top 10 best Italian restaurants in San Francisco.\n    Find and analyze the Instagram profile of The Rock.\n    ```\n\nTo understand how to set up and run the MCP server on Claude, you can watch this short video tutorial ‚ñ∑ on YouTube:\n\n[Apify MCP Server Tutorial: Integrate 5,000+ Apify Actors and Agents Into Claude](https://www.youtube.com/watch?v=UOkJm9pTgMw)\n\n#### VS Code\n\nFor one-click installation, click one of the install buttons below:\n\n[![Install with NPX in VS Code](https://img.shields.io/badge/VS_Code-NPM-0098FF?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=actors-mcp-server&config=%7B%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22%40apify%2Factors-mcp-server%22%5D%2C%22env%22%3A%7B%22APIFY_TOKEN%22%3A%22%24%7Binput%3Aapify_token%7D%22%7D%7D&inputs=%5B%7B%22type%22%3A%22promptString%22%2C%22id%22%3A%22apify_token%22%2C%22description%22%3A%22Apify+API+Token%22%2C%22password%22%3Atrue%7D%5D) [![Install with NPX in VS Code Insiders](https://img.shields.io/badge/VS_Code_Insiders-NPM-24bfa5?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=actors-mcp-server&config=%7B%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22%40apify%2Factors-mcp-server%22%5D%2C%22env%22%3A%7B%22APIFY_TOKEN%22%3A%22%24%7Binput%3Aapify_token%7D%22%7D%7D&inputs=%5B%7B%22type%22%3A%22promptString%22%2C%22id%22%3A%22apify_token%22%2C%22description%22%3A%22Apify+API+Token%22%2C%22password%22%3Atrue%7D%5D&quality=insiders)\n\n##### Manual installation\n\nYou can manually install the Apify MCP Server in VS Code. First, click one of the install buttons at the top of this section for a one-click installation.\n\nAlternatively, add the following JSON block to your User Settings (JSON) file in VS Code. You can do this by pressing `Ctrl + Shift + P` and typing `Preferences: Open User Settings (JSON)`.\n\n```json\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"apify_token\",\n        \"description\": \"Apify API Token\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"actors-mcp-server\": {\n        \"command\": \"npx\",\n        \"args\": [\"-y\", \"@apify/actors-mcp-server\"],\n        \"env\": {\n          \"APIFY_TOKEN\": \"${input:apify_token}\"\n        }\n      }\n    }\n  }\n}\n```\n\nOptionally, you can add it to a file called `.vscode/mcp.json` in your workspace - just omit the top-level `mcp {}` key. This will allow you to share the configuration with others.\n\nIf you want to specify which Actors to load, you can add the `--actors` argument:\n\n```json\n{\n  \"servers\": {\n    \"actors-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\", \"@apify/actors-mcp-server\",\n        \"--actors\", \"lukaskrivka/google-maps-with-contact-details,apify/instagram-scraper\"\n      ],\n      \"env\": {\n        \"APIFY_TOKEN\": \"${input:apify_token}\"\n      }\n    }\n  }\n}\n```\n\n#### VS Code\n\nFor one-click installation, click one of the install buttons below:\n\n[![Install with NPX in VS Code](https://img.shields.io/badge/VS_Code-NPM-0098FF?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=actors-mcp-server&config=%7B%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22%40apify%2Factors-mcp-server%22%5D%2C%22env%22%3A%7B%22APIFY_TOKEN%22%3A%22%24%7Binput%3Aapify_token%7D%22%7D%7D&inputs=%5B%7B%22type%22%3A%22promptString%22%2C%22id%22%3A%22apify_token%22%2C%22description%22%3A%22Apify+API+Token%22%2C%22password%22%3Atrue%7D%5D) [![Install with NPX in VS Code Insiders](https://img.shields.io/badge/VS_Code_Insiders-NPM-24bfa5?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=actors-mcp-server&config=%7B%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22%40apify%2Factors-mcp-server%22%5D%2C%22env%22%3A%7B%22APIFY_TOKEN%22%3A%22%24%7Binput%3Aapify_token%7D%22%7D%7D&inputs=%5B%7B%22type%22%3A%22promptString%22%2C%22id%22%3A%22apify_token%22%2C%22description%22%3A%22Apify+API+Token%22%2C%22password%22%3Atrue%7D%5D&quality=insiders)\n\n##### Manual installation\n\nYou can manually install the Apify MCP Server in VS Code. First, click one of the install buttons at the top of this section for a one-click installation.\n\nAlternatively, add the following JSON block to your User Settings (JSON) file in VS Code. You can do this by pressing `Ctrl + Shift + P` and typing `Preferences: Open User Settings (JSON)`.\n\n```json\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"apify_token\",\n        \"description\": \"Apify API Token\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"actors-mcp-server\": {\n        \"command\": \"npx\",\n        \"args\": [\"-y\", \"@apify/actors-mcp-server\"],\n        \"env\": {\n          \"APIFY_TOKEN\": \"${input:apify_token}\"\n        }\n      }\n    }\n  }\n}\n```\n\nOptionally, you can add it to a file called `.vscode/mcp.json` in your workspace - just omit the top-level `mcp {}` key. This will allow you to share the configuration with others.\n\nIf you want to specify which Actors to load, you can add the `--actors` argument:\n\n```json\n{\n  \"servers\": {\n    \"actors-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\", \"@apify/actors-mcp-server\",\n        \"--actors\", \"lukaskrivka/google-maps-with-contact-details,apify/instagram-scraper\"\n      ],\n      \"env\": {\n        \"APIFY_TOKEN\": \"${input:apify_token}\"\n      }\n    }\n  }\n}\n```\n\n#### Debugging NPM package @apify/actors-mcp-server with @modelcontextprotocol/inspector\n\nTo debug the server, use the [MCP Inspector](https://github.com/modelcontextprotocol/inspector) tool:\n\n```shell\nexport APIFY_TOKEN=your-apify-token\nnpx @modelcontextprotocol/inspector npx -y @apify/actors-mcp-server\n```\n\n# üë∑üèº Development\n\n## Prerequisites\n\n- [Node.js](https://nodejs.org/en) (v18 or higher)\n- Python 3.9 or higher\n\nCreate an environment file `.env` with the following content:\n```text\nAPIFY_TOKEN=your-apify-token\n```\n\nBuild the actor-mcp-server package:\n\n```bash\nnpm run build\n```\n\n## Local client (SSE)\n\nTo test the server with the SSE transport, you can use the script `examples/clientSse.ts`:\nCurrently, the Node.js client does not support establishing a connection to a remote server with custom headers.\nYou need to change the URL to your local server URL in the script.\n\n```bash\nnode dist/examples/clientSse.js\n```\n\n## Debugging\n\nSince MCP servers operate over standard input/output (stdio), debugging can be challenging.\nFor the best debugging experience, use the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nexport APIFY_TOKEN=your-apify-token\nnpx @modelcontextprotocol/inspector node ./dist/stdio.js\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\n## ‚ìò Limitations and feedback\n\nThe Actor input schema is processed to be compatible with most MCP clients while adhering to [JSON Schema](https://json-schema.org/) standards. The processing includes:\n- **Descriptions** are truncated to 500 characters (as defined in `MAX_DESCRIPTION_LENGTH`).\n- **Enum fields** are truncated to a maximum combined length of 200 characters for all elements (as defined in `ACTOR_ENUM_MAX_LENGTH`).\n- **Required fields** are explicitly marked with a \"REQUIRED\" prefix in their descriptions for compatibility with frameworks that may not handle JSON schema properly.\n- **Nested properties** are built for special cases like proxy configuration and request list sources to ensure correct input structure.\n- **Array item types** are inferred when not explicitly defined in the schema, using a priority order: explicit type in items > prefill type > default value type > editor type.\n- **Enum values and examples** are added to property descriptions to ensure visibility even if the client doesn't fully support JSON schema.\n\nMemory for each Actor is limited to 4GB.\nFree users have an 8GB limit, 128MB needs to be allocated for running `Actors-MCP-Server`.\n\nIf you need other features or have any feedback, [submit an issue](https://console.apify.com/actors/1lSvMAaRcadrM1Vgv/issues) in Apify Console to let us know.\n\n# üöÄ Roadmap (March 2025)\n\n- Add Apify's dataset and key-value store as resources.\n- Add tools such as Actor logs and Actor runs for debugging.\n\n# üêõ Troubleshooting\n\n- Make sure you have the `node` installed by running `node -v`\n- Make sure you have the `APIFY_TOKEN` environment variable set\n- Always use the latest version of the MCP server by setting `@apify/actors-mcp-server@latest`\n\n# üìö Learn more\n\n- [Model Context Protocol](https://modelcontextprotocol.org/)\n- [What are AI Agents?](https://blog.apify.com/what-are-ai-agents/)\n- [What is MCP and why does it matter?](https://blog.apify.com/what-is-model-context-protocol/)\n- [How to use MCP with Apify Actors](https://blog.apify.com/how-to-use-mcp/)\n- [Tester MCP Client](https://apify.com/jiri.spilka/tester-mcp-client)\n- [AI agent workflow: building an agent to query Apify datasets](https://blog.apify.com/ai-agent-workflow/)\n- [MCP Client development guide](https://github.com/cyanheads/model-context-protocol-resources/blob/main/guides/mcp-client-development-guide.md)\n- [How to build and monetize an AI agent on Apify](https://blog.apify.com/how-to-build-an-ai-agent/)\n"
}