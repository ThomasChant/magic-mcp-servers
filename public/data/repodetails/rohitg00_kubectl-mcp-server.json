{
  "mcp_name": "kubectl-mcp-server",
  "mcp_description": "🐍 ☁️/🏠 - A Model Context Protocol (MCP) server for Kubernetes that enables AI assistants like Claude, Cursor, and others to interact with Kubernetes clusters through natural language.",
  "mcp_id": "rohitg00_kubectl-mcp-server",
  "fetch_timestamp": "2025-06-23T05:54:21.092428Z",
  "github_url": "https://github.com/rohitg00/kubectl-mcp-server",
  "repository": {
    "name": "kubectl-mcp-server",
    "full_name": "rohitg00/kubectl-mcp-server",
    "description": "Chat with your Kubernetes Cluster using AI tools and IDEs like Claude and Cursor!",
    "html_url": "https://github.com/rohitg00/kubectl-mcp-server",
    "created_at": "2025-03-23T17:49:07Z",
    "updated_at": "2025-06-22T21:19:35Z",
    "pushed_at": "2025-06-09T09:20:00Z",
    "size": 99347,
    "stargazers_count": 616,
    "watchers_count": 616,
    "forks_count": 109,
    "open_issues_count": 8,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "ai",
      "deployment",
      "devops",
      "genai",
      "kubernetes",
      "kubernetes-cluster",
      "llms",
      "mcp",
      "mcp-server"
    ],
    "default_branch": "main",
    "owner": {
      "login": "rohitg00",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/48523873?v=4",
      "html_url": "https://github.com/rohitg00"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 109,
    "subscribers_count": 9,
    "languages": {
      "Python": 657253,
      "Shell": 3052,
      "Dockerfile": 932
    },
    "language_percentages": {
      "Python": 99.4,
      "Shell": 0.46,
      "Dockerfile": 0.14
    },
    "pull_requests_count": 7,
    "contributors_count": 4,
    "tags": [
      {
        "name": "v1.1.1",
        "commit_sha": "0c7fb95d0e5670cd5a2fa8499639503c6bfaa4ef"
      }
    ],
    "latest_version": "v1.1.1"
  },
  "readme": "# Kubectl MCP Server\n\nA Model Context Protocol (MCP) server for Kubernetes that enables AI assistants like Claude, Cursor, and others to interact with Kubernetes clusters through natural language.\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Python](https://img.shields.io/badge/python-3.9+-blue.svg)](https://www.python.org/)\n[![Kubernetes](https://img.shields.io/badge/kubernetes-%23326ce5.svg?style=flat&logo=kubernetes&logoColor=white)](https://kubernetes.io/)\n[![MCP](https://img.shields.io/badge/MCP-compatible-green.svg)](https://github.com/modelcontextprotocol/modelcontextprotocol)\n[![PyPI version](https://badge.fury.io/py/kubectl-mcp-tool.svg)](https://pypi.org/project/kubectl-mcp-tool/)\n\n## 🎥 Live Demo - Watch `kubectl-mcp-tool` in Action with Claude!\n![Claude MCP](./docs/claude/claude-mcp.gif)\n\n## 🎥 Live Demo - Watch `kubectl-mcp-tool` in Action with Cursor!\n![Cursor MCP](./docs/cursor/cursor-mcp.gif)\n\n## 🎥 Live Demo - Watch `kubectl-mcp-tool` in Action with Windsurf!\n![Windsurf MCP](./docs/windsurf/windsurf-mcp.gif)\n\n\n## Features\n\n### Core Kubernetes Operations\n- [x] Connect to a Kubernetes cluster\n- [x] List and manage pods, services, deployments, and nodes\n- [x] Create, delete, and describe pods and other resources\n- [x] Get pod logs and Kubernetes events\n- [x] Support for Helm v3 operations (installation, upgrades, uninstallation)\n- [x] kubectl explain and api-resources support\n- [x] Choose namespace for next commands (memory persistence)\n- [x] Port forward to pods\n- [x] Scale deployments and statefulsets\n- [x] Execute commands in containers\n- [x] Manage ConfigMaps and Secrets\n- [x] Rollback deployments to previous versions\n- [x] Ingress and NetworkPolicy management\n- [x] Context switching between clusters\n\n### Natural Language Processing\n- [x] Process natural language queries for kubectl operations\n- [x] Context-aware commands with memory of previous operations\n- [x] Human-friendly explanations of Kubernetes concepts\n- [x] Intelligent command construction from intent\n- [x] Fallback to kubectl when specialized tools aren't available\n- [x] Mock data support for offline/testing scenarios\n- [x] Namespace-aware query handling\n\n### Monitoring\n- [x] Cluster health monitoring\n- [x] Resource utilization tracking\n- [x] Pod status and health checks\n- [x] Event monitoring and alerting\n- [x] Node capacity and allocation analysis\n- [x] Historical performance tracking\n- [x] Resource usage statistics via kubectl top\n- [x] Container readiness and liveness tracking\n\n### Security\n- [x] RBAC validation and verification\n- [x] Security context auditing\n- [x] Secure connections to Kubernetes API\n- [x] Credentials management\n- [x] Network policy assessment\n- [x] Container security scanning\n- [x] Security best practices enforcement\n- [x] Role and ClusterRole management\n- [x] ServiceAccount creation and binding\n- [x] PodSecurityPolicy analysis\n- [x] RBAC permissions auditing\n- [x] Security context validation\n\n### Diagnostics\n- [x] Cluster diagnostics and troubleshooting\n- [x] Configuration validation\n- [x] Error analysis and recovery suggestions\n- [x] Connection status monitoring\n- [x] Log analysis and pattern detection\n- [x] Resource constraint identification\n- [x] Pod health check diagnostics\n- [x] Common error pattern identification\n- [x] Resource validation for misconfigurations\n- [x] Detailed liveness and readiness probe validation\n\n### Advanced Features\n- [x] Multiple transport protocols support (stdio, SSE)\n- [x] Integration with multiple AI assistants\n- [x] Extensible tool framework\n- [x] Custom resource definition support\n- [x] Cross-namespace operations\n- [x] Batch operations on multiple resources\n- [x] Intelligent resource relationship mapping\n- [x] Error explanation with recovery suggestions\n- [x] Volume management and identification\n\n## Architecture\n\n### Model Context Protocol (MCP) Integration\n\nThe Kubectl MCP Tool implements the [Model Context Protocol (MCP)](https://github.com/modelcontextprotocol/spec), enabling AI assistants to interact with Kubernetes clusters through a standardized interface. The architecture consists of:\n\n1. **MCP Server**: A compliant server that handles requests from MCP clients (AI assistants)\n2. **Tools Registry**: Registers Kubernetes operations as MCP tools with schemas\n3. **Transport Layer**: Supports stdio, SSE, and HTTP transport methods\n4. **Core Operations**: Translates tool calls to Kubernetes API operations\n5. **Response Formatter**: Converts Kubernetes responses to MCP-compliant responses\n\n### Request Flow\n\n![Request Flow](./image.png)\n\n### Dual Mode Operation\n\nThe tool operates in two modes:\n\n1. **CLI Mode**: Direct command-line interface for executing Kubernetes operations\n2. **Server Mode**: Running as an MCP server to handle requests from AI assistants\n\n## Installation\n\nFor detailed installation instructions, please see the [Installation Guide](./docs/INSTALLATION.md).\n\nYou can install kubectl-mcp-tool directly from PyPI:\n\n```bash\npip install kubectl-mcp-tool\n```\n\nFor a specific version:\n\n```bash\npip install kubectl-mcp-tool==1.1.1\n```\n\nThe package is available on PyPI: [https://pypi.org/project/kubectl-mcp-tool/1.1.1/](https://pypi.org/project/kubectl-mcp-tool/1.1.1/)\n\n### Prerequisites\n\n- Python 3.9+\n- kubectl CLI installed and configured\n- Access to a Kubernetes cluster\n- pip (Python package manager)\n\n### Global Installation\n\n```bash\n# Install latest version from PyPI\npip install kubectl-mcp-tool\n\n# Or install development version from GitHub\npip install git+https://github.com/rohitg00/kubectl-mcp-server.git\n```\n\n### Local Development Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/rohitg00/kubectl-mcp-server.git\ncd kubectl-mcp-server\n\n# Install in development mode\npip install -e .\n```\n\n### Verifying Installation\n\nAfter installation, verify the tool is working correctly:\n\n```bash\n# Check CLI mode\nkubectl-mcp --help\n```\n\nNote: This tool is designed to work as an MCP server that AI assistants connect to, not as a direct kubectl replacement. The primary command available is `kubectl-mcp serve` which starts the MCP server.\n\n## Usage with AI Assistants\n\n### Using the MCP Server\n\nThe MCP Server (`kubectl_mcp_tool.mcp_server`) is a robust implementation built on the FastMCP SDK that provides enhanced compatibility across different AI assistants:\n\n> **Note**: If you encounter any errors with the MCP Server implementation, you can fall back to using the minimal wrapper by replacing `kubectl_mcp_tool.mcp_server` with `kubectl_mcp_tool.minimal_wrapper` in your configuration. The minimal wrapper provides basic capabilities with simpler implementation.\n\n1. **Direct Configuration**\n   ```json\n   {\n     \"mcpServers\": {\n       \"kubernetes\": {\n         \"command\": \"python\",\n         \"args\": [\"-m\", \"kubectl_mcp_tool.mcp_server\"],\n         \"env\": {\n           \"KUBECONFIG\": \"/path/to/your/.kube/config\",\n           \"PATH\": \"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\",\n           \"MCP_LOG_FILE\": \"/path/to/logs/debug.log\",\n           \"MCP_DEBUG\": \"1\"\n         }\n       }\n     }\n   }\n   ```\n\n2. **Key Environment Variables**\n   - `MCP_LOG_FILE`: Path to log file (recommended to avoid stdout pollution)\n   - `MCP_DEBUG`: Set to \"1\" for verbose logging\n   - `MCP_TEST_MOCK_MODE`: Set to \"1\" to use mock data instead of real cluster\n   - `KUBECONFIG`: Path to your Kubernetes config file\n   - `KUBECTL_MCP_LOG_LEVEL`: Set to \"DEBUG\", \"INFO\", \"WARNING\", or \"ERROR\"\n\n3. **Testing the MCP Server**\n   You can test if the server is working correctly with:\n   ```bash\n   python -m kubectl_mcp_tool.simple_ping\n   ```\n   This will attempt to connect to the server and execute a ping command.\n\n   Alternatively, you can directly run the server with:\n   ```bash\n   python -m kubectl_mcp_tool\n   ```\n\n### Claude Desktop\n\nAdd the following to your Claude Desktop configuration at `~/.config/claude/mcp.json` (Windows: `%APPDATA%\\Claude\\mcp.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"kubernetes\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"kubectl_mcp_tool.mcp_server\"],\n      \"env\": {\n        \"KUBECONFIG\": \"/path/to/your/.kube/config\"\n      }\n    }\n  }\n}\n```\n\n### Cursor AI\n\nAdd the following to your Cursor AI settings under MCP by adding a new global MCP server:\n\n```json\n{\n  \"mcpServers\": {\n    \"kubernetes\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"kubectl_mcp_tool.mcp_server\"],\n      \"env\": {\n        \"KUBECONFIG\": \"/path/to/your/.kube/config\",\n        \"PATH\": \"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/bin\"\n      }\n    }\n  }\n}\n```\n\nSave this configuration to `~/.cursor/mcp.json` for global settings.\n\n> **Note**: Replace `/path/to/your/.kube/config` with the actual path to your kubeconfig file. On most systems, this is `~/.kube/config`.\n\n### Windsurf\n\nAdd the following to your Windsurf configuration at `~/.config/windsurf/mcp.json` (Windows: `%APPDATA%\\WindSurf\\mcp.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"kubernetes\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"kubectl_mcp_tool.mcp_server\"],\n      \"env\": {\n        \"KUBECONFIG\": \"/path/to/your/.kube/config\"\n      }\n    }\n  }\n}\n```\n\n### Automatic Configuration\n\nFor automatic configuration of all supported AI assistants, run the provided installation script:\n\n```bash\nbash install.sh\n```\n\nThis script will:\n1. Install the required dependencies\n2. Create configuration files for Claude, Cursor, and WindSurf\n3. Set up the correct paths and environment variables\n4. Test your Kubernetes connection\n\n## Prerequisites\n\n1. kubectl installed and in your PATH\n2. A valid kubeconfig file\n3. Access to a Kubernetes cluster\n4. Helm v3 (optional, for Helm operations)\n\n## Examples\n\n### List Pods\n\n```\nList all pods in the default namespace\n```\n\n### Deploy an Application\n\n```\nCreate a deployment named nginx-test with 3 replicas using the nginx:latest image\n```\n\n### Check Pod Logs\n\n```\nGet logs from the nginx-test pod\n```\n\n### Port Forwarding\n\n```\nForward local port 8080 to port 80 on the nginx-test pod\n```\n\n## Development\n\n```bash\n# Clone the repository\ngit clone https://github.com/rohitg00/kubectl-mcp-server.git\ncd kubectl-mcp-server\n\n# Install dependencies\npip install -r requirements.txt\n\n# Install in development mode\npip install -e .\n\n# Run the MCP server\npython -m kubectl_mcp_tool\n\n# Run tests\npython -m python_tests.run_mcp_tests\n```\n\n## Project Structure\n\n```\n├── kubectl_mcp_tool/         # Main package\n│   ├── __init__.py           # Package initialization\n│   ├── __main__.py           # Package entry point\n│   ├── cli.py                # CLI entry point\n│   ├── mcp_server.py         # MCP server implementation\n│   ├── mcp_kubectl_tool.py   # Main kubectl MCP tool implementation\n│   ├── natural_language.py   # Natural language processing\n│   ├── diagnostics.py        # Diagnostics functionality\n│   ├── core/                 # Core functionality \n│   ├── security/             # Security operations\n│   ├── monitoring/           # Monitoring functionality\n│   ├── utils/                # Utility functions\n│   └── cli/                  # CLI functionality components\n├── python_tests/             # Test suite\n│   ├── run_mcp_tests.py      # Test runner script\n│   ├── mcp_client_simulator.py # MCP client simulator for mock testing\n│   ├── test_utils.py         # Test utilities\n│   ├── test_mcp_core.py      # Core MCP tests\n│   ├── test_mcp_security.py  # Security tests\n│   ├── test_mcp_monitoring.py # Monitoring tests\n│   ├── test_mcp_nlp.py       # Natural language tests\n│   ├── test_mcp_diagnostics.py # Diagnostics tests\n│   └── mcp_test_strategy.md  # Test strategy documentation\n├── docs/                     # Documentation\n│   ├── README.md             # Documentation overview\n│   ├── INSTALLATION.md       # Installation guide\n│   ├── integration_guide.md  # Integration guide\n│   ├── cursor/               # Cursor integration docs\n│   ├── windsurf/             # Windsurf integration docs\n│   └── claude/               # Claude integration docs\n├── compatible_servers/       # Compatible MCP server implementations\n│   ├── cursor/               # Cursor-compatible servers\n│   ├── windsurf/             # Windsurf-compatible servers\n│   ├── minimal/              # Minimal server implementations\n│   └── generic/              # Generic MCP servers\n├── requirements.txt          # Python dependencies\n├── setup.py                  # Package setup script\n├── pyproject.toml            # Project configuration\n├── MANIFEST.in               # Package manifest\n├── mcp_config.json           # Sample MCP configuration\n├── run_server.py             # Server runner script\n├── LICENSE                   # MIT License\n├── CHANGELOG.md              # Version history\n├── .gitignore                # Git ignore file\n├── install.sh                # Installation script\n├── publish.sh                # PyPI publishing script\n└── start_mcp_server.sh       # Server startup script\n```\n\n## MCP Server Tools\n\nThe MCP Server implementation (`kubectl_mcp_tool.mcp_server`) provides a comprehensive set of 26 tools that can be used by AI assistants to interact with Kubernetes clusters:\n\n### Core Kubernetes Resource Management\n- **get_pods** - Get all pods in the specified namespace\n- **get_namespaces** - Get all Kubernetes namespaces\n- **get_services** - Get all services in the specified namespace\n- **get_nodes** - Get all nodes in the cluster\n- **get_configmaps** - Get all ConfigMaps in the specified namespace\n- **get_secrets** - Get all Secrets in the specified namespace\n- **get_deployments** - Get all deployments in the specified namespace\n- **create_deployment** - Create a new deployment\n- **delete_resource** - Delete a Kubernetes resource\n- **get_api_resources** - List Kubernetes API resources\n- **kubectl_explain** - Explain a Kubernetes resource using kubectl explain\n\n### Helm Operations\n- **install_helm_chart** - Install a Helm chart\n- **upgrade_helm_chart** - Upgrade a Helm release\n- **uninstall_helm_chart** - Uninstall a Helm release\n\n### Security Operations\n- **get_rbac_roles** - Get all RBAC roles in the specified namespace\n- **get_cluster_roles** - Get all cluster-wide RBAC roles\n\n### Monitoring and Diagnostics\n- **get_events** - Get all events in the specified namespace\n- **get_resource_usage** - Get resource usage statistics via kubectl top\n- **health_check** - Check cluster health by pinging the API server\n- **get_pod_events** - Get events for a specific pod\n- **check_pod_health** - Check the health status of a pod\n- **get_logs** - Get logs from a pod\n\n### Cluster Management\n- **switch_context** - Switch current kubeconfig context\n- **get_current_context** - Get current kubeconfig context\n- **port_forward** - Forward local port to pod port\n- **scale_deployment** - Scale a deployment\n\nAll tools return structured data with success/error information and relevant details, making it easy for AI assistants to process and understand the responses.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/06a3ea67-5b09-48cf-910c-7a5285088821)\n"
}