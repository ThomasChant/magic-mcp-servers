{
  "mcp_name": "erikhoward/adls-mcp-server",
  "mcp_description": "üêç ‚òÅÔ∏è/üè† - MCP Server for Azure Data Lake Storage. It can perform manage containers, read/write/upload/download operations on container files and manage file metadata.",
  "mcp_id": "erikhoward_adls-mcp-server",
  "fetch_timestamp": "2025-06-23T02:53:44.599174Z",
  "github_url": "https://github.com/erikhoward/adls-mcp-server",
  "repository": {
    "name": "adls-mcp-server",
    "full_name": "erikhoward/adls-mcp-server",
    "description": "Microsoft Azure Data Lake Storage MCP Server",
    "html_url": "https://github.com/erikhoward/adls-mcp-server",
    "created_at": "2025-04-03T19:55:31Z",
    "updated_at": "2025-06-05T06:47:58Z",
    "pushed_at": "2025-05-31T01:46:12Z",
    "size": 62,
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks_count": 4,
    "open_issues_count": 1,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "adls",
      "azure",
      "mcp",
      "mcp-server"
    ],
    "default_branch": "main",
    "owner": {
      "login": "erikhoward",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/43572?v=4",
      "html_url": "https://github.com/erikhoward"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 4,
    "subscribers_count": 2,
    "languages": {
      "Python": 43041
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 2,
    "contributors_count": 2,
    "latest_release": {
      "tag_name": "v0.1.4",
      "name": "üéâ V0.1.4 Initial Release - ADLS2 MCP Server",
      "published_at": "2025-04-07T01:08:32Z",
      "body": "First public release of the Azure Data Lake Storage Gen2 Model Context Protocol server implementation, providing standardized interface for ADLS2 storage operations through MCP tools.\r\n\r\nKey Features:\r\n- ‚ú® Full MCP protocol implementation for ADLS2\r\n- üîê Azure authentication via DefaultAzureCredential\r\n- üìÅ Comprehensive filesystem and file operations\r\n- ‚öôÔ∏è Environment-based configuration\r\n- üìù Extensive documentation",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.1.4",
        "commit_sha": "cc9b0a5c2cc6bed49337c81e1be7d63fc597127e"
      },
      {
        "name": "v0.1.2",
        "commit_sha": "0848e9b156055e4ca685f27ee90587272b390e60"
      },
      {
        "name": "v0.1.1",
        "commit_sha": "04b05d249d0e2174485fd9473b5f456c08d5555b"
      }
    ],
    "latest_version": "v0.1.4"
  },
  "readme": "# ADLS2 MCP Server üöÄ\n\nA Model Context Protocol (MCP) server implementation for Azure Data Lake Storage Gen2. This service provides a standardized interface for interacting with ADLS2 storage, enabling file operations through MCP tools.\n\n[![License](https://img.shields.io/github/license/erikhoward/adls-mcp-server)](https://opensource.org/licenses/MIT) [![Python Version](https://img.shields.io/badge/python-3.13%2B-blue.svg)](https://www.python.org/) [![uv](https://img.shields.io/badge/uv-package%20manager-blueviolet)](https://docs.astral.sh/uv/) [![MCP](https://img.shields.io/badge/MCP-compatible-green.svg)](https://github.com/modelcontextprotocol/spec)\n\n## Setup üõ†Ô∏è\n\n### Installation üì¶\n\nRequires Python 3.13 or higher.\n\nInstall the package using `uv`:\n\n```bash\nuv pip install adls2-mcp-server\n```\n\n### MCP Configuration ‚öôÔ∏è\n\n### Claude Desktop Configuration\n\n1 - Edit Claude Desktop Configuration:\n\nOpen `claude_desktop_config.json` and add the following configuration.\n\nOn MacOs, the file is located here:\n`~/Library/Application Support/Claude Desktop/claude_desktop_config.json`.\n\nOn Windows, the file is located here:\n`%APPDATA%\\Claude Desktop\\claude_desktop_config.json`.\n\n```json\n{\n    \"mcpServers\": {\n        \"adls2\": {\n            \"command\": \"adls2-mcp-server\",\n            \"env\": {\n                \"LOG_LEVEL\": \"DEBUG\",\n                \"UPLOAD_ROOT\": \"/path/to/store/uploads\",\n                \"DOWNLOAD_ROOT\": \"/path/to/store/downloads\",\n                \"AZURE_STORAGE_ACCOUNT_NAME\": \"your-azure-adls2-storage-account-name\",\n                \"READ_ONLY_MODE\": \"false\"\n            }\n        }\n    }\n}\n```\n\nThe following is a table of available environment configuration variables:\n\n| Variable | Description | Default |\n| --- | --- | --- |\n| `LOG_LEVEL` | Logging level | `INFO` |\n| `UPLOAD_ROOT` | Root directory for file uploads | `./uploads` |\n| `DOWNLOAD_ROOT` | Root directory for file downloads | `./downloads` |\n| `AZURE_STORAGE_ACCOUNT_NAME` | Azure ADLS2 storage account name | `None` |\n| `AZURE_STORAGE_ACCOUNT_KEY` | Azure ADLS2 storage account key (optional) | `None` |\n| `READ_ONLY_MODE` | Whether the server should operate in read-only mode | `true` |\n\n\nIf `AZURE_STORAGE_ACCOUNT_KEY` is not set, the server will attempt to authenticate using Azure CLI credentials. Ensure you have logged in with Azure CLI before running the server:\n\n```bash\naz login\n```\n\n2 - Restart Claude Desktop.\n\n### Available Tools üîß\n\n#### Filesystem (container) Operations\n\n- `list_filesystems` - List all filesystems in the storage account\n- `create_filesystem` - Create a new filesystem\n- `delete_filesystem` - Delete an existing filesystem\n\n#### File Operations\n\n- `upload_file` - Upload a file to ADLS2\n- `download_file` - Download a file from ADLS2\n- `file_exists` - Check if a file exists\n- `rename_file` - Rename/move a file\n- `get_file_properties` - Get file properties\n- `get_file_metadata` - Get file metadata\n- `set_file_metadata` - Set file metadata\n- `set_file_metadata_json` - Set multiple metadata key-value pairs using JSON\n\n#### Directory Operations\n\n- `create_directory` - Create a new directory\n- `delete_directory` - Delete a directory\n- `rename_directory` - Rename/move a directory\n- `directory_exists` - Check if a directory exists\n- `directory_get_paths` - Get all paths under the specified directory\n\n## Development üíª\n\n### Local Development Setup\n\n1 - Clone the repository:\n\n```bash\ngit clone https://github.com/erikhoward/adls2-mcp-server.git\ncd adls2-mcp-server\n```\n\n2 - Create and activate virtual environment:\n\nLinux/macOS:\n\n```bash\npython -m venv .venv\nsource .venv/bin/activate\n```\n\nWindows:\n\n```bash\n.venv\\Scripts\\activate\n```\n\n3 - Install dependencies:\n\n```bash\npip install -e \".[dev]\"\n```\n\n4 - Copy and configure environment variables:\n\n```bash\ncp .env.example .env\n```\n\nEdit .env with your settings.\n\n```bash\nAZURE_STORAGE_ACCOUNT_NAME=your_azure_adls2_storage_account_name\nAZURE_STORAGE_ACCOUNT_KEY=your_azure_adls2_storage_key (optional)\nDOWNLOAD_ROOT=/path/to/download/folder\nUPLOAD_ROOT=/path/to/upload/folder\nREAD_ONLY_MODE=True\nLOG_LEVEL=INFO\n```\n\nIf `AZURE_STORAGE_ACCOUNT_KEY` is not set, the server will attempt to authenticate using Azure CLI credentials. Ensure you have logged in with Azure CLI before running the server:\n\n```bash\naz login\n```\n\n5 - Claude Desktop Configuration\n\nOpen `claude_desktop_config.json` and add the following configuration.\n\nOn MacOs, the file is located here:\n`~/Library/Application Support/Claude Desktop/claude_desktop_config.json`.\n\nOn Windows, the file is located here:\n`%APPDATA%\\Claude Desktop\\claude_desktop_config.json`.\n\n```json\n{\n    \"mcpServers\": {\n        \"adls2\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/path/to/adls2-mcp-server/repo\",\n                \"run\",\n                \"adls2-mcp-server\"\n            ],\n            \"env\": {\n                \"LOG_LEVEL\": \"DEBUG\",\n                \"UPLOAD_ROOT\": \"/path/to/store/uploads\",\n                \"DOWNLOAD_ROOT\": \"/path/to/store/downloads\",\n                \"AZURE_STORAGE_ACCOUNT_NAME\": \"your-azure-adls2-storage-account-name\",\n                \"READ_ONLY_MODE\": \"false\"\n            }\n        }\n    }\n}\n```\n\n6 - Restart Claude Desktop.\n\n## Contributions ü§ù\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your changes (`git commit -m '‚ú® Add some AmazingFeature'`)\n4. Push to the branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n## License ‚öñÔ∏è\n\nLicensed under MIT - see [LICENSE.md](LICENSE) file.\n\n**This is not an official Microsoft product.**\n"
}