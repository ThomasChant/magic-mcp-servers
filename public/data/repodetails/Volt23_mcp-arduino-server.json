{
  "mcp_name": "Volt23/mcp-arduino-server",
  "mcp_description": "Facilitates Arduino development workflows by bridging MCP with Arduino CLI for sketch, board, library, and file management.",
  "mcp_id": "Volt23_mcp-arduino-server",
  "fetch_timestamp": "2025-06-23T09:20:10.558738Z",
  "github_url": "https://github.com/Volt23/mcp-arduino-server",
  "repository": {
    "name": "mcp-arduino-server",
    "full_name": "Volt23/mcp-arduino-server",
    "description": null,
    "html_url": "https://github.com/Volt23/mcp-arduino-server",
    "created_at": "2025-04-15T14:09:27Z",
    "updated_at": "2025-04-18T10:43:59Z",
    "pushed_at": "2025-04-18T10:43:56Z",
    "size": 45,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "Other",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "Volt23",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/17916249?v=4",
      "html_url": "https://github.com/Volt23"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 120453
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 2
  },
  "readme": "# MCP Arduino Server (mcp-arduino-server)\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![PyPI version](https://img.shields.io/pypi/v/mcp-arduino-server.svg)](https://pypi.org/project/mcp-arduino-server/)\n\nA FastMCP-powered bridge exposing `arduino-cli` functionality via the Model Context Protocol (MCP). Manage sketches, boards, libraries, files, plus generate WireViz schematics from YAML or natural language.\n\n## Requirements\n\n- **Python ≥3.10**\n- **arduino-cli** in `PATH`\n- **MCP SDK** (`mcp[cli]`)\n- **WireViz** (optional; for diagram generation)\n- **OPENAI_API_KEY** (for AI‑powered WireViz)\n- **thefuzz[speedup]** (optional; enables fuzzy local library search)\n\n## Installation\n\n**From PyPI**:\n```bash\npip install mcp-arduino-server\n```\n\n**From source**:\n```bash\ngit clone https://github.com/Volt23/mcp-arduino-server.git\ncd mcp-arduino-server\npip install .\n```\n\n## Configuration\n\nEnvironment variables override defaults:\n\n| Variable             | Default / Description                              |\n|----------------------|-----------------------------------------------------|\n| ARDUINO_CLI_PATH     | auto-detected                                       |\n| WIREVIZ_PATH         | auto-detected                                       |\n| MCP_SKETCH_DIR       | `~/Documents/Arduino_MCP_Sketches/`                 |\n| LOG_LEVEL            | `INFO`                                              |\n| OPENAI_API_KEY       | your OpenAI API key (required for AI‑powered WireViz)|\n| OPENROUTER_API_KEY   | optional alternative to `OPENAI_API_KEY`            |\n\n## Quick Start\n\n```bash\nmcp-arduino-server\n```\n\nServer listens on STDIO for JSON-RPC MCP calls. Key methods:\n\n### Sketches\n- `create_new_sketch(name)`\n- `list_sketches()`\n- `read_file(path)`\n- `write_file(path, content[, board_fqbn])` _(auto-compiles & opens `.ino`)_\n\n### Build & Deploy\n- `verify_code(sketch, board_fqbn)`\n- `upload_sketch(sketch, port, board_fqbn)`\n\n### Libraries\n- `lib_search(name[, limit])`\n- `lib_install(name)`\n- `list_library_examples(name)`\n\n### Boards\n- `list_boards()`\n- `board_search(query)`\n\n### File Ops\n- `rename_file(src, dest)`\n- `remove_file(path)` _(destructive; operations sandboxed to home & sketch directories)_\n\n### WireViz Diagrams\n- `generate_circuit_diagram_from_description(desc, sketch=\"\", output_base=\"circuit\")` _(AI‑powered; requires `OPENAI_API_KEY`, opens PNG automatically)_\n\n## MCP Client Configuration\n\nTo integrate with MCP clients (e.g., Claude Desktop), set your OpenAI API key in the environment (or alternatively `OPENROUTER_API_KEY` for OpenRouter):\n\n```json\n{\n  \"mcpServers\": {\n    \"arduino\": {\n      \"command\": \"/path/to/mcp-arduino-server\",\n      \"args\": [],\n      \"env\": {\n        \"WIREVIZ_PATH\": \"/path/to/wireviz\",\n        \"OPENAI_API_KEY\": \"<your-openai-api-key>\"\n      }\n    }\n  }\n}\n```\n\n## Troubleshooting\n\n- Set `LOG_LEVEL=DEBUG` for verbose logs.\n- Verify file and serial-port permissions.\n- Install missing cores: `arduino-cli core install <spec>`.\n- Run `arduino-cli` commands manually to debug.\n\n## License\n\nMIT\n\n"
}