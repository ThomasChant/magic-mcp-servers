{
  "mcp_name": "PyneSys/project-mem-mcp",
  "mcp_description": "Facilitates AI agents in maintaining persistent project memory through a memory file system, enabling seamless information retrieval and updates during interactions.",
  "mcp_id": "PyneSys_project-mem-mcp",
  "fetch_timestamp": "2025-06-23T07:40:43.950131Z",
  "github_url": "https://github.com/PyneSys/project-mem-mcp",
  "repository": {
    "name": "project-mem-mcp",
    "full_name": "PyneSys/project-mem-mcp",
    "description": "An MCP server that enables AI agents to persistently store and retrieve project information from a memory file.",
    "html_url": "https://github.com/PyneSys/project-mem-mcp",
    "created_at": "2025-04-24T08:37:18Z",
    "updated_at": "2025-05-02T21:08:21Z",
    "pushed_at": "2025-05-01T12:28:56Z",
    "size": 14,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "claude-ai",
      "claude-desktop",
      "mcp",
      "mcp-server",
      "memory",
      "persistence"
    ],
    "default_branch": "main",
    "owner": {
      "login": "PyneSys",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/193546170?v=4",
      "html_url": "https://github.com/PyneSys"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 0,
    "languages": {
      "Python": 15907,
      "Shell": 615
    },
    "language_percentages": {
      "Python": 96.28,
      "Shell": 3.72
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "latest_release": {
      "tag_name": "v0.1.2",
      "name": "v0.1.2",
      "published_at": "2025-04-26T11:09:29Z",
      "body": "- Improved rules, allowing AI agents to create bigger files to store more memory and less restriction \r\n- More strict rules to ensure English lenguage in MEMORY.md",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.1.2",
        "commit_sha": "825b88b5753001f3ce0f42670d8979d0547a1985"
      },
      {
        "name": "v0.1.0",
        "commit_sha": "85788ed9499a7053dc980f379db5aa51ac4d2f22"
      }
    ],
    "latest_version": "v0.1.2"
  },
  "readme": "# Project Memory MCP\n\nAn MCP Server to store and retrieve project information from memory file. This allows AI agents (like Claude) to maintain persistent memory about projects between conversations.\n\n## Overview\n\nProject Memory MCP provides a simple way to:\n- Store project information in Markdown format\n- Retrieve project information at the beginning of conversations\n- Update project information using patches\n\nThe memory is stored in a `MEMORY.md` file in each project directory.\n\n## Installation\n\n### Using uvx\n\nThis method uses `uvx` (from the `uv` Python package manager) to run the server without permanent installation:\n\n#### Prerequisites\n\nInstall `uvx` from [uv](https://docs.astral.sh/uv/installation/) if you don't have it already.\n\n#### Set up MCP Client (Claude Desktop, Cursor, etc.)\n\nMerge the following config with your existing config file (e.g. `claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"project-memory\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"project-mem-mcp\",\n        \"--allowed-dir\", \"/Users/your-username/projects\",\n        \"--allowed-dir\", \"/Users/your-username/Documents/code\"\n      ]\n    }\n  }\n}\n```\n\n> **Note:** Replace `/Users/your-username` with the actual path to your own projects and code directories.\n\n### Install from Source\n\n#### Prerequisites\n\n- Python 3.11 or higher\n- Pip package manager\n\n#### Clone the repository\n\n```bash\ngit clone https://github.com/your-username/project-mem-mcp.git\npython -m venv venv\nsource venv/bin/activate\npip install -e .\n```\n\n#### Set up MCP Client (Claude Desktop, Cursor, etc.)\n\nMerge the following config with your existing config file (e.g. `claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"project-memory\": {\n      \"command\": \"path/to/your/venv/bin/project-mem-mcp\",\n      \"args\": [\n        \"--allowed-dir\", \"/Users/your-username/projects\",\n        \"--allowed-dir\", \"/Users/your-username/Documents/code\"\n      ]\n    }\n  }\n}\n```\n\n> **Note:** Replace `/Users/your-username` with the actual path to your own projects and code directories.\n\n## Arguments\n\nThe `--allowed-dir` argument is used to specify the directories that the server has access to. You can use it multiple times to allow access to multiple directories. All directories inside the allowed directories are also allowed.\nIt is optional. If not provided, the server will only have access to the home directory of the user running the server.\n\n\n## Usage\n\nThe MCP server is started by the client (e.g., Claude Desktop) based on the configuration you provide. You don't need to start the server manually.\n\n### Tools\n\nProject Memory MCP provides three tools:\n\n#### get_project_memory\n\nRetrieves the entire project memory in Markdown format. Should be used at the beginning of every conversation about a project.\n\n```python\nget_project_memory(project_path: str) -> str\n```\n- **project_path**: Full path to the project directory.\n- Returns the content of the MEMORY.md file as a string.\n- Raises `FileNotFoundError` if the project or memory file does not exist.\n- Raises `PermissionError` if the project path is not in allowed directories.\n\n#### set_project_memory\n\nSets (overwrites) the entire project memory. Use this when creating a new memory file, replacing the whole memory, or if `update_project_memory` fails.\n\n```python\nset_project_memory(project_path: str, project_info: str)\n```\n- **project_path**: Full path to the project directory.\n- **project_info**: Complete project information in Markdown format.\n- Overwrites the MEMORY.md file with the provided content.\n- Raises `FileNotFoundError` if the project path does not exist.\n- Raises `PermissionError` if the project path is not in allowed directories.\n\n#### update_project_memory\n\nUpdates the project memory by applying one or more block-based patches to the memory file. This is more efficient for small changes.\n\n```python\nupdate_project_memory(project_path: str, patch_content: str)\n```\n- **project_path**: Full path to the project directory.\n- **patch_content**: Block-based patch content using SEARCH/REPLACE markers (see below).\n- Each patch block must have the following format:\n\n  ```\n  <<<<<<< SEARCH\n  Text to find in the memory file\n  =======\n  Text to replace it with\n  >>>>>>> REPLACE\n  ```\n  Multiple blocks can be included in a single request.\n- Each search text must appear **exactly once** in the file, otherwise an error is raised.\n- Raises `FileNotFoundError` if the project or memory file does not exist.\n- Raises `ValueError` if the patch format is invalid or the search text is not unique.\n- Raises `RuntimeError` if patch application fails for any reason.\n\n### Example Workflow\n\n1. Begin a conversation with LLM about a project\n2. LLM uses `get_project_memory` to retrieve project information\n3. Throughout the conversation, LLM uses `update_project_memory` to persist new information\n4. If the update fails, LLM can use `set_project_memory` instead\n\n####  Claude Desktop\n\nif you use Claude Desktop, it is best to use the project feature.\n\nEdit the project instructions:\n- Add a line like this: \"The path of the project is <project_path>\"\n- If it does not always use the memory, you can add a line like this: \"Always use the project memory, it is not optional\"\n\n## Security Considerations\n\n- Memory files should never contain sensitive information\n- Project paths are validated against allowed directories\n- All file operations are restricted to allowed directories\n\n## Dependencies\n\n- fastmcp (>=2.2.0, <3.0.0)\n\n## License\n\nMIT"
}