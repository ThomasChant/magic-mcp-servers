{
  "mcp_name": "attilad/bgg-mcp-server",
  "mcp_description": "Facilitates seamless integration with the BoardGameGeek API, enabling efficient retrieval and synchronization of board game data and user collections.",
  "mcp_id": "attilad_bgg-mcp-server",
  "fetch_timestamp": "2025-06-23T01:21:59.969320Z",
  "github_url": "https://github.com/attilad/bgg-mcp-server",
  "repository": {
    "name": "bgg-mcp-server",
    "full_name": "attilad/bgg-mcp-server",
    "description": "MCP server for BoardGameGeek API",
    "html_url": "https://github.com/attilad/bgg-mcp-server",
    "created_at": "2025-04-10T02:28:11Z",
    "updated_at": "2025-04-11T13:00:29Z",
    "pushed_at": "2025-04-11T13:00:25Z",
    "size": 6607,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 1,
    "language": "TypeScript",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "attilad",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/4898253?v=4",
      "html_url": "https://github.com/attilad"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 46774,
      "JavaScript": 4569,
      "Dockerfile": 387
    },
    "language_percentages": {
      "TypeScript": 90.42,
      "JavaScript": 8.83,
      "Dockerfile": 0.75
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "1.0.0"
  },
  "readme": "# BoardGameGeek MCP Server\n\nThis is a Model Context Protocol (MCP) server that integrates with the BoardGameGeek XML API, allowing Claude to search for board games, retrieve game details, get user collections, and more.\n\n## Features\n\nThis server provides the following tools:\n\n1. **search-games**: Search for board games by name\n2. **get-game-details**: Get detailed information about a specific board game\n3. **get-hot-games**: Get the current hottest board games on BoardGameGeek\n4. **get-user-collection**: Get a user's board game collection with filtering options\n7. **sync-user-collection**: Synchronize a user's collection from BoardGameGeek\n5. **get-user-plays**: Get a user's recent board game plays\n8. **sync-user-plays**: Synchronize a user's plays from BoardGameGeek\n6. **get-similar-games**: Get games similar to a specified game\n\n### Feature Checklist\n\n- [x] Search\n- [x] Get Game Details\n- [x] Hot Games\n- [ ] Get User Plays\n- [ ] Sync User Plays\n- [ ] Get User Collection\n- [ ] Sync User Collection\n- [ ] Get Similar Games\n\n## Prerequisites\n\n- Node.js 22.5.0 or higher (required for experimental SQLite support)\n- npm (for dependency management)\n\n## Building and Running\n\n### To build the server:\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the TypeScript code\nnpm run build\n```\n\n### To run the server directly:\n\n```bash\n# The --experimental-sqlite flag is required\nnode --experimental-sqlite build/index.js\n```\n\n### To run with Docker:\n\n```bash\n# Build the Docker image\ndocker build -t bgg-mcp-server .\n\n# Run the container\ndocker run --rm -i bgg-mcp-server\n```\n\n## Testing\n\nTo verify the server is working correctly:\n\n```bash\n# Make sure the server is built first\nnpm run build\n\n# Run the test script with the experimental SQLite flag\nnode --experimental-sqlite test-mcp.js\n```\n\nThe test script will:\n1. Start the MCP server\n2. Test the search-games functionality\n3. Test the get-hot-games functionality\n4. Display results and any errors\n\n## Using with Claude for Desktop\n\n1. Open your Claude for Desktop configuration file:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n2. Add the server configuration for direct Node.js execution:\n\n```json\n{\n  \"mcpServers\": {\n    \"boardgamegeek\": {\n      \"command\": \"node\",\n      \"args\": [\"--experimental-sqlite\", \"/path/to/bgg-mcp-server/build/index.js\"]\n    }\n  }\n}\n```\n\n3. Or use Docker (recommended):\n\n```json\n{\n  \"mcpServers\": {\n    \"boardgamegeek\": {\n      \"command\": \"bash\",\n      \"args\": [\"-c\", \"cd /path/to/bgg-mcp-server && docker build -t bgg-mcp-server . && docker run --rm -i -v \\\"$(pwd)/data:/app/data\\\" bgg-mcp-server\"]\n    }\n  }\n}\n```\n\nNote: the `-v \"$(pwd)/data:/app/data\"` option mounts the local `data` directory to the `/app/data` directory in the Docker container, ensuring that the SQLite database is persisted outside the container.\n\n4. Restart Claude for Desktop\n\n## Example Questions\n\nOnce connected to Claude, you can ask questions like:\n\n- \"What are the new hot games on boardgamegeek\"\n- \"Look up the game Molly House on boardgamegeek\"\n\n\n## Data Storage\n\nThe server uses SQLite for data persistence. All retrieved game data, user collections, and play history are stored in the `data/bgg.sqlite` database file. This:\n\n- Reduces API calls to BoardGameGeek\n- Improves response times for repeated queries\n- Maintains data between server restarts\n\nThe database is automatically created if it doesn't exist and will be populated as you use the server.\n"
}