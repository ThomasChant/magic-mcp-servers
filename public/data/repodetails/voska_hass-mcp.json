{
  "mcp_name": "Home Assistant",
  "mcp_description": "Interact with Home Assistant to control smart home devices, query states, manage automations, and troubleshoot your smart home setup.",
  "mcp_id": "voska_hass-mcp",
  "fetch_timestamp": "2025-06-23T04:49:11.965715Z",
  "github_url": "https://github.com/voska/hass-mcp",
  "repository": {
    "name": "hass-mcp",
    "full_name": "voska/hass-mcp",
    "description": "Home Assistant MCP Server",
    "html_url": "https://github.com/voska/hass-mcp",
    "created_at": "2025-03-16T18:27:30Z",
    "updated_at": "2025-06-23T04:04:45Z",
    "pushed_at": "2025-06-16T13:32:08Z",
    "size": 133,
    "stargazers_count": 111,
    "watchers_count": 111,
    "forks_count": 16,
    "open_issues_count": 3,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "home-assistant",
      "home-automation",
      "mcp",
      "mcp-server"
    ],
    "default_branch": "master",
    "owner": {
      "login": "voska",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/3444419?v=4",
      "html_url": "https://github.com/voska"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 16,
    "subscribers_count": 2,
    "languages": {
      "Python": 99317,
      "Dockerfile": 449
    },
    "language_percentages": {
      "Python": 99.55,
      "Dockerfile": 0.45
    },
    "pull_requests_count": 3,
    "contributors_count": 2
  },
  "readme": "# Hass-MCP\n\nA Model Context Protocol (MCP) server for Home Assistant integration with Claude and other LLMs.\n\n## Overview\n\nHass-MCP enables AI assistants like Claude to interact directly with your Home Assistant instance, allowing them to:\n\n- Query the state of devices and sensors\n- Control lights, switches, and other entities\n- Get summaries of your smart home\n- Troubleshoot automations and entities\n- Search for specific entities\n- Create guided conversations for common tasks\n\n## Screenshots\n\n<img width=\"700\" alt=\"Screenshot 2025-03-16 at 15 48 01\" src=\"https://github.com/user-attachments/assets/5f9773b4-6aef-4139-a978-8ec2cc8c0aea\" />\n<img width=\"400\" alt=\"Screenshot 2025-03-16 at 15 50 59\" src=\"https://github.com/user-attachments/assets/17e1854a-9399-4e6d-92cf-cf223a93466e\" />\n<img width=\"400\" alt=\"Screenshot 2025-03-16 at 15 49 26\" src=\"https://github.com/user-attachments/assets/4565f3cd-7e75-4472-985c-7841e1ad6ba8\" />\n\n## Features\n\n- **Entity Management**: Get states, control devices, and search for entities\n- **Domain Summaries**: Get high-level information about entity types\n- **Automation Support**: List and control automations\n- **Guided Conversations**: Use prompts for common tasks like creating automations\n- **Smart Search**: Find entities by name, type, or state\n- **Token Efficiency**: Lean JSON responses to minimize token usage\n\n## Installation\n\n### Prerequisites\n\n- Home Assistant instance with Long-Lived Access Token\n- One of the following:\n  - Docker (recommended)\n  - Python 3.13+ and [uv](https://github.com/astral-sh/uv)\n\n## Setting Up With Claude Desktop\n\n### Docker Installation (Recommended)\n\n1. Pull the Docker image:\n\n   ```bash\n   docker pull voska/hass-mcp:latest\n   ```\n\n2. Add the MCP server to Claude Desktop:\n\n   a. Open Claude Desktop and go to Settings\n   b. Navigate to Developer > Edit Config\n   c. Add the following configuration to your `claude_desktop_config.json` file:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"hass-mcp\": {\n         \"command\": \"docker\",\n         \"args\": [\n           \"run\",\n           \"-i\",\n           \"--rm\",\n           \"-e\",\n           \"HA_URL\",\n           \"-e\",\n           \"HA_TOKEN\",\n           \"voska/hass-mcp\"\n         ],\n         \"env\": {\n           \"HA_URL\": \"http://homeassistant.local:8123\",\n           \"HA_TOKEN\": \"YOUR_LONG_LIVED_TOKEN\"\n         }\n       }\n     }\n   }\n   ```\n\n   d. Replace `YOUR_LONG_LIVED_TOKEN` with your actual Home Assistant long-lived access token\n   e. Update the `HA_URL`:\n\n   - If running Home Assistant on the same machine: use `http://host.docker.internal:8123` (Docker Desktop on Mac/Windows)\n   - If running Home Assistant on another machine: use the actual IP or hostname\n\n   f. Save the file and restart Claude Desktop\n\n3. The \"Hass-MCP\" tool should now appear in your Claude Desktop tools menu\n\n> **Note**: If you're running Home Assistant in Docker on the same machine, you may need to add `--network host` to the Docker args for the container to access Home Assistant. Alternatively, use the IP address of your machine instead of `host.docker.internal`.\n\n## Other MCP Clients\n\n### Cursor\n\n1. Go to Cursor Settings > MCP > Add New MCP Server\n2. Fill in the form:\n   - Name: `Hass-MCP`\n   - Type: `command`\n   - Command:\n     ```\n     docker run -i --rm -e HA_URL=http://homeassistant.local:8123 -e HA_TOKEN=YOUR_LONG_LIVED_TOKEN voska/hass-mcp\n     ```\n   - Replace `YOUR_LONG_LIVED_TOKEN` with your actual Home Assistant token\n   - Update the HA_URL to match your Home Assistant instance address\n3. Click \"Add\" to save\n\n### Claude Code (CLI)\n\nTo use with Claude Code CLI, you can add the MCP server directly using the `mcp add` command:\n\n**Using Docker (recommended):**\n\n```bash\nclaude mcp add hass-mcp -e HA_URL=http://homeassistant.local:8123 -e HA_TOKEN=YOUR_LONG_LIVED_TOKEN -- docker run -i --rm -e HA_URL -e HA_TOKEN voska/hass-mcp\n```\n\nReplace `YOUR_LONG_LIVED_TOKEN` with your actual Home Assistant token and update the HA_URL to match your Home Assistant instance address.\n\n## Usage Examples\n\nHere are some examples of prompts you can use with Claude once Hass-MCP is set up:\n\n- \"What's the current state of my living room lights?\"\n- \"Turn off all the lights in the kitchen\"\n- \"List all my sensors that contain temperature data\"\n- \"Give me a summary of my climate entities\"\n- \"Create an automation that turns on the lights at sunset\"\n- \"Help me troubleshoot why my bedroom motion sensor automation isn't working\"\n- \"Search for entities related to my living room\"\n\n## Available Tools\n\nHass-MCP provides several tools for interacting with Home Assistant:\n\n- `get_version`: Get the Home Assistant version\n- `get_entity`: Get the state of a specific entity with optional field filtering\n- `entity_action`: Perform actions on entities (turn on, off, toggle)\n- `list_entities`: Get a list of entities with optional domain filtering and search\n- `search_entities_tool`: Search for entities matching a query\n- `domain_summary_tool`: Get a summary of a domain's entities\n- `list_automations`: Get a list of all automations\n- `call_service_tool`: Call any Home Assistant service\n- `restart_ha`: Restart Home Assistant\n- `get_history`: Get the state history of an entity\n- `get_error_log`: Get the Home Assistant error log\n\n## Prompts for Guided Conversations\n\nHass-MCP includes several prompts for guided conversations:\n\n- `create_automation`: Guide for creating Home Assistant automations based on trigger type\n- `debug_automation`: Troubleshooting help for automations that aren't working\n- `troubleshoot_entity`: Diagnose issues with entities\n- `routine_optimizer`: Analyze usage patterns and suggest optimized routines based on actual behavior\n- `automation_health_check`: Review all automations, find conflicts, redundancies, or improvement opportunities\n- `entity_naming_consistency`: Audit entity names and suggest standardization improvements\n- `dashboard_layout_generator`: Create optimized dashboards based on user preferences and usage patterns\n\n## Available Resources\n\nHass-MCP provides the following resource endpoints:\n\n- `hass://entities/{entity_id}`: Get the state of a specific entity\n- `hass://entities/{entity_id}/detailed`: Get detailed information about an entity with all attributes\n- `hass://entities`: List all Home Assistant entities grouped by domain\n- `hass://entities/domain/{domain}`: Get a list of entities for a specific domain\n- `hass://search/{query}/{limit}`: Search for entities matching a query with custom result limit\n\n## Development\n\n### Running Tests\n\n```bash\nuv run pytest tests/\n```\n\n## License\n\n[MIT License](LICENSE)\n"
}