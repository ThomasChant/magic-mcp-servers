{
  "mcp_name": "v9rt3x/cs2-rcon-mcp",
  "mcp_description": "Facilitates remote management and monitoring of Counter-Strike 2 servers using RCON commands through a Model Context Protocol interface.",
  "mcp_id": "v9rt3x_cs2-rcon-mcp",
  "fetch_timestamp": "2025-06-23T09:14:43.394906Z",
  "github_url": "https://github.com/v9rt3x/cs2-rcon-mcp",
  "repository": {
    "name": "cs2-rcon-mcp",
    "full_name": "v9rt3x/cs2-rcon-mcp",
    "description": "CS2 RCON MCP - Server management tool for Counter-Strike 2",
    "html_url": "https://github.com/v9rt3x/cs2-rcon-mcp",
    "created_at": "2025-04-16T16:13:20Z",
    "updated_at": "2025-06-10T13:31:05Z",
    "pushed_at": "2025-05-28T19:49:28Z",
    "size": 1239,
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks_count": 1,
    "open_issues_count": 1,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "v9rt3x",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/25821713?v=4",
      "html_url": "https://github.com/v9rt3x"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 2,
    "languages": {
      "Python": 15116,
      "Dockerfile": 470
    },
    "language_percentages": {
      "Python": 96.98,
      "Dockerfile": 3.02
    },
    "pull_requests_count": 1,
    "contributors_count": 2,
    "tags": [
      {
        "name": "v1.0.1",
        "commit_sha": "dd027410d2eb63a0ba272b833561f3ca4907c558"
      },
      {
        "name": "v1.0.0",
        "commit_sha": "e82bc5fe5694ef523aeae7400304e7a6a38f5061"
      }
    ],
    "latest_version": "v1.0.1"
  },
  "readme": "# CS2 RCON MCP\n\n[![Python](https://img.shields.io/badge/python-3.8%2B-blue.svg)](https://www.python.org/downloads/)\n[![MCP Compatible](https://img.shields.io/badge/MCP-Compatible-green.svg)](https://cursor.sh)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nA Model Context Protocol server for CS2 RCON management.\n\n## Description\n\nThis project provides a Model Context Protocol (MCP) server interface for managing CS2 game servers via RCON. It allows remote control and monitoring of CS2 servers through a standardized protocol.\n\n![CS2 RCON MCP Demo](cs2-rcon-mcp.gif)\n\n## Features\n\n- Manage your CS2 server in natural language\n- RCON command execution\n- Manage workshop maps (host, list, change) - [Explore Workshop Maps](https://steamcommunity.com/app/730/workshop/)\n- SSE-based communication\n- Docker support\n\n## Available Tools\n\n| Tool | Short Description |\n|------|-------------------|\n| `rcon` | Execute any RCON command |\n| `status` | Get current server status |\n| `list_workshop_maps` | List all workshop maps on the server |\n| `host_workshop_map` | Host a workshop map by its ID |\n| `workshop_changelevel` | Change the map to a given workshop map |\n\n## Installation\n\n### Environment Variables\n\n- `HOST`: CS2 server IP\n- `SERVER_PORT`: CS2 server port\n- `RCON_PASSWORD`: RCON password\n\n### Docker (recommended)\n\nPull the Docker image from GitHub Container Registry:\n\n```bash\ndocker pull ghcr.io/v9rt3x/cs2-rcon-mcp:latest\n```\n\n### Docker Environment Variables\n\nWhen running with Docker, you can set the environment variables in two ways:\n\n1. **Directly in the command**:\n   ```bash\n   docker run -p 8080:8080 \\\n     -e HOST=your_server_ip \\\n     -e SERVER_PORT=your_server_port \\\n     -e RCON_PASSWORD=your_password \\\n     ghcr.io/v9rt3x/cs2-rcon-mcp:latest\n   ```\n\n2. **Using a `.server-env` file**:\n   Create a file named `.server-env` with the following content:\n   ```\n   HOST=your_server_ip\n   SERVER_PORT=your_server_port\n   RCON_PASSWORD=your_password\n   ```\n\n   Then run the container like this:\n   ```bash\n   docker run -p 8080:8080 --env-file .server-env ghcr.io/v9rt3x/cs2-rcon-mcp:latest\n   ```\n\nThis provides users with an alternative method to set environment variables, making it easier to manage sensitive information like passwords.\n\n### Connecting from Visual Studio Code (GitHub Copilot)\n\nTo configure Visual Studio Code to work with the MCP server, follow these steps:\n\n1. **Start the MCP Server**: Ensure that your MCP server is running before attempting to connect from VS Code.\n\n2. **Open Visual Studio Code**: Launch VS Code and ensure that you have the GitHub Copilot extension installed and configured.\n\n3. **Configure GitHub Copilot**:\n   - Change the mode from \"Ask\" to \"Agent\" mode.\n\n4. **Add MCP Server Configuration**:\n   - Click on the toolbox icon in the upper left corner of the Copilot prompt.\n   - Select \"Add MCP Server\" and choose the option for **HTTP - server-sent events**.\n\n5. **Enter the Server URL**:\n   - For the URL, input: `http://localhost:8080/cs2server/sse`. This is the endpoint for the MCP server's SSE connection.\n\n### Alternative: Connecting from Cursor (or any other MCP-Client)\n\n1. Start the MCP server\n2. Configure Cursor's MCP settings by creating or updating `~/.cursor/mcp.json`:\n   ```json\n   {\n     \"mcpServers\": {\n       \"cs2server\": {\n         \"url\": \"http://localhost:8080/cs2server/sse\"\n       }\n     }\n   }\n   ```\n3. In Cursor, open the MCP panel (usually in the sidebar)\n4. The server should automatically connect using the configured URL\n\nOnce connected, you can manage your server in natural language.\n\nExample prompts:\n\n1. \"Add 5 bots to the server and start a competitive match on de_dust2\"\n2. \"What's the current server status? How many players are connected and what map are we on?\"\n\nHappy fragging! ðŸ˜Š\n"
}