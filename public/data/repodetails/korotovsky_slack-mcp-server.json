{
  "mcp_name": "Slack",
  "mcp_description": "The most powerful MCP server for Slack Workspaces. This integration supports both Stdio and SSE transports, proxy settings and does not require any permissions or bots being created or approved by Workspace admins 😏.",
  "mcp_id": "korotovsky_slack-mcp-server",
  "fetch_timestamp": "2025-06-23T08:29:25.394525Z",
  "github_url": "https://github.com/korotovsky/slack-mcp-server",
  "repository": {
    "name": "slack-mcp-server",
    "full_name": "korotovsky/slack-mcp-server",
    "description": "The most powerful MCP Slack Server with Stdio and SSE transports, Proxy, bots or no permission requirements in workspace, DMs and Group DMs support",
    "html_url": "https://github.com/korotovsky/slack-mcp-server",
    "created_at": "2025-04-12T11:31:34Z",
    "updated_at": "2025-06-23T07:21:43Z",
    "pushed_at": "2025-06-21T18:08:33Z",
    "size": 86,
    "stargazers_count": 149,
    "watchers_count": 149,
    "forks_count": 13,
    "open_issues_count": 2,
    "language": "Go",
    "license": "MIT License",
    "topics": [
      "assistants",
      "llm",
      "mcp",
      "mcp-server",
      "slack",
      "slack-api"
    ],
    "default_branch": "master",
    "owner": {
      "login": "korotovsky",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/104727?v=4",
      "html_url": "https://github.com/korotovsky"
    },
    "has_issues": true,
    "has_projects": false,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 13,
    "subscribers_count": 3,
    "languages": {
      "Go": 30364,
      "Makefile": 4573,
      "JavaScript": 1065,
      "Dockerfile": 850
    },
    "language_percentages": {
      "Go": 82.39,
      "Makefile": 12.41,
      "JavaScript": 2.89,
      "Dockerfile": 2.31
    },
    "pull_requests_count": 12,
    "contributors_count": 6,
    "latest_release": {
      "tag_name": "v1.1.14",
      "name": "v1.1.14",
      "published_at": "2025-06-21T18:09:51Z",
      "body": "## What's Changed\n* make limit optional for channels_list by @korotovsky in https://github.com/korotovsky/slack-mcp-server/pull/22\n\n\n**Full Changelog**: https://github.com/korotovsky/slack-mcp-server/compare/v1.1.13...v1.1.14",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v1.1.14",
        "commit_sha": "6de4780d83677b340814f7289286e14dd983b0bc"
      },
      {
        "name": "v1.1.13",
        "commit_sha": "ee35ca2c9fd267a13e6e28e93bbc405ac0eaf151"
      },
      {
        "name": "v1.1.12",
        "commit_sha": "4e2d12d6d04fce582aad6464699638a83eb5ca0a"
      },
      {
        "name": "v1.1.11",
        "commit_sha": "e1c6f9177b173b158d7ab3d8cc18ab464a28857d"
      },
      {
        "name": "v1.1.10",
        "commit_sha": "cb55a8cafce0be47eae12c65713ffb072cebd5e0"
      },
      {
        "name": "v1.1.8",
        "commit_sha": "39e5d7f0ff822ffa6b8e984edbad5b76a618da18"
      },
      {
        "name": "v1.1.7",
        "commit_sha": "66fdb8af39d953d116488960be327e7411714976"
      },
      {
        "name": "v1.1.6",
        "commit_sha": "dc10a82e56c13843321788eb47ebed8796b0dfd9"
      },
      {
        "name": "v1.1.5",
        "commit_sha": "4b0721b604c56aa83f8482270ef3e9467da0326b"
      },
      {
        "name": "v1.1.4",
        "commit_sha": "a3dfab1e7732b80c256a4ce273a2558b202818ae"
      }
    ],
    "latest_version": "v1.1.14"
  },
  "readme": "# Slack MCP Server\n\nModel Context Protocol (MCP) server for Slack Workspaces. This integration supports both Stdio and SSE transports, proxy settings and does not require any permissions or bots being created or approved by Workspace admins 😏.\n\n> [!IMPORTANT]  \n> We need your support! Each month, over 10,000 engineers visit this repository, and more than 2,000 are already using it.\n> \n> If you appreciate the work our [contributors](https://github.com/korotovsky/slack-mcp-server/graphs/contributors) have put into this project, please consider giving the repository a star.\n\n### Feature Demo\n\n![ezgif-316311ee04f444](https://github.com/user-attachments/assets/35dc9895-e695-4e56-acdc-1a46d6520ba0)\n\n## Tools\n\n1. `conversations_history`\n  - Get messages from the channel by channelID\n  - Required inputs:\n    - `channel_id` (string): ID of the channel in format Cxxxxxxxxxx or its name starting with #... aka #general.\n    - `include_activity_messages` (bool, default: false): If true, the response will include activity messages such as 'channel_join' or 'channel_leave'. Default is boolean false.\n    - `cursor` (string, default: \"\"): Cursor for pagination. Use the value of the last row and column in the response as next_cursor field returned from the previous request.\n    - `limit` (string, default: 28): Limit of messages to fetch.\n  - Returns: List of messages with timestamps, user IDs, and text content\n\n2. `conversations_replies`\n  - Get a thread of messages posted to a conversation by channelID and thread_ts\n  - Required inputs:\n    - `channel_id` (string): ID of the channel in format Cxxxxxxxxxx or its name starting with #... aka #general.\n    - `thread_ts` (string): Unique identifier of either a thread’s parent message or a message in the thread. ts must be the timestamp in format 1234567890.123456 of an existing message with 0 or more replies.\n    - `include_activity_messages` (bool, default: false): If true, the response will include activity messages such as 'channel_join' or 'channel_leave'. Default is boolean false.\n    - `cursor` (string, default: \"\"): Cursor for pagination. Use the value of the last row and column in the response as next_cursor field returned from the previous request.\n    - `limit` (string, default: 28): Limit of messages to fetch.\n  - Returns: List of replies with timestamps, user IDs, and text content\n\n3. `channels_list`\n  - Get list of channels\n  - Required inputs:\n    - `channel_types` (string): Comma-separated channel types. Allowed values: 'mpim', 'im', 'public_channel', 'private_channel'. Example: 'public_channel,private_channel,im'.\n    - `sort` (string): Type of sorting. Allowed values: 'popularity' - sort by number of members/participants in each channel.\n    - `limit` (number, default: 100): Limit of channels to fetch.\n    - `cursor` (string): Cursor for pagination. Use the value of the last row and column in the response as next_cursor field returned from the previous request.\n  - Returns: List of channels\n\n## Setup Guide\n\n### 1. Authentication Setup\n\nOpen up your Slack in your browser and login.\n\n#### Lookup `SLACK_MCP_XOXC_TOKEN`\n\n- Open your browser's Developer Console.\n- In Firefox, under `Tools -> Browser Tools -> Web Developer tools` in the menu bar\n- In Chrome, click the \"three dots\" button to the right of the URL Bar, then select\n`More Tools -> Developer Tools`\n- Switch to the console tab.\n- Type \"allow pasting\" and press ENTER.\n- Paste the following snippet and press ENTER to execute:\n  `JSON.parse(localStorage.localConfig_v2).teams[document.location.pathname.match(/^\\/client\\/([A-Z0-9]+)/)[1]].token`\n\nToken value is printed right after the executed command (it starts with\n`xoxc-`), save it somewhere for now.\n\n#### Lookup `SLACK_MCP_XOXD_TOKEN`\n\n - Switch to \"Application\" tab and select \"Cookies\" in the left navigation pane.\n - Find the cookie with the name `d`.  That's right, just the letter `d`.\n - Double-click the Value of this cookie.\n - Press Ctrl+C or Cmd+C to copy it's value to clipboard.\n - Save it for later.\n\n### 2. Installation\n\nChoose one of these installation methods:\n\n- [npx](#Using-npx)\n- [Docker](#Using-Docker)\n\n### 3. Configuration and Usage\n\nYou can configure the MCP server using command line arguments and environment variables.\n\n#### Using npx\n\nIf you have npm installed, this is the fastest way to get started with `slack-mcp-server` on Claude Desktop.\n\nOpen your `claude_desktop_config.json` and add the mcp server to the list of `mcpServers`:\n``` json\n{\n  \"mcpServers\": {\n    \"slack\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"slack-mcp-server@latest\",\n        \"--transport\",\n        \"stdio\"\n      ],\n      \"env\": {\n        \"SLACK_MCP_XOXC_TOKEN\": \"xoxc-...\",\n        \"SLACK_MCP_XOXD_TOKEN\": \"xoxd-...\"\n      }\n    }\n  }\n}\n```\n\n<details>\n<summary>Or, stdio transport with docker.</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"slack\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"SLACK_MCP_XOXC_TOKEN\",\n        \"-e\",\n        \"SLACK_MCP_XOXD_TOKEN\",\n        \"ghcr.io/korotovsky/slack-mcp-server\",\n        \"mcp-server\",\n        \"--transport\",\n        \"stdio\"\n      ],\n      \"env\": {\n        \"SLACK_MCP_XOXC_TOKEN\": \"xoxc-...\",\n        \"SLACK_MCP_XOXD_TOKEN\": \"xoxd-...\"\n      }\n    }\n  }\n}\n```\n\nPlease see [Docker](#Using-Docker) for more information.\n</details>\n\n#### Using npx with `sse` transport:\n\nIn case you would like to run it in `sse` mode, then you  should use `mcp-remote` wrapper for Claude Desktop and deploy/expose MCP server somewhere e.g. with `ngrok` or `docker-compose`.\n\n```json\n{\n  \"mcpServers\": {\n    \"slack\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-remote\",\n        \"https://x.y.z.q:3001/sse\",\n        \"--header\",\n        \"Authorization: Bearer ${SLACK_MCP_SSE_API_KEY}\"\n      ],\n      \"env\": {\n        \"SLACK_MCP_SSE_API_KEY\": \"my-$$e-$ecret\"\n      }\n    }\n  }\n}\n```\n\n<details>\n<summary>Or, sse transport for Windows.</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"slack\": {\n      \"command\": \"C:\\\\Progra~1\\\\nodejs\\\\npx.cmd\",\n      \"args\": [\n        \"-y\",\n        \"mcp-remote\",\n        \"https://x.y.z.q:3001/sse\",\n        \"--header\",\n        \"Authorization: Bearer ${SLACK_MCP_SSE_API_KEY}\"\n      ],\n      \"env\": {\n        \"SLACK_MCP_SSE_API_KEY\": \"my-$$e-$ecret\"\n      }\n    }\n  }\n}\n```\n</details>\n\n#### TLS and Exposing to the Internet\n\nThere are several reasons why you might need to setup HTTPS for your SSE.\n- `mcp-remote` is capable to handle only https schemes;\n- it is generally a good practice to use TLS for any service exposed to the internet;\n\nYou could use `ngrok`:\n\n```bash\nngrok http 3001\n```\n\nand then use the endpoint `https://903d-xxx-xxxx-xxxx-10b4.ngrok-free.app` for your `mcp-remote` argument.\n\n#### Using Docker\n\nFor detailed information about all environment variables, see [Environment Variables](https://github.com/korotovsky/slack-mcp-server?tab=readme-ov-file#environment-variables).\n\n```bash\nexport SLACK_MCP_XOXC_TOKEN=xoxc-...\nexport SLACK_MCP_XOXD_TOKEN=xoxd-...\n\ndocker pull ghcr.io/korotovsky/slack-mcp-server:latest\ndocker run -i --rm \\\n  -e SLACK_MCP_XOXC_TOKEN \\\n  -e SLACK_MCP_XOXD_TOKEN \\\n  slack-mcp-server mcp-server --transport stdio\n```\n\nOr, the docker-compose way:\n\n```bash\nwget -O docker-compose.yml https://github.com/korotovsky/slack-mcp-server/releases/latest/download/docker-compose.yml\nwget -O .env https://github.com/korotovsky/slack-mcp-server/releases/latest/download/default.env.dist\nnano .env # Edit .env file with your tokens from step 1 of the setup guide\ndocker-compose up -d\n```\n\n#### Console Arguments\n\n| Argument              | Required ? | Description                                                              |\n|-----------------------|------------|--------------------------------------------------------------------------|\n| `--transport` or `-t` | Yes        | Select transport for the MCP Server, possible values are: `stdio`, `sse` |\n\n#### Environment Variables\n\n| Variable                       | Required ? | Default     | Description                                                                   |\n|--------------------------------|------------|-------------|-------------------------------------------------------------------------------|\n| `SLACK_MCP_XOXC_TOKEN`         | Yes        | `nil`       | Authentication data token field `token` from POST data field-set (`xoxc-...`) |\n| `SLACK_MCP_XOXD_TOKEN`         | Yes        | `nil`       | Authentication data token from cookie `d` (`xoxd-...`)                        |\n| `SLACK_MCP_SERVER_PORT`        | No         | `3001`      | Port for the MCP server to listen on                                          |\n| `SLACK_MCP_SERVER_HOST`        | No         | `127.0.0.1` | Host for the MCP server to listen on                                          |\n| `SLACK_MCP_SSE_API_KEY`        | No         | `nil`       | Authorization Bearer token when `transport` is `sse`                          |\n| `SLACK_MCP_PROXY`              | No         | `nil`       | Proxy URL for the MCP server to use                                           |\n| `SLACK_MCP_SERVER_CA`          | No         | `nil`       | Path to the CA certificate of the trust store                                 |\n| `SLACK_MCP_SERVER_CA_INSECURE` | No         | `false`     | Trust all insecure requests (NOT RECOMMENDED)                                 |\n\n### Debugging Tools\n\n```bash\n# Run the inspector with stdio transport\nnpx @modelcontextprotocol/inspector go run mcp/mcp-server.go --transport stdio\n\n# View logs\ntail -n 20 -f ~/Library/Logs/Claude/mcp*.log\n```\n\n## Security\n\n- Never share API tokens\n- Keep .env files secure and private\n\n## License\n\nLicensed under MIT - see [LICENSE](LICENSE) file. This is not an official Slack product.\n"
}