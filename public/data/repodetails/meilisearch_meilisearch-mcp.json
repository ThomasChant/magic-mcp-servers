{
  "mcp_name": "Meilisearch",
  "mcp_description": "Interact & query with Meilisearch (Full-text & semantic search API)",
  "mcp_id": "meilisearch_meilisearch-mcp",
  "fetch_timestamp": "2025-06-23T06:40:09.994323Z",
  "github_url": "https://github.com/meilisearch/meilisearch-mcp",
  "repository": {
    "name": "meilisearch-mcp",
    "full_name": "meilisearch/meilisearch-mcp",
    "description": "A Model Context Protocol (MCP) server for interacting with Meilisearch through LLM interfaces.",
    "html_url": "https://github.com/meilisearch/meilisearch-mcp",
    "created_at": "2024-12-23T14:53:05Z",
    "updated_at": "2025-06-22T21:58:09Z",
    "pushed_at": "2025-06-20T15:37:07Z",
    "size": 192,
    "stargazers_count": 99,
    "watchers_count": 99,
    "forks_count": 14,
    "open_issues_count": 4,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "agent",
      "mcp",
      "meilisearch",
      "modelcontextprotocol",
      "rag",
      "search",
      "search-api"
    ],
    "default_branch": "main",
    "owner": {
      "login": "meilisearch",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/43250847?v=4",
      "html_url": "https://github.com/meilisearch"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 14,
    "subscribers_count": 2,
    "languages": {
      "Python": 82742,
      "Dockerfile": 684
    },
    "language_percentages": {
      "Python": 99.18,
      "Dockerfile": 0.82
    },
    "pull_requests_count": 42,
    "contributors_count": 3
  },
  "readme": "<div align=\"center\">\n  <img src=\"https://github.com/meilisearch/meilisearch/blob/main/assets/logo.svg\" alt=\"Meilisearch\" width=\"200\" height=\"200\" />\n</div>\n\n<h1 align=\"center\">Meilisearch MCP Server</h1>\n\n<h4 align=\"center\">\n  <a href=\"https://github.com/meilisearch/meilisearch\">Meilisearch</a> |\n  <a href=\"https://www.meilisearch.com/cloud?utm_campaign=oss&utm_source=github&utm_medium=meilisearch-mcp\">Meilisearch Cloud</a> |\n  <a href=\"https://www.meilisearch.com/docs\">Documentation</a> |\n  <a href=\"https://discord.meilisearch.com\">Discord</a>\n</h4>\n\n<p align=\"center\">\n  <a href=\"https://pypi.org/project/meilisearch-mcp/\"><img src=\"https://img.shields.io/pypi/v/meilisearch-mcp.svg\" alt=\"PyPI version\"></a>\n  <a href=\"https://pypi.org/project/meilisearch-mcp/\"><img src=\"https://img.shields.io/pypi/pyversions/meilisearch-mcp.svg\" alt=\"Python Versions\"></a>\n  <a href=\"https://github.com/meilisearch/meilisearch-mcp/actions\"><img src=\"https://github.com/meilisearch/meilisearch-mcp/workflows/Test%20and%20Lint/badge.svg\" alt=\"Tests\"></a>\n  <a href=\"https://github.com/meilisearch/meilisearch-mcp/blob/main/LICENSE\"><img src=\"https://img.shields.io/badge/license-MIT-informational\" alt=\"License\"></a>\n  <a href=\"https://pypi.org/project/meilisearch-mcp/\"><img src=\"https://img.shields.io/pypi/dm/meilisearch-mcp\" alt=\"Downloads\"></a>\n</p>\n\n<p align=\"center\">⚡ Connect any LLM to Meilisearch and supercharge your AI with lightning-fast search capabilities! 🔍</p>\n\n## 🤔 What is this?\n\nThe Meilisearch MCP Server is a Model Context Protocol server that enables any MCP-compatible client (including Claude, OpenAI agents, and other LLMs) to interact with Meilisearch. This stdio-based server allows AI assistants to manage search indices, perform searches, and handle your data through natural conversation.\n\n**Why use this?**\n- 🤖 **Universal Compatibility** - Works with any MCP client, not just Claude\n- 🗣️ **Natural Language Control** - Manage Meilisearch through conversation with any LLM\n- 🚀 **Zero Learning Curve** - No need to learn Meilisearch's API\n- 🔧 **Full Feature Access** - All Meilisearch capabilities at your fingertips\n- 🔄 **Dynamic Connections** - Switch between Meilisearch instances on the fly\n- 📡 **stdio Transport** - Currently uses stdio; native Meilisearch MCP support coming soon!\n\n## ✨ Key Features\n\n- 📊 **Index & Document Management** - Create, update, and manage search indices\n- 🔍 **Smart Search** - Search across single or multiple indices with advanced filtering\n- ⚙️ **Settings Configuration** - Fine-tune search relevancy and performance\n- 📈 **Task Monitoring** - Track indexing progress and system operations\n- 🔐 **API Key Management** - Secure access control\n- 🏥 **Health Monitoring** - Keep tabs on your Meilisearch instance\n- 🐍 **Python Implementation** - [TypeScript version also available](https://github.com/devlimelabs/meilisearch-ts-mcp)\n\n## 🚀 Quick Start\n\nGet up and running in just 3 steps!\n\n### 1️⃣ Install the package\n\n```bash\n# Using pip\npip install meilisearch-mcp\n\n# Or using uvx (recommended)\nuvx -n meilisearch-mcp\n```\n\n### 2️⃣ Configure Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"meilisearch\": {\n      \"command\": \"uvx\",\n      \"args\": [\"-n\", \"meilisearch-mcp\"]\n    }\n  }\n}\n```\n\n### 3️⃣ Start Meilisearch\n\n```bash\n# Using Docker (recommended)\ndocker run -d -p 7700:7700 getmeili/meilisearch:v1.6\n\n# Or using Homebrew\nbrew install meilisearch\nmeilisearch\n```\n\nThat's it! Now you can ask your AI assistant to search and manage your Meilisearch data! 🎉\n\n## 📚 Examples\n\n### 💬 Talk to your AI assistant naturally:\n\n```\nYou: \"Create a new index called 'products' with 'id' as the primary key\"\nAI: I'll create that index for you... ✓ Index 'products' created successfully!\n\nYou: \"Add some products to the index\"\nAI: I'll add those products... ✓ Added 5 documents to 'products' index\n\nYou: \"Search for products under $50 with 'electronics' in the category\"\nAI: I'll search for those products... Found 12 matching products!\n```\n\n### 🔍 Advanced Search Example:\n\n```\nYou: \"Search across all my indices for 'machine learning' and sort by date\"\nAI: Searching across all indices... Found 47 results from 3 indices:\n- 'blog_posts': 23 articles about ML\n- 'documentation': 15 technical guides  \n- 'tutorials': 9 hands-on tutorials\n```\n\n## 🔧 Installation\n\n### Prerequisites\n\n- Python ≥ 3.9\n- Running Meilisearch instance\n- MCP-compatible client (Claude Desktop, OpenAI agents, etc.)\n\n### From PyPI\n\n```bash\npip install meilisearch-mcp\n```\n\n### From Source (for development)\n\n```bash\n# Clone repository\ngit clone https://github.com/meilisearch/meilisearch-mcp.git\ncd meilisearch-mcp\n\n# Create virtual environment and install\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\nuv pip install -e .\n```\n\n### Using Docker\n\nPerfect for containerized environments like n8n workflows!\n\n#### From Docker Hub\n\n```bash\n# Pull the latest image\ndocker pull getmeili/meilisearch-mcp:latest\n\n# Or a specific version\ndocker pull getmeili/meilisearch-mcp:0.5.0\n\n# Run the container\ndocker run -it \\\n  -e MEILI_HTTP_ADDR=http://your-meilisearch:7700 \\\n  -e MEILI_MASTER_KEY=your-master-key \\\n  getmeili/meilisearch-mcp:latest\n```\n\n#### Build from Source\n\n```bash\n# Build your own image\ndocker build -t meilisearch-mcp .\ndocker run -it \\\n  -e MEILI_HTTP_ADDR=http://your-meilisearch:7700 \\\n  -e MEILI_MASTER_KEY=your-master-key \\\n  meilisearch-mcp\n```\n\n#### Integration with n8n\n\nFor n8n workflows, you can use the Docker image directly in your setup:\n```yaml\nmeilisearch-mcp:\n  image: getmeili/meilisearch-mcp:latest\n  environment:\n    - MEILI_HTTP_ADDR=http://meilisearch:7700\n    - MEILI_MASTER_KEY=masterKey\n```\n\n## 🛠️ What Can You Do?\n\n<details>\n<summary><b>🔗 Connection Management</b></summary>\n\n- View current connection settings\n- Switch between Meilisearch instances dynamically\n- Update API keys on the fly\n\n</details>\n\n<details>\n<summary><b>📁 Index Operations</b></summary>\n\n- Create new indices with custom primary keys\n- List all indices with stats\n- Delete indices and their data\n- Get detailed index metrics\n\n</details>\n\n<details>\n<summary><b>📄 Document Management</b></summary>\n\n- Add or update documents\n- Retrieve documents with pagination\n- Bulk import data\n\n</details>\n\n<details>\n<summary><b>🔍 Search Capabilities</b></summary>\n\n- Search with filters, sorting, and facets\n- Multi-index search\n- Semantic search with vectors\n- Hybrid search (keyword + semantic)\n\n</details>\n\n<details>\n<summary><b>⚙️ Settings & Configuration</b></summary>\n\n- Configure ranking rules\n- Set up faceting and filtering\n- Manage searchable attributes\n- Customize typo tolerance\n\n</details>\n\n<details>\n<summary><b>🔐 Security</b></summary>\n\n- Create and manage API keys\n- Set granular permissions\n- Monitor key usage\n\n</details>\n\n<details>\n<summary><b>📊 Monitoring & Health</b></summary>\n\n- Health checks\n- System statistics\n- Task monitoring\n- Version information\n\n</details>\n\n## 🌍 Environment Variables\n\nConfigure default connection settings:\n\n```bash\nMEILI_HTTP_ADDR=http://localhost:7700  # Default Meilisearch URL\nMEILI_MASTER_KEY=your_master_key       # Optional: Default API key\n```\n\n## 💻 Development\n\n### Setting Up Development Environment\n\n1. **Start Meilisearch**:\n   ```bash\n   docker run -d -p 7700:7700 getmeili/meilisearch:v1.6\n   ```\n\n2. **Install Development Dependencies**:\n   ```bash\n   uv pip install -r requirements-dev.txt\n   ```\n\n3. **Run Tests**:\n   ```bash\n   python -m pytest tests/ -v\n   ```\n\n4. **Format Code**:\n   ```bash\n   black src/ tests/\n   ```\n\n### Testing with MCP Inspector\n\n```bash\nnpx @modelcontextprotocol/inspector python -m src.meilisearch_mcp\n```\n\n## 🤝 Community & Support\n\nWe'd love to hear from you! Here's how to get help and connect:\n\n- 💬 [Join our Discord](https://discord.meilisearch.com) - Chat with the community\n- 🐛 [Report Issues](https://github.com/meilisearch/meilisearch-mcp/issues) - Found a bug? Let us know!\n- 💡 [Feature Requests](https://github.com/meilisearch/meilisearch-mcp/issues) - Have an idea? We're listening!\n- 📖 [Meilisearch Docs](https://www.meilisearch.com/docs) - Learn more about Meilisearch\n\n## 🤗 Contributing\n\nWe welcome contributions! Here's how to get started:\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Write tests for your changes\n4. Make your changes and run tests\n5. Format your code with `black`\n6. Commit your changes (`git commit -m 'Add amazing feature'`)\n7. Push to your branch (`git push origin feature/amazing-feature`)\n8. Open a Pull Request\n\nSee our [Contributing Guidelines](#contributing-1) for more details.\n\n## 📦 Release Process\n\nThis project uses automated versioning and publishing. When the version in `pyproject.toml` changes on the `main` branch, the package is automatically published to PyPI.\n\nSee the [Release Process](#release-process-1) section for detailed instructions.\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n---\n\n<p align=\"center\">\n  <b>Meilisearch</b> is an open-source search engine that offers a delightful search experience.<br>\n  Learn more about Meilisearch at <a href=\"https://www.meilisearch.com\">meilisearch.com</a>\n</p>\n\n---\n\n<details>\n<summary><h2>📖 Full Documentation</h2></summary>\n\n### Available Tools\n\n#### Connection Management\n- `get-connection-settings`: View current Meilisearch connection URL and API key status\n- `update-connection-settings`: Update URL and/or API key to connect to a different instance\n\n#### Index Management\n- `create-index`: Create a new index with optional primary key\n- `list-indexes`: List all available indexes\n- `delete-index`: Delete an existing index and all its documents\n- `get-index-metrics`: Get detailed metrics for a specific index\n\n#### Document Operations\n- `get-documents`: Retrieve documents from an index with pagination\n- `add-documents`: Add or update documents in an index\n\n#### Search\n- `search`: Flexible search across single or multiple indices with filtering and sorting options\n\n#### Settings Management\n- `get-settings`: View current settings for an index\n- `update-settings`: Update index settings (ranking, faceting, etc.)\n\n#### API Key Management\n- `get-keys`: List all API keys\n- `create-key`: Create new API key with specific permissions\n- `delete-key`: Delete an existing API key\n\n#### Task Management\n- `get-task`: Get information about a specific task\n- `get-tasks`: List tasks with optional filters\n- `cancel-tasks`: Cancel pending or enqueued tasks\n- `delete-tasks`: Delete completed tasks\n\n#### System Monitoring\n- `health-check`: Basic health check\n- `get-health-status`: Comprehensive health status\n- `get-version`: Get Meilisearch version information\n- `get-stats`: Get database statistics\n- `get-system-info`: Get system-level information\n\n### Development Setup\n\n#### Prerequisites\n\n1. **Start Meilisearch server**:\n   ```bash\n   # Using Docker (recommended for development)\n   docker run -d -p 7700:7700 getmeili/meilisearch:v1.6\n   \n   # Or using brew (macOS)\n   brew install meilisearch\n   meilisearch\n   \n   # Or download from https://github.com/meilisearch/meilisearch/releases\n   ```\n\n2. **Install development tools**:\n   ```bash\n   # Install uv for Python package management\n   pip install uv\n   \n   # Install Node.js for MCP Inspector testing\n   # Visit https://nodejs.org/ or use your package manager\n   ```\n\n### Running Tests\n\nThis project includes comprehensive integration tests that verify MCP tool functionality:\n\n```bash\n# Run all tests\npython -m pytest tests/ -v\n\n# Run specific test file\npython -m pytest tests/test_mcp_client.py -v\n\n# Run tests with coverage report\npython -m pytest --cov=src tests/\n\n# Run tests in watch mode (requires pytest-watch)\npytest-watch tests/\n```\n\n**Important**: Tests require a running Meilisearch instance on `http://localhost:7700`.\n\n### Code Quality\n\n```bash\n# Format code with Black\nblack src/ tests/\n\n# Run type checking (if mypy is configured)\nmypy src/\n\n# Lint code (if flake8 is configured)\nflake8 src/ tests/\n```\n\n### Contributing Guidelines\n\n1. **Fork and clone** the repository\n2. **Set up development environment** following the Development Setup section above\n3. **Create a feature branch** from `main`\n4. **Write tests first** if adding new functionality (Test-Driven Development)\n5. **Run tests locally** to ensure all tests pass before committing\n6. **Format code** with Black and ensure code quality\n7. **Commit changes** with descriptive commit messages\n8. **Push to your fork** and create a pull request\n\n### Development Workflow\n\n```bash\n# Create feature branch\ngit checkout -b feature/your-feature-name\n\n# Make your changes, write tests first\n# Edit files...\n\n# Run tests to ensure everything works\npython -m pytest tests/ -v\n\n# Format code\nblack src/ tests/\n\n# Commit and push\ngit add .\ngit commit -m \"Add feature description\"\ngit push origin feature/your-feature-name\n```\n\n### Testing Guidelines\n\n- All new features should include tests\n- Tests should pass before submitting PRs\n- Use descriptive test names and clear assertions\n- Test both success and error cases\n- Ensure Meilisearch is running before running tests\n\n### Release Process\n\nThis project uses automated versioning and publishing to PyPI. The release process is designed to be simple and automated.\n\n#### How Releases Work\n\n1. **Automated Publishing**: When the version number in `pyproject.toml` changes on the `main` branch, a GitHub Action automatically:\n   - Builds the Python package\n   - Publishes it to PyPI using trusted publishing\n   - Creates a new release on GitHub\n\n2. **Version Detection**: The workflow compares the current version in `pyproject.toml` with the previous commit to detect changes\n\n3. **PyPI Publishing**: Uses PyPA's official publish action with trusted publishing (no manual API keys needed)\n\n#### Creating a New Release\n\nTo create a new release, follow these steps:\n\n##### 1. Determine Version Number\n\nFollow [Semantic Versioning](https://semver.org/) (MAJOR.MINOR.PATCH):\n\n- **PATCH** (e.g., 0.4.0 → 0.4.1): Bug fixes, documentation updates, minor improvements\n- **MINOR** (e.g., 0.4.0 → 0.5.0): New features, new MCP tools, significant enhancements\n- **MAJOR** (e.g., 0.5.0 → 1.0.0): Breaking changes, major API changes\n\n##### 2. Update Version and Create PR\n\n```bash\n# 1. Create a branch from latest main\ngit checkout main\ngit pull origin main\ngit checkout -b release/v0.5.0\n\n# 2. Update version in pyproject.toml\n# Edit the version = \"0.4.0\" line to your new version\n\n# 3. Commit and push\ngit add pyproject.toml\ngit commit -m \"Bump version to 0.5.0\"\ngit push origin release/v0.5.0\n\n# 4. Create PR and get it reviewed/merged\ngh pr create --title \"Release v0.5.0\" --body \"Bump version for release\"\n```\n\n##### 3. Merge to Main\n\nOnce the PR is approved and merged to `main`, the GitHub Action will automatically:\n\n1. Detect the version change\n2. Build the package  \n3. Publish to PyPI at https://pypi.org/p/meilisearch-mcp\n4. Make the new version available via `pip install meilisearch-mcp`\n\n##### 4. Verify Release\n\nAfter merging, verify the release:\n\n```bash\n# Check GitHub Action status\ngh run list --workflow=publish.yml\n\n# Verify on PyPI (may take a few minutes)\npip index versions meilisearch-mcp\n\n# Test installation of new version\npip install --upgrade meilisearch-mcp\n```\n\n### Release Workflow File\n\nThe automated release is handled by `.github/workflows/publish.yml`, which:\n\n- Triggers on pushes to `main` branch\n- Checks if `pyproject.toml` version changed\n- Uses Python 3.10 and official build tools\n- Publishes using trusted publishing (no API keys required)\n- Provides verbose output for debugging\n\n### Troubleshooting Releases\n\n**Release didn't trigger**: Check that the version in `pyproject.toml` actually changed between commits\n\n**Build failed**: Check the GitHub Actions logs for Python package build errors\n\n**PyPI publish failed**: Verify the package name and that trusted publishing is configured properly\n\n**Version conflicts**: Ensure the new version number hasn't been used before on PyPI\n\n### Development vs Production Versions\n\n- **Development**: Install from source using `pip install -e .`\n- **Production**: Install from PyPI using `pip install meilisearch-mcp`\n- **Specific version**: Install using `pip install meilisearch-mcp==0.5.0`\n\n</details>"
}