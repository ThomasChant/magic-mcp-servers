{
  "mcp_name": "devflowinc/trieve",
  "mcp_description": "üéñÔ∏è üìá ‚òÅÔ∏è üè† - Crawl, embed, chunk, search, and retrieve information from datasets through [Trieve](https://trieve.ai)",
  "mcp_id": "devflowinc_trieve",
  "fetch_timestamp": "2025-06-23T02:36:11.897061Z",
  "github_url": "https://github.com/devflowinc/trieve/tree/main/clients/mcp-server",
  "repository": {
    "name": "trieve",
    "full_name": "devflowinc/trieve",
    "description": "All-in-one platform for search, recommendations, RAG, and analytics offered via API",
    "html_url": "https://github.com/devflowinc/trieve",
    "created_at": "2023-03-26T19:45:53Z",
    "updated_at": "2025-06-22T18:52:06Z",
    "pushed_at": "2025-06-20T18:27:37Z",
    "size": 180730,
    "stargazers_count": 2306,
    "watchers_count": 2306,
    "forks_count": 201,
    "open_issues_count": 10,
    "language": "TypeScript",
    "license": "Other",
    "topics": [
      "actix",
      "actix-web",
      "ai",
      "artificial-intelligence",
      "diesel",
      "embedding",
      "hacktoberfest",
      "llm",
      "postgresql",
      "qdrant",
      "qdrant-vector-database",
      "rag",
      "retrieval-augmented-generation",
      "rust",
      "search",
      "search-engine",
      "solidjs",
      "tailwindcss",
      "vector-search"
    ],
    "default_branch": "main",
    "owner": {
      "login": "devflowinc",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/122049913?v=4",
      "html_url": "https://github.com/devflowinc"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": true,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 201,
    "subscribers_count": 14,
    "languages": {
      "TypeScript": 2783881,
      "Rust": 2634701,
      "JavaScript": 397575,
      "MDX": 207064,
      "Mustache": 165319,
      "Astro": 113288,
      "CSS": 104327,
      "HTML": 75382,
      "PLpgSQL": 63704,
      "Liquid": 23986,
      "FreeMarker": 17267,
      "HCL": 12300,
      "Go": 11188,
      "Dockerfile": 7021,
      "Smarty": 2601,
      "Shell": 1846,
      "Nushell": 704,
      "Python": 418,
      "Makefile": 412
    },
    "language_percentages": {
      "TypeScript": 42.03,
      "Rust": 39.78,
      "JavaScript": 6,
      "MDX": 3.13,
      "Mustache": 2.5,
      "Astro": 1.71,
      "CSS": 1.58,
      "HTML": 1.14,
      "PLpgSQL": 0.96,
      "Liquid": 0.36,
      "FreeMarker": 0.26,
      "HCL": 0.19,
      "Go": 0.17,
      "Dockerfile": 0.11,
      "Smarty": 0.04,
      "Shell": 0.03,
      "Nushell": 0.01,
      "Python": 0.01,
      "Makefile": 0.01
    },
    "pull_requests_count": 2664,
    "contributors_count": 58,
    "latest_release": {
      "tag_name": "trieve-helm-0.2.2",
      "name": "trieve-helm-0.2.2",
      "published_at": "2025-03-07T21:55:14Z",
      "body": "Helm chart expressing Trieve deployment without any dependencies",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.13.0",
        "commit_sha": "3f3a486f2d52cdd40fe49e494bec7ebb25d3c79c"
      },
      {
        "name": "v0.12.1",
        "commit_sha": "1910d6867877bfdd64ca822e266372335392a8be"
      },
      {
        "name": "v0.12.0",
        "commit_sha": "803ec71f7a02e3ab321e944af3afd0ae7b4be889"
      },
      {
        "name": "v0.11.9",
        "commit_sha": "2372e8a4f5d99c9ac14f64826a36f35fb7b01c4b"
      },
      {
        "name": "v0.11.9-pre",
        "commit_sha": "2372e8a4f5d99c9ac14f64826a36f35fb7b01c4b"
      },
      {
        "name": "v0.11.8",
        "commit_sha": "6e114abdca5683440e2834eccacf3f850dff810f"
      },
      {
        "name": "v0.11.7",
        "commit_sha": "5437bc2a094b6787ce64af07dff7ebe6208eb95b"
      },
      {
        "name": "trieve-helm-0.2.2",
        "commit_sha": "92a117741f669e121b8230e0595910f774feed6f"
      }
    ],
    "latest_version": "v0.13.0",
    "package_json_version": "1.0.0"
  },
  "readme": "<p align=\"center\">\n  <img height=\"100\" src=\"https://cdn.trieve.ai/trieve-logo.png\" alt=\"Trieve Logo\">\n</p>\n<p align=\"center\">\n<strong><a href=\"https://dashboard.trieve.ai\">Sign Up (1k chunks free)</a> | <a href=\"https://pdf2md.trieve.ai\">PDF2MD</a> | <a href=\"https://docs.trieve.ai\">Hacker News Search Engine</a> | <a href=\"https://docs.trieve.ai\">Documentation</a> | <a href=\"https://cal.com/nick.k/meet\">Meet a Maintainer</a> | <a href=\"https://discord.gg/eBJXXZDB8z\">Discord</a> | <a href=\"https://matrix.to/#/#trieve-general:trieve.ai\">Matrix</a>\n</strong>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://github.com/devflowinc/trieve/stargazers\">\n        <img src=\"https://img.shields.io/github/stars/devflowinc/trieve.svg?style=flat&color=yellow\" alt=\"Github stars\"/>\n    </a>\n    <a href=\"https://discord.gg/CuJVfgZf54\">\n        <img src=\"https://img.shields.io/discord/1130153053056684123.svg?label=Discord&logo=Discord&colorB=7289da&style=flat\" alt=\"Join Discord\"/>\n    </a>\n    <a href=\"https://matrix.to/#/#trieve-general:trieve.ai\">\n        <img src=\"https://img.shields.io/badge/matrix-join-purple?style=flat&logo=matrix&logocolor=white\" alt=\"Join Matrix\"/>\n    </a>\n    <a href=\"https://smithery.ai/server/trieve-mcp-server\">\n        <img src=\"https://smithery.ai/badge/trieve-mcp-server\" alt=\"smithery badge\"/>\n    </a>\n    <a href=\"https://insiders.vscode.dev/redirect?url=vscode%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522trieve-mcp-server%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522more%2520args...%2522%255D%257D\">\n        <img src=\"https://img.shields.io/badge/vscode-mcp-install?style=flat&logoColor=%230078d4&label=vscode-mcp&labelColor=%230078d4&link=https%3A%2F%2Finsiders.vscode.dev%2Fredirect%3Furl%3Dvscode%253Amcp%252Finstall%253F%25257B%252522name%252522%25253A%252522trieve-mcp-server%252522%25252C%252522command%252522%25253A%252522npx%252522%25252C%252522args%252522%25253A%25255B%252522more%252520args...%252522%25255D%25257D\" alt=\"vscode mcp install badge\"/>\n    </a>\n</p>\n\n<h2 align=\"center\">\n    <b>All-in-one solution for search, recommendations, and RAG</b>\n</h2>\n\n<a href=\"https://trieve.ai\">\n  <img src=\"https://cdn.trieve.ai/landing-tabs/light-api.webp\">\n</a>\n\n## Quick Links\n\n- [API Reference + Docs](https://docs.trieve.ai/api-reference)\n- [OpenAPI specification](https://api.trieve.ai/redoc)\n- [Typescript SDK](https://ts-sdk.trieve.ai/)\n- [Python SDK](https://pypi.org/project/trieve-py-client/)\n\n## Features\n\n- **üîí Self-Hosting in your VPC or on-prem**: We have full self-hosting guides for AWS, GCP, Kubernetes generally, and docker compose available on our [documentation page here](https://docs.trieve.ai/self-hosting/docker-compose).\n- **üß† Semantic Dense Vector Search**: Integrates with OpenAI or Jina embedding models and [Qdrant](https://qdrant.tech) to provide semantic vector search.\n- **üîç Typo Tolerant Full-Text/Neural Search**: Every uploaded chunk is vector'ized with [naver/efficient-splade-VI-BT-large-query](https://huggingface.co/naver/efficient-splade-VI-BT-large-query) for typo tolerant, quality neural sparse-vector search.\n- **üñäÔ∏è Sub-Sentence Highlighting**: Highlight the matching words or sentences within a chunk and bold them on search to enhance UX for your users. Shout out to the [simsearch](https://github.com/smartdatalake/simsearch) crate!\n- **üåü Recommendations**: Find similar chunks (or files if using grouping) with the recommendation API. Very helpful if you have a platform where users' favorite, bookmark, or upvote content.\n- **ü§ñ Convenient RAG API Routes**: We integrate with OpenRouter to provide you with access to any LLM you would like for RAG. Try our routes for [fully-managed RAG with topic-based memory management](https://api.trieve.ai/redoc#tag/message/operation/create_message_completion_handler) or [select your own context RAG](https://api.trieve.ai/redoc#tag/chunk/operation/generate_off_chunks).\n- **üíº Bring Your Own Models**: If you'd like, you can bring your own text-embedding, SPLADE, cross-encoder re-ranking, and/or large-language model (LLM) and plug it into our infrastructure.\n- **üîÑ Hybrid Search with cross-encoder re-ranking**: For the best results, use hybrid search with [BAAI/bge-reranker-large](https://huggingface.co/BAAI/bge-reranker-large) re-rank optimization.\n- **üìÜ Recency Biasing**: Easily bias search results for what was most recent to prevent staleness\n- **üõ†Ô∏è Tunable Merchandizing**: Adjust relevance using signals like clicks, add-to-carts, or citations\n- **üï≥Ô∏è Filtering**: Date-range, substring match, tag, numeric, and other filter types are supported.\n- **üë• Grouping**: Mark multiple chunks as being part of the same file and search on the file-level such that the same top-level result never appears twice\n\n**Are we missing a feature that your use case would need?** - call us at [628-222-4090](mailto:+16282224090), make a [Github issue](https://github.com/devflowinc/trieve/issues), or join the [Matrix community](https://matrix.to/#/#trieve-general:trieve.ai) and tell us! We are a small company who is still very hands-on and eager to build what you need; professional services are available.\n\n## Local development with Linux\n\n### Installing via Smithery\n\nTo install Trieve for Claude Desktop automatically via [Smithery](https://smithery.ai/server/trieve-mcp-server):\n\n```bash\nnpx -y @smithery/cli install trieve-mcp-server --client claude\n```\n\n### Debian/Ubuntu Packages needed packages\n\n```sh\nsudo apt install curl \\\ngcc \\\ng++ \\\nmake \\\npkg-config \\\npython3 \\\npython3-pip \\\nlibpq-dev \\\nlibssl-dev \\\nopenssl\n```\n\n### Arch Packages needed\n\n```sh\nsudo pacman -S base-devel postgresql-libs\n```\n\n### Install NodeJS and Yarn\n\nYou can install [NVM](https://github.com/nvm-sh/nvm) using its install script.\n\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash\n```\n\nYou should restart the terminal to update bash profile with NVM. Then, you can install NodeJS LTS release and Yarn.\n\n```\nnvm install --lts\nnpm install -g yarn\n```\n\n### Make server tmp dir\n\n```\nmkdir server/tmp\n```\n\n### Install rust\n\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n### Install cargo-watch\n\n```\ncargo install cargo-watch\n```\n\n### Setup env's\n\nYou might need to create the `analytics` directory in ./frontends\n\n```\ncp .env.analytics ./frontends/analytics/.env\ncp .env.chat ./frontends/chat/.env\ncp .env.search ./frontends/search/.env\ncp .env.example ./server/.env\ncp .env.dashboard ./frontends/dashboard/.env\n```\n\n### Add your `LLM_API_KEY` to `./server/.env`\n\n[Here is a guide for acquiring that](https://blog.streamlit.io/beginners-guide-to-openai-api/#get-your-own-openai-api-key).\n\n#### Steps once you have the key\n\n1. Open the `./server/.env` file\n2. Replace the value for `LLM_API_KEY` to be your own OpenAI API key.\n3. Replace the value for `OPENAI_API_KEY` to be your own OpenAI API key.\n\n### Export the following keys in your terminal for local dev\n\nThe PAGEFIND_CDN_BASE_URL and S3_SECRET_KEY_CSVJSONL could be set to a random list of strings.\n\n```\nexport OPENAI_API_KEY=\"your_OpenAI_api_key\" \\\nLLM_API_KEY=\"your_OpenAI_api_key\" \\\nPAGEFIND_CDN_BASE_URL=\"lZP8X4h0Q5Sj2ZmV,aAmu1W92T6DbFUkJ,DZ5pMvz8P1kKNH0r,QAqwvKh8rI5sPmuW,YMwgsBz7jLfN0oX8\" \\\nS3_SECRET_KEY_CSVJSONL=\"Gq6wzS3mjC5kL7i4KwexnL3gP8Z1a5Xv,V2c4ZnL0uHqBzFvR2NcN8Pb1g6CjmX9J,TfA1h8LgI5zYkH9A9p7NvWlL0sZzF9p8N,pKr81pLq5n6MkNzT1X09R7Qb0Vn5cFr0d,DzYwz82FQiW6T3u9A4z9h7HLOlJb7L2V1\" \\\nGROQ_API_KEY=\"GROQ_API_KEY_if_applicable\"\n\n```\n\n### Start docker container services needed for local dev\n\n```\ncat .env.chat .env.search .env.server .env.docker-compose > .env\n\n./convenience.sh -l\n```\n\n### Install front-end packages for local dev\n\n```\ncd frontends\nyarn\n```\n`cd ..`\n\n```\ncd clients/ts-sdk\nyarn build\n```\n`cd ../..`\n\n### Start services for local dev\n\nIt is recommend to manage services through [tmuxp, see the guide here](https://gist.github.com/skeptrunedev/101c7a13bb9b9242999830655470efac) or terminal tabs.\n\n```\ncd frontends\nyarn\nyarn dev\n```\n\n```\ncd server\ncargo watch -x run\n```\n\n```\ncd server\ncargo run --bin ingestion-worker\n```\n\n```\ncd server\ncargo run --bin file-worker\n```\n\n```\ncd server\ncargo run --bin delete-worker\n```\n\n```\ncd search\nyarn\nyarn dev\n```\n\n### Verify Working Setup\n\nAfter the cargo build has finished (after the `tmuxp load trieve`):\n- check that you can see redoc with the OpenAPI reference at [localhost:8090/redoc](http://localhost:8090/redoc)\n- make an account create a dataset with test data at [localhost:5173](http://localhost:5173)\n- search that dataset with test data at [localhost:5174](http://localhost:5174)\n\n### Additional Instructions for testing cross encoder reranking models\n\nTo test the Cross Encoder rerankers in local dev, \n- click on the dataset, go to the Dataset Settings -> Dataset Options -> Additional Options and uncheck the `Fulltext Enabled` option.\n- in the Embedding Settings, select your reranker model and enter the respective key in the adjacent textbox, and hit save.\n- in the search playground, set Type -> Semantic and select Rerank By -> Cross Encoder\n- if AIMon Reranker is selected in the Embedding Settings, you can enter an optional Task Definition in the search playground to specify the domain of context documents to the AIMon reranker.\n\n\n### Debugging issues with local dev\n\nReach out to us on [discord](https://discord.gg/E9sPRZqpDT) for assistance. We are available and more than happy to assist.\n\n## Debug diesel by getting the exact generated SQL\n\n`diesel::debug_query(&query).to_string();`\n\n\n\n## Running evals\n\nThe evals package loads an mcp client that then runs the index.ts file, so there is no need to rebuild between tests. You can load environment variables by prefixing the npx command. Full documentation can be found [here](https://www.mcpevals.io/docs).\n\n```bash\nOPENAI_API_KEY=your-key  npx mcp-eval evals.ts clients/mcp-server/src/index.ts\n```\n## Local Setup for Testing Stripe Features\n\nInstall Stripe CLI.\n\n1. `stripe login`\n2. `stripe listen --forward-to localhost:8090/api/stripe/webhook`\n3. set the `STRIPE_WEBHOOK_SECRET` in the `server/.env` to the resulting webhook signing secret\n4. `stripe products create --name trieve --default-price-data.unit-amount 1200 --default-price-data.currency usd`\n5. `stripe plans create --amount=1200 --currency=usd --interval=month --product={id from response of step 3}`\n\n## Contributors\n\n<a href=\"https://github.com/devflowinc/trieve/graphs/contributors\">\n  <img alt=\"contributors\" src=\"https://contrib.rocks/image?repo=devflowinc/trieve\"/>\n</a>\n"
}