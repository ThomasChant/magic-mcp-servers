{
  "mcp_name": "bailaohe/mcp_tianditu",
  "mcp_description": "Provides comprehensive geographic information services through a set of MCP protocol-compliant APIs, including geocoding, reverse geocoding, and route planning.",
  "mcp_id": "bailaohe_mcp_tianditu",
  "fetch_timestamp": "2025-06-23T01:33:27.398228Z",
  "github_url": "https://github.com/bailaohe/mcp_tianditu",
  "repository": {
    "name": "mcp_tianditu",
    "full_name": "bailaohe/mcp_tianditu",
    "description": "天地图MCP服务",
    "html_url": "https://github.com/bailaohe/mcp_tianditu",
    "created_at": "2025-04-25T11:38:53Z",
    "updated_at": "2025-04-28T01:37:28Z",
    "pushed_at": "2025-04-27T15:58:43Z",
    "size": 103,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "bailaohe",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/1535731?v=4",
      "html_url": "https://github.com/bailaohe"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "Python": 24201
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# 天地图 MCP Server\n\n## 概述\n\n天地图API现已全面兼容MCP协议，提供了一套符合MCP协议标准的地理信息服务接口。\n\n天地图提供的MCP Server，包含6个符合MCP协议标准的API接口，涵盖地理编码、逆地理编码、周边检索、行政区内搜索、驾驶规划、公交规划等核心地图服务功能。\n\n依赖MCP Python SDK，任意支持MCP协议的智能体助手（如Claude、Cursor以及千帆AppBuilder等）都可以快速接入。\n\n## 工具\n\n### 地理编码 addr_to_geocode\n\n**描述**: 将地址解析为对应的位置坐标，地址结构越完整，地址内容越准确，解析的坐标精度越高。\n\n**参数**: \n- address: 待解析的地址（如：北京市海淀区莲花池西路28号）地址结构越完整，解析精度越高。\n\n**输出**: \n- 地址经纬度信息数据字典，包含如下键：\n  - lon (float): 经度 (gcj02ll)\n  - lat (float): 纬度 (gcj02ll)\n  - score (int): 置信度评分, 分值范围0-100, 分值越大精度越高\n  - keyWord (str): 输入的地址内容\n\n### 逆地理编码 geocode_to_addr\n\n**描述**: 根据纬经度坐标, 获取对应位置的地址描述, 所在行政区划, 道路以及相关POI等信息\n\n**参数**:\n- latitude: 纬度 (gcj02ll)\n- longitude: 经度 (gcj02ll)\n\n**输出**: \n- 地址经纬度信息数据字典，包含如下键：\n  - formatted_address (str): 格式化地址信息\n  - addressComponent (dict): 地址信息\n    - nation (str): 国家\n    - province (str): 省\n    - city (str): 市\n    - county (str): 区\n    - town (str): 镇/县\n    - road (str): 道路\n  - location (dict): 输入的经纬度信息\n    - lon (float): 经度 (gcj02ll)\n    - lat (float): 纬度 (gcj02ll)\n\n### 周边检索 search_by_redius\n\n**描述**: 设置圆心和半径，检索圆形区域内的地点信息（常用于周边检索场景）。\n\n**参数**:\n- query: 检索关键字, 可直接使用名称或类型, 如'query=天安门'\n- latitude: 纬度 (gcj02ll)\n- longitude: 经度 (gcj02ll)\n- radius: 半径 (米)\n\n**输出**: \n- 周边查询结果数据字典，包含如下键：\n  - keyWord (str): 输入的检索关键字\n  - count (int): 检索结果总数\n  - pois(list[dict]): POI结果元素列表，每个元素包含如下键：\n    - name (str): Poi点名称\n    - address (str): Poi点地址\n    - lonlat (str): 经纬度 (gcj02ll)，格式为：经度,纬度\n    - phone (str): 联系电话\n    - distance (str): 距离（单位 m,km），1千米以下单位为米（m），1千米以上单位为千米（km）\n\n## 资源\n\n### 行政区划编码表 tdt://admin-code\n\n**描述**: 中国行政区划编码，包括省市区。\n\n### 数据分类编码表 tdt://data-type\n\n**描述**: 数据分类编码表，包含餐馆、商店、医院等各类POI分类编码。\n\n## 开始\n\n使用天地图MCP Server主要通过两种形式，分别是Python和Typescript，下面分别介绍。\n\n### 获取AK\n\n在选择两种方法之前，你需要在天地图开放平台的控制台中创建一个服务端AK，通过AK你才能够调用天地图API能力。\n\n获取方式请参考: https://console.tianditu.gov.cn/api/key\n\n### Python接入\n\n#### 安装\n\n使用pip安装mcp-tianditu：\n\n```bash\npip install mcp-tianditu\n```\n\n安装后，我们可以使用以下命令将其作为脚本运行：\n\n```bash\npython -m mcp_tianditu\n```\n\n#### 配置\n\n在任意MCP客户端（如Claude.app）中添加如下配置，部分客户端下可能需要做一些格式化调整。\n\n其中TIANDITU_API_KEY对应的值需要替换为你自己的AK。\n\n```json\n{\n    \"mcpServers\": {\n        \"tianditu-map\": {\n            \"command\": \"python\",\n            \"args\": [\n                \"-m\",\n                \"mcp_tianditu\"\n            ],\n            \"env\": {\n                \"TIANDITU_API_KEY\": \"你的天地图API密钥\"\n            }\n        }\n    }\n}\n```\n\n如果使用uv配置，配置内容如下：\n```json\n{\n    \"mcpServers\": {\n        \"tianditu-map\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"mcp-tianditu\"\n            ],\n            \"env\": {\n                \"TIANDITU_API_KEY\": \"你的天地图API密钥\"\n            }\n        }\n    }\n}\n```\n\n\n## 效果\n\n接下来就可以进行提问，验证出行规划小助手的能力了。\n\n### 示例1：地址查询\n\n```\n请帮我查询北京市海淀区中关村的位置坐标\n```\n\n### 示例2：周边检索\n\n```\n我现在在北京天安门（39.908823, 116.397470），请帮我找出5公里内的博物馆\n```\n\n### 示例3：位置信息查询\n\n```\n请告诉我坐标（39.908823, 116.397470）对应的地址信息\n```\n\n### 示例4：行政区内查询\n\n```\n请帮我查询北京市海淀区内的大学\n```\n\n### 示例5：驾驶规划\n\n```\n请帮我规划从北京市海淀区中关村到北京市朝阳区国贸的驾车路线\n```\n\n### 示例6：公交规划\n\n```\n请帮我规划从北京西站到北京站的公交路线\n```\n\n## 通过千帆AppBuilder平台接入\n\n千帆平台接入，目前支持SDK接入或是API接入，通过AppBuilder构建一个应用，每个应用拥有一个独立的app_id，在python文件中调用对应的app_id，再调用天地图 Python MCP Tool即可。\n\n模板代码可向下跳转，通过SDK Agent && 天地图MCP Server，拿到位置信息及周边POI信息，并给出出行建议。\n\n### Agent配置\n\n前往千帆平台，新建一个应用，并发布。\n\n将Agent的思考轮数调到6。发布应用。\n\n### 调用\n\n此代码可以当作模板，以SDK的形式调用千帆平台上已经构建好且已发布的App，再将MCP Server下载至本地，将文件相对路径写入代码即可。\n\n（注意：使用实际的app_id、token、query、mcp文件）\n\n```python\nimport os\nimport asyncio\nimport appbuilder\nfrom appbuilder.core.console.appbuilder_client.async_event_handler import (\n    AsyncAppBuilderEventHandler,\n)\nfrom appbuilder.mcp_server.client import MCPClient\n\nclass MyEventHandler(AsyncAppBuilderEventHandler):\n    def __init__(self, mcp_client):\n        super().__init__()\n        self.mcp_client = mcp_client\n    \n    def get_current_weather(self, location=None, unit=\"摄氏度\"):\n        return \"{} 的温度是 {} {}\".format(location, 20, unit)\n    \n    async def interrupt(self, run_context, run_response):\n        thought = run_context.current_thought\n        # 绿色打印\n        print(\"\\033[1;31m\", \"-> Agent 中间思考: \", thought, \"\\033[0m\")\n        tool_output = []\n        for tool_call in run_context.current_tool_calls:\n            tool_res = \"\"\n            if tool_call.function.name == \"get_current_weather\":\n                tool_res = self.get_current_weather(**tool_call.function.arguments)\n            else:\n                print(\n                    \"\\033[1;32m\",\n                    \"MCP工具名称: {}, MCP参数:{}\\n\".format(tool_call.function.name, tool_call.function.arguments),\n                    \"\\033[0m\",\n                )\n                mcp_server_result = await self.mcp_client.call_tool(\n                    tool_call.function.name, tool_call.function.arguments\n                )\n                print(\"\\033[1;33m\", \"MCP结果: {}\\n\\033[0m\".format(mcp_server_result))\n                for i, content in enumerate(mcp_server_result.content):\n                    if content.type == \"text\":\n                        tool_res += mcp_server_result.content[i].text\n            tool_output.append(\n                {\n                    \"tool_call_id\": tool_call.id,\n                    \"output\": tool_res,\n                }\n            )\n        return tool_output\n    \n    async def success(self, run_context, run_response):\n        print(\"\\n\\033[1;34m\", \"-> Agent 非流式回答: \", run_response.answer, \"\\033[0m\")\n\nasync def agent_run(client, mcp_client, query):\n    tools = mcp_client.tools\n    conversation_id = await client.create_conversation()\n    with await client.run_with_handler(\n        conversation_id=conversation_id,\n        query=query,\n        tools=tools,\n        event_handler=MyEventHandler(mcp_client),\n    ) as run:\n        await run.until_done()\n\n### 用户Token\nos.environ[\"APPBUILDER_TOKEN\"] = \"\"\n\nasync def main():\n    appbuilder.logger.setLoglevel(\"DEBUG\")\n    ### 发布的应用ID\n    app_id = \"\"\n    appbuilder_client = appbuilder.AsyncAppBuilderClient(app_id)\n    mcp_client = MCPClient()\n    \n    ### 注意这里的路径为MCP Server文件在本地的相对路径\n    await mcp_client.connect_to_server(\"./<YOUR_FILE_PATH>/main.py\")\n    print(mcp_client.tools)\n    await agent_run(\n        appbuilder_client,\n        mcp_client,\n        '请帮我查询北京市海淀区中关村的位置坐标',\n    )\n    await appbuilder_client.http_client.session.close()\n\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n```\n\n### 效果\n\n经过Agent自己的思考，通过调用MCPServer 地理编码服务、逆地理编码服务、周边检索服务等多个tool，拿到位置信息及周边POI信息，并给出出行建议。\n\n实际用户请求：\"请帮我规划一次北京故宫一日游，并考虑周边的餐饮和交通。\"\n\n## 说明\n\n在天地图MCP Server中传入的部分参数规格:\n\n- 行政区划编码均采用天地图adcode映射表。\n- 经纬度坐标均采用国测局经纬度坐标gcj02ll。\n- 类型等中文字符串参数应符合天地图POI类型标准。\n\n## 许可\n\nMIT\n"
}