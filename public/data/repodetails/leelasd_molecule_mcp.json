{
  "mcp_name": "leelasd/molecule_mcp",
  "mcp_description": "Facilitates chemistry-focused applications by visualizing molecules and retrieving molecular properties using SMILES codes, integrated with LLMs like Claude Desktop.",
  "mcp_id": "leelasd_molecule_mcp",
  "fetch_timestamp": "2025-06-23T06:07:39.448029Z",
  "github_url": "https://github.com/leelasd/molecule_mcp",
  "repository": {
    "name": "molecule_mcp",
    "full_name": "leelasd/molecule_mcp",
    "description": "MCP server for visualizing molecules in Claude Desktop :) ",
    "html_url": "https://github.com/leelasd/molecule_mcp",
    "created_at": "2025-04-24T20:36:07Z",
    "updated_at": "2025-05-19T05:15:08Z",
    "pushed_at": "2025-05-16T15:20:51Z",
    "size": 651,
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Jupyter Notebook",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "leelasd",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/7967695?v=4",
      "html_url": "https://github.com/leelasd"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Jupyter Notebook": 28829,
      "Python": 8203
    },
    "language_percentages": {
      "Jupyter Notebook": 77.85,
      "Python": 22.15
    },
    "pull_requests_count": 1,
    "contributors_count": 1
  },
  "readme": "# Molecule Visualizer MCP Server\n\n<div align=\"center\">\n\n![Molecule Visualizer](https://img.shields.io/badge/MCP-Molecule%20Visualizer-blue)\n![Python](https://img.shields.io/badge/Python-3.10%2B-blue)\n![RDKit](https://img.shields.io/badge/RDKit-2023.3.1%2B-green)\n![License](https://img.shields.io/badge/License-Apache%202.0-blue)\n\n</div>\n\nA [Model Context Protocol (MCP)](https://modelcontextprotocol.io) server that provides tools for visualizing molecules and retrieving molecular properties using SMILES codes. This server integrates with LLM applications like Claude Desktop to provide chemistry-focused capabilities.\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Features](#features)\n- [Installation](#installation)\n- [Usage](#usage)\n  - [Running the Server](#running-the-server)\n  - [With Claude Desktop](#with-claude-desktop)\n  - [Test Client](#test-client)\n- [API Reference](#api-reference)\n  - [Tools](#tools)\n  - [Resources](#resources)\n  - [Common Molecules](#common-molecules)\n- [Examples](#examples)\n- [Requirements](#requirements)\n- [License](#license)\n- [Contributing](#contributing)\n\n## Overview\n\nThe Molecule Visualizer MCP server provides LLM applications with the ability to:\n\n1. Generate 2D visualizations of molecules from SMILES strings\n2. Calculate and display molecular properties\n3. Access a database of common molecules by name\n\nThis enables chemistry-related use cases such as exploring molecular structures, analyzing chemical properties, and generating molecule visualizations for educational content or research assistance.\n\n## Screenshots\n\n### Using the MCP Server with Claude\n\n![MCP in Claude](images/MCP-in-Claude.png)\n\n*Claude using the Molecule Visualizer MCP server to display molecular structures.*\n\n### Visualizing Molecules using SMILES\n\n![Visualizing with SMILES](images/Give-it-Smiles.png)\n\n*Providing direct SMILES codes to generate molecular visualizations.*\n\n### Comparison with Web Access\n\n![Claude with Web Access](images/Claude-with-Webaccess-failing.png)\n\n*Attempting similar visualization with web access did not work as Claude fails at getting the right smiles code from the internet.  - MCP provides more reliable chemistry capabilities if pubchempy and chembl client are added to this.*\n\n## Features\n\n### Molecule Visualization\n\n- Generate 2D visualizations of molecules from SMILES strings or common names\n- Returns proper MCP Image objects for direct integration with LLM applications\n- Option for markdown-compatible version with base64-encoded images\n- Customizable image dimensions and display options\n- Option to show atom indices for educational purposes\n\n### Molecular Properties\n\n- Basic properties:\n  - Molecular formula\n  - Molecular weight\n  - Atom and bond counts\n  - Ring count\n- Lipinski's Rule of Five properties:\n  - Hydrogen bond donors\n  - Hydrogen bond acceptors\n  - Rotatable bonds\n  - LogP (lipophilicity)\n\n\n## Installation\n\n### Prerequisites\n\n- Python 3.10 or higher\n- RDKit (cheminformatics library)\n- MCP Python SDK\n- PIL (Python Imaging Library)\n\n### Step-by-step Installation\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/yourusername/molecule-visualizer.git\n   cd molecule-visualizer\n   ```\n\n2. Run the setup script which creates a virtual environment and installs dependencies:\n   ```bash\n   chmod +x setup.sh\n   ./setup.sh\n   ```\n\n3. Activate the virtual environment:\n   ```bash\n   source venv/bin/activate\n   ```\n\n### Alternative Installation using uv\n\nYou can also use the fast [uv](https://docs.astral.sh/uv/) package manager (recommended in the MCP documentation):\n\n1. Install uv if you don't already have it:\n   ```bash\n   pip install uv\n   ```\n\n2. Create a virtual environment:\n   ```bash\n   uv venv\n   ```\n\n3. Install dependencies:\n   ```bash\n   uv pip install -r requirements.txt\n   ```\n   \n   Or install dependencies directly:\n   ```bash\n   uv add \"mcp[cli]\"\n   uv add \"rdkit>=2023.3.1\"\n   uv add \"pillow>=10.0.0\"\n   ```\n\n4. Activate the virtual environment:\n   ```bash\n   source .venv/bin/activate\n   ```\n\n## Usage\n\n### Running the Server\n\nTo run the server directly:\n\n```bash\npython molecule_server.py\n```\n\nThe server will start and listen for MCP connections.\n\n### With Claude Desktop\n\n1. Install [Claude Desktop](https://claude.ai/download)\n\n2. Edit your Claude Desktop configuration file:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n3. Add the Molecule Visualizer server configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"Molecule Visualizer\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--with\",\n        \"mcp[cli]\",\n        \"--with\",\n        \"pillow\",\n        \"--with\",\n        \"rdkit\",\n        \"mcp\",\n        \"run\",\n        \"/ABSOLUTE-PATH-TO-MOLECULE-SERVER/molecule_server.py\"\n      ]\n    }\n  }\n}\n```\n\n4. Restart Claude Desktop\n\n5. In Claude, you can now use molecule visualization:\n   ```\n   Please show me a visualization of aspirin\n   ```\n\n### Test Client\n\nA test client is included to demonstrate how to use the server:\n\n```bash\npython test_client.py\n```\n\nThis will connect to the server and run through several examples of using the tools and resources.\n\n## API Reference\n\n### Tools\n\n#### `visualize_molecule`\n\nGenerate a 2D visualization of a molecule as an Image object.\n\n**Parameters:**\n- `query` (string): Molecule name or SMILES string\n- `width` (integer, optional): Width in pixels (default: 400)\n- `height` (integer, optional): Height in pixels (default: 300)\n- `show_atom_indices` (boolean, optional): Whether to show atom indices (default: false)\n\n**Returns:**\n- Image object containing the molecule visualization (PNG format)\n\n#### `visualize_molecule_markdown`\n\nGenerate a 2D visualization of a molecule as a markdown string with embedded base64-encoded image.\n\n**Parameters:**\n- Same as `visualize_molecule`\n\n**Returns:**\n- Markdown string with embedded base64-encoded PNG image\n\n#### `get_molecule_properties`\n\nGet properties of a molecule.\n\n**Parameters:**\n- `query` (string): Molecule name or SMILES string\n\n**Returns:**\n- Markdown formatted text with molecular properties\n\n#### `get_common_molecules`\n\nGet a list of common molecules that can be visualized.\n\n**Parameters:**\n- None\n\n**Returns:**\n- Markdown formatted list of common molecule names\n\n### Resources\n\n#### `molecule://{name}/smiles`\n\nGet the SMILES string for a common molecule.\n\n**Parameters:**\n- `name` (string): Name of the common molecule\n\n**Returns:**\n- SMILES string for the molecule\n\n#### `molecules://common`\n\nList all common molecules available in the database.\n\n**Returns:**\n- JSON formatted list of molecule names and their SMILES strings\n\n\n## Examples\n\n### Visualizing a Molecule\n\n```python\nfrom mcp import ClientSession, StdioServerParameters\nfrom mcp.client.stdio import stdio_client\n\nasync def visualize():\n    server_params = StdioServerParameters(\n        command=\"python\",\n        args=[\"path/to/molecule_server.py\"],\n        env=None\n    )\n    \n    async with stdio_client(server_params) as (stdin, stdout):\n        client = ClientSession(stdin, stdout)\n        await client.initialize()\n        \n        # Visualize aspirin\n        result = await client.call_tool(\"visualize_molecule\", {\"query\": \"aspirin\"})\n        \n        # The image data is in result.content[0].image.data\n        # The image format is in result.content[0].image.format\n        \n        # Save the image to a file\n        with open(\"aspirin.png\", \"wb\") as f:\n            f.write(result.content[0].image.data)\n```\n\n### Getting Molecule Properties\n\n```python\n# Using the client from above\nresult = await client.call_tool(\"get_molecule_properties\", {\"query\": \"caffeine\"})\nprint(result.content[0].text)\n```\n\n## Requirements\n\nDependencies are listed in `requirements.txt`:\n\n```\nmcp[cli]>=0.1.0\nrdkit>=2023.3.1\npillow>=10.0.0\n```\n\n## License\n\nThis project is licensed under the Apache License - see the LICENSE file for details.\n\n## Contributing\n\nContributions are welcome! Here are ways you can contribute:\n\n1. Add new molecular visualization options\n2. Expand the common molecules database\n3. Add additional molecular properties calculations\n4. Improve error handling and documentation\n5. Create additional examples\n\nTo contribute:\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Submit a pull request\n\nPlease ensure your code follows the existing style and includes appropriate tests and documentation.\n"
}