{
  "mcp_name": "ankit1057/nexuscontroller",
  "mcp_description": "NexusController offers advanced Android automation with MCP support for seamless AI integration, enabling robust device control and UI testing.",
  "mcp_id": "ankit1057_nexuscontroller",
  "fetch_timestamp": "2025-06-23T01:09:18.301388Z",
  "github_url": "https://github.com/ankit1057/nexuscontroller",
  "repository": {
    "name": "nexuscontroller",
    "full_name": "ankit1057/nexuscontroller",
    "description": null,
    "html_url": "https://github.com/ankit1057/nexuscontroller",
    "created_at": "2025-04-14T18:13:06Z",
    "updated_at": "2025-04-15T05:48:14Z",
    "pushed_at": "2025-04-15T05:48:11Z",
    "size": 230,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "Other",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "ankit1057",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/34769096?v=4",
      "html_url": "https://github.com/ankit1057"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 169034,
      "Shell": 24092,
      "JavaScript": 1219,
      "Jupyter Notebook": 2
    },
    "language_percentages": {
      "Python": 86.98,
      "Shell": 12.4,
      "JavaScript": 0.63,
      "Jupyter Notebook": 0
    },
    "pull_requests_count": 0,
    "contributors_count": 2,
    "latest_release": {
      "tag_name": "v1.0.0",
      "name": "v1.0.0",
      "published_at": "2025-04-15T04:50:01Z",
      "body": "**Full Changelog**: https://github.com/ankit1057/nexuscontroller/commits/v1.0.0\r\n**Released to pypi",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v1.0.0",
        "commit_sha": "fcc4d7bde9f24b1be9e67d293cef76974de9a099"
      },
      {
        "name": "v0.1.2",
        "commit_sha": "69c70378bc3465be5006918819ba4d584ba19e9d"
      },
      {
        "name": "v0.1.1",
        "commit_sha": "abb2afc2a2108d910a3722f32135ac5cea8b0632"
      }
    ],
    "latest_version": "v1.0.0"
  },
  "readme": "# NexusController - Advanced Android Automation Platform\n\nNexusController is a comprehensive and professional-grade Android device automation platform that bridges the gap between manual testing and continuous integration. Built for QA engineers, developers, and DevOps professionals, NexusController provides a unified solution for Android device control, UI automation, and test orchestration.\n\n## Key Features\n\n- **Universal Device Control**: Connect to and manage multiple Android devices simultaneously via ADB with robust error handling and device state management\n- **Intelligent UI Automation**: Create, record, and execute Maestro flows for reliable UI testing that survives app updates and device variations\n- **Jupyter Integration**: Leverage interactive Python notebooks for exploratory testing, automation script development, and results analysis\n- **CI/CD Ready**: Integrate with your continuous integration pipeline through command-line tools and GitHub Actions workflows\n- **Model Context Protocol (MCP) Support**: Seamlessly integrate with LLM tools and assistants via standard MCP interface\n- **Comprehensive Reporting**: Generate detailed HTML reports with screenshots, error logs, and performance metrics\n\n## Why NexusController?\n\n- **Reliability**: Built with robust error detection, recovery mechanisms, and logging to handle real-world testing scenarios\n- **Flexibility**: Works with any Android app or device without requiring code modifications or instrumentation\n- **Productivity**: Interactive menus, intuitive Jupyter interface, and reusable components accelerate test development\n- **Enterprise Ready**: Designed with security, scalability and commercial deployment requirements in mind\n- **Developer-Focused**: Clear documentation, modular architecture, and extensible design make it easy to adapt to your needs\n\n## Prerequisites\n\n- Python 3.8+\n- ADB (Android Debug Bridge) installed and in PATH\n- Connected Android device with USB debugging enabled\n- Maestro CLI (optional, for enhanced UI automation)\n\n## Quick Start\n\n1. **Installation**:\n```bash\npip install nexuscontroller\n```\n\n2. **Basic Usage**:\n```python\nfrom nexuscontroller import AndroidController\n\n# Initialize controller\ncontroller = AndroidController()\n\n# List connected devices\ndevices = controller.get_devices()\n\n# Take a screenshot\ncontroller.take_screenshot(devices[0])\n\n# Run a UI test\ncontroller.run_maestro_flow(devices[0], \"flows/login_test.yaml\")\n```\n\n3. **Interactive Mode**:\n```bash\npython -m nexuscontroller\n```\n\n## AI Integration\n\nNexusController is designed to work seamlessly with AI assistants through the Model Context Protocol (MCP). You can integrate NexusController with your AI tools to automate mobile testing and device control.\n\n### MCP Server Usage\n\nThe MCP server can be run in several ways after installation:\n\n```bash\n# Method 1: Using the module\npython -m nexuscontroller.mcp\n\n# Method 2: Using the CLI command (available after pip install)\nnexus-mcp\n\n# Method 3: Using the included script\n./start_mcp_server.py\n```\n\nAll methods support these options:\n- `--install-deps`: Install required dependencies\n- `--debug`: Enable debug logging\n\n### Quick Integration Example\n\n```json\n// mcp.json configuration for AI assistants\n{\n  \"mcpServers\": {\n    \"nexuscontroller\": {\n      \"command\": \"python3\",\n      \"args\": [\"-m\", \"nexuscontroller.mcp\"],\n      \"transport\": \"stdio\"\n    }\n  }\n}\n```\n\nFor more details, see the [MCP Server Documentation](nexuscontroller/mcp/README.md).\n\n## Commercial Use\n\nNexusController is available under MIT license with special provisions for commercial use by large enterprises. See the [LICENSE](LICENSE) file for details.\n\n## Project Status\n\nâœ… **Project Completed!**\n\nThe NexusController project has been successfully implemented with the following components:\n- Core Android device control functionality\n- Model Context Protocol (MCP) integration\n- Temporary file handling with proper permissions\n- Screenshot and screen recording capabilities\n- UI element inspection and manipulation\n- Maestro flow execution support\n\nYou can now build and release this library to PyPI.\n\n## Documentation\n\nFor full documentation, examples, and API reference, visit our [documentation site](https://github.com/ankit1057/nexuscontroller).\n\n## Contributing\n\nWe welcome contributions from the community! See our [contribution guidelines](CONTRIBUTING.md) for more information.\n\n## Acknowledgments\n\n- Created and maintained by [ankit1057](https://github.com/ankit1057)\n- Powered by [Maestro](https://maestro.mobile.dev/) for UI automation\n- Inspired by the mobile testing needs of enterprise app development teams"
}