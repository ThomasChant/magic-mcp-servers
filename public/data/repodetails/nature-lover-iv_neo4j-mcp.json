{
  "mcp_name": "nature-lover-iv/neo4j-mcp",
  "mcp_description": "Facilitates natural language interaction with Neo4j graph databases through the MCP protocol, enabling schema exploration, query execution, and database management.",
  "mcp_id": "nature-lover-iv_neo4j-mcp",
  "fetch_timestamp": "2025-06-23T07:00:39.535750Z",
  "github_url": "https://github.com/nature-lover-iv/neo4j-mcp",
  "repository": {
    "name": "neo4j-mcp",
    "full_name": "nature-lover-iv/neo4j-mcp",
    "description": null,
    "html_url": "https://github.com/nature-lover-iv/neo4j-mcp",
    "created_at": "2025-04-17T18:44:56Z",
    "updated_at": "2025-05-01T15:10:27Z",
    "pushed_at": "2025-05-01T15:10:24Z",
    "size": 35,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "nature-lover-iv",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/179949393?v=4",
      "html_url": "https://github.com/nature-lover-iv"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 114961
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# Neo4j MCP Server\n\nA comprehensive Model Context Protocol (MCP) server for Neo4j graph database. This server allows AI assistants to interact with Neo4j databases using natural language through the MCP protocol.\n\n## Features\n\n- **Schema Exploration**: Get detailed information about the database schema, including node labels, relationship types, and properties.\n- **Query Execution**: Execute Cypher queries to read and write data to the database.\n- **Database Management**: Create and manage indexes and constraints.\n- **Data Exploration**: Find nodes, relationships, and paths in the database.\n- **Graph Algorithms**: Find shortest paths and all paths between nodes.\n- **Database Statistics**: Get statistics about the database, including node and relationship counts.\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/nature-lover-iv/neo4j-mcp.git\ncd neo4j-mcp\n\n# Install the package\npip install -e .\nor pip install git+https://github.com/nature-lover-iv/neo4j-mcp.git\n```\n\n## Usage\n\n### Command Line\n\n```bash\n# Start the server with default settings\nneo4j-mcp\n\n# Start the server with custom Neo4j connection\nneo4j-mcp --uri bolt://localhost:7687 --username neo4j --password password\n\n# Start the server with custom configuration file\nneo4j-mcp --config /path/to/config.json\n\n# Get help\nneo4j-mcp --help\n```\n\n### Configuration\n\nYou can configure the server using a JSON configuration file. The default configuration file is located at `~/.neo4j-mcp/config.json`.\n\n```json\n{\n  \"neo4j\": {\n    \"uri\": \"bolt://localhost:7687\",\n    \"username\": \"neo4j\",\n    \"password\": \"password\",\n    \"database\": null\n  },\n  \"server\": {\n    \"name\": \"neo4j-mcp-server\",\n    \"version\": \"0.1.0\"\n  },\n  \"logging\": {\n    \"level\": \"INFO\",\n    \"file\": null\n  }\n}\n```\n\n### Environment Variables\n\nYou can also configure the server using environment variables:\n\n```bash\n# Set Neo4j connection details\nexport NEO4J_URL=bolt://localhost:7687\nexport NEO4J_USERNAME=neo4j\nexport NEO4J_PASSWORD=password\nexport NEO4J_DATABASE=neo4j\n\n# Start the server\nneo4j-mcp\n```\n\n## Using with Cline\n\nTo use the Neo4j MCP server with Cline, add the following to your `cline_mcp_settings.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"github.com/neo4j-contrib/mcp-neo4j\": {\n      \"command\": \"neo4j-mcp\",\n      \"args\": [],\n      \"env\": {\n        \"NEO4J_URL\": \"bolt://localhost:7687\",\n        \"NEO4J_USERNAME\": \"neo4j\",\n        \"NEO4J_PASSWORD\": \"your-password\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n## Available Tools\n\nThe Neo4j MCP server provides the following tools:\n\n### Schema Tools\n\n- `get_neo4j_schema`: Get a list of all node types in the graph database, their attributes with name, type, and relationships to other node types.\n- `get_database_info`: Get information about the Neo4j database, including version, edition, and address.\n\n### Query Tools\n\n- `read_neo4j_cypher`: Execute Cypher read queries to read data from the database.\n- `write_neo4j_cypher`: Execute updating Cypher queries to modify the database.\n- `explain_neo4j_cypher`: Explain a Cypher query execution plan.\n\n### Database Statistics Tools\n\n- `get_database_statistics`: Get statistics about the Neo4j database, including node and relationship counts.\n- `get_node_counts_by_label`: Get the number of nodes for each label in the database.\n- `get_relationship_counts_by_type`: Get the number of relationships for each type in the database.\n\n### Database Management Tools\n\n- `get_indexes`: Get all indexes in the database.\n- `get_constraints`: Get all constraints in the database.\n- `create_index`: Create a new index in the database.\n- `create_constraint`: Create a new constraint in the database.\n- `drop_index`: Drop an index from the database.\n- `drop_constraint`: Drop a constraint from the database.\n\n### Data Exploration Tools\n\n- `get_sample_data`: Get sample data for each node label in the database.\n- `find_nodes`: Find nodes in the database based on label and property conditions.\n- `find_relationships`: Find relationships in the database based on type and property conditions.\n- `find_paths`: Find paths between nodes in the database.\n\n### Graph Algorithms\n\n- `find_shortest_path`: Find the shortest path between two nodes.\n- `find_all_paths`: Find all paths between two nodes.\n\n## Testing\n\nThe Neo4j MCP server includes a comprehensive test suite to ensure its functionality:\n\n### Unit Tests\n\nUnit tests verify the functionality of individual components without requiring a Neo4j database:\n\n```bash\n# Run unit tests only\npython3 tests/run_tests.py --unit\n```\n\n### Integration Tests\n\nIntegration tests verify the functionality of the server with a real Neo4j database:\n\n```bash\n# Run integration tests only\npython3 tests/run_tests.py --integration\n```\n\n### MCP Tool Tests\n\nMCP tool tests verify the functionality of the MCP tools directly:\n\n```bash\n# Run MCP tool tests only\npython3 tests/run_tests.py --mcp\n```\n\n### Running All Tests\n\nYou can run all tests with:\n\n```bash\n# Run all tests\npython3 tests/run_tests.py\n```\n\n## License\n\nMIT\n"
}