{
  "mcp_name": "Twelve Data",
  "mcp_description": "Interact with [Twelve Data](https://twelvedata.com) APIs to access real-time and historical financial market data for your AI agents.",
  "mcp_id": "twelvedata_mcp",
  "fetch_timestamp": "2025-06-23T09:08:42.317842Z",
  "github_url": "https://github.com/twelvedata/mcp",
  "repository": {
    "name": "mcp",
    "full_name": "twelvedata/mcp",
    "description": "Twelve Data MCP (Model Context Protocol) Server provides seamless, real-time access to financial market data via WebSocket, enabling reliable streaming of price quotes, market metrics, and events directly into your applications.",
    "html_url": "https://github.com/twelvedata/mcp",
    "created_at": "2025-05-27T20:38:50Z",
    "updated_at": "2025-06-21T03:18:31Z",
    "pushed_at": "2025-06-20T17:20:47Z",
    "size": 5080,
    "stargazers_count": 8,
    "watchers_count": 8,
    "forks_count": 1,
    "open_issues_count": 1,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "claude",
      "mcp",
      "mcp-server",
      "twelvedata"
    ],
    "default_branch": "main",
    "owner": {
      "login": "twelvedata",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/59389925?v=4",
      "html_url": "https://github.com/twelvedata"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 0,
    "languages": {
      "Python": 1425324,
      "Dockerfile": 566
    },
    "language_percentages": {
      "Python": 99.96,
      "Dockerfile": 0.04
    },
    "pull_requests_count": 3,
    "contributors_count": 4
  },
  "readme": "\n# Twelve Data MCP Server\n\n## Overview\n\nThe Twelve Data MCP Server provides a seamless integration with the Twelve Data API to access financial market data. It enables retrieval of historical time series, real-time quotes, and instrument metadata for stocks, forex pairs, and cryptocurrencies.\n\n> Note: This server is currently in early-stage development; features and tools may evolve alongside updates to the Twelve Data API.\n\n## Obtaining Your API Key\n\nTo use Twelve Data MCP Server, you must first obtain an API key from Twelve Data:\n\n1. Visit [Twelve Data Sign Up](https://twelvedata.com/register?utm_source=github&utm_medium=repository&utm_campaign=mcp_repo).\n2. Create an account or log in if you already have one.\n3. Navigate to your Dashboard and copy your API key.\n\nImportant: Access to specific endpoints or markets may vary depending on your Twelve Data subscription plan.\n\n## Tools\n\n1. **`time_series`**\n   Fetch historical price data for a symbol.\n\n   * **Inputs:**\n\n     * `symbol` (string): Ticker, e.g. `AAPL`\n     * `interval` (string): Data interval, e.g. `1min`, `1day`\n     * `start_date` (string, optional): ISO-8601 start timestamp\n     * `end_date` (string, optional): ISO-8601 end timestamp\n   * **Returns:** Array of OHLCV bars.\n\n2. **`price`**\n   Get the latest price for a symbol.\n\n   * **Inputs:**\n\n     * `symbol` (string)\n   * **Returns:** Latest price quote.\n\n3. **`stocks`**\n   List available stock instruments.\n\n   * **Inputs:**\n\n     * `exchange` (string, optional): Exchange code to filter by\n   * **Returns:** Array of stock metadata.\n\n4. **`forex_pairs`**\n   List available forex pairs.\n\n   * **Inputs:** none\n   * **Returns:** Array of forex pair metadata.\n\n5. **`cryptocurrencies`**\n   List available cryptocurrencies.\n\n   * **Inputs:** none\n   * **Returns:** Array of cryptocurrency metadata.\n\n## Installation\n\n### Using **UV** (recommended)\n\nDirectly run without local installation using [`uvx`](https://docs.astral.sh/uv/guides/tools/):\n\n```bash\nuvx mcp-server-twelve-data --help\n```\n\n### Using **pip**\n\nInstall the server via pip:\n\n```bash\npip install mcp-server-twelve-data\npython -m mcp_server_twelve_data --help\n```\n\n## Configuration\n\n### Claude Desktop integration\n\nAdd the following snippet to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"twelvedata\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-twelve-data@latest\", \"-k\", \"YOUR_TWELVE_DATA_API_KEY\"]\n    }\n  }\n}\n```\n\n\nor this one, to use our remote http server\n\n```json\n{\n  \"mcpServers\": {\n    \"twelvedata-remote\": {\n      \"command\": \"npx\",\n      \"args\":    [\n        \"mcp-remote\", \"https://mcp.twelvedata.com/mcp/\",\n        \"--header\",\n        \"Authorization:${AUTH_HEADER}\",\n        \"X-OpenAPI-Key:${AUTH_HEADER}\"\n      ],\n      \"env\": {\n        \"AUTH_HEADER\": \"apikey YOUR_TWELVE_DATA_API_KEY\",\n        \"OPEN_API_KEY\": \"YOUR_OPEN_API_KEY\"\n      }\n    }\n  }\n}\n```\n\nSee how easy it is to connect Claude Desktop to Twelve Data MCP Server:\n\n![Example usage with Claude Desktop](./example.gif)\n\n### VS Code integration\n\n#### Automatic setup (with UV)\n\n[![Install with UV in VS Code](https://img.shields.io/badge/VS_Code-UV-0098FF?style=flat-square\\&logo=visualstudiocode\\&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=twelvedata&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22mcp-server-twelve-data%22%2C%22-k%22%2C%YOUR_TWELVE_DATA_API_KEY%22%5D%7D)\n\n#### Manual setup\n\nFor manual configuration, add to your **User Settings (JSON)**:\n\n```json\n{\n  \"mcp\": {\n    \"servers\": {\n      \"twelvedata\": {\n        \"command\": \"uvx\",\n        \"args\": [\n          \"mcp-server-twelve-data@latest\",\n          \"-t\", \"streamable-http\",\n          \"-k\", \"YOUR_TWELVE_DATA_API_KEY\"\n        ]\n      }\n    }\n  }\n}\n```\n\n## Debugging\n\nUse the MCP Inspector for troubleshooting:\n\n```bash\nnpx @modelcontextprotocol/inspector uvx mcp-server-twelve-data@latest -k YOUR_TWELVE_DATA_API_KEY\n```\n\n## Development guide\n\n1. **Local testing:** Utilize the MCP Inspector as described in **Debugging**.\n2. **Claude Desktop:**: Update `claude_desktop_config.json` to reference local source paths.\n\n## Docker usage\n\nBuild and run the server using Docker:\n\n```bash\ndocker build -t mcp-server-twelve-data .\ndocker run --rm mcp-server-twelve-data -k YOUR_TWELVE_DATA_API_KEY\n```\n\n## U-tool\nu-tool is an AI-powered universal router for the Twelve Data API that transforms how you access financial data. Instead of navigating 100+ individual endpoints and complex documentation, simply describe what you need in plain English.\n\nHow it works:\nüß† Natural Language Processing: Understands your request in conversational English\nüîç Smart Routing: Uses vector search to find the most relevant endpoints from Twelve Data's entire API catalog\nüéØ Intelligent Selection: Leverages OpenAI GPT-4o to choose the optimal method and generate correct parameters\n‚ö° Automatic Execution: Calls the appropriate endpoint and returns formatted results\n\nWhat you can ask:\nüìà \"Show me Apple stock performance this week\"\nüìä \"Calculate RSI for Bitcoin with 14-day period\" \nüí∞ \"Get Tesla's financial ratios and balance sheet\"\nüåç \"Compare EUR/USD exchange rates over 6 months\"\nüè¶ \"Find top-performing tech ETFs\"\n\nSupported data categories:\n- Market data & quotes ‚Ä¢ Technical indicators (100+)\n- Fundamental data & financials ‚Ä¢ Currencies & crypto\n- Mutual funds & ETFs ‚Ä¢ Economic calendars & events\n\nOne tool, entire Twelve Data ecosystem. No API documentation required.\n```json\n{\n  \"mcpServers\": {\n    \"twelvedata\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-twelve-data@latest\", \"-k\", \"YOUR_TWELVE_DATA_API_KEY\", \"-u\", \"YOUR_OPEN_AI_APIKEY\"]\n    }\n  }\n}\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. See the [LICENSE](../../LICENSE) file for details.\n"
}