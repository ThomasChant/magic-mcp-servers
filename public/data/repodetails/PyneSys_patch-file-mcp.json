{
  "mcp_name": "PyneSys/patch-file-mcp",
  "mcp_description": "Facilitates precise file modifications using block format patches, ensuring safety and efficiency for AI-driven file editing tasks.",
  "mcp_id": "PyneSys_patch-file-mcp",
  "fetch_timestamp": "2025-06-23T07:40:28.489243Z",
  "github_url": "https://github.com/PyneSys/patch-file-mcp",
  "repository": {
    "name": "patch-file-mcp",
    "full_name": "PyneSys/patch-file-mcp",
    "description": "An MCP Server to patch existing files using block format",
    "html_url": "https://github.com/PyneSys/patch-file-mcp",
    "created_at": "2025-04-24T08:54:43Z",
    "updated_at": "2025-04-24T08:56:52Z",
    "pushed_at": "2025-04-24T08:57:44Z",
    "size": 13,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "claude-ai",
      "claude-desktop",
      "cursor-ai",
      "file-operation",
      "mcp",
      "mcp-server",
      "patcher"
    ],
    "default_branch": "main",
    "owner": {
      "login": "PyneSys",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/193546170?v=4",
      "html_url": "https://github.com/PyneSys"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 21719,
      "Shell": 615
    },
    "language_percentages": {
      "Python": 97.25,
      "Shell": 2.75
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "latest_release": {
      "tag_name": "v0.1.0",
      "name": "v0.1.0",
      "published_at": "2025-04-24T08:57:44Z",
      "body": "Initial release",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.1.0",
        "commit_sha": "f62a0d579fc18ba5cee97699fd36954aafb08c79"
      }
    ],
    "latest_version": "v0.1.0"
  },
  "readme": "# Patch File MCP\n\nAn MCP Server to patch existing files using block format. This allows AI agents (like Claude) to make precise changes to files in your projects.\n\n## Overview\n\nPatch File MCP provides a simple way to modify files by applying patches in block format. The key benefits include:\n\n- Makes targeted changes to specific parts of files without rewriting the entire content\n- Supports multiple patches to the same file in a single request\n- Ensures safety through exact text matching and uniqueness verification\n- Better alternative to the `edit_block` tool from `desktop-commander` for most file editing tasks\n\n## Installation\n\n### Using uvx\n\nThis method uses `uvx` (from the `uv` Python package manager) to run the server without permanent installation:\n\n#### Prerequisites\n\nInstall `uvx` from [uv](https://docs.astral.sh/uv/installation/) if you don't have it already.\n\n#### Set up MCP Client (Claude Desktop, Cursor, etc.)\n\nMerge the following config with your existing config file (e.g. `claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"patch-file\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"patch-file-mcp\",\n        \"--allowed-dir\", \"/Users/your-username/projects\",\n        \"--allowed-dir\", \"/Users/your-username/Documents/code\"\n      ]\n    }\n  }\n}\n```\n\n> **Note:** Replace `/Users/your-username` with the actual path to your own projects and code directories.\n\n### Install from Source\n\n#### Prerequisites\n\n- Python 3.11 or higher\n- Pip package manager\n\n#### Clone the repository\n\n```bash\ngit clone https://github.com/your-username/patch-file-mcp.git\ncd patch-file-mcp\npython -m venv venv\nsource venv/bin/activate\npip install -e .\n```\n\n#### Set up MCP Client (Claude Desktop, Cursor, etc.)\n\nMerge the following config with your existing config file (e.g. `claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"patch-file\": {\n      \"command\": \"path/to/your/venv/bin/patch-file-mcp\",\n      \"args\": [\n        \"--allowed-dir\", \"/Users/your-username/projects\",\n        \"--allowed-dir\", \"/Users/your-username/Documents/code\"\n      ]\n    }\n  }\n}\n```\n\n> **Note:** Replace `/Users/your-username` with the actual path to your own projects and code directories.\n\n## Arguments\n\nThe `--allowed-dir` argument is used to specify the directories that the server has access to. You can use it multiple times to allow access to multiple directories. All directories inside the allowed directories are also allowed.\nIt is optional. If not provided, the server will only have access to the home directory of the user running the server.\n\n## Usage\n\nThe MCP server is started by the client (e.g., Claude Desktop) based on the configuration you provide. You don't need to start the server manually.\n\n### Tools\n\nPatch File MCP provides one main tool:\n\n#### patch_file\n\nUpdate the file by applying a patch/edit to it using block format.\n\n```python\npatch_file(file_path: str, patch_content: str)\n```\n- **file_path**: Path to the file to be patched.\n- **patch_content**: Content to search and replace in the file using block format with SEARCH/REPLACE markers. Multiple blocks are supported.\n\nThe patch content must have the following format:\n\n```\n<<<<<<< SEARCH\nText to find in the file\n=======\nText to replace it with\n>>>>>>> REPLACE\n```\n\nYou can include multiple search-replace blocks in a single request:\n\n```\n<<<<<<< SEARCH\nFirst text to find\n=======\nFirst replacement\n>>>>>>> REPLACE\n<<<<<<< SEARCH\nSecond text to find\n=======\nSecond replacement\n>>>>>>> REPLACE\n```\n\nThis tool verifies that each search text appears exactly once in the file to ensure the correct section is modified. If a search text appears multiple times or isn't found, it will report an error.\n\n## Example Workflow\n\n1. Begin a conversation with Claude about modifying a file in your project\n2. Claude generates a block format patch that makes the desired changes\n3. Claude uses `patch_file` to apply these changes to your file\n4. If the patch fails, Claude provides detailed error information to help you fix the issue\n\n\n## Security Considerations\n\n- All file operations are restricted to allowed directories\n- Search texts must appear exactly once in the file to ensure correct targeting\n- Detailed error reporting helps identify and fix issues\n- Each patch operation is validated before being applied\n\n## Advantages over similar tools\n\n- **Multiple blocks in one operation**: Can apply several changes in a single call\n- **Safety checks**: Ensures the correct sections are modified through exact matching\n- **Detailed errors**: Provides clear feedback when patches can't be applied\n\n## Dependencies\n\n- fastmcp (>=2.2.0, <3.0.0)\n\n## License\n\nMIT"
}