{
  "mcp_name": "Box",
  "mcp_description": "Interact with the Intelligent Content Management platform through Box AI.",
  "mcp_id": "box-community_mcp-server-box",
  "fetch_timestamp": "2025-06-23T01:45:36.622728Z",
  "github_url": "https://github.com/box-community/mcp-server-box",
  "repository": {
    "name": "mcp-server-box",
    "full_name": "box-community/mcp-server-box",
    "description": "An MCP server capable of interacting with the Box API",
    "html_url": "https://github.com/box-community/mcp-server-box",
    "created_at": "2025-02-24T21:55:16Z",
    "updated_at": "2025-06-18T21:44:02Z",
    "pushed_at": "2025-05-19T15:36:05Z",
    "size": 143,
    "stargazers_count": 35,
    "watchers_count": 35,
    "forks_count": 10,
    "open_issues_count": 5,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "box-community",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/8659759?v=4",
      "html_url": "https://github.com/box-community"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 10,
    "subscribers_count": 4,
    "languages": {
      "Python": 41260
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 7,
    "contributors_count": 3
  },
  "readme": "# Box MCP Server\n\n## Description\n\nThe Box MCP Server is a Python project that integrates with the Box API to perform various operations such as file search, text extraction, AI-based querying, and data extraction. It leverages the `box-sdk-gen` library and provides a set of tools to interact with Box files and folders.\n\nThe Model Context Protocol (MCP) is a framework designed to standardize the way models interact with various data sources and services. In this project, MCP is used to facilitate seamless integration with the Box API, enabling efficient and scalable operations on Box files and folders. The Box MCP Server project aims to provide a robust and flexible solution for managing and processing Box data using advanced AI and machine learning techniques.\n\n## Tools Implemented\n\n### Box API Tools\n\n#### `box_who_am_i`\nGet your current user information and check connection status.\n- **Returns:** User information string\n\n#### `box_authorize_app_tool`\nStart the Box application authorization process.\n- **Returns:** Authorization status message\n\n#### `box_search_tool`\nSearch for files in Box.\n- **Parameters:**\n  - `query` (str): The query to search for.\n  - `file_extensions` (List[str], optional): File extensions to filter results.\n  - `where_to_look_for_query` (List[str], optional): Locations to search (e.g. NAME, DESCRIPTION, FILE_CONTENT, COMMENTS, TAG).\n  - `ancestor_folder_ids` (List[str], optional): List of folder IDs in which to search.\n- **Returns:** The search results as a newline‑separated list of file names and IDs.\n\n#### `box_read_tool`\nRead the text content of a Box file.\n\n**Parameters:**\n- `file_id` (str): ID of the file to read\n\n**Returns:** File content\n\n### `box_ask_ai_tool`\nAsk Box AI about a file.\n\n**Parameters:**\n- `file_id` (str): ID of the file\n- `prompt` (str): Question for the AI\n\n**Returns:** AI response\n\n### `box_hubs_ask_ai_tool`\nAsk Box AI about a hub. There is currently no way via API to discover a hub ID, so you must know the ID to use this tool. We will fix this in the future.\n\n**Parameters:**\n- `hubs_id` (str): ID of the hub\n- `prompt` (str): Question for the AI\n\n**Returns:** AI response\n\n### `box_search_folder_by_name`\nLocate a folder by name.\n\n**Parameters:**\n- `folder_name` (str): Name of the folder\n\n**Returns:** Folder ID\n\n### `box_ai_extract_data`\nExtract data from a file using AI.\n\n**Parameters:**\n- `file_id` (str): ID of the file\n- `fields` (str): Fields to extract\n\n**Returns:** Extracted data in JSON format\n\n### `box_list_folder_content_by_folder_id`\nList folder contents.\n\n**Parameters:**\n- `folder_id` (str): ID of the folder\n- `is_recursive` (bool): Whether to list recursively\n\n**Returns:** Folder content in JSON format with id, name, type, and description\n\n### `box_manage_folder_tool`\nCreate, update, or delete folders in Box.\n\n**Parameters:**\n- `action` (str): Action to perform: \"create\", \"delete\", or \"update\"\n- `folder_id` (str, optional): ID of the folder (required for delete/update)\n- `name` (str, optional): Folder name (required for create, optional for update)\n- `parent_id` (str, optional): Parent folder ID (required for create, optional for update)\n- `description` (str, optional): Folder description (optional for update)\n- `recursive` (bool, optional): Whether to delete recursively (optional for delete)\n\n**Returns:** Status message with folder details\n\n### `box_upload_file_tool`\n=======\n- **Parameters:**\n  - `file_id` (str): The ID of the file to be read.\n- **Returns:** Text content of the file.\n\n#### `box_ask_ai_tool`\nQuery Box AI regarding a single file.\n- **Parameters:**\n  - `file_id` (str): The file identifier.\n  - `prompt` (str): Query or instruction for the AI.\n- **Returns:** AI response based on the file content.\n\n#### `box_ask_ai_tool_multi_file`\nQuery Box AI using multiple files.\n- **Parameters:**\n  - `file_ids` (List[str]): List of file IDs.\n  - `prompt` (str): Instruction for the AI based on the aggregate content.\n- **Returns:** AI-generated answer considering all files provided.\n\n#### `box_search_folder_by_name`\nLocate a folder in Box by its name.\n- **Parameters:**\n  - `folder_name` (str): Name of the folder.\n- **Returns:** Information (name and ID) about matching folders.\n\n#### `box_ai_extract_data`\nExtract specific fields from a file using AI.\n- **Parameters:**\n  - `file_id` (str): ID of the file.\n  - `fields` (str): Comma‑separated list of fields to extract.\n- **Returns:** Extracted data in JSON string format.\n\n#### `box_list_folder_content_by_folder_id`\nList a folder’s content using its ID.\n- **Parameters:**\n  - `folder_id` (str): Folder ID.\n  - `is_recursive` (bool, optional): Whether to list the content recursively.\n- **Returns:** Folder contents as a JSON string including id, name, type, and description.\n\n#### `box_manage_folder_tool`\nCreate, update, or delete a folder in Box.\n- **Parameters:**\n  - `action` (str): Action to perform: \"create\", \"delete\", or \"update\".\n  - `folder_id` (str, optional): Folder ID (required for delete and update).\n  - `name` (str, optional): Folder name (required for create, optional for update).\n  - `parent_id` (str, optional): Parent folder ID (defaults to \"0\" for root).\n  - `description` (str, optional): Description for the folder (for update).\n  - `recursive` (bool, optional): For recursive delete.\n- **Returns:** Status message with folder details.\n\n#### `box_upload_file_from_path_tool`\nUpload a file to Box from a local filesystem path.\n- **Parameters:**\n  - `file_path` (str): Local file path.\n  - `folder_id` (str, optional): Destination folder ID (defaults to \"0\").\n  - `new_file_name` (str, optional): New file name (if not provided, uses the original file name).\n- **Returns:** Details about the uploaded file (ID and name) or an error message.\n\n#### `box_upload_file_from_content_tool`\nUpload content as a file to Box.\n- **Parameters:**\n  - `content` (str | bytes): Content to upload (text or binary).\n  - `file_name` (str): The name to assign the file.\n  - `folder_id` (str, optional): Destination folder ID (defaults to \"0\").\n  - `is_base64` (bool, optional): Indicates if the provided content is base64 encoded.\n- **Returns:** Upload success message with file ID and name.\n\n#### `box_download_file_tool`\nDownload a file from Box.\n- **Parameters:**\n  - `file_id` (str): The ID of the file to download.\n  - `save_file` (bool, optional): Whether to save the file locally.\n  - `save_path` (str, optional): The local path where the file should be saved.\n- **Returns:** For text files, returns the content; for images, returns base64‑encoded data; for other types, an error or save‑confirmation message.\n\n### Box Doc Gen Tools\n\n#### `box_docgen_create_batch_tool`\nGenerate documents using a Box Doc Gen template and a local JSON file.\n- **Parameters:**\n  - `file_id` (str): Template file ID.\n  - `destination_folder_id` (str): Folder ID where generated documents should be stored.\n  - `user_input_file_path` (str): Path to a JSON file with input data.\n  - `output_type` (str, optional): Output format (default is \"pdf\").\n- **Returns:** The result of the document generation batch as a JSON string.\n\n#### `box_docgen_get_job_tool`\nFetch a single Doc Gen job by its ID.\n- **Parameters:**\n  - `job_id` (str): The job identifier.\n- **Returns:** Job details in a JSON‑formatted string.\n\n#### `box_docgen_list_jobs_tool`\nList all Doc Gen jobs associated with the current user.\n- **Parameters:**\n  - `marker` (str | None, optional): Pagination marker.\n  - `limit` (int | None, optional): Maximum number of jobs to return.\n- **Returns:** Paginated list of jobs in pretty‑printed JSON.\n\n#### `box_docgen_list_jobs_by_batch_tool`\nList Doc Gen jobs belonging to a specific batch.\n- **Parameters:**\n  - `batch_id` (str): The batch identifier.\n  - `marker` (str | None, optional): Pagination marker.\n  - `limit` (int | None, optional): Maximum number of jobs to return.\n- **Returns:** Batch jobs details as JSON.\n\n#### `box_docgen_template_create_tool`\nMark a file as a Box Doc Gen template.\n- **Parameters:**\n  - `file_id` (str): File ID to mark as a template.\n- **Returns:** Template details after marking.\n\n#### `box_docgen_template_list_tool`\nList all available Box Doc Gen templates.\n- **Parameters:**\n  - `marker` (str | None, optional): Pagination marker.\n  - `limit` (int | None, optional): Maximum number of templates to list.\n- **Returns:** List of templates in JSON format.\n\n#### `box_docgen_template_delete_tool`\nRemove the Doc Gen template marking from a file.\n- **Parameters:**\n  - `template_id` (str): The template identifier.\n- **Returns:** Confirmation of deletion as JSON.\n\n#### `box_docgen_template_get_by_id_tool`\nRetrieve details of a specific Doc Gen template.\n- **Parameters:**\n  - `template_id` (str): The template identifier.\n- **Returns:** Template details as JSON.\n\n#### `box_docgen_template_list_tags_tool`\nList all tags associated with a Box Doc Gen template.\n- **Parameters:**\n  - `template_id` (str): The template ID.\n  - `template_version_id` (str | None, optional): Specific version ID.\n  - `marker` (str | None, optional): Pagination marker.\n  - `limit` (int | None, optional): Maximum number of tags to return.\n- **Returns:** List of tags in JSON format.\n\n#### `box_docgen_template_list_jobs_tool`\nList all Doc Gen jobs that used a specific template.\n- **Parameters:**\n  - `template_id` (str): The template identifier.\n  - `marker` (str | None, optional): Pagination marker.\n  - `limit` (int | None, optional): Maximum number of jobs to list.\n- **Returns:** Job details for the template as a JSON string.\n\n## Requirements\n\n- Python 3.13 or higher\n- Box API credentials (Client ID, Client Secret, etc.)\n\n## Installation\n\n1. Clone the repository:\n\n    ```sh\n    git clone https://github.com/box-community/mcp-server-box.git\n    cd mcp-server-box\n    ```\n\n2. Install `uv` if not installed yet:\n\n    2.1 MacOS+Linux\n\n    ```sh\n    curl -LsSf https://astral.sh/uv/install.sh | sh\n    ```\n\n    2.2 Windows\n\n    ```powershell\n    powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n    ```\n    \n3. Create and set up our project:\n\n    3.1 MacOS+Linux\n\n    ```sh\n    # Create virtual environment and activate it\n    uv venv\n    source .venv/bin/activate\n\n    # Lock the dependencies\n    uv lock\n    ```\n\n    3.2 Windows\n\n    ```sh\n    # Create virtual environment and activate it\n    uv venv\n    .venv\\Scripts\\activate\n\n    # Lock the dependencies\n    uv lock\n    ```\n\n4. Create a `.env` file in the root directory and add your Box API credentials:\n\n    ```.env\n    BOX_CLIENT_ID=your_client_id\n    BOX_CLIENT_SECRET=your_client_secret\n    ```\n\n## Usage\n\n### Running the MCP Server\n\nTo start the MCP server, run the following command:\n\n```sh\nuv --directory /Users/anovotny/Desktop/mcp-server-box run src/mcp_server_box.py\n```\n\n### Using Claude as the client\n\n1. Edit your `claude_desktop_config.json`:\n\n    ```sh\n    code ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n    ```\n\n2. Add the configuration:\n\n    ```json\n    {\n        \"mcpServers\": {\n            \"mcp-server-box\": {\n                \"command\": \"uv\",\n                \"args\": [\n                    \"--directory\",\n                    \"/Users/anovotny/Desktop/mcp-server-box\",\n                    \"run\",\n                    \"src/mcp_server_box.py\"\n                ]\n            }\n        }\n    }\n    ```\n\n3. Restart Claude if it is running.\n\n### Using Cursor as the client\n\n1. Open your IDE with Cursor.\n2. In settings, select `Cursor settings`.\n3. In the left nav, select `MCP`.\n4. In the top-left, click `Add new global MCP server`.\n5. Paste the following JSON (update for your local values):\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"box\": {\n          \"command\": \"uv\",\n          \"args\": [\n            \"--directory\",\n            \"/Users/shurrey/local/mcp-server-box\",\n            \"run\",\n            \"src/mcp_server_box.py\"\n          ]\n        }\n      }\n    }\n    ```\n\n6. Save and close the mcp.json file, and restart if necessary.\n\n## Running Tests\n\nThe project includes a suite of tests to verify Box API functionality. Before running the tests, update the file and folder IDs in the test files to match those in your Box account.\n\n### Setting Up Tests\n\n1. **Update File and Folder IDs**: \n   - Each test file (in the `tests/` directory) uses hardcoded IDs for Box files and folders.\n   - Replace these IDs with valid IDs from your Box account.\n2. **File ID References**:\n   - For example, in `tests/test_box_api_read.py`, replace `\"1728677291168\"` with a valid file ID.\n\n### Running Tests\n\nOnce you've updated the IDs, you can run the tests using pytest:\n\n```bash\n# Run all tests\npytest\n\n# Run a specific test file\npytest tests/test_box_api_file_ops.py\n\n# Run tests with detailed output\npytest -v\n\n# Run tests and show print statements\npytest -v -s\n```\n\n### Available Test Suites\n\n- `test_box_auth.py`: Tests authentication functionality.\n- `test_box_api_basic.py`: Basic Box API tests.\n- `test_box_api_read.py`: Tests file reading capabilities.\n- `test_box_api_search.py`: Tests search functionality.\n- `test_box_api_ai.py`: Tests AI-based features.\n- `test_box_api_file_ops.py`: Tests file upload and download operations.\n- Additional tests cover folder operations and Doc Gen features.\n\n## Troubleshooting\n\nIf you receive the error `Error: spawn uv ENOENT` on MacOS when running the MCP server with Claude Desktop, you may:\n- Remove uv and reinstall it with Homebrew: `brew install uv`\n- Or provide the full path to the uv executable in your configuration:\n  \n  ```sh\n  /Users/shurrey/.local/bin/uv --directory /Users/shurrey/local/mcp-server-box run src/mcp_server_box.py\n  ```\n\n> [!NOTE]\n> Make sure your Box API credentials in `.env` are correctly set.\n"
}