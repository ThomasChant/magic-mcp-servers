{
  "mcp_name": "FlatFilers/mcp-server-flatfile",
  "mcp_description": "Facilitates interaction with the Flatfile API through a customizable MCP server, enabling streamlined data management and integration.",
  "mcp_id": "FlatFilers_mcp-server-flatfile",
  "fetch_timestamp": "2025-06-23T03:19:59.315754Z",
  "github_url": "https://github.com/FlatFilers/mcp-server-flatfile",
  "repository": {
    "name": "mcp-server-flatfile",
    "full_name": "FlatFilers/mcp-server-flatfile",
    "description": null,
    "html_url": "https://github.com/FlatFilers/mcp-server-flatfile",
    "created_at": "2025-04-28T21:34:01Z",
    "updated_at": "2025-04-30T13:25:16Z",
    "pushed_at": "2025-04-30T13:25:12Z",
    "size": 138,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "FlatFilers",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/31830338?v=4",
      "html_url": "https://github.com/FlatFilers"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 3,
    "languages": {
      "TypeScript": 578934,
      "JavaScript": 794
    },
    "language_percentages": {
      "TypeScript": 99.86,
      "JavaScript": 0.14
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "tags": [
      {
        "name": "v0.1.1",
        "commit_sha": "2e0d1e6f25f8092a47c5231458b9e2b5a6844044"
      },
      {
        "name": "v0.1.0",
        "commit_sha": "da3a3e6c522e64e5ae1a8b70c2e7f6cb37081b44"
      },
      {
        "name": "v0.0.18",
        "commit_sha": "25fac0901956cd4c55c3decea0480d00b4353440"
      }
    ],
    "latest_version": "v0.1.1",
    "package_json_version": "0.1.1"
  },
  "readme": "# Flatfile MCP Server\n\nThe Flatfile MCP Server enables AI assistants such as Claude Desktop, Claude Code, Cursor, and other to interact directly with your Flatfile data. This MCP Server creates a seamless bridge between AI assistants and Flatfile.\n\n## ‚ú® Features\n\n- Supports 100+ Flatfile API endpoints\n- View and manage Sheets, Workbooks, Spaces, and more\n- Add, edit, and delete Records\n- Ask questions about your data\n- Generate Sheets from natural language\n- Create new Workbooks from scratch\n- And more!\n\n## üõ†Ô∏è Setup\n\nYou will need either a Flatfile Personal Access Token or a Flatfile API Key.\n\n### API Key\n\nAccess your API Key by [following these instructions](https://flatfile.com/docs/documentation/authentication/authentication).\n\n### Personal Access Token\n\nCreate a Flatfile Personal Access Token by [following these instructions](https://flatfile.com/docs/documentation/authentication/account-token#personal-access-tokens).\n\n### Filtering Tools\n\nFlatfile provides over 100 API endpoints, with a tool to interact with each of them. It is strongly recommended to filter the tools to only include the ones you need. This can be done by passing the `--enabled-tools` flag to the MCP Server along with a comma-separated list of the tools you want to enable. If the `--enabled-tools` flag is not passed, all tools will be enabled.\n\nExample:\n```json\n{\n  \"mcpServers\": {\n      // ...\n      \"mcp-server-flatfile\": {\n         \"command\": \"npx\",\n         \"args\": [\"-y\", \"@flatfile/mcp-server\", \"--enabled-tools\", \"getRecords,updateRecords\"],\n         // ...\n      }\n      // ...\n  }\n}\n```\n\n### Usage with Claude Desktop\n\nAdd the following to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-flatfile\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@flatfile/mcp-server\", \"--enabled-tools\", \"...\"], // Replace with the tools you want to enable\n      \"env\": {\n        \"FLATFILE_BEARER_TOKEN\": \"pat_your_token_here\",\n        \"FLATFILE_API_URL\": \"https://platform.flatfile.com/api/v1\" // Optional, for non-US regions or self-hosting\n      }\n    }\n  }\n}\n```\n\n### Usage with Claude Code\n\nAdd the following to your `.claude/code/config.json`:\n\n```bash\nclaude mcp add mcp-server-flatfile -e FLATFILE_API_URL=https://platform.flatfile.com/api/v1 -e FLATFILE_BEARER_TOKEN=pat_your_token_here -- npx -y @flatfile/mcp-server --enabled-tools ... // Replace with the tools you want to enable\n```\n\n[Claude Code instructions](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/tutorials#set-up-model-context-protocol-mcp) on how to add a MCP Server.\n\n### Usage with Cursor\n\nAdd the following to your `.cursor/mcp.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-flatfile\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@flatfile/mcp-server\", \"--enabled-tools\", \"...\"], // Replace with the tools you want to enable\n      \"env\": {\n        \"FLATFILE_BEARER_TOKEN\": \"pat_your_token_here\",\n        \"FLATFILE_API_URL\": \"https://platform.flatfile.com/api/v1\" // Optional, for non-US regions or self-hosting\n      }\n    }\n  }\n}\n```\n\n## üîß Available Tools\n\n* **ackEvent** - Acknowledge an event: Acknowledge an event\n* **ackJob** - Acknowledge a job: Acknowledge a job and return the job\n* **ackOutcomeJob** - Acknowledge a job outcome: Acknowledge a job outcome and return the job\n* **archiveSpace** - Archives a space: Sets archivedAt timestamp on a space\n* **assignAgentRole** - Assign Role to Agent: Assigns a role to a agent.\n* **assignGuestRole** - Assign Role to Guest: Assigns a role to a guest.\n* **assignUserRole** - Assign Role to User: Assigns a role to a user.\n* **bulkCreateActions** - Create several actions: Create several actions\n* **bulkDeleteSpace** - Delete spaces: Delete multiple spaces by id\n* **cancelJob** - Cancel a job: Cancel a job and return the job\n* **completeJob** - Complete a job: Complete a job and return the job\n* **createAction** - Create an action: Create an action\n* **createAgent** - Create an agent: Create an agent\n* **createAndInviteUser** - Create and Invite User: Creates and invites a new user to your account.\n* **createApp** - Create an app: Creates an app\n* **createAssistant** - Create a prompt: Creates a prompt\n* **createCanvasArea** - Create a canvas area: Creates a new canvas area\n* **createConstraintApp** - Create constraint: Creates a new constraint for an app\n* **createDataRetentionPolicy** - Create a data retention policy: Add a new data retention policy to the space\n* **createDocument** - Create a document: Add a new document to the space\n* **createDraftSpace** - Create a draft of a space: Creates a draft of a space\n* **createEnvironment** - Create an environment: Create a new environment\n* **createEvent** - Create an event: Create an event\n* **createGuidanceSpace** - Create a new guidance: Creates a new guidance\n* **createGuideEnvironment** - Create a guide: Creates a guide\n* **createIdVersion** - createId: createId\n* **createJob** - Create a job: Create a job\n* **createMappingProgram** - Create a mapping between two schemas: Creates a list of mapping rules based on two provided schemas\n* **createRoutine** - Create a routine: Creates a new routine\n* **createRulesMapping** - Add mapping rules to a program: Add mapping rules to a program\n* **createRunbook** - Create a runbook: Creates a new runbook\n* **createSnapshot** - Create a snapshot: Creates a snapshot of a sheet\n* **createSpace** - Create a space: Creates a new space based on an existing Space Config\n* **createView** - Create a view: Add a new view to the space\n* **createWorkbook** - Create a workbook: Creates a workbook and adds it to a space\n* **deleteAction** - Delete an action: Delete an action\n* **deleteAgent** - Delete an agent: Deletes a single agent\n* **deleteAgentExport** - Delete an agent export: Delete an agent export\n* **deleteAgentRole** - Remove Role from Agent: Removes a role from an agent.\n* **deleteAllHistoryForUserMapping** - Delete all history for the authenticated user: Deletes all history for the authenticated user\n* **deleteApp** - Delete an app: Deletes an app\n* **deleteAssistant** - Delete a prompts: Deletes a prompts\n* **deleteCanvasArea** - Delete a canvas area: Deletes a specific canvas area\n* **deleteConstraintApp** - Delete constraint: Deletes a specific constraint\n* **deleteDataRetentionPolicy** - Delete a data retention policy: Deletes a single data retention policy\n* **deleteDocument** - Delete a document: Deletes a single document\n* **deleteEnvironment** - Delete an environment: Deletes a single environment\n* **deleteFile** - Delete a file: Delete a file\n* **deleteGuest** - Delete a guest: Deletes a single guest\n* **deleteGuestRole** - Remove Role from Guest: Removes a role from a guest.\n* **deleteGuidanceSpace** - Delete a guidance: Deletes a guidance by its id\n* **deleteGuideEnvironment** - Delete a guide: Deletes a guide\n* **deleteJob** - Delete a job: Delete a job\n* **deleteMappingProgram** - Delete a mapping program: Deletes a mapping program\n* **deleteMultipleRulesMapping** - Delete multiple mapping rules: Deletes multiple mapping rules from a program\n* **deleteRecords** - Delete records: Deletes records from a workbook sheet\n* **deleteRoutine** - Delete a routine: Deletes a routine\n* **deleteRuleMapping** - Delete a mapping rule: Deletes a mapping rule from a program\n* **deleteRunbook** - Delete a runbook: Deletes a runbook\n* **deleteSecret** - Delete a secret by it\n* **deleteSheet** - Delete a sheet: Deletes a specific sheet from a workbook\n* **deleteSnapshot** - Delete a snapshot: Deletes a snapshot of a sheet\n* **deleteSpace** - Delete a space: Delete a space\n* **deleteUser** - Delete a user: Deletes a user\n* **deleteUserRole** - Remove Role from User: Removes a role from a user.\n* **deleteView** - Delete a view: Deletes a single view\n* **deleteWorkbook** - Delete a workbook: Deletes a workbook and all of its record data permanently\n* **downloadAgentExport** - Download an agent export: Download an agent export\n* **downloadFile** - Download a file: Download a file\n* **duplicateSheet** - Duplicate a sheet: Creates a copy of a sheet including all its data within the same workbook\n* **executeJob** - Execute a job: Execute a job and return the job\n* **failJob** - Fail a job: Fail a job and return the job\n* **getAction** - Get an action: Get an action\n* **getAgent** - Get an agent: Get an agent\n* **getAgentExport** - Get an agent export: Get an agent export\n* **getAgentLog** - Get an agent log: Get an agent log\n* **getAgentLogs** - Get logs for an agent: Get logs for an agent\n* **getAllActions** - Get all actions for the space: Get all actions for the space\n* **getApp** - Get an app: Returns an app\n* **getAssistant** - Get a prompt: Returns a prompt\n* **getCalculationsSheet** - List calculations: Returns all calculations for a sheet\n* **getCanvasArea** - Get a canvas area: Returns a specific canvas area by ID\n* **getCellValuesSheet** - Get record cells by field: Returns record cell values grouped by all fields in the sheet\n* **getCommit** - Get a commit version: Returns the details of a commit version\n* **getConstraintByIdApp** - Get constraint by ID: Returns a specific constraint\n* **getConstraintsApp** - Get constraints: Returns constraints for an app\n* **getConstraintVersionApp** - Get constraint version: Returns a specified version of a specific constraint\n* **getConstraintVersionsApp** - Get constraint versions: Returns the versions of a specific constraint\n* **getCurrentAccounts** - Get the current account: Get the current account\n* **getDataRetentionPolicy** - Get a data retention policy: Returns a single data retention policy\n* **getDocument** - Get a document: Returns a single document\n* **getEnvironment** - Get an environment: Returns a single environment\n* **getEnvironmentAgentExecutionsAgents** - Get all executions in your environment: Get all executions in your environment\n* **getEnvironmentAgentLogsAgents** - Get all agent logs in your environment: Get all agent logs in your environment\n* **getEvent** - Get an event: Get an event\n* **getEventTokenEvents** - Get subscription credentials: Get a token which can be used to subscribe to events for this space\n* **getExecutionPlanJob** - Get a job\n* **getFile** - Get a file: Get a file\n* **getGuest** - Get a guest: Returns a single guest\n* **getGuestToken** - Get guest token: Returns a single guest token\n* **getGuidanceSpace** - Get a guidance: Retrieves a guidance by its id\n* **getGuideEnvironment** - Get a guide: Returns a guide\n* **getGuideVersionEnvironment** - Get guide version: Returns a specified version of a specific guide\n* **getJob** - Get a job: Get a job\n* **getMappingProgram** - Get a mapping program: Get a mapping program\n* **getRecordCountsSheet** - Get record counts: Returns counts of records from a sheet\n* **getRecords** - Get records: Returns records from a sheet in a workbook\n* **getRecordsAsCsvSheet** - Download records as a CSV file: Returns records from a sheet in a workbook as a csv file\n* **getRoutine** - Get a routine: Returns a routine\n* **getRuleMapping** - Get a mapping rule: Get a mapping rule from a program\n* **getRunbook** - Get a runbook: Returns a runbook\n* **getSftpCredentialsAuth** - Get SFTP credentials for Space: Get SFTP credentials for Space\n* **getSheet** - Get a sheet: Returns a sheet in a workbook\n* **getSheetCommits** - Get commit versions for a sheet: Returns the commit versions for a sheet\n* **getSnapshot** - Get a snapshot: Gets a snapshot of a sheet\n* **getSnapshotRecords** - Get records from a snapshot: Gets records from a snapshot of a sheet\n* **getSpace** - Get a space: Returns a single space\n* **getUser** - Get a user: Gets a user\n* **getView** - Get a view: Returns a single view\n* **getWorkbook** - Get a workbook: Returns a single workbook\n* **getWorkbookCommits** - Get commits for a workbook: Returns the commits for a workbook\n* **indicesRecords** - Get record Indices: Returns indices of records from a sheet in a workbook\n* **insertRecords** - Insert records: Adds records to a workbook sheet\n* **listAgentExports** - List agent exports: List agent exports\n* **listAgentRoles** - List Agent Roles: Lists roles assigned to an agent.\n* **listAgents** - List agents: List agents\n* **listApps** - List apps: Returns apps in an account\n* **listAssistant** - List prompts: Returns prompts created by user\n* **listCanvasAreas** - List canvas areas: Returns a list of canvas areas filtered by canvas, space, or environment\n* **listDocuments** - List documents: Returns all documents for a space\n* **listEntitlements** - List entitlements: Returns all entitlements matching a filter for resourceId\n* **listEnvironments** - List environments: Get all environments\n* **listEvents** - List events: Event topics that the Flatfile Platform emits.\n* **listFiles** - List files: List files\n* **listGuestRoles** - List Guest Roles: Lists roles assigned to a guest.\n* **listGuests** - List guests: Returns all guests\n* **listGuidanceSpace** - List guidances: Lists guidances\n* **listGuidesEnvironment** - List guides: Returns guides in an account\n* **listJobs** - List jobs: List jobs\n* **listMappingPrograms** - List mapping programs: List all mapping programs\n* **listRoles** - List roles: List all roles for an account\n* **listRoutines** - List routines: Returns a list of routines\n* **listRulesMapping** - List mapping rules: List all mapping rules in a program\n* **listRunbooks** - List runbooks: Returns a list of runbooks\n* **listSecrets** - List secrets: Fetch all secrets for a given environmentId and optionally apply space overrides\n* **listSheets** - List sheets: Returns sheets in a workbook\n* **listSnapshots** - List snapshots: List all snapshots of a sheet\n* **listSpaceDrafts** - List drafts for a space: Lists drafts for a space\n* **listSpaces** - List spaces: Returns all spaces for an account or environment\n* **listUserRoles** - List User Roles: Lists roles assigned to a user.\n* **listUsers** - List users: Gets a list of users\n* **listVersionsAgent** - List agent versions for an agent: List agent versions for an agent\n* **listViews** - List views by Sheet: Returns all views for the sheet\n* **listWorkbooks** - List workbooks: Returns all workbooks matching a filter for an account or space\n* **lockSheet** - Lock a sheet: Locks a sheet\n* **previewMutationJob** - Preview a mutation: Preview the results of a mutation\n* **resendInviteUser** - Resend User Invite: Resends an invite to a user for your account.\n* **restoreSnapshot** - Restore a snapshot: Restores a snapshot of a sheet\n* **retryJob** - Retry a failed job: Retry a failt job and return the job\n* **revertAgent** - Revert to a specific agent version: Revert to a specific agent version\n* **splitJob** - Split a job: Split a job and return the job\n* **unarchiveSpace** - Unarchives a space: Sets archivedAt timestamp on a space to null\n* **unlockSheet** - Unlock a sheet: Removes a lock from a sheet\n* **updateAction** - Update an action: Update an action\n* **updateApp** - Update an app: Updates an app\n* **updateAssistant** - Update a prompt: Updates a prompt\n* **updateCanvasArea** - Update a canvas area: Updates an existing canvas area\n* **updateConstraintApp** - Update constraint: Updates a specific constraint\n* **updateCurrentAccount** - Update the current account: Update the current account\n* **updateDataRetentionPolicy** - Update a data retention policy: Updates a single data retention policy\n* **updateDocument** - Update a document: updates a single document, for only the body and title\n* **updateEnvironment** - Update an environment: Updates a single environment, to change the name for example\n* **updateExecutionPlanFieldsJob** - Update a job\n* **updateExecutionPlanJob** - Replace a job\n* **updateFile** - Update a file: Update a file, to change the workbook id for example\n* **updateGuest** - Update a guest: Updates a single guest, for example to change name or email\n* **updateGuidanceSpace** - Update a guidance: Updates a guidance with the given id\n* **updateGuideEnvironment** - Update a guide: Updates a guide\n* **updateJob** - Update a job: Update a job\n* **updateMappingProgram** - Update a mapping program: Updates a mapping program\n* **updateRecords** - Update records: Updates existing records in a workbook sheet\n* **updateRoutine** - Update a routine: Updates a routine\n* **updateRuleMapping** - Update a mapping rule: Updates a mapping rule in a program\n* **updateRulesMapping** - Update a list of mapping rules: Updates a list of mapping rules in a program\n* **updateRunbook** - Update a runbook: Updates a runbook\n* **updateSheet** - Update a sheet: Updates Sheet\n* **updateSpace** - Update a space: Update a space, to change the name for example\n* **updateUser** - Update a user: Updates a user\n* **updateView** - Update a view: Updates a single view\n* **uploadFile** - Upload a file: Upload a file\n* **upsertSecret** - Upsert a Secret: Insert or Update a Secret by name for environment or space\n* **validateSheet** - Validate a sheet: Trigger data hooks and validation to run on a sheet\n"
}