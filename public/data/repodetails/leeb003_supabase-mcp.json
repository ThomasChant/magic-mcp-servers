{
  "mcp_name": "leeb003/supabase-mcp",
  "mcp_description": "Facilitates CRUD operations on Supabase databases through a FastAPI-based MCP server, ensuring seamless integration with Cursor.",
  "mcp_id": "leeb003_supabase-mcp",
  "fetch_timestamp": "2025-06-23T06:06:51.438795Z",
  "github_url": "https://github.com/leeb003/supabase-mcp",
  "repository": {
    "name": "supabase-mcp",
    "full_name": "leeb003/supabase-mcp",
    "description": "Supabase MCP Integration",
    "html_url": "https://github.com/leeb003/supabase-mcp",
    "created_at": "2025-04-16T21:01:00Z",
    "updated_at": "2025-04-17T19:17:20Z",
    "pushed_at": "2025-04-17T19:17:17Z",
    "size": 33,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "leeb003",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/5447395?v=4",
      "html_url": "https://github.com/leeb003"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 25169,
      "Dockerfile": 856
    },
    "language_percentages": {
      "Python": 96.71,
      "Dockerfile": 3.29
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# Supabase MCP Server\n\nA Model Context Protocol server for interacting with Supabase databases using FastAPI and FastMCP. This server provides a set of tools for performing CRUD operations on Supabase tables through a standardized interface.\n\n## Project Structure\n\n```\nsupabase-mcp/\n├── src/\n│   ├── server.py        # FastAPI + MCP server\n│   ├── config.py        # Configuration management\n│   ├── types.py         # Pydantic models\n│   ├── supabase_client.py  # Supabase client setup\n│   └── tools/\n│       └── database.py  # Database operations\n├── tests/\n│   ├── test_types.py    # Unit tests\n│   └── test_integration.py  # Integration tests\n├── .env.example         # Environment variables template\n├── config.json.example  # Server configuration template\n├── pyproject.toml      # Project configuration\n├── requirements.txt    # Project dependencies\n└── README.md          # Documentation\n```\n\n## Features\n\n- FastAPI server with health endpoint\n- Read rows from tables with filtering, column selection, and sorting\n- Create single or multiple records\n- Update records based on filters\n- Delete records based on filters\n- Full Pydantic validation for all operations\n- Comprehensive type hints and documentation\n- Integration tests with Supabase\n- Real-time database event streaming using Server-Sent Events (SSE)\n\n## Setup\n\n1. Create a Python 3.11+ virtual environment:\n```bash\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n```\n\n2. Install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n3. Copy configuration files:\n```bash\ncp .env.example .env\ncp config.json.example config.json\n```\n\n4. Update configuration files with your Supabase credentials:\n- `.env`: Set your Supabase URL and key\n- `config.json`: Adjust server settings if needed\n\n## Running the Server\n\n```bash\npython -m src.server\n```\n\nThe server will start on http://localhost:3000 by default.\n\n## Running Tests\n\n```bash\n# Run all tests\npytest\n\n# Run only unit tests\npytest tests/test_types.py\n\n# Run only integration tests\npytest tests/test_integration.py\n```\n\n## API Endpoints\n\n### Health Check\n- GET `/health`\n  - Returns server status and version\n\n## MCP Tools\n\n### read_table_rows\nRead and filter rows from a table with optional column selection, filtering, sorting, and pagination.\n\nExample:\n```python\n{\n    \"table_name\": \"users\",\n    \"columns\": [\"id\", \"name\", \"email\"],\n    \"filters\": {\"active\": true},\n    \"order_by\": {\"created_at\": \"desc\"},\n    \"limit\": 10\n}\n```\n\n### create_records\nCreate one or multiple records in a table.\n\nExample:\n```python\n{\n    \"table_name\": \"users\",\n    \"records\": [\n        {\"name\": \"John\", \"email\": \"john@example.com\"},\n        {\"name\": \"Jane\", \"email\": \"jane@example.com\"}\n    ]\n}\n```\n\n### update_records\nUpdate records that match specific criteria.\n\nExample:\n```python\n{\n    \"table_name\": \"users\",\n    \"updates\": {\"status\": \"verified\"},\n    \"filters\": {\"email\": \"john@example.com\"}\n}\n```\n\n### delete_records\nDelete records that match specific criteria.\n\nExample:\n```python\n{\n    \"table_name\": \"users\",\n    \"filters\": {\"status\": \"inactive\"}\n}\n```\n\n## Server-Sent Events (SSE) Support\n\nThe Supabase MCP Server provides real-time event streaming using Server-Sent Events (SSE). This allows clients (such as MCP clients or custom UIs) to receive live notifications from the server without polling.\n\n### SSE Endpoints\n\n- **GET `/sse/stream`**\n  - Clients can connect to this endpoint to receive a live stream of server events.\n  - The response uses the `text/event-stream` media type.\n  - Example (using `curl`):\n    ```bash\n    curl -N http://localhost:3000/sse/stream\n    ```\n\n- **POST `/sse/messages`**\n  - Internal components or authorized users can broadcast a message to all connected SSE clients.\n  - Example (using `curl`):\n    ```bash\n    curl -X POST http://localhost:3000/sse/messages \\\n      -H \"Content-Type: application/json\" \\\n      -d '{\"message\": \"Hello, SSE!\"}'\n    ```\n\n### Usage Notes\n- The SSE stream remains open; each message is sent as a new event.\n- For production, restrict the `/sse/messages` endpoint to internal or authenticated use.\n- This feature is fully async and does not interfere with existing MCP or Supabase endpoints.\n\n### Example Use Cases\n- Notify clients of schema changes or new data.\n- Provide live feedback for long-running operations.\n- Enable UIs to react to backend events in real-time.\n\n## Docker\n\nYou can run this MCP server in a Docker container:\n\n```sh\n# Build the Docker image\ndocker build -t supabase-mcp .\n\n# Run the container (using your .env file for environment variables)\ndocker run --env-file .env -p 3000:3000 supabase-mcp\n```\n\nThe server will be available at http://localhost:3000\n\n## Cursor Integration\n\nThis MCP server is designed to work with Cursor. To set it up:\n\n1. Ensure you have Cursor installed and updated to the latest version.\n\n2. Set up your environment variables in Cursor:\n   - Open Cursor Settings\n   - Navigate to Environment Variables\n   - Add the following variables:\n     ```\n     SUPABASE_URL=your_project_url\n     SUPABASE_KEY=your_service_role_key\n     ```\n\n3. The `.cursor/mcp.json` file is already configured with:\n   ```json\n   {\n     \"mcpServers\": {\n       \"supabase\": {\n         \"command\": \"python\",\n         \"args\": [\"-m\", \"src.server\"],\n         \"env\": {\n           \"SUPABASE_URL\": \"${env:SUPABASE_URL}\",\n           \"SUPABASE_KEY\": \"${env:SUPABASE_KEY}\",\n           \"SERVER_PORT\": \"3000\",\n           \"PYTHONPATH\": \"${workspaceFolder}\"\n         },\n         \"cwd\": \"${workspaceFolder}\"\n       }\n     }\n   }\n   ```\n\n4. Verify Integration:\n   - Open Cursor\n   - Go to Settings > MCP\n   - You should see \"supabase\" listed with a green status\n   - If not green, check your environment variables and Python setup\n\n5. Test the Integration:\n   Try these example queries in Cursor:\n   ```\n   List all users in the database\n   ```\n   ```\n   Create a new user with email test@example.com and name \"Test User\"\n   ```\n   ```\n   Update the user with email test@example.com to have name \"Updated User\"\n   ```\n\n## Troubleshooting Cursor Integration\n\nIf you encounter issues:\n\n1. Verify Environment Variables:\n   - Check that all required environment variables are set in Cursor\n   - Ensure the values are correct and properly formatted\n\n2. Check Python Setup:\n   - Ensure Python 3.11+ is installed and in your PATH\n   - Verify the virtual environment is activated\n   - Confirm all dependencies are installed: `pip install -r requirements.txt`\n\n3. Server Issues:\n   - Check the Cursor Developer Tools console for error messages\n   - Verify the server is running: `python -m src.server`\n   - Check the server logs for any error messages\n\n4. Common Solutions:\n   - Restart Cursor\n   - Reload the MCP configuration\n   - Recreate the virtual environment\n   - Check file permissions\n\nFor additional help, check the Cursor documentation or file an issue in the project repository.\n\n## Security Notes\n\n- The server uses the Supabase service role key\n- Access token validation is no longer performed\n- All database operations are validated through Pydantic models\n- Keep environment variables and config files secure\n- Never commit sensitive credentials to version control\n"
}