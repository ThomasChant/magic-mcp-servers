{
  "mcp_name": "MGDS01/docusign-test-js-sdk-public",
  "mcp_description": "A TypeScript SDK that serves as an installable MCP server, exposing Docusign API methods for AI applications.",
  "mcp_id": "MGDS01_docusign-test-js-sdk-public",
  "fetch_timestamp": "2025-06-23T06:43:49.458006Z",
  "github_url": "https://github.com/MGDS01/docusign-test-js-sdk-public",
  "repository": {
    "name": "docusign-test-js-sdk-public",
    "full_name": "MGDS01/docusign-test-js-sdk-public",
    "description": null,
    "html_url": "https://github.com/MGDS01/docusign-test-js-sdk-public",
    "created_at": "2025-04-16T15:28:00Z",
    "updated_at": "2025-04-16T16:03:46Z",
    "pushed_at": "2025-04-16T16:03:39Z",
    "size": 161,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "MGDS01",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/160610311?v=4",
      "html_url": "https://github.com/MGDS01"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 352097,
      "Shell": 697,
      "JavaScript": 648
    },
    "language_percentages": {
      "TypeScript": 99.62,
      "Shell": 0.2,
      "JavaScript": 0.18
    },
    "pull_requests_count": 1,
    "contributors_count": 1,
    "package_json_version": "0.0.11"
  },
  "readme": "# docusign-test\n\nDeveloper-friendly & type-safe Typescript SDK specifically catered to leverage *docusign-test* API.\n\n<div align=\"left\">\n    <a href=\"https://www.speakeasy.com/?utm_source=docusign-test&utm_campaign=typescript\"><img src=\"https://custom-icon-badges.demolab.com/badge/-Built%20By%20Speakeasy-212015?style=for-the-badge&logoColor=FBE331&logo=speakeasy&labelColor=545454\" /></a>\n    <a href=\"https://opensource.org/licenses/MIT\">\n        <img src=\"https://img.shields.io/badge/License-MIT-blue.svg\" style=\"width: 100px; height: 28px;\" />\n    </a>\n</div>\n\n\n<br /><br />\n> [!IMPORTANT]\n> This SDK is not yet ready for production use. To complete setup please follow the steps outlined in your [workspace](https://app.speakeasy.com/org/docusign/docusign). Delete this section before > publishing to a package manager.\n\n<!-- Start Summary [summary] -->\n## Summary\n\nWorkspaces API: Docusign Workspaces API\n<!-- End Summary [summary] -->\n\n<!-- Start Table of Contents [toc] -->\n## Table of Contents\n<!-- $toc-max-depth=2 -->\n* [docusign-test](#docusign-test)\n  * [SDK Installation](#sdk-installation)\n  * [Requirements](#requirements)\n  * [SDK Example Usage](#sdk-example-usage)\n  * [Authentication](#authentication)\n  * [Available Resources and Operations](#available-resources-and-operations)\n  * [Standalone functions](#standalone-functions)\n  * [Retries](#retries)\n  * [Error Handling](#error-handling)\n  * [Server Selection](#server-selection)\n  * [Custom HTTP Client](#custom-http-client)\n  * [Debugging](#debugging)\n* [Development](#development)\n  * [Maturity](#maturity)\n  * [Contributions](#contributions)\n\n<!-- End Table of Contents [toc] -->\n\n<!-- Start SDK Installation [installation] -->\n## SDK Installation\n\n> [!TIP]\n> To finish publishing your SDK to npm and others you must [run your first generation action](https://www.speakeasy.com/docs/github-setup#step-by-step-guide).\n\n\nThe SDK can be installed with either [npm](https://www.npmjs.com/), [pnpm](https://pnpm.io/), [bun](https://bun.sh/) or [yarn](https://classic.yarnpkg.com/en/) package managers.\n\n### NPM\n\n```bash\nnpm add <UNSET>\n```\n\n### PNPM\n\n```bash\npnpm add <UNSET>\n```\n\n### Bun\n\n```bash\nbun add <UNSET>\n```\n\n### Yarn\n\n```bash\nyarn add <UNSET> zod\n\n# Note that Yarn does not install peer dependencies automatically. You will need\n# to install zod as shown above.\n```\n\n> [!NOTE]\n> This package is published with CommonJS and ES Modules (ESM) support.\n\n\n### Model Context Protocol (MCP) Server\n\nThis SDK is also an installable MCP server where the various SDK methods are\nexposed as tools that can be invoked by AI applications.\n\n> Node.js v20 or greater is required to run the MCP server from npm.\n\n<details>\n<summary>Claude installation steps</summary>\n\nAdd the following server definition to your `claude_desktop_config.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"DocusignTest\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\", \"--package\", \"docusign-test\",\n        \"--\",\n        \"mcp\", \"start\",\n        \"--o-auth2\", \"...\"\n      ]\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary>Cursor installation steps</summary>\n\nCreate a `.cursor/mcp.json` file in your project root with the following content:\n\n```json\n{\n  \"mcpServers\": {\n    \"DocusignTest\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\", \"--package\", \"docusign-test\",\n        \"--\",\n        \"mcp\", \"start\",\n        \"--o-auth2\", \"...\"\n      ]\n    }\n  }\n}\n```\n\n</details>\n\nYou can also run MCP servers as a standalone binary with no additional dependencies. You must pull these binaries from available Github releases:\n\n```bash\ncurl -L -o mcp-server \\\n    https://github.com/{org}/{repo}/releases/download/{tag}/mcp-server-bun-darwin-arm64 && \\\nchmod +x mcp-server\n```\n\nIf the repo is a private repo you must add your Github PAT to download a release `-H \"Authorization: Bearer {GITHUB_PAT}\"`.\n\n\n```json\n{\n  \"mcpServers\": {\n    \"Todos\": {\n      \"command\": \"./DOWNLOAD/PATH/mcp-server\",\n      \"args\": [\n        \"start\"\n      ]\n    }\n  }\n}\n```\n\nFor a full list of server arguments, run:\n\n```sh\nnpx -y --package docusign-test -- mcp start --help\n```\n<!-- End SDK Installation [installation] -->\n\n<!-- Start Requirements [requirements] -->\n## Requirements\n\nFor supported JavaScript runtimes, please consult [RUNTIMES.md](RUNTIMES.md).\n<!-- End Requirements [requirements] -->\n\n<!-- Start SDK Example Usage [usage] -->\n## SDK Example Usage\n\n### Example\n\n```typescript\nimport { DocusignTest } from \"docusign-test\";\n\nconst docusignTest = new DocusignTest({\n  oAuth2: process.env[\"DOCUSIGN_TEST_O_AUTH2\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await docusignTest.workspaceDocuments.list({\n    accountId: \"9cc31b33-195e-4e49-afbc-7023822fc19b\",\n    workspaceId: \"d88e63cd-2368-4f35-a54c-1bb45e45a7b7\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n\n```\n<!-- End SDK Example Usage [usage] -->\n\n<!-- Start Authentication [security] -->\n## Authentication\n\n### Per-Client Security Schemes\n\nThis SDK supports the following security scheme globally:\n\n| Name     | Type   | Scheme       | Environment Variable    |\n| -------- | ------ | ------------ | ----------------------- |\n| `oAuth2` | oauth2 | OAuth2 token | `DOCUSIGN_TEST_O_AUTH2` |\n\nTo authenticate with the API the `oAuth2` parameter must be set when initializing the SDK client instance. For example:\n```typescript\nimport { DocusignTest } from \"docusign-test\";\n\nconst docusignTest = new DocusignTest({\n  oAuth2: process.env[\"DOCUSIGN_TEST_O_AUTH2\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await docusignTest.workspaceDocuments.list({\n    accountId: \"9cc31b33-195e-4e49-afbc-7023822fc19b\",\n    workspaceId: \"d88e63cd-2368-4f35-a54c-1bb45e45a7b7\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n\n```\n<!-- End Authentication [security] -->\n\n<!-- Start Available Resources and Operations [operations] -->\n## Available Resources and Operations\n\n<details open>\n<summary>Available methods</summary>\n\n\n### [workspaceDocuments](docs/sdks/workspacedocuments/README.md)\n\n* [list](docs/sdks/workspacedocuments/README.md#list) - Get documents in the workspace accessible to the calling user\n* [get](docs/sdks/workspacedocuments/README.md#get) - Get information about the document\n* [delete](docs/sdks/workspacedocuments/README.md#delete) - Deletes a document in the workspace\n* [getContents](docs/sdks/workspacedocuments/README.md#getcontents) - Get the file contents of the document\n\n### [workspaces](docs/sdks/workspaces/README.md)\n\n* [list](docs/sdks/workspaces/README.md#list) - Gets workspaces available to the calling user\n* [create](docs/sdks/workspaces/README.md#create) - Creates a new workspace\n* [get](docs/sdks/workspaces/README.md#get) - Returns details about the workspace\n* [listAssignableRoles](docs/sdks/workspaces/README.md#listassignableroles) - Returns the roles the caller can assign to workspace users\n* [listEnvelopes](docs/sdks/workspaces/README.md#listenvelopes) - Returns the envelopes associated with the given workspace\n* [createEnvelope](docs/sdks/workspaces/README.md#createenvelope) - Creates an envelope with the given documents. Returns the ID of the created envelope\n\n### [workspaceUsers](docs/sdks/workspaceusers/README.md)\n\n* [list](docs/sdks/workspaceusers/README.md#list) - Retrieves the list of users in the given workspace\n* [add](docs/sdks/workspaceusers/README.md#add) - Adds a user to the workspace by email address\n* [update](docs/sdks/workspaceusers/README.md#update) - Updates the specified user's role\n* [revokeAccess](docs/sdks/workspaceusers/README.md#revokeaccess) - Revokes the specified user's access to the workspace\n* [restoreAccess](docs/sdks/workspaceusers/README.md#restoreaccess) - Restores the specified user's access to the workspace\n\n</details>\n<!-- End Available Resources and Operations [operations] -->\n\n<!-- Start Standalone functions [standalone-funcs] -->\n## Standalone functions\n\nAll the methods listed above are available as standalone functions. These\nfunctions are ideal for use in applications running in the browser, serverless\nruntimes or other environments where application bundle size is a primary\nconcern. When using a bundler to build your application, all unused\nfunctionality will be either excluded from the final bundle or tree-shaken away.\n\nTo read more about standalone functions, check [FUNCTIONS.md](./FUNCTIONS.md).\n\n<details>\n\n<summary>Available standalone functions</summary>\n\n- [`workspaceDocumentsDelete`](docs/sdks/workspacedocuments/README.md#delete) - Deletes a document in the workspace\n- [`workspaceDocumentsGet`](docs/sdks/workspacedocuments/README.md#get) - Get information about the document\n- [`workspaceDocumentsGetContents`](docs/sdks/workspacedocuments/README.md#getcontents) - Get the file contents of the document\n- [`workspaceDocumentsList`](docs/sdks/workspacedocuments/README.md#list) - Get documents in the workspace accessible to the calling user\n- [`workspacesCreate`](docs/sdks/workspaces/README.md#create) - Creates a new workspace\n- [`workspacesCreateEnvelope`](docs/sdks/workspaces/README.md#createenvelope) - Creates an envelope with the given documents. Returns the ID of the created envelope\n- [`workspacesGet`](docs/sdks/workspaces/README.md#get) - Returns details about the workspace\n- [`workspacesList`](docs/sdks/workspaces/README.md#list) - Gets workspaces available to the calling user\n- [`workspacesListAssignableRoles`](docs/sdks/workspaces/README.md#listassignableroles) - Returns the roles the caller can assign to workspace users\n- [`workspacesListEnvelopes`](docs/sdks/workspaces/README.md#listenvelopes) - Returns the envelopes associated with the given workspace\n- [`workspaceUsersAdd`](docs/sdks/workspaceusers/README.md#add) - Adds a user to the workspace by email address\n- [`workspaceUsersList`](docs/sdks/workspaceusers/README.md#list) - Retrieves the list of users in the given workspace\n- [`workspaceUsersRestoreAccess`](docs/sdks/workspaceusers/README.md#restoreaccess) - Restores the specified user's access to the workspace\n- [`workspaceUsersRevokeAccess`](docs/sdks/workspaceusers/README.md#revokeaccess) - Revokes the specified user's access to the workspace\n- [`workspaceUsersUpdate`](docs/sdks/workspaceusers/README.md#update) - Updates the specified user's role\n\n</details>\n<!-- End Standalone functions [standalone-funcs] -->\n\n<!-- Start Retries [retries] -->\n## Retries\n\nSome of the endpoints in this SDK support retries.  If you use the SDK without any configuration, it will fall back to the default retry strategy provided by the API.  However, the default retry strategy can be overridden on a per-operation basis, or across the entire SDK.\n\nTo change the default retry strategy for a single API call, simply provide a retryConfig object to the call:\n```typescript\nimport { DocusignTest } from \"docusign-test\";\n\nconst docusignTest = new DocusignTest({\n  oAuth2: process.env[\"DOCUSIGN_TEST_O_AUTH2\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await docusignTest.workspaceDocuments.list({\n    accountId: \"9cc31b33-195e-4e49-afbc-7023822fc19b\",\n    workspaceId: \"d88e63cd-2368-4f35-a54c-1bb45e45a7b7\",\n  }, {\n    retries: {\n      strategy: \"backoff\",\n      backoff: {\n        initialInterval: 1,\n        maxInterval: 50,\n        exponent: 1.1,\n        maxElapsedTime: 100,\n      },\n      retryConnectionErrors: false,\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n\n```\n\nIf you'd like to override the default retry strategy for all operations that support retries, you can provide a retryConfig at SDK initialization:\n```typescript\nimport { DocusignTest } from \"docusign-test\";\n\nconst docusignTest = new DocusignTest({\n  retryConfig: {\n    strategy: \"backoff\",\n    backoff: {\n      initialInterval: 1,\n      maxInterval: 50,\n      exponent: 1.1,\n      maxElapsedTime: 100,\n    },\n    retryConnectionErrors: false,\n  },\n  oAuth2: process.env[\"DOCUSIGN_TEST_O_AUTH2\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await docusignTest.workspaceDocuments.list({\n    accountId: \"9cc31b33-195e-4e49-afbc-7023822fc19b\",\n    workspaceId: \"d88e63cd-2368-4f35-a54c-1bb45e45a7b7\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n\n```\n<!-- End Retries [retries] -->\n\n<!-- Start Error Handling [errors] -->\n## Error Handling\n\nSome methods specify known errors which can be thrown. All the known errors are enumerated in the `models/errors/errors.ts` module. The known errors for a method are documented under the *Errors* tables in SDK docs. For example, the `list` method may throw the following errors:\n\n| Error Type          | Status Code | Content Type     |\n| ------------------- | ----------- | ---------------- |\n| errors.ErrorDetails | 400, 401    | application/json |\n| errors.APIError     | 4XX, 5XX    | \\*/\\*            |\n\nIf the method throws an error and it is not captured by the known errors, it will default to throwing a `APIError`.\n\n```typescript\nimport { DocusignTest } from \"docusign-test\";\nimport { ErrorDetails, SDKValidationError } from \"docusign-test/models/errors\";\n\nconst docusignTest = new DocusignTest({\n  oAuth2: process.env[\"DOCUSIGN_TEST_O_AUTH2\"] ?? \"\",\n});\n\nasync function run() {\n  let result;\n  try {\n    result = await docusignTest.workspaceDocuments.list({\n      accountId: \"9cc31b33-195e-4e49-afbc-7023822fc19b\",\n      workspaceId: \"d88e63cd-2368-4f35-a54c-1bb45e45a7b7\",\n    });\n\n    // Handle the result\n    console.log(result);\n  } catch (err) {\n    switch (true) {\n      // The server response does not match the expected SDK schema\n      case (err instanceof SDKValidationError): {\n        // Pretty-print will provide a human-readable multi-line error message\n        console.error(err.pretty());\n        // Raw value may also be inspected\n        console.error(err.rawValue);\n        return;\n      }\n      case (err instanceof ErrorDetails): {\n        // Handle err.data$: ErrorDetailsData\n        console.error(err);\n        return;\n      }\n      default: {\n        // Other errors such as network errors, see HTTPClientErrors for more details\n        throw err;\n      }\n    }\n  }\n}\n\nrun();\n\n```\n\nValidation errors can also occur when either method arguments or data returned from the server do not match the expected format. The `SDKValidationError` that is thrown as a result will capture the raw value that failed validation in an attribute called `rawValue`. Additionally, a `pretty()` method is available on this error that can be used to log a nicely formatted multi-line string since validation errors can list many issues and the plain error string may be difficult read when debugging.\n\nIn some rare cases, the SDK can fail to get a response from the server or even make the request due to unexpected circumstances such as network conditions. These types of errors are captured in the `models/errors/httpclienterrors.ts` module:\n\n| HTTP Client Error                                    | Description                                          |\n| ---------------------------------------------------- | ---------------------------------------------------- |\n| RequestAbortedError                                  | HTTP request was aborted by the client               |\n| RequestTimeoutError                                  | HTTP request timed out due to an AbortSignal signal  |\n| ConnectionError                                      | HTTP client was unable to make a request to a server |\n| InvalidRequestError                                  | Any input used to create a request is invalid        |\n| UnexpectedClientError                                | Unrecognised or unexpected error                     |\n<!-- End Error Handling [errors] -->\n\n<!-- Start Server Selection [server] -->\n## Server Selection\n\n### Select Server by Index\n\nYou can override the default server globally by passing a server index to the `serverIdx: number` optional parameter when initializing the SDK client instance. The selected server will then be used as the default on the operations that use it. This table lists the indexes associated with the available servers:\n\n| #   | Server                         | Description       |\n| --- | ------------------------------ | ----------------- |\n| 0   | `https://localhost:5001`       | Local Development |\n| 1   | `https://api.docusign.com`     | Production server |\n| 2   | `https://api-d.docusign.com`   | Demo server       |\n| 3   | `https://api-s.docusign.com`   | Staging server    |\n| 4   | `https://api.dev.docusign.com` | Dev server        |\n\n#### Example\n\n```typescript\nimport { DocusignTest } from \"docusign-test\";\n\nconst docusignTest = new DocusignTest({\n  serverIdx: 4,\n  oAuth2: process.env[\"DOCUSIGN_TEST_O_AUTH2\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await docusignTest.workspaceDocuments.list({\n    accountId: \"9cc31b33-195e-4e49-afbc-7023822fc19b\",\n    workspaceId: \"d88e63cd-2368-4f35-a54c-1bb45e45a7b7\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n\n```\n\n### Override Server URL Per-Client\n\nThe default server can also be overridden globally by passing a URL to the `serverURL: string` optional parameter when initializing the SDK client instance. For example:\n```typescript\nimport { DocusignTest } from \"docusign-test\";\n\nconst docusignTest = new DocusignTest({\n  serverURL: \"https://localhost:5001\",\n  oAuth2: process.env[\"DOCUSIGN_TEST_O_AUTH2\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await docusignTest.workspaceDocuments.list({\n    accountId: \"9cc31b33-195e-4e49-afbc-7023822fc19b\",\n    workspaceId: \"d88e63cd-2368-4f35-a54c-1bb45e45a7b7\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n\n```\n<!-- End Server Selection [server] -->\n\n<!-- Start Custom HTTP Client [http-client] -->\n## Custom HTTP Client\n\nThe TypeScript SDK makes API calls using an `HTTPClient` that wraps the native\n[Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API). This\nclient is a thin wrapper around `fetch` and provides the ability to attach hooks\naround the request lifecycle that can be used to modify the request or handle\nerrors and response.\n\nThe `HTTPClient` constructor takes an optional `fetcher` argument that can be\nused to integrate a third-party HTTP client or when writing tests to mock out\nthe HTTP client and feed in fixtures.\n\nThe following example shows how to use the `\"beforeRequest\"` hook to to add a\ncustom header and a timeout to requests and how to use the `\"requestError\"` hook\nto log errors:\n\n```typescript\nimport { DocusignTest } from \"docusign-test\";\nimport { HTTPClient } from \"docusign-test/lib/http\";\n\nconst httpClient = new HTTPClient({\n  // fetcher takes a function that has the same signature as native `fetch`.\n  fetcher: (request) => {\n    return fetch(request);\n  }\n});\n\nhttpClient.addHook(\"beforeRequest\", (request) => {\n  const nextRequest = new Request(request, {\n    signal: request.signal || AbortSignal.timeout(5000)\n  });\n\n  nextRequest.headers.set(\"x-custom-header\", \"custom value\");\n\n  return nextRequest;\n});\n\nhttpClient.addHook(\"requestError\", (error, request) => {\n  console.group(\"Request Error\");\n  console.log(\"Reason:\", `${error}`);\n  console.log(\"Endpoint:\", `${request.method} ${request.url}`);\n  console.groupEnd();\n});\n\nconst sdk = new DocusignTest({ httpClient });\n```\n<!-- End Custom HTTP Client [http-client] -->\n\n<!-- Start Debugging [debug] -->\n## Debugging\n\nYou can setup your SDK to emit debug logs for SDK requests and responses.\n\nYou can pass a logger that matches `console`'s interface as an SDK option.\n\n> [!WARNING]\n> Beware that debug logging will reveal secrets, like API tokens in headers, in log messages printed to a console or files. It's recommended to use this feature only during local development and not in production.\n\n```typescript\nimport { DocusignTest } from \"docusign-test\";\n\nconst sdk = new DocusignTest({ debugLogger: console });\n```\n\nYou can also enable a default debug logger by setting an environment variable `DOCUSIGN_TEST_DEBUG` to true.\n<!-- End Debugging [debug] -->\n\n<!-- Placeholder for Future Speakeasy SDK Sections -->\n\n# Development\n\n## Maturity\n\nThis SDK is in beta, and there may be breaking changes between versions without a major version update. Therefore, we recommend pinning usage\nto a specific package version. This way, you can install the same version each time without breaking changes unless you are intentionally\nlooking for the latest version.\n\n## Contributions\n\nWhile we value open-source contributions to this SDK, this library is generated programmatically. Any manual changes added to internal files will be overwritten on the next generation. \nWe look forward to hearing your feedback. Feel free to open a PR or an issue with a proof of concept and we'll do our best to include it in a future release. \n\n### SDK Created by [Speakeasy](https://www.speakeasy.com/?utm_source=docusign-test&utm_campaign=typescript)\n"
}