{
  "mcp_name": "maito1201/cloudrun-logs-mcp",
  "mcp_description": "Facilitates AI assistants in accessing Google Cloud Run logs and service information through an MCP interface.",
  "mcp_id": "maito1201_cloudrun-logs-mcp",
  "fetch_timestamp": "2025-06-23T06:22:34.145475Z",
  "github_url": "https://github.com/maito1201/cloudrun-logs-mcp",
  "repository": {
    "name": "cloudrun-logs-mcp",
    "full_name": "maito1201/cloudrun-logs-mcp",
    "description": null,
    "html_url": "https://github.com/maito1201/cloudrun-logs-mcp",
    "created_at": "2025-04-09T15:04:33Z",
    "updated_at": "2025-04-24T18:30:13Z",
    "pushed_at": "2025-04-10T12:01:55Z",
    "size": 11666,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Go",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "maito1201",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/49754654?v=4",
      "html_url": "https://github.com/maito1201"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Go": 16160
    },
    "language_percentages": {
      "Go": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "latest_release": {
      "tag_name": "v0.0.1",
      "name": "v0.0.1",
      "published_at": "2025-04-10T11:43:04Z",
      "body": "This is first release.",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.0.1",
        "commit_sha": "ce48f54e4f7c200d737df0b8b81a44f90170846d"
      }
    ],
    "latest_version": "v0.0.1"
  },
  "readme": "# Cloud Run Logs MCP\n\nGoogle Cloud RunのログをMCPのインターフェースを介して確認するためのツールです。\n\n## 機能\n\n- Google Cloudのアプリケーションデフォルトクレデンシャルを使用して認証\n- プロジェクトID、サービス名、時間範囲、ログレベル、キーワードなどでフィルタリング\n- テキスト形式またはJSON形式での出力\n\n## 前提条件\n\nこのツールは、Google Cloudのアプリケーションデフォルトクレデンシャルを使用して認証を行います。以下のいずれかの方法で認証情報を設定してください：\n\n1. `gcloud auth application-default login`コマンドを実行\n2. GOOGLE_APPLICATION_CREDENTIALS環境変数にサービスアカウントキーのパスを設定\n3. Google Cloud環境（Compute Engine、Cloud Run、GKEなど）で実行する場合は、自動的に認証情報が提供されます\n\n## MCPサーバーとしての使用\n\nこのツールは、Model Context Protocol (MCP) サーバーとしても機能します。MCPサーバーを使用すると、AIアシスタントがCloud Runのログやサービス情報を直接取得できるようになります。\n\n## MCPサーバーの設定(バイナリをダウンロードする場合)\n\nGitHubのリリースページからバイナリをダウンロードして使用することもできます。\nhttps://github.com/maito1201/cloudrun-logs-mcp/releases\n\nmacOS(Apple Silicon)\n```bash\ncurl -L https://github.com/maito1201/cloudrun-logs-mcp/releases/latest/download/cloudrun-logs-mcp_Darwin_arm64.tar.gz -o cloudrun-logs-mcp.tar.gz\n```\nmacOS(Intel)\n```\ncurl -L https://github.com/maito1201/cloudrun-logs-mcp/releases/latest/download/cloudrun-logs-mcp_Darwin_x86_64.tar.gz -o cloudrun-logs-mcp.tar.gz\n```\n\n```\n# 解凍\ntar -xzf cloudrun-logs-mcp.tar.gz\n\n# 実行権限を付与\nchmod +x cloudrun-logs-mcp\n\n# 必要に応じて、パスの通った場所に移動\n# 例：\n# sudo mv cloudrun-logs-mcp /usr/local/bin/\n```\n\nMCPサーバーの設定(Clineの場合)\n\n```\n{\n  \"mcpServers\": {\n    \"cloudrun-logs\": {\n      \"autoApprove\": [],\n      \"disabled\": false,\n      \"timeout\": 60,\n      \"command\": \"/your-installed-path/cloudrun-logs-mcp\",\n      \"args\": [],\n      \"transportType\": \"stdio\"\n    }\n  }\n}\n```\n\n## MCPサーバーの設定(ビルドする場合)\n\n```bash\n# リポジトリをクローンしてビルド\ngit clone https://github.com/maito1201/cloudrun-logs-mcp.git\ncd cloudrun-logs-mcp\ngo build\n```\n\nMCPサーバーの設定(Clineの場合)\n\n```\n{\n  \"mcpServers\": {\n    \"cloudrun-logs\": {\n      \"autoApprove\": [],\n      \"disabled\": false,\n      \"timeout\": 60,\n      \"command\": \"/your-build-path/cloudrun-logs-mcp\",\n      \"args\": [],\n      \"transportType\": \"stdio\"\n    }\n  }\n}\n```\n\n## MCPサーバーの設定(go install)\n\n```bash\ngo install github.com/maito1201/cloudrun-logs-mcp@latest\n```\n\nMCPサーバーの設定(Clineの場合)\n\n```\n{\n  \"mcpServers\": {\n    \"cloudrun-logs\": {\n      \"autoApprove\": [],\n      \"disabled\": false,\n      \"timeout\": 60,\n      \"command\": \"cloudrun-logs-mcp\",\n      \"args\": [],\n      \"transportType\": \"stdio\"\n    }\n  }\n}\n```\n\n## 利用可能なツール\n\nMCPサーバーは以下のツールを提供します：\n\n#### get_logs\n\nGoogle Cloud Runのログを取得します。\n\n**パラメータ：**\n\n| パラメータ名 | 説明 | 必須 | デフォルト値 |\n|------------|------|------|-------------|\n| project_id | Google Cloudプロジェクトのプロジェクトid | はい | - |\n| service_name | Cloud Runのサービス名 | いいえ | - |\n| start_time | ログの開始時間（RFC3339形式、例: 2023-01-01T00:00:00Z） | いいえ | - |\n| end_time | ログの終了時間（RFC3339形式、例: 2023-01-01T00:00:00Z） | いいえ | - |\n| log_level | ログレベル（INFO, ERROR, WARNINGなど） | いいえ | - |\n| keywords | 検索キーワードの配列 | いいえ | - |\n| limit | 取得するログエントリの最大数 | いいえ | 100 |\n\n**使用例：**\n\n```json\n{\n  \"project_id\": \"your-project-id\",\n  \"service_name\": \"your-service-name\",\n  \"log_level\": \"ERROR\",\n  \"keywords\": [\"error\", \"exception\"],\n  \"limit\": 50\n}\n```\n\n#### get_services\n\nGoogle Cloud Runのサービス一覧を取得します。\n\n**パラメータ：**\n\n| パラメータ名 | 説明 | 必須 | デフォルト値 |\n|------------|------|------|-------------|\n| project_id | Google Cloudプロジェクトのプロジェクトid | はい | - |\n| region | Cloud Runのリージョン | いいえ | us-central1 |\n\n**使用例：**\n\n```json\n{\n  \"project_id\": \"your-project-id\",\n  \"region\": \"us-central1\"\n}\n```\n\n### AIアシスタントとの連携\n\nAIアシスタントとMCPサーバーを連携するには、以下の手順を実行します：\n\n1. MCPサーバーを起動します\n2. AIアシスタントにMCPサーバーのURLを提供します（例：`http://localhost:3000`）\n3. AIアシスタントがMCPサーバーを通じてCloud Runのログやサービス情報を取得できるようになります\n\n### 使用例\n\nAIアシスタントとの対話例：\n\n```\nユーザー: project-idが「my-project」のCloud Runサービス一覧を取得してください\n\nAIアシスタント: Cloud Runサービス一覧を取得します。\n\n[AIアシスタントがMCPサーバーを使用してサービス一覧を取得]\n\n以下がプロジェクト「my-project」のCloud Runサービス一覧です：\n\n名前: service-1\nURL: https://service-1-xxx.run.app\nステータス: Ready\n作成日時: 2023-01-01T00:00:00Z\n\n名前: service-2\nURL: https://service-2-xxx.run.app\nステータス: Ready\n作成日時: 2023-01-02T00:00:00Z\n\n合計2件のサービスが見つかりました。\n```\n\n## CLIツールとしての使用\n\nCLIツールとして本機能を利用可能です。\n以下の2つのコマンドがあります：\n\n- `logs`: Cloud Runのログを取得\n- `services`: Cloud Runのサービス一覧を取得\n\n### ログの取得\n\n```bash\n# 基本的な使い方（プロジェクトIDは必須）\n./cloudrun-logs logs --project=your-project-id\n\n# サービス名を指定\n./cloudrun-logs logs --project=your-project-id --service=your-service-name\n\n# 時間範囲を指定\n./cloudrun-logs logs --project=your-project-id --start-time=2023-01-01T00:00:00Z --end-time=2023-01-02T00:00:00Z\n\n# ログレベルを指定\n./cloudrun-logs logs --project=your-project-id --level=ERROR\n\n# キーワードで検索\n./cloudrun-logs logs --project=your-project-id --keyword=error --keyword=exception\n\n# 取得するログエントリの最大数を指定\n./cloudrun-logs logs --project=your-project-id --limit=50\n\n# JSON形式で出力\n./cloudrun-logs logs --project=your-project-id --json\n```\n\n### サービス一覧の取得\n\n```bash\n# 基本的な使い方（プロジェクトIDは必須）\n./cloudrun-logs services --project=your-project-id\n\n# リージョンを指定\n./cloudrun-logs services --project=your-project-id --region=us-central1\n\n# JSON形式で出力\n./cloudrun-logs services --project=your-project-id --json\n```\n\n### オプション一覧\n\n#### logsコマンドのオプション\n\n| オプション | 短縮形 | 説明 | 必須 | デフォルト値 |\n|------------|--------|------|------|-------------|\n| --project | -p | Google Cloudプロジェクトのプロジェクトid | はい | - |\n| --service | -s | Cloud Runのサービス名 | いいえ | - |\n| --start-time | -st | ログの開始時間（RFC3339形式） | いいえ | - |\n| --end-time | -et | ログの終了時間（RFC3339形式） | いいえ | - |\n| --level | -l | ログレベル（INFO, ERROR, WARNINGなど） | いいえ | - |\n| --keyword | -k | 検索キーワード（複数指定可） | いいえ | - |\n| --limit | -n | 取得するログエントリの最大数 | いいえ | 100 |\n| --json | -j | ログをJSON形式で出力 | いいえ | false |\n\n#### servicesコマンドのオプション\n\n| オプション | 短縮形 | 説明 | 必須 | デフォルト値 |\n|------------|--------|------|------|-------------|\n| --project | -p | Google Cloudプロジェクトのプロジェクトid | はい | - |\n| --region | -r | Cloud Runのリージョン | いいえ | us-central1 |\n| --json | -j | サービス一覧をJSON形式で出力 | いいえ | false |\n\n## ライブラリとしての使用\n\nこのツールは、ライブラリとしても使用できます。以下は使用例です：\n\n### ログの取得\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/maito1201/cloudrun-logs-mcp/logs\"\n)\n\nfunc main() {\n\t// フィルターオプションを設定\n\topts := logs.FilterOptions{\n\t\tProjectID:   \"your-project-id\",\n\t\tServiceName: \"your-service-name\",\n\t\tStartTime:   time.Now().Add(-24 * time.Hour), // 24時間前から\n\t\tLogLevel:    \"ERROR\",\n\t\tKeywords:    []string{\"error\", \"exception\"},\n\t\tLimit:       50,\n\t}\n\n\t// ログを取得\n\tctx := context.Background()\n\tentries, err := logs.GetCloudRunLogs(ctx, opts)\n\tif err != nil {\n\t\tfmt.Printf(\"エラー: %v\\n\", err)\n\t\treturn\n\t}\n\n\t// 結果を処理\n\tfor _, entry := range entries {\n\t\tfmt.Printf(\"[%s] %s: %s\\n\", entry.Timestamp.Format(time.RFC3339), entry.Severity, entry.Message)\n\t}\n}\n```\n\n### サービス一覧の取得\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/maito1201/cloudrun-logs-mcp/logs\"\n)\n\nfunc main() {\n\t// プロジェクトIDとリージョンを指定\n\tprojectID := \"your-project-id\"\n\tregion := \"us-central1\"\n\n\t// サービス一覧を取得\n\tctx := context.Background()\n\tservices, err := logs.GetCloudRunServices(ctx, projectID, region)\n\tif err != nil {\n\t\tfmt.Printf(\"エラー: %v\\n\", err)\n\t\treturn\n\t}\n\n\t// 結果を処理\n\tfor _, service := range services {\n\t\tfmt.Printf(\"名前: %s\\n\", service.Name)\n\t\tif service.Description != \"\" {\n\t\t\tfmt.Printf(\"説明: %s\\n\", service.Description)\n\t\t}\n\t\tfmt.Printf(\"URL: %s\\n\", service.URL)\n\t\tfmt.Printf(\"ステータス: %s\\n\", service.Status)\n\t\tfmt.Printf(\"作成日時: %s\\n\", service.CreateTime.Format(time.RFC3339))\n\t\tfmt.Printf(\"更新日時: %s\\n\", service.UpdateTime.Format(time.RFC3339))\n\t\tfmt.Println()\n\t}\n}\n```\n\n\n## ライセンス\n\nMIT\n"
}