{
  "mcp_name": "MrOrz/mcp-git-commit-aider",
  "mcp_description": "Facilitates AI-driven git commits by appending '(aider)' to track AI contributions in codebases.",
  "mcp_id": "MrOrz_mcp-git-commit-aider",
  "fetch_timestamp": "2025-06-23T06:54:49.795072Z",
  "github_url": "https://github.com/MrOrz/mcp-git-commit-aider",
  "repository": {
    "name": "mcp-git-commit-aider",
    "full_name": "MrOrz/mcp-git-commit-aider",
    "description": "A simple MCP server that makes git commits on behave of AI, so that you can track AI contribution in your codebase",
    "html_url": "https://github.com/MrOrz/mcp-git-commit-aider",
    "created_at": "2025-04-22T08:46:15Z",
    "updated_at": "2025-05-13T10:38:50Z",
    "pushed_at": "2025-05-13T10:38:47Z",
    "size": 47,
    "stargazers_count": 7,
    "watchers_count": 7,
    "forks_count": 1,
    "open_issues_count": 1,
    "language": "JavaScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "master",
    "owner": {
      "login": "MrOrz",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/108608?v=4",
      "html_url": "https://github.com/MrOrz"
    },
    "has_issues": true,
    "has_projects": false,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 7716
    },
    "language_percentages": {
      "JavaScript": 100
    },
    "pull_requests_count": 7,
    "contributors_count": 3,
    "latest_release": {
      "tag_name": "0.1.1",
      "name": "0.1.1",
      "published_at": "2025-04-22T09:47:15Z",
      "body": "**Full Changelog**: https://github.com/MrOrz/mcp-git-commit-aider/compare/0.1.0...0.1.1",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "0.1.1",
        "commit_sha": "861111d08c59c1acb7413a91fa2a9036b57b319a"
      },
      {
        "name": "0.1.0",
        "commit_sha": "0b7b078ee1ec3c9ccde2189f4bcb5b6382cf1020"
      }
    ],
    "latest_version": "0.1.1",
    "package_json_version": "0.1.1"
  },
  "readme": "# git-commit-aider MCP Server\n\nMake git commits on behalf of AI, so that you can track AI contribution in your codebase.\n\nThis is a TypeScript-based MCP server that provides a tool to commit staged changes in a Git repository while appending \"(aider)\" to the committer's name.\n\n## Features\n\nThis MCP server provides only one tool:\n\n`commit_staged` - Commit staged changes with a specific message.\n- Takes `message` (string, required) as the commit message.\n- Takes `cwd` (string, optional) to specify the working directory for the git command.\n- Appends \"(aider)\" to the committer name automatically.\n- Reads committer name and email from environment variables (`GIT_COMMITTER_NAME`, `GIT_COMMITTER_EMAIL`) if set, otherwise falls back to `git config user.name` and `git config user.email`.\n\nWith this tool installed in your code editor, you can prompt the AI by something like:\n\n> Commit the changes for me\n\nThis usually happens after the AI has made some changes to your codebase, so often times AI is able to provide a good commit message from the context.\n\n## Installation\n\nTo use this server, add its configuration to your MCP settings file.\n\n```json\n{\n  \"mcpServers\": {\n    \"git-commit-aider\": {\n      \"command\": \"npx\",\n      \"args\": [\"mcp-git-commit-aider\"]\n    }\n  }\n}\n```\n\nThe committer information is retrieved from:\n1. Environment variables `GIT_COMMITTER_NAME` and `GIT_COMMITTER_EMAIL`, which follows [git's convention](https://git-scm.com/book/en/v2/Git-Internals-Environment-Variables).\n2. Output of `git config user.name` and `git config user.email` commands.\n\n### Alternative: amend author after commit\n\nIf you don't want to use this MCP server, you can also use the `git` command directly in your terminal.\n\nYou can proceed with normal commit first, and then use the following git command to change the author of the last commit:\n\n```sh\ngit commit --amend --author=\"$(git config user.name) (aider) <$(git config user.email)>\"\n```\n\nThis will change the author of the last commit to your name with \"(aider)\" appended.\n\nTo simplify the process, you can set up a Git alias. Run the following command in your terminal:\n\n```sh\ngit config --global alias.aimend '!git commit --amend --author=\"$(git config user.name) (aider) <$(git config user.email)>\"'\n```\n\nOnce set up, you can use the alias by running:\n\n```sh\ngit aimend\n```\n\n## Calculating AI contribution\n\nCommits with \"(aider)\" can be picked up by [`aider --stats`](https://github.com/Aider-AI/aider/pull/2883) command, which will show you the contribution of AI in your codebase.\n\nAlternatively, you can use the following script to calculate the contribution of AI in your codebase, measured in lines of code (added, deleted, and total changes).\n\n```sh\n#!/bin/bash\n\n# Script to calculate line changes (added, deleted, total) by AI and human authors\n# between two commits.\n# Output is in JSON format.\n#\n# This logic is extracted and altered from git-quick-stats.sh, MIT license.\n\n# --- Configuration ---\n# You may change the config to match your repository's convention.\n\n# String to identify AI-generated commits in author names\nAI_MATCHER=\"(aider)\"\n\n# Define patterns for files/paths to be excluded from the calculation.\n# These will be converted to git pathspecs like \":(exclude)*package-lock.json\"\nIGNORE_PATTERNS=(\n  \"*package-lock.json\"\n  \"*.lock\"\n)\n\n# --- Helper Functions ---\nfunction print_usage() {\n  echo \"Usage: $0 <REVISION_RANGE>\"\n  echo \"  <REVISION_RANGE>: The revision range to analyze (e.g., HEAD~5..HEAD, my-branch, commit_sha).\"\n  echo \"  Refer to 'git help log' or 'git help revisions' for more range options.\"\n  echo \"Example: $0 HEAD~5..HEAD\"\n  echo \"Example: $0 origin..HEAD\"\n  echo \"Example: $0 my-feature-branch\"\n  echo \"Example: $0 abcdef1..fedcba2\"\n}\n\n# --- Argument Parsing ---\nif [ \"$#\" -ne 1 ]; then\n  echo \"Error: Incorrect number of arguments. Please provide a single revision range.\"\n  print_usage\n  exit 1\nfi\n\nREVISION_RANGE=\"$1\"\n\n# --- Main Logic ---\n\n# Construct pathspec arguments for git log\npathspec_args=()\nfor pattern in \"${IGNORE_PATTERNS[@]}\"; do\n  pathspec_args+=(\":(exclude)$pattern\")\ndone\n\ngit_log_output=$(git log \"$REVISION_RANGE\" --numstat --pretty=\"format:AuthorName:%an\" -- \"${pathspec_args[@]}\")\n\n# DEBUG: Uncomment to check the calculation for each commit.\n# echo \"$git_log_output\"\n\n# Process the log output with awk\nresult_json=$(echo \"$git_log_output\" | awk -v ai_matcher=\"$AI_MATCHER\" '\nBEGIN {\n  ai_added = 0\n  ai_deleted = 0\n  human_added = 0\n  human_deleted = 0\n  current_author = \"\"\n  is_ai_author = 0\n}\n\n/^AuthorName:/ {\n  # Extract author name\n  current_author = substr($0, length(\"AuthorName:\") + 1)\n  if (index(current_author, ai_matcher) > 0) {\n    is_ai_author = 1\n  } else {\n    is_ai_author = 0\n  }\n  next\n}\n\n# Skip empty lines between commit blocks or lines that are not numstat\nNF == 0 || !($1 ~ /^[0-9]+$/ && $2 ~ /^[0-9]+$/) {\n  next\n}\n\n# Process numstat line: <added> <deleted> <file>\n{\n  added_lines = $1\n  deleted_lines = $2\n\n  # Skip binary files where numstat shows \"-\" for lines\n  if (added_lines == \"-\" || deleted_lines == \"-\") {\n    next\n  }\n\n  # Aggregate stats per author and file for details array\n  file_name = $3\n  # Robust key using File Separator character \\034\n  key = current_author \"\\034\" file_name\n\n  file_author_added[key] += added_lines\n  file_author_deleted[key] += deleted_lines\n\n  if (is_ai_author) {\n    ai_added += added_lines\n    ai_deleted += deleted_lines\n  } else {\n    human_added += added_lines\n    human_deleted += deleted_lines\n  }\n}\n\nEND {\n  ai_total_changed = ai_added + ai_deleted\n  human_total_changed = human_added + human_deleted\n  overall_total_changed = ai_total_changed + human_total_changed\n  ai_percentage = 0.00\n\n  if (overall_total_changed > 0) {\n    ai_percentage = (ai_total_changed / overall_total_changed) * 100\n  }\n\n  printf \"{\\n\"\n  printf \"  \\\"ai_percentage\\\": %.2f,\\n\", ai_percentage\n  printf \"  \\\"ai_changes\\\": {\\\"added\\\": %d, \\\"deleted\\\": %d, \\\"total\\\": %d},\\n\", ai_added, ai_deleted, ai_total_changed\n  printf \"  \\\"human_changes\\\": {\\\"added\\\": %d, \\\"deleted\\\": %d, \\\"total\\\": %d},\\n\", human_added, human_deleted, human_total_changed\n\n  # Details array\n  printf \"  \\\"details\\\": [\\n\"\n  first_detail = 1\n  # Iterate over one of the arrays, keys should be consistent\n  for (key in file_author_added) {\n    if (!first_detail) {\n      printf \",\\n\"\n    }\n    first_detail = 0\n\n    # Split key \"author\\034fileName\" into key_parts array\n    # key_parts[1] will be author, key_parts[2] will be fileName\n    split(key, key_parts, \"\\034\")\n    author = key_parts[1]\n    fileName = key_parts[2]\n\n    # Escape double quotes for JSON compatibility\n    gsub(/\"/, \"\\\\\\\"\", author)\n    gsub(/\"/, \"\\\\\\\"\", fileName)\n\n    detail_added = file_author_added[key] + 0 # Ensure numeric\n    detail_deleted = file_author_deleted[key] + 0 # Ensure numeric\n    detail_total = detail_added + detail_deleted\n\n    printf \"    {\\n\"\n    printf \"      \\\"fileName\\\": \\\"%s\\\",\\n\", fileName\n    printf \"      \\\"author\\\": \\\"%s\\\", \\\"isAI\\\": %s,\\n\", author, (index(author, ai_matcher) > 0 ? \"true\" : \"false\")\n    printf \"      \\\"added\\\": %d, \\\"deleted\\\": %d, \\\"total\\\": %d\\n\", detail_added, detail_deleted, detail_total\n    printf \"    }\"\n  }\n  printf \"\\n  ]\\n\"\n  printf \"}\\n\"\n}\n')\n\n# --- Output ---\necho \"$result_json\"\n```\n\nUsage example:\n\n```sh\n# Assume the script is saved as `calculate_ai_contribution.sh` and is executable (chmod +x calculate_ai_contribution.sh)\n\n# Example 1: Analyze the last 5 commits\n./calculate_ai_contribution.sh HEAD~5..HEAD\n\n# Example 2: Analyze commits between a specific commit and HEAD\n./calculate_ai_contribution.sh 90a5fcd4..HEAD\n\n# Example 3: Analyze all commits on a feature branch not yet in main\n./calculate_ai_contribution.sh main..my-feature-branch\n\n# Example 4: Analyze commits between two tags\n./calculate_ai_contribution.sh v1.0..v1.1\n\n# Example output (will vary based on your repository and range):\n# {\n#   \"ai_percentage\": 48.53,\n#   \"ai_changes\": { \"added\": 100, \"deleted\": 32, \"total\": 132 },\n#   \"human_changes\": { \"added\": 103, \"deleted\": 37, \"total\": 140 },\n#   \"details\": [\n#     {\n#       \"fileName\": \"src/featureA.js\",\n#       \"author\": \"Developer One (aider)\", \"isAI\": true,\n#       \"added\": 60, \"deleted\": 10, \"total\": 70\n#     },\n#     {\n#       \"fileName\": \"src/featureB.js\",\n#       \"author\": \"Developer One (aider)\", \"isAI\": true,\n#       \"added\": 40, \"deleted\": 22, \"total\": 62\n#     },\n#     {\n#       \"fileName\": \"src/utils.js\",\n#       \"author\": \"Developer Two\", \"isAI\": false,\n#       \"added\": 80, \"deleted\": 15, \"total\": 95\n#     },\n#     {\n#       \"fileName\": \"README.md\",\n#       \"author\": \"Developer Two\", \"isAI\": false,\n#       \"added\": 23, \"deleted\": 22, \"total\": 45\n#     }\n#   ]\n# }\n```\n### Output Fields Description\n\nThe JSON output contains the following fields:\n\n-   `ai_percentage`: (Number) The percentage of total lines changed (sum of added and deleted lines) that were contributed by AI authors (identified by `AI_MATCHER`).\n-   `ai_changes`: (Object) An object detailing the aggregated line changes (lines `added`, `deleted`, and their `total`) made by AI authors.\n-   `human_changes`: (Object) An object detailing the aggregated line changes (lines `added`, `deleted`, and their `total`) made by human authors.\n-   `details`: (Array of Objects) Provides a detailed breakdown of changes. Each object in the array represents the contribution of a specific `author` to a particular `fileName`, including lines `added`, `deleted`, and the `total` changes for that file by that author.\n"
}