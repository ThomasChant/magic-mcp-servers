{
  "mcp_name": "sriramsowmithri9807/MCP_X",
  "mcp_description": "Facilitates AI model interactions with Twitter/X API through a standardized MCP interface, enabling tweet management and data retrieval.",
  "mcp_id": "sriramsowmithri9807_MCP_X",
  "fetch_timestamp": "2025-06-23T08:36:04.575649Z",
  "github_url": "https://github.com/sriramsowmithri9807/MCP_X",
  "repository": {
    "name": "MCP_X",
    "full_name": "sriramsowmithri9807/MCP_X",
    "description": null,
    "html_url": "https://github.com/sriramsowmithri9807/MCP_X",
    "created_at": "2025-04-27T15:56:20Z",
    "updated_at": "2025-04-27T15:58:55Z",
    "pushed_at": "2025-04-27T15:58:51Z",
    "size": 9,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "sriramsowmithri9807",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/95630559?v=4",
      "html_url": "https://github.com/sriramsowmithri9807"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 6441
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# MCP_X\n# X(Formely Twitter) MCP Server\n\nA Model Context Protocol (MCP) server implementation that provides seamless integration with Twitter/X API, allowing AI models to interact with Twitter functionalities through a standardized interface.\n\n![MCP Server](https://your-image-url-here.png)\n\n## 🌟 Features\n\n- **Tweet Management**\n  - Create and post tweets\n  - Reply to existing tweets\n  - Like and retweet functionality\n  - Thread viewing capabilities\n\n- **Data Retrieval**\n  - Fetch tweet details\n  - Search functionality\n  - Thread reconstruction\n  - Metrics tracking (likes, retweets)\n\n- **Security**\n  - Environment-based configuration\n  - Secure credential management\n  - Error handling and validation\n\n## 📋 Prerequisites\n\n- Python 3.10 or higher\n- MCP CLI (`mcp[cli]`)\n- Twitter Developer Account with API credentials\n- Virtual environment management tool (venv)\n- Tweepy library\n\n## 🚀 Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone https://your-repository-url.git\n   cd twitter-mcp-server\n   ```\n\n2. **Create and activate virtual environment**\n   ```bash\n   python3.10 -m venv .venv\n   source .venv/bin/activate\n   ```\n\n3. **Install dependencies**\n   ```bash\n   pip install \"mcp[cli]\" tweepy python-dotenv\n   ```\n\n4. **Configure environment variables**\n   Create a `.env` file in the project root:\n   ```env\n   TWITTER_API_KEY=your_api_key_here\n   TWITTER_API_SECRET=your_api_secret_here\n   TWITTER_ACCESS_TOKEN=your_access_token_here\n   TWITTER_ACCESS_TOKEN_SECRET=your_access_token_secret_here\n   ```\n\n5. **Install the MCP server**\n   ```bash\n   mcp install main.py\n   ```\n\n## 🛠️ Configuration\n\n### MCP Server Configuration\nCreate or update your MCP configuration file:\n\nFor Claude Desktop (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n```json\n{\n  \"mcpServers\": {\n    \"twitter\": {\n      \"command\": \"python\",\n      \"args\": [\"path/to/main.py\"],\n      \"env\": {\n        \"PYTHONPATH\": \"path/to/project\"\n      }\n    }\n  }\n}\n```\n\n## 🔧 Available Tools\n\n### 1. Post Tweet\n```python\npost_tweet(content: str) -> Dict\n```\nPosts a new tweet to your account.\n- **Parameters:**\n  - `content`: Tweet text (max 280 characters)\n- **Returns:**\n  - Success response with tweet ID and content\n  - Error response if validation fails\n\n### 2. Reply to Tweet\n```python\nreply_to_tweet(tweet_id: str, content: str) -> Dict\n```\nCreates a reply to an existing tweet.\n- **Parameters:**\n  - `tweet_id`: ID of the tweet to reply to\n  - `content`: Reply text (max 280 characters)\n\n### 3. Get Tweet\n```python\nget_tweet(tweet_id: str) -> Dict\n```\nRetrieves details of a specific tweet.\n- **Parameters:**\n  - `tweet_id`: ID of the tweet to fetch\n- **Returns:**\n  - Tweet details including metrics\n\n### 4. Like Tweet\n```python\nlike_tweet(tweet_id: str) -> Dict\n```\nLikes a specific tweet.\n- **Parameters:**\n  - `tweet_id`: ID of the tweet to like\n\n### 5. Retweet\n```python\nretweet(tweet_id: str) -> Dict\n```\nRetweets a specific tweet.\n- **Parameters:**\n  - `tweet_id`: ID of the tweet to retweet\n\n### 6. Get Tweet Thread\n```python\nget_tweet_thread(tweet_id: str) -> dict\n```\nRetrieves a complete thread starting from a tweet.\n- **Parameters:**\n  - `tweet_id`: ID of the thread's root tweet\n\n### 7. Search Tweets\n```python\nsearch_tweets(query: str) -> List[dict]\n```\nSearches for tweets containing specific text.\n- **Parameters:**\n  - `query`: Search query string\n\n## 📝 Usage Examples\n\n### Basic Tweet\n```python\nresponse = post_tweet(\"Hello from Twitter MCP Server!\")\nprint(response)\n```\n\n### Reply to Tweet\n```python\nresponse = reply_to_tweet(\"1234567890\", \"This is a reply!\")\nprint(response)\n```\n\n### View Thread\n```python\nthread = get_tweet_thread(\"1234567890\")\nprint(thread)\n```\n\n## 🔒 Security\n\n- Never commit `.env` file to version control\n- Regularly rotate API credentials\n- Monitor API usage and rate limits\n- Validate input data before making API calls\n\n## 🐛 Debugging\n\n1. **Check MCP Server Logs**\n   ```bash\n   tail -n 20 -F ~/Library/Logs/Claude/mcp*.log\n   ```\n\n2. **Enable Developer Tools**\n   ```bash\n   echo '{\"allowDevTools\": true}' > ~/Library/Application\\ Support/Claude/developer_settings.json\n   ```\n\n3. **Test Server Connection**\n   ```bash\n   mcp dev main.py\n   ```\n\n## 📊 Rate Limits\n\nTwitter API has rate limits that vary by endpoint:\n- Tweet creation: 200 per 15 minutes\n- Likes: 1000 per 24 hours\n- Retweets: 1000 per 24 hours\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a Pull Request\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\n- Twitter API Documentation\n- MCP Protocol Specification\n- Tweepy Library Documentation\n- Claude Desktop Development Team\n\n## 📞 Support\n\nFor support, please:\n1. Check the documentation\n2. Review existing issues\n3. Create a new issue with detailed information\n\n## 🔄 Version History\n\n- 1.0.0\n  - Initial release\n  - Basic Twitter functionality\n  - MCP integration\n\n## 🚧 Roadmap\n\n- [ ] Media attachment support\n- [ ] Direct message functionality\n- [ ] Advanced search options\n- [ ] Analytics integration\n- [ ] Batch operations\n- [ ] Rate limit handling\n\n## ⚠️ Important Notes\n\n- Keep API credentials secure\n- Monitor rate limits\n- Test thoroughly before production use\n- Keep dependencies updated\n"
}