{
  "mcp_name": "sbarbett/pihole-mcp-server",
  "mcp_description": "Facilitates AI assistants in managing and querying Pi-hole configurations and metrics through a Model Context Protocol server.",
  "mcp_id": "sbarbett_pihole-mcp-server",
  "fetch_timestamp": "2025-06-23T08:11:32.243374Z",
  "github_url": "https://github.com/sbarbett/pihole-mcp-server",
  "repository": {
    "name": "pihole-mcp-server",
    "full_name": "sbarbett/pihole-mcp-server",
    "description": "A Model Context Protocol (MCP) server for Pi-hole",
    "html_url": "https://github.com/sbarbett/pihole-mcp-server",
    "created_at": "2025-04-19T02:09:59Z",
    "updated_at": "2025-05-25T13:36:51Z",
    "pushed_at": "2025-04-27T17:56:39Z",
    "size": 2379,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 1,
    "open_issues_count": 1,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "ai",
      "dns",
      "docker",
      "model-context-protocol",
      "pihole"
    ],
    "default_branch": "main",
    "owner": {
      "login": "sbarbett",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/8902431?v=4",
      "html_url": "https://github.com/sbarbett"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "Python": 39081,
      "Dockerfile": 387
    },
    "language_percentages": {
      "Python": 99.02,
      "Dockerfile": 0.98
    },
    "pull_requests_count": 1,
    "contributors_count": 2,
    "latest_release": {
      "tag_name": "v0.2.1",
      "name": "PiHoleMCPServer v0.2.1 ‚Äî Manage Local DNS, System Prompt & Descriptors/Instructions",
      "published_at": "2025-04-27T17:56:39Z",
      "body": "# DNS Management Tools\r\n- **`add_local_a_record`**: add local A records to Pi-hole  \r\n- **`add_local_cname_record`**: add local CNAME records to Pi-hole  \r\n- **`remove_local_a_record`**: preview and delete all A records for a hostname (requires confirmation)  \r\n- **`remove_local_cname_record`**: preview and delete all CNAME records for a hostname (requires confirmation)  \r\n\r\n# Token-Based Deletion Confirmation\r\n- **Preview + Token**: first deletion request returns a diff of pending changes and a unique confirmation token  \r\n- **Secure Execution**: must supply the exact token to perform deletions  \r\n- **Auto-expire**: tokens time out after 10 minutes  \r\n- **Safeguards**: prevents LLM assistants or accidental calls from bypassing the workflow  \r\n- **Scope**: by default applies to all configured Pi-holes (override to target a specific instance)  \r\n\r\n# New Resources\r\n- **Discovery endpoint**: list all available tools by category\r\n\r\n# Documentation & Guidance\r\n- **Docstring enhancements**: improved API usage details for all query functions  \r\n- **MCP prompt guide**: step-by-step examples for the token-based deletion workflow (correct vs. incorrect usage) and automatic tool triggers  \r\n- **FastMCP instructions**: added resource/prompt descriptions and client instructions",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.2.1",
        "commit_sha": "17392c381a005f34d3bc8cc2b90f14a80e505385"
      },
      {
        "name": "v0.2.0",
        "commit_sha": "7ea72d76797da491fa93fbf5efd52dc1475ff9ca"
      },
      {
        "name": "v0.1.1",
        "commit_sha": "538d53ef4ecfdb8a6f491e2dc86959a25c791e53"
      }
    ],
    "latest_version": "v0.2.1"
  },
  "readme": "# üçì pihole-mcp-serer\n\nA Model Context Protocol (MCP) server for Pi-hole. This server exposes Pi-hole functionality as tools that can be used by AI assistants.\n\n## Dependencies\n\n### Docker\n\n- [Docker install guide](https://docs.docker.com/engine/install/)\n\n### `uv` (Optional, for Development)\n\nIf you want to run the application locally, use `uv`. Install it with your package manager of choice.\n\n## Environment\n\nCreate a `.env` file in the project root with your Pi-hole credentials:\n\n```\n# Primary Pi-hole (required)\nPIHOLE_URL=https://your-pihole.local/\nPIHOLE_PASSWORD=your-admin-password\n#PIHOLE_NAME=Primary        # optional, defaults to URL if unset\n\n# Secondary Pi-hole (optional)\n#PIHOLE2_URL=https://secondary-pihole.local/\n#PIHOLE2_PASSWORD=password2\n#PIHOLE2_NAME=Secondary     # optional\n\n# Up to 4 Pi-holes:\n#PIHOLE3_URL=...\n#PIHOLE3_PASSWORD=...\n#PIHOLE3_NAME=...\n\n#PIHOLE4_URL=...\n#PIHOLE4_PASSWORD=...\n#PIHOLE4_NAME=...\n```\n\n## Project Structure\n\nThe project follows a modular organization for better maintainability:\n\n```\n/\n‚îú‚îÄ‚îÄ main.py                # Main application entry point\n‚îú‚îÄ‚îÄ tools/                 # Pi-hole tools organized by functionality\n‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ   ‚îú‚îÄ‚îÄ config.py          # Configuration-related tools (DNS settings)\n‚îÇ   ‚îî‚îÄ‚îÄ metrics.py         # Metrics and query-related tools\n‚îú‚îÄ‚îÄ resources/             # MCP resources\n‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ   ‚îî‚îÄ‚îÄ common.py          # Common resources (piholes://, version://)\n‚îú‚îÄ‚îÄ docker-compose.yml     # Docker Compose configuration for production\n‚îú‚îÄ‚îÄ docker-compose.dev.yml # Docker Compose for development with volume mounts\n‚îî‚îÄ‚îÄ Dockerfile             # Docker build configuration\n```\n\nThis structure separates the code into logical components while maintaining compatibility with all run modes.\n\n## Running the Server\n\nThere are several ways to run the Pi-hole MCP server:\n\n### Using Docker (Recommended for Production)\n\n```bash\n# Standard deployment\ndocker-compose up -d\n```\n\nThe server will be available at `http://localhost:8383`\n\n### Development Mode with Docker\n\nFor development, use the dev compose file which builds locally:\n\n```bash\ndocker-compose -f docker-compose.dev.yml up\n```\n\n### MCP Inspector\n\nYou can run the MCP inspector using `uv` and the `mcp` CLI:\n\n```bash\nuv run mcp dev main.py\n```\n\nThis will start an interactive interface at `http://localhost:6274` where you can test tools and resources.\n\n## API\n\nThis MCP server exposes the following resources and tools:\n\n### Resources\n\n- `piholes://`: Returns information about all configured Pi-holes\n- `version://`: Returns the MCP server version\n- `list-tools://`: Returns a list of tool categories\n  - `list-tools://{category}`: Returns a list of tools within a specific category\n\n### Tools\n\nEach tool call returns results as a list of dictionaries with the following structure:\n```\n[\n  {\n    \"pihole\": \"Pi-hole Name\",\n    \"data\": [...]  # Result data from this Pi-hole\n  },\n  ...\n]\n```\n\n#### Configuration\n\n- `list_local_dns`: Lists all local DNS settings from Pi-hole(s)\n- `add_local_a_record`: Adds a local A record to Pi-hole(s).\n- `add_local_cname_record`: Adds a local CNAME record to Pi-hole(s).\n- `remove_local_a_record`: Removes all A records for a hostname.\n- `remove_local_cname_record`: Removes all CNAME records for a hostname.\n\n#### Metrics\n\n- `list_queries`: Fetches the recent DNS query history from Pi-hole(s)\n- `list_query_suggestions`: Get query filter suggestions\n- `list_query_history`: Get activity graph data for queries over time\n\n## Testing in `goose`\n\nGoose is a CLI LLM client that's useful for testing and development. Follow their install instructions [here](https://block.github.io/goose/docs/quickstart/).\n\nThe following assumes you've completed the initial setup with `goose configure`.\n\n### Configure Extension\n\n1. Type `goose configure` to open the configuration menu.\n2. Select **Add Extension**\n3. Select **Remote Extension**\n4. It will ask for a name. It doesn't matter what you name it. I called mine `pihole-mcp`.\n5. When it asks _\"What is the SSE endpoint URI?\"_ enter `http://localhost:8383/sse`.\n6. Enter a timeout.\n7. Add a description if you'd like.\n8. Select **No** when it asks about environment variables.\n   ![Screenshot of configuration](./img/configure-goose-2.jpg)\n\n### Start a Session\n\nOnce the server is installed, start a chat session.\n\n```sh\ngoose session\n```\n\nTry asking it: _\"What are my local DNS records?\"_\n\n![Screenshot of local DNS tool](./img/local-dns-2.jpg)\n\n...or telling it: _\"Show me my recent DNS queries.\"_\n\n![Screenshot of queries](./img/recent-queries.jpg)\n\n## Claude Desktop\n\nClaude's desktop client currently only support's the STDIO protocol, however you can use a proxy to communicate with the SSE endpoint.\n\nAdd the following to your `claude_desktop_config.json` file.\n\n```json\n{\n  \"mcpServers\": {\n    \"pihole\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"http://localhost:8383/sse\"\n      ]\n    }\n  }\n}\n```\n\nIf you're connecting to a different host on your local network and using an unsecured connection, you'll need to explicitly allow it with the `--allow-http` argument. For example:\n\n```json\n{\n  \"mcpServers\": {\n    \"pihole\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"http://192.168.1.255:8383/sse\",\n        \"--allow-http\"\n      ]\n    }\n  }\n}\n```\n\nAfterwards, completely restart the application and try it out.\n\n![Claude DNS info](./img/claude-dns.png)\n\n![Claude query info](./img/claude-query.png)\n\n## License\n\n[MIT](./LICENSE)"
}