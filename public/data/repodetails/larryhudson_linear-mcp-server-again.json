{
  "mcp_name": "larryhudson/linear-mcp-server-again",
  "mcp_description": "Facilitates interaction between Claude and Linear for task management through a Model Context Protocol server.",
  "mcp_id": "larryhudson_linear-mcp-server-again",
  "fetch_timestamp": "2025-06-23T06:05:00.981978Z",
  "github_url": "https://github.com/larryhudson/linear-mcp-server-again",
  "repository": {
    "name": "linear-mcp-server-again",
    "full_name": "larryhudson/linear-mcp-server-again",
    "description": null,
    "html_url": "https://github.com/larryhudson/linear-mcp-server-again",
    "created_at": "2025-04-13T14:13:25Z",
    "updated_at": "2025-04-26T17:44:40Z",
    "pushed_at": "2025-04-26T17:44:36Z",
    "size": 70,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "larryhudson",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/10627494?v=4",
      "html_url": "https://github.com/larryhudson"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 24410
    },
    "language_percentages": {
      "JavaScript": 100
    },
    "pull_requests_count": 2,
    "contributors_count": 1,
    "package_json_version": "0.1.4"
  },
  "readme": "# Linear MCP Server\n\n## Overview\n\nThis project implements a Model Context Protocol (MCP) server that acts as a bridge between Claude and the Linear task/issue management system. It allows Claude to interact with Linear through the following tools:\n\n1. **get_ticket** - Retrieve detailed information about a specific Linear ticket\n2. **get_my_issues** - List issues assigned to the current user with filtering by state\n3. **add_comment** - Add comments to Linear tickets\n4. **create_issue** - Create a new issue in Linear\n5. **get_teams** - Retrieve available teams for reference\n\n## Installation\n\nNo direct installation is needed. The package will be automatically downloaded and used by your Claude integration when configured properly.\n\n## Usage\n\n1. Obtain a Linear API key from your [Linear account settings](https://linear.app/larry-hudson/settings/account/security) - click 'New API key' under 'Personal API keys'.\n\n2. Configure the MCP server in your code editor as shown below.\n\n\n### Using with VS Code\n\nOne click install:\n\n[![Install with VS Code](https://img.shields.io/badge/VS_Code-Install_Server-0098FF?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=linear&inputs=%5B%7B%22id%22%3A%22linear_api_key%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22Linear%20API%20Key%22%2C%22password%22%3Atrue%7D%5D&config=%7B%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22%40larryhudson%2Flinear-mcp-server%22%5D%2C%22env%22%3A%7B%22LINEAR_API_KEY%22%3A%22%24%7Binput%3Alinear_api_key%7D%22%7D%7D) [![Install with VS Code Insiders](https://img.shields.io/badge/VS_Code_Insiders-Install_Server-24bfa5?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=linear&inputs=%5B%7B%22id%22%3A%22linear_api_key%22%2C%22type%22%3A%22promptString%22%2C%22description%22%3A%22Linear%20API%20Key%22%2C%22password%22%3Atrue%7D%5D&config=%7B%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22%40larryhudson%2Flinear-mcp-server%22%5D%2C%22env%22%3A%7B%22LINEAR_API_KEY%22%3A%22%24%7Binput%3Alinear_api_key%7D%22%7D%7D&quality=insiders)\n\nAdd this to your settings JSON file:\n\n```json\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"linear_api_key\",\n        \"description\": \"Linear API Key\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"linear\": {\n        \"command\": \"npx\",\n        \"args\": [\n          \"-y\",\n          \"@larryhudson/linear-mcp-server\"\n        ],\n        \"env\": {\n          \"LINEAR_API_KEY\": \"${input:linear_api_key}\"\n        }\n      }\n    }\n  }\n}\n```\n\n### Using with Cursor IDE\n\nAdd this to the MCP config JSON file:\n\n```json\n{\n  \"mcpServers\": {\n    \"linear\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@larryhudson/linear-mcp-server\"],\n      \"env\": {\n        \"LINEAR_API_KEY\": \"<YOUR_API_KEY>\"\n      }\n    }\n  }\n}\n```\n\n### Using with Claude Desktop App\n\nAdd this to your MCP configuration JSON file:\n\n```json\n{\n  \"mcpServers\": {\n    \"linear\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@larryhudson/linear-mcp-server\"\n      ],\n      \"env\": {\n        \"LINEAR_API_KEY\": \"<YOUR_API_KEY>\"\n      }\n    }\n  }\n}\n```\n\n\n### Using with Cline VS Code Extension\n\nAdd this to the MCP config JSON file:\n\n```json\n{\n  \"mcpServers\": {\n    \"linear\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@larryhudson/linear-mcp-server\"],\n      \"env\": {\n        \"LINEAR_API_KEY\": \"<YOUR_API_KEY>\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n\n### Environment Variables\n\n- `LINEAR_API_KEY` - Your Linear API key (required)\n\n## How It Works\n\nThe server is built on the following key technologies:\n\n- **Model Context Protocol (MCP)** - Framework for allowing AI assistants to interact with external tools and APIs\n- **Linear SDK** - Client library for communicating with the Linear API\n- **Node.js** - JavaScript runtime environment\n- **Zod** - Type validation library for tool parameters\n\n## Key Features\n\n### Ticket Retrieval\n- Gets comprehensive ticket details including status, priority, assignee, and team\n- Fetches the full description and all comments \n- Processes Markdown content with embedded images\n- Downloads and includes images from ticket descriptions\n\n### Issue Listing\n- Retrieves issues assigned to the current user\n- Filters by state (active, backlog, completed, canceled, or all)\n- Returns a formatted table with key information about each issue\n\n### Comment Addition\n- Allows adding new comments to existing tickets\n- Provides confirmation of successful comment creation\n\n## Technical Implementation Details\n\n1. **Image Handling**\n   - Extracts image URLs from Markdown using regular expressions\n   - Downloads images to a local temp directory\n   - Converts images to base64 for inclusion in MCP responses\n   - Uses MD5 hashing of URLs to create unique filenames\n\n2. **Linear API Integration**\n   - Authenticates using a Linear API key\n   - Retrieves issues, tickets, comments, and user information\n   - Formats data for human-readable display\n\n3. **Error Handling**\n   - Gracefully handles API errors, missing tickets, and download failures\n   - Provides meaningful error messages to the user\n\n## Running the Server\n\nThe server communicates with Claude through standard input/output (stdio) using the MCP protocol. It requires:\n\n- A Linear API key (configured in the code)\n- Node.js runtime environment\n- The dependency packages specified in package.json\n\n## Project Structure\n\nThis is a relatively simple Node.js application with a single main source file (`index.ts`) that defines the MCP server, tools, and associated helper functions. It uses TypeScript for type safety and better developer experience.\n\n## Dependencies\n\n- `@modelcontextprotocol/sdk`: Core MCP implementation\n- `@linear/sdk`: Linear API client\n- `dotenv`: Environment variable management\n- `node-fetch`: HTTP client for image downloads\n- `zod`: Schema validation for tool parameters\n\n## Limitations and Potential Improvements\n\n- There's limited pagination support for large result sets (currently limited to 20 issues)\n- Error handling could be improved for various edge cases\n- The image downloading could benefit from better MIME type detection\n- Consider adding more tools for managing issues (updating status, changing assignees, etc.)\n- Support for attachments when creating issues or adding comments"
}