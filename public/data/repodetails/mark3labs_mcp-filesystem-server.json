{
  "mcp_name": "mcp-filesystem-server",
  "mcp_description": "üèéÔ∏è üè† - Golang implementation for local file system access.",
  "mcp_id": "mark3labs_mcp-filesystem-server",
  "fetch_timestamp": "2025-06-23T06:34:04.890452Z",
  "github_url": "https://github.com/mark3labs/mcp-filesystem-server",
  "repository": {
    "name": "mcp-filesystem-server",
    "full_name": "mark3labs/mcp-filesystem-server",
    "description": "Go server implementing Model Context Protocol (MCP) for filesystem operations.",
    "html_url": "https://github.com/mark3labs/mcp-filesystem-server",
    "created_at": "2024-11-28T12:15:08Z",
    "updated_at": "2025-06-22T20:20:05Z",
    "pushed_at": "2025-06-22T20:21:59Z",
    "size": 77,
    "stargazers_count": 418,
    "watchers_count": 418,
    "forks_count": 57,
    "open_issues_count": 9,
    "language": "Go",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "mark3labs",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/17607124?v=4",
      "html_url": "https://github.com/mark3labs"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 57,
    "subscribers_count": 4,
    "languages": {
      "Go": 76751,
      "Dockerfile": 629
    },
    "language_percentages": {
      "Go": 99.19,
      "Dockerfile": 0.81
    },
    "pull_requests_count": 27,
    "contributors_count": 7,
    "latest_release": {
      "tag_name": "v0.11.1",
      "name": "v0.11.1",
      "published_at": "2025-06-22T20:23:14Z",
      "body": "## Changelog\n* 5646396f50ba144b9dd1ca9d088db0ac08cab3f8 fix: correct license copyright from Anthropic to Mark III Labs (#48)\n* 691e319afe2cf00a2d71d05758a3e85516f6127b fix: handle file creation time retrieval correctly in getFileStats (#46)\n\n",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.11.1",
        "commit_sha": "5646396f50ba144b9dd1ca9d088db0ac08cab3f8"
      },
      {
        "name": "v0.11.0",
        "commit_sha": "8b1ab024b06e0098ab3f95cc0189f0a8fd61d3e2"
      },
      {
        "name": "v0.10.1",
        "commit_sha": "3e2e0ab85de2291fc7e9e2918e9e194d050ad816"
      },
      {
        "name": "v0.10.0",
        "commit_sha": "0770c166eeb636aeeeb8a3465efb5e784d296df4"
      },
      {
        "name": "v0.9.0",
        "commit_sha": "81e256af9cbe3be3adf5c35ab6d7083b8fd4e880"
      },
      {
        "name": "v0.8.1",
        "commit_sha": "3f8a1561aa3a7b11dc02e87507fd7d89d52ab482"
      },
      {
        "name": "v0.8.0",
        "commit_sha": "01b8eef88db3af380252cad1ce1143f88a7233bc"
      },
      {
        "name": "v0.7.0",
        "commit_sha": "181178a487688c5c7e9d68e5d5dd8589148c1d9f"
      },
      {
        "name": "v0.6.0",
        "commit_sha": "33390d5af3edcd8aa3eda62a9b043820eecf9415"
      },
      {
        "name": "v0.5.0",
        "commit_sha": "8ddab611bff3f6c43579e7e4985818ef48051e93"
      }
    ],
    "latest_version": "v0.11.1"
  },
  "readme": "# MCP Filesystem Server\n\nThis MCP server provides secure access to the local filesystem via the Model Context Protocol (MCP).\n\n## Components\n\n### Tools\n\n#### File Operations\n\n- **read_file**\n  - Read the complete contents of a file from the file system\n  - Parameters: `path` (required): Path to the file to read\n\n- **read_multiple_files**\n  - Read the contents of multiple files in a single operation\n  - Parameters: `paths` (required): List of file paths to read\n\n- **write_file**\n  - Create a new file or overwrite an existing file with new content\n  - Parameters: `path` (required): Path where to write the file, `content` (required): Content to write to the file\n\n- **copy_file**\n  - Copy files and directories\n  - Parameters: `source` (required): Source path of the file or directory, `destination` (required): Destination path\n\n- **move_file**\n  - Move or rename files and directories\n  - Parameters: `source` (required): Source path of the file or directory, `destination` (required): Destination path\n\n- **delete_file**\n  - Delete a file or directory from the file system\n  - Parameters: `path` (required): Path to the file or directory to delete, `recursive` (optional): Whether to recursively delete directories (default: false)\n\n- **modify_file**\n  - Update file by finding and replacing text using string matching or regex\n  - Parameters: `path` (required): Path to the file to modify, `find` (required): Text to search for, `replace` (required): Text to replace with, `all_occurrences` (optional): Replace all occurrences (default: true), `regex` (optional): Treat find pattern as regex (default: false)\n\n#### Directory Operations\n\n- **list_directory**\n  - Get a detailed listing of all files and directories in a specified path\n  - Parameters: `path` (required): Path of the directory to list\n\n- **create_directory**\n  - Create a new directory or ensure a directory exists\n  - Parameters: `path` (required): Path of the directory to create\n\n- **tree**\n  - Returns a hierarchical JSON representation of a directory structure\n  - Parameters: `path` (required): Path of the directory to traverse, `depth` (optional): Maximum depth to traverse (default: 3), `follow_symlinks` (optional): Whether to follow symbolic links (default: false)\n\n#### Search and Information\n\n- **search_files**\n  - Recursively search for files and directories matching a pattern\n  - Parameters: `path` (required): Starting path for the search, `pattern` (required): Search pattern to match against file names\n\n- **search_within_files**\n  - Search for text within file contents across directory trees\n  - Parameters: `path` (required): Starting directory for the search, `substring` (required): Text to search for within file contents, `depth` (optional): Maximum directory depth to search, `max_results` (optional): Maximum number of results to return (default: 1000)\n\n- **get_file_info**\n  - Retrieve detailed metadata about a file or directory\n  - Parameters: `path` (required): Path to the file or directory\n\n- **list_allowed_directories**\n  - Returns the list of directories that this server is allowed to access\n  - Parameters: None\n\n## Features\n\n- Secure access to specified directories\n- Path validation to prevent directory traversal attacks\n- Symlink resolution with security checks\n- MIME type detection\n- Support for text, binary, and image files\n- Size limits for inline content and base64 encoding\n\n## Getting Started\n\n### Installation\n\n#### Using Go Install\n\n```bash\ngo install github.com/mark3labs/mcp-filesystem-server@latest\n```\n\n### Usage\n\n#### As a standalone server\n\nStart the MCP server with allowed directories:\n\n```bash\nmcp-filesystem-server /path/to/allowed/directory [/another/allowed/directory ...]\n```\n\n#### As a library in your Go project\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/mark3labs/mcp-filesystem-server/filesystemserver\"\n)\n\nfunc main() {\n\t// Create a new filesystem server with allowed directories\n\tallowedDirs := []string{\"/path/to/allowed/directory\", \"/another/allowed/directory\"}\n\tfs, err := filesystemserver.NewFilesystemServer(allowedDirs)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create server: %v\", err)\n\t}\n\n\t// Serve requests\n\tif err := fs.Serve(); err != nil {\n\t\tlog.Fatalf(\"Server error: %v\", err)\n\t}\n}\n```\n\n### Usage with Model Context Protocol\n\nTo integrate this server with apps that support MCP:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"mcp-filesystem-server\",\n      \"args\": [\"/path/to/allowed/directory\", \"/another/allowed/directory\"]\n    }\n  }\n}\n```\n\n### Docker\n\n#### Running with Docker\n\nYou can run the Filesystem MCP server using Docker:\n\n```bash\ndocker run -i --rm ghcr.io/mark3labs/mcp-filesystem-server:latest /path/to/allowed/directory\n```\n\n#### Docker Configuration with MCP\n\nTo integrate the Docker image with apps that support MCP:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"ghcr.io/mark3labs/mcp-filesystem-server:latest\",\n        \"/path/to/allowed/directory\"\n      ]\n    }\n  }\n}\n```\n\nIf you need changes made inside the container to reflect on the host filesystem, you can mount a volume. This allows the container to access and modify files on the host system. Here's an example:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"--volume=/allowed/directory/in/host:/allowed/directory/in/container\",\n        \"ghcr.io/mark3labs/mcp-filesystem-server:latest\",\n        \"/allowed/directory/in/container\"\n      ]\n    }\n  }\n}\n```\n\n## License\n\nSee the [LICENSE](LICENSE) file for details.\n"
}