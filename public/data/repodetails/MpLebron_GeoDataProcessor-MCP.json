{
  "mcp_name": "MpLebron/GeoDataProcessor-MCP",
  "mcp_description": "Facilitates geospatial data processing through standardized interfaces, enabling large language models to access and utilize tools like WhiteBox and SAGA GIS.",
  "mcp_id": "MpLebron_GeoDataProcessor-MCP",
  "fetch_timestamp": "2025-06-23T06:54:15.219116Z",
  "github_url": "https://github.com/MpLebron/GeoDataProcessor-MCP",
  "repository": {
    "name": "GeoDataProcessor-MCP",
    "full_name": "MpLebron/GeoDataProcessor-MCP",
    "description": null,
    "html_url": "https://github.com/MpLebron/GeoDataProcessor-MCP",
    "created_at": "2025-04-18T13:10:08Z",
    "updated_at": "2025-04-18T13:10:15Z",
    "pushed_at": "2025-04-18T13:10:12Z",
    "size": 18,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "MpLebron",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/60997661?v=4",
      "html_url": "https://github.com/MpLebron"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 14557
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# 地理数据处理 MCP Server\n\n## 项目简介\n\n地理数据处理 MCP Server 是一个基于 Model Context Protocol (MCP) 的服务器，提供了一系列地理数据处理工具的接口。该服务器允许大型语言模型（如 Claude）通过标准化的接口访问和调用各种地理数据处理功能，包括 WhiteBox 和 SAGA GIS 提供的地理数据处理服务。\n\n通过这个 MCP Server，用户可以：\n- 查询可用的地理数据处理工具\n- 获取工具的详细信息和参数要求\n- 上传地理数据文件\n- 调用地理数据处理工具进行数据分析和处理\n\n## 安装和配置\n\n### 前提条件\n\n- Python 3.8 或更高版本\n- 安装了 MCP SDK (`mcp-server`)\n- 网络连接（用于访问地理数据处理服务 API）\n\n### 安装步骤\n\n1. 克隆本仓库：\n   ```bash\n   git clone https://github.com/your-username/geo-data-processor-mcp.git\n   cd geo-data-processor-mcp\n   ```\n\n2. 安装依赖：\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n3. 配置环境变量（可选）：\n   ```bash\n   export GEO_API_TOKEN=\"your_api_token\"  # 如果不设置，将使用默认令牌\n   ```\n\n### 启动服务器\n\n```bash\npython server/geoDataProcessor.py\n```\n\n服务器将通过标准输入/输出（stdio）与 MCP 客户端通信。\n\n## 配置 Claude for Desktop\n\n要在 Claude for Desktop 中使用此 MCP Server，请按照以下步骤操作：\n\n1. 打开 Claude for Desktop 配置文件：\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%AppData%\\Claude\\claude_desktop_config.json`\n\n2. 添加服务器配置：\n   ```json\n   {\n     \"mcpServers\": {\n       \"geoDataProcessor\": {\n         \"command\": \"python\",\n         \"args\": [\n           \"/absolute/path/to/server/geoDataProcessor.py\"\n         ]\n       }\n     }\n   }\n   ```\n\n3. 重启 Claude for Desktop\n\n## 可用工具\n\n### 1. list_all_tools\n\n查询工具库中所有工具的缩略信息，一次性返回所有工具。\n\n**参数**：无\n\n**返回**：包含工具 ID、名称和描述的 JSON 字符串\n\n**示例**：\n```python\nresult = await list_all_tools()\n```\n\n### 2. search_tools_by_keyword\n\n根据关键词获取工具，一次性返回所有符合条件的工具。\n\n**参数**：\n- `keyword`：搜索关键词（字符串）\n\n**返回**：包含工具详细信息的 JSON 字符串\n\n**示例**：\n```python\nresult = await search_tools_by_keyword(\"vector\")\n```\n\n### 3. get_tool_details\n\n查询某个方法名称的详细信息。\n\n**参数**：\n- `name`：方法名称（字符串）\n\n**返回**：包含工具详细信息的 JSON 字符串\n\n**示例**：\n```python\nresult = await get_tool_details(\"MergeVectors\")\n```\n\n### 4. invoke_tool\n\n调用地理数据处理方法。\n\n**参数**：\n- `tool_id`：工具 ID（整数）\n- `params`：工具参数（字典），格式为 `{\"val0\": value0, \"val1\": value1, ...}`\n\n**返回**：调用结果的 JSON 字符串\n\n**示例**：\n```python\nparams = {\n    \"val0\": [\"c55f39c3-23e4-4a80-aeee-f9fa2695f7a5\", \"c0ecc572-28f0-4b7e-b3b4-117ac76f320e\"],\n    \"val1\": \"result.shp\"\n}\nresult = await invoke_tool(285, params)\n```\n\n### 5. upload_file\n\n将文件上传到数据中转服务器。\n\n**参数**：\n- `file_path`：文件路径（字符串）\n\n**返回**：上传成功后的文件 URL\n\n**示例**：\n```python\nfile_url = await upload_file(\"/path/to/your/file.shp\")\n```\n\n## 参数说明\n\n### invoke_tool 参数映射\n\n调用 `invoke_tool` 时，参数的键名不是参数的实际名称，而是按照参数在工具定义中的顺序编号：\n- `val0`：第一个参数\n- `val1`：第二个参数\n- `val2`：第三个参数，以此类推\n\n不同类型参数的处理方式：\n\n1. **文件输入类型参数**：\n   - 需要先使用 `upload_file` 工具上传文件，然后将返回的文件 ID 作为参数值\n   - 如果参数类型是单个文件，则传入文件 ID 字符串\n   - 如果参数类型是文件列表，则传入文件 ID 列表\n\n2. **文件输出类型参数**：\n   - 只需传入输出文件名\n\n3. **布尔类型参数**：\n   - 可以传入布尔值（`true`/`false`）或字符串（`\"true\"`/`\"false\"`）\n\n4. **数值类型参数**：\n   - 可以传入数值或字符串形式的数值\n\n## 使用流程示例\n\n以下是使用地理数据处理 MCP Server 的典型流程：\n\n### 1. 查找可用工具\n\n```python\n# 列出所有工具\ntools_list = await list_all_tools()\nprint(tools_list)\n\n# 或者搜索特定关键词的工具\nvector_tools = await search_tools_by_keyword(\"vector\")\nprint(vector_tools)\n```\n\n### 2. 获取工具详细信息\n\n```python\n# 获取特定工具的详细信息\ntool_details = await get_tool_details(\"MergeVectors\")\nprint(tool_details)\n```\n\n### 3. 上传输入文件\n\n```python\n# 上传需要处理的文件\nfile1_url = await upload_file(\"/path/to/vector1.shp\")\nfile2_url = await upload_file(\"/path/to/vector2.shp\")\n\n# 从URL中提取文件ID\nfile1_id = file1_url.split('/')[-1]\nfile2_id = file2_url.split('/')[-1]\n```\n\n### 4. 调用工具处理数据\n\n```python\n# 准备参数\nparams = {\n    \"val0\": [file1_id, file2_id],  # 文件ID列表\n    \"val1\": \"merged_result.shp\"    # 输出文件名\n}\n\n# 调用工具（假设MergeVectors的ID是285）\nresult = await invoke_tool(285, params)\nprint(result)\n```\n\n## 常见问题解答\n\n### Q: 如何知道工具需要哪些参数？\n\nA: 使用 `get_tool_details` 函数获取工具的详细信息，包括参数列表和类型。返回的 `params` 字段包含每个参数的名称、类型、描述等信息。\n\n### Q: 调用工具后如何获取处理结果？\n\nA: 调用 `invoke_tool` 后，返回的 JSON 中的 `output` 字段包含输出文件的信息，包括文件 ID。您可以使用这些 ID 下载或进一步处理结果文件。\n\n### Q: 支持哪些类型的地理数据？\n\nA: 支持多种地理数据格式，包括但不限于：\n- 矢量数据：Shapefile (.shp)\n- 栅格数据：GeoTIFF (.tif, .tiff)\n- LiDAR 点云数据：LAS/LAZ (.las, .laz, .zlidar)\n- 表格数据：CSV (.csv)\n\n## 贡献指南\n\n我们欢迎对地理数据处理 MCP Server 的贡献！如果您想贡献代码、报告问题或提出建议，请遵循以下步骤：\n\n1. Fork 本仓库\n2. 创建您的特性分支 (`git checkout -b feature/amazing-feature`)\n3. 提交您的更改 (`git commit -m 'Add some amazing feature'`)\n4. 推送到分支 (`git push origin feature/amazing-feature`)\n5. 打开一个 Pull Request\n\n## 许可证\n\n本项目采用 MIT 许可证 - 详情请参阅 [LICENSE](LICENSE) 文件。"
}