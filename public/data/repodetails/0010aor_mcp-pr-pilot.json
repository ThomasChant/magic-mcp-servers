{
  "mcp_name": "0010aor/mcp-pr-pilot",
  "mcp_description": "Enhances pull request workflows by generating PR descriptions, commit messages, and code reviews using LLMs based on code changes.",
  "mcp_id": "0010aor_mcp-pr-pilot",
  "fetch_timestamp": "2025-06-23T00:05:07.936205Z",
  "github_url": "https://github.com/0010aor/mcp-pr-pilot",
  "repository": {
    "name": "mcp-pr-pilot",
    "full_name": "0010aor/mcp-pr-pilot",
    "description": null,
    "html_url": "https://github.com/0010aor/mcp-pr-pilot",
    "created_at": "2025-04-21T23:07:23Z",
    "updated_at": "2025-04-22T21:59:28Z",
    "pushed_at": "2025-04-22T21:59:25Z",
    "size": 48310,
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "0010aor",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/65469356?v=4",
      "html_url": "https://github.com/0010aor"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 11129
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "<img src=\"sample.gif\" alt=\"Demo of MCP Server PR Pilot\" width=\"1080\" />\nA Model Context Protocol (MCP) server that helps you create pull request (PR) descriptions, commit messages, and code reviews based on the actual code changes in your repository. It provides the output of `git diff` and a summarization instruction, making it easy to generate meaningful PR descriptions, commit messages, and reviews using LLMs or other tools.\n### Example PR/Commit/Review Workflow\nThis server is designed to automate and improve your pull request documentation, commit message generation, and code review process.\n### Available Tools\n-   `summarize_pr` - Summarize the changes in this branch for a pull request.\n    -   **Input:**\n        - `branch` (string, optional): The branch to diff against (defaults to `main`).\n-   `review_changes` - Review the changes in my working directory.\n    -   **Input:**\n        - `branch` (string, optional): The branch to diff against (defaults to `main`).\n-   `generate_commit` - Generate a conventional commit message for my staged changes.\n-   `generate_docs` - Generate documentation updates based on the code changes.\n    -   **Input:**\n        - `branch` (string, optional): The branch to diff against (defaults to `main`).\n\nThis project uses [`uv`](https://docs.astral.sh/uv/) for dependency management and running scripts.\n\n### Using uv (recommended)\n\nEnsure `uv` is installed. You can run the server directly from the project directory:\n\n\n\n### Using PIP (for distribution or alternative setup)\n\nIf the package were published, you could install it via pip:\n\n\n\nAfter installation, you could run it as a script:\n\n\n\nFor development, you typically run it using `uv run` as shown above."
}