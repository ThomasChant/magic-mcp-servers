{
  "mcp_name": "DuneRaccoon/financial-markets-analyser",
  "mcp_description": "FastMCP server providing financial data endpoints for stocks and cryptocurrencies with multi-source fallback for reliability.",
  "mcp_id": "DuneRaccoon_financial-markets-analyser",
  "fetch_timestamp": "2025-06-23T02:44:40.481961Z",
  "github_url": "https://github.com/DuneRaccoon/financial-markets-analyser",
  "repository": {
    "name": "financial-markets-analyser",
    "full_name": "DuneRaccoon/financial-markets-analyser",
    "description": null,
    "html_url": "https://github.com/DuneRaccoon/financial-markets-analyser",
    "created_at": "2025-04-24T03:04:18Z",
    "updated_at": "2025-04-24T11:55:23Z",
    "pushed_at": "2025-04-24T11:55:19Z",
    "size": 59,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "DuneRaccoon",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/23006273?v=4",
      "html_url": "https://github.com/DuneRaccoon"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 29736
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# Financial Markets Analyser\n\nA FastMCP server that offers financial data endpoints for stocks and cryptocurrencies. Gets the job done with free tiers for all services and always falls back to Yahoo Finance if other APIs are down (or API keys aren't provded)\n\n## Features\n\n- **Stock Market Data**: Historical prices, current prices, income statements, balance sheets, cash flow statements\n- **Cryptocurrency Data**: Current and historical prices, cryptocurrency listings\n- **Company News**: Latest news for publicly traded companies\n- **Multi-Source Fallback System**: Automatically tries multiple data sources to ensure reliability\n\n## Free Data Sources Used\n\nThis package uses a combination of these free financial data APIs:\n\n1. **Yahoo Finance** (via yfinance): No API key required, no rate limits\n2. **Alpha Vantage**: Free tier with 5 API calls per minute, 500 calls per day\n3. **Financial Modeling Prep (FMP)**: Free tier with ~250-300 API calls per day\n4. **CoinGecko**: Free tier with rate limiting (10-50 calls per minute)\n\n## Prerequisites\n- Python 3.10 or higher\n- [uv](https://pypi.org/project/uv/)\n\n## Configuration and Installation\n\n1. Install UV globally using Homebrew in Terminal (if you haven't already done so):\n```bash\nbrew install uv\n```\n\nor with curl\n```bash\n# macOS/Linux\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Windows\ncurl -LsSf https://astral.sh/uv/install.ps1 | powershell\n```\n\n2. Clone and install the repo\n```bash\n# Clone the repository\ngit clone https://github.com/duneraccoon/financial-markets-analyser.git\ncd financial-markets-analyser\n\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n# Install using uv\nuv pip install -e .\n## or in development mode\n# uv pip install -e \".[dev]\"\n```\n\n3. Install Claude Desktop (if you haven't already done so):\n   - Download and install [Claude Desktop](https://www.anthropic.com/claude-desktop) for your OS.\n   - Follow the installation instructions provided on the website.\n\n3. Create claude_desktop_config.json (if it doesn't exist):\n    - For MacOS: Open directory ~/Library/Application Support/Claude/ and create the file inside it\n    - For Windows: Open directory %APPDATA%/Claude/ and create the file inside it\n\n4. Add the server config to the config JSON. Use .env.example as a guide for the env arg:\n\n```json\n{\n  \"mcpServers\": {\n    \"financial-markets-analyser\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/financial-markets-analyser\",\n        \"run\",\n        \"entrypoint.py\"\n      ],\n      \"env\": {\n        \"ALPHA_VANTAGE_API_KEY\": \"your_api_key\",\n        \"FMP_API_KEY\": \"your_api_secret\"\n      }\n    }\n  }\n}\n```\nYou can obtain free API keys from:\n- Alpha Vantage: https://www.alphavantage.co/support/#api-key\n- Financial Modeling Prep: https://site.financialmodelingprep.com/developer/docs/\n\n## Usage\n\n### Starting the MCP Server\n\n```bash\npython server.py\n```\n\nOr use the installed script:\n\n```bash\nfinancial-markets-analyser\n```\n\n### Available Methods\n\n#### Stock Market Data\n\n| Method | Description | Parameters |\n|--------|-------------|------------|\n| `get_income_statements` | Get income statements for a company | `ticker`: Symbol (e.g., AAPL)<br>`period`: \"annual\" or \"quarterly\"<br>`limit`: Number of statements (default: 4) |\n| `get_balance_sheets` | Get balance sheets for a company | `ticker`: Symbol (e.g., AAPL)<br>`period`: \"annual\" or \"quarterly\"<br>`limit`: Number of statements (default: 4) |\n| `get_cash_flow_statements` | Get cash flow statements for a company | `ticker`: Symbol (e.g., AAPL)<br>`period`: \"annual\" or \"quarterly\"<br>`limit`: Number of statements (default: 4) |\n| `get_current_stock_price` | Get latest stock price data | `ticker`: Symbol (e.g., AAPL) |\n| `get_historical_stock_prices` | Get historical stock prices | `ticker`: Symbol (e.g., AAPL)<br>`start_date`: Start date (YYYY-MM-DD)<br>`end_date`: End date (YYYY-MM-DD)<br>`interval`: Time interval (1m, 2m, 5m, 15m, 30m, 60m, 90m, 1h, 1d, 5d, 1wk, 1mo, 3mo) |\n| `get_company_news` | Get latest news for a company | `ticker`: Symbol (e.g., AAPL)<br>`limit`: Number of news articles (default: 10) |\n\n#### Cryptocurrency Data\n\n| Method | Description | Parameters |\n|--------|-------------|------------|\n| `get_available_crypto_tickers` | Get list of available cryptocurrencies | None |\n| `get_current_crypto_price` | Get latest price for a cryptocurrency | `ticker`: Symbol (e.g., BTC-USD) |\n| `get_historical_crypto_prices` | Get historical cryptocurrency prices | `ticker`: Symbol (e.g., BTC-USD)<br>`start_date`: Start date (YYYY-MM-DD)<br>`end_date`: End date (YYYY-MM-DD)<br>`interval`: Time interval (minute, hour, day) |\n\n### Example Client Code\n\n```python\nimport asyncio\nfrom mcp.client.localclient import LocalClient\n\nasync def main():\n    client = LocalClient([\"python\", \"server.py\"])\n    await client.start()\n    \n    # Get current price of Apple stock\n    result = await client.call(\"get_current_stock_price\", {\"ticker\": \"AAPL\"})\n    print(result)\n    \n    # Get historical prices for Tesla\n    result = await client.call(\n        \"get_historical_stock_prices\", \n        {\n            \"ticker\": \"TSLA\", \n            \"start_date\": \"2023-01-01\", \n            \"end_date\": \"2023-12-31\",\n            \"interval\": \"1mo\"\n        }\n    )\n    print(result)\n    \n    await client.stop()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n## Development\n\n### Installing Development Dependencies\n\n```bash\n# With uv\nuv pip install -e \".[dev]\"\n```\n\n### Running Tests\n\n```bash\n# Run tests with pytest\npytest\n```\n\n## API Rate Limits\n\nBe mindful of these rate limits for free tiers:\n\n| API | Rate Limit |\n|-----|------------|\n| Yahoo Finance | No official limits (use responsibly) |\n| Alpha Vantage | 5 API calls per minute, 500 per day |\n| Financial Modeling Prep | ~250-300 calls per day, 500MB bandwidth/month |\n| CoinGecko | 10-50 calls per minute |\n\nThe server implements a fallback system to manage these limits efficiently.\n\n## Differences from financialdatasets.ai\n\nThis package aims to provide equivalent functionality to financialdatasets.ai but using free APIs. Key differences:\n\n- Slightly different data format in responses\n- Some advanced financial data might be less comprehensive\n- Rate limits on free tier APIs may affect high-volume usage\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n"
}