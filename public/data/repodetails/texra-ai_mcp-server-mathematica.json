{
  "mcp_name": "texra-ai/mcp-server-mathematica",
  "mcp_description": "Facilitates the execution of Mathematica code and verification of mathematical derivations through MCP client integration.",
  "mcp_id": "texra-ai_mcp-server-mathematica",
  "fetch_timestamp": "2025-06-23T08:51:13.426152Z",
  "github_url": "https://github.com/texra-ai/mcp-server-mathematica",
  "repository": {
    "name": "mcp-server-mathematica",
    "full_name": "texra-ai/mcp-server-mathematica",
    "description": null,
    "html_url": "https://github.com/texra-ai/mcp-server-mathematica",
    "created_at": "2025-04-22T12:11:18Z",
    "updated_at": "2025-05-15T16:06:24Z",
    "pushed_at": "2025-04-22T12:44:33Z",
    "size": 22,
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "texra-ai",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/207051187?v=4",
      "html_url": "https://github.com/texra-ai"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 22297
    },
    "language_percentages": {
      "JavaScript": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 2,
    "package_json_version": "0.1.0"
  },
  "readme": " # Mathematica MCP Server\n\nThis repository contains a Model Context Protocol (MCP) server that allows MCP clients (like Cursor) to execute Mathematica code via `wolframscript` and verify mathematical derivations.\n\n## Overview\n\nThis server acts as a bridge, enabling applications that support MCP to leverage the power of a local Mathematica installation for tasks such as:\n\n*   Performing complex mathematical calculations.\n*   Verifying mathematical derivation steps provided by humans or AI models.\n*   Generating LaTeX or Mathematica string representations of expressions.\n\n## Prerequisites\n\n*   [Mathematica](https://www.wolfram.com/mathematica/) must be installed on your system.\n*   The `wolframscript` command-line utility must be available in your system's PATH. You can test this by running `wolframscript -help` in your terminal.\n*   [Node.js](https://nodejs.org/) (Recommended: v16 or later, as inferred from `tsconfig.json` target `ES2022`).\n\n## Installation\n\n1.  **Clone the repository:**\n    ```bash\n    git clone <repository-url>\n    cd <repository-directory>\n    ```\n2.  **Install dependencies:**\n    ```bash\n    npm install\n    ```\n3.  **Build the server:**\n    ```bash\n    npm run build\n    ```\n    This command compiles the TypeScript source code from `src/` into JavaScript in the `build/` directory and makes the main script executable.\n\n## Running the Server\n\nTo start the MCP server, run the following command in your terminal:\n\n```bash\nnode build/index.js\n```\n\nThe server will start and listen for connections from MCP clients via standard input/output (stdio). Keep this terminal window open while you intend to use the server.\n\nFor more robust deployments, consider using a process manager like `pm2` to run the server in the background and manage restarts.\n\n## Integration with MCP Clients (e.g., Cursor, Cline, Claude Desktop)\n\nMCP clients generally discover and communicate with running MCP servers. The exact configuration steps can vary depending on the client application.\n\n**General Steps:**\n\n1.  **Start the Mathematica MCP Server:** Ensure the server is running in a terminal:\n    ```bash\n    node build/index.js\n    ```\n2.  **Configure Your MCP Client:** Add the server to your client's configuration. This often involves editing a JSON settings file. See client-specific instructions below.\n3.  **Restart Your MCP Client:** After starting the server or changing configuration, restart your client application to ensure it detects the Mathematica server.\n\n**Client-Specific Configuration:**\n\n*   **Cline:**\n    According to the [Cline MCP Server Development Protocol](https://docs.cline.bot/mcp-servers/mcp-server-from-scratch), you typically configure servers in a settings file (often `settings.json` within the Cline configuration directory). You would add an entry like this:\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"mathematica-server\": {\n          \"command\": \"node\",\n          \"args\": [\"/full/path/to/mcp-server-mathematica/build/index.js\"], // Replace with the actual absolute path\n          \"disabled\": false,\n          \"autoApprove\": [] // Optional: Add tool names to auto-approve\n        }\n        // ... other servers ...\n      }\n    }\n    ```\n    *Replace `/full/path/to/mcp-server-mathematica/build/index.js` with the absolute path to the built `index.js` file on your system.*\n\n*   **Cursor:**\n    Cursor might require editing a specific settings file, potentially like `~/Library/Application Support/Cursor/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json` (though this path might change). The structure would be similar to the Cline example above.\n\n*   **Other Clients (e.g., Claude Desktop):**\n    Consult the documentation for your specific MCP client. Look for sections on \"MCP Servers,\" \"Tool Configuration,\" or \"External Tools.\" The configuration generally involves specifying the command (`node`), the path to the server script (`build/index.js`), and potentially environment variables if needed.\n\n## Available Tools\n\nThe server exposes the following tools to MCP clients:\n\n### 1. `execute_mathematica`\n\nExecutes arbitrary Mathematica code and returns the result.\n\n**Input Schema:**\n\n```typescript\n{\n  type: \"object\",\n  properties: {\n    code: {\n      type: \"string\",\n      description: \"Mathematica code to execute\"\n    },\n    format: {\n      type: \"string\",\n      description: \"Output format (text, latex, or mathematica)\",\n      enum: [\"text\", \"latex\", \"mathematica\"],\n      default: \"text\"\n    }\n  },\n  required: [\"code\"]\n}\n```\n\n**Example Usage (Client Request):**\n\n*   **Natural Language:** \"Calculate the integral of x^2 from 0 to 1 using Mathematica and format as LaTeX\"\n*   **Direct Tool Call:**\n    ```json\n    {\n      \"tool_name\": \"execute_mathematica\",\n      \"arguments\": {\n        \"code\": \"Integrate[x^2, {x, 0, 1}]\",\n        \"format\": \"latex\"\n      }\n    }\n    ```\n\n### 2. `verify_derivation`\n\nVerifies a sequence of mathematical expressions to check if each step logically follows from the previous one using `Simplify[prev == current]`.\n\n**Input Schema:**\n\n```typescript\n{\n  type: \"object\",\n  properties: {\n    steps: {\n      type: \"array\",\n      description: \"Array of mathematical expressions (as strings) representing steps in a derivation. Requires at least two steps.\",\n      items: {\n        type: \"string\"\n      }\n    },\n    format: {\n      type: \"string\",\n      description: \"Output format for the verification report (text, latex, or mathematica)\",\n      enum: [\"text\", \"latex\", \"mathematica\"],\n      default: \"text\"\n    }\n  },\n  required: [\"steps\"]\n}\n```\n\n**Example Usage (Client Request):**\n\n*   **Natural Language:** \"Verify this derivation: ['x^2 - y^2', '(x-y)(x+y)']\"\n*   **Direct Tool Call:**\n    ```json\n    {\n      \"tool_name\": \"verify_derivation\",\n      \"arguments\": {\n        \"steps\": [\n          \"x^2 - y^2\",\n          \"(x-y)*(x+y)\"\n        ],\n        \"format\": \"text\"\n      }\n    }\n    ```\n\n## Troubleshooting\n\n*   **Server Not Found/Not Responding:**\n    *   Ensure the server is running in a terminal (`node build/index.js`).\n    *   Check if `wolframscript` is installed and accessible in your PATH (`wolframscript -help`).\n    *   Restart your MCP client application.\n    *   Check the client's MCP configuration.\n*   **Tool Errors:**\n    *   Check the server's terminal output (stderr) for logs and error messages from `wolframscript`.\n    *   Verify the syntax of the Mathematica `code` or `steps` provided.\n    *   Ensure the `steps` array for `verify_derivation` has at least two elements.\n*   **Mathematica Issues:** Ensure your Mathematica installation is licensed and working correctly.\n\n## Project Structure\n\n*   `src/`: TypeScript source code for the server.\n*   `build/`: Compiled JavaScript output (generated by `npm run build`).\n*   `package.json`: Project metadata and dependencies.\n*   `tsconfig.json`: TypeScript compiler configuration.\n"
}