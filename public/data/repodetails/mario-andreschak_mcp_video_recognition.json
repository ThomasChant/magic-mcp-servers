{
  "mcp_name": "mario-andreschak/mcp_video_recognition",
  "mcp_description": "Facilitates image, audio, and video recognition using Google's Gemini AI.",
  "mcp_id": "mario-andreschak_mcp_video_recognition",
  "fetch_timestamp": "2025-06-23T06:25:27.017119Z",
  "github_url": "https://github.com/mario-andreschak/mcp_video_recognition",
  "repository": {
    "name": "mcp_video_recognition",
    "full_name": "mario-andreschak/mcp_video_recognition",
    "description": null,
    "html_url": "https://github.com/mario-andreschak/mcp_video_recognition",
    "created_at": "2025-04-19T23:11:15Z",
    "updated_at": "2025-05-29T00:13:52Z",
    "pushed_at": "2025-04-27T02:05:20Z",
    "size": 24,
    "stargazers_count": 7,
    "watchers_count": 7,
    "forks_count": 5,
    "open_issues_count": 2,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "mario-andreschak",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/196235471?v=4",
      "html_url": "https://github.com/mario-andreschak"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 5,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 30665
    },
    "language_percentages": {
      "TypeScript": 100
    },
    "pull_requests_count": 3,
    "contributors_count": 2,
    "package_json_version": "1.0.0"
  },
  "readme": "# MCP Video Recognition Server\n\nAn MCP (Model Context Protocol) server that provides tools for image, audio, and video recognition using Google's Gemini AI.\n\n<a href=\"https://glama.ai/mcp/servers/@mario-andreschak/mcp_video_recognition\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@mario-andreschak/mcp_video_recognition/badge\" alt=\"Video Recognition Server MCP server\" />\n</a>\n\n## Features\n\n- **Image Recognition**: Analyze and describe images using Google Gemini AI\n- **Audio Recognition**: Analyze and transcribe audio using Google Gemini AI\n- **Video Recognition**: Analyze and describe videos using Google Gemini AI\n\n## Prerequisites\n\n- Node.js 18 or higher\n- Google Gemini API key\n\n## Installation\n\n### Manual Installation\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/yourusername/mcp-video-recognition.git\n   cd mcp-video-recognition\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n\n### Installing in [FLUJO](https://github.com/mario-andreschak/FLUJO/)\n\n1. Click Add Server\n2. Copy & Paste Github URL into FLUJO\n3. Click Parse, Clone, Install, Build and Save.\n\n### Installing via Configuration Files\n\nTo integrate this MCP server with Cline or other MCP clients via configuration files:\n\n1. Open your Cline settings:\n   - In VS Code, go to File -> Preferences -> Settings\n   - Search for \"Cline MCP Settings\"\n   - Click \"Edit in settings.json\"\n\n2. Add the server configuration to the `mcpServers` object:\n   ```json\n   {\n     \"mcpServers\": {\n       \"video-recognition\": {\n         \"command\": \"node\",\n         \"args\": [\n           \"/path/to/mcp-video-recognition/dist/index.js\"\n         ],\n         \"disabled\": false,\n         \"autoApprove\": []\n       }\n     }\n   }\n   ```\n\n3. Replace `/path/to/mcp-video-recognition/dist/index.js` with the actual path to the `index.js` file in your project directory. Use forward slashes (/) or double backslashes (\\\\\\\\) for the path on Windows.\n\n4. Save the settings file. Cline should automatically connect to the server.\n\n## Configuration\n\nThe server is configured using environment variables:\n\n- `GOOGLE_API_KEY` (required): Your Google Gemini API key\n- `TRANSPORT_TYPE`: Transport type to use (`stdio` or `sse`, defaults to `stdio`)\n- `PORT`: Port number for SSE transport (defaults to 3000)\n- `LOG_LEVEL`: Logging level (`verbose`, `debug`, `info`, `warn`, `error`, defaults to `info`)\n\n## Usage\n\n### Starting the Server\n\n#### With stdio Transport (Default)\n\n```bash\nGOOGLE_API_KEY=your_api_key npm start\n```\n\n#### With SSE Transport\n\n```bash\nGOOGLE_API_KEY=your_api_key TRANSPORT_TYPE=sse PORT=3000 npm start\n```\n\n### Using the Tools\n\nThe server provides three tools that can be called by MCP clients:\n\n#### Image Recognition\n\n```json\n{\n  \"name\": \"image_recognition\",\n  \"arguments\": {\n    \"filepath\": \"/path/to/image.jpg\",\n    \"prompt\": \"Describe this image in detail\",\n    \"modelname\": \"gemini-2.0-flash\"\n  }\n}\n```\n\n#### Audio Recognition\n\n```json\n{\n  \"name\": \"audio_recognition\",\n  \"arguments\": {\n    \"filepath\": \"/path/to/audio.mp3\",\n    \"prompt\": \"Transcribe this audio\",\n    \"modelname\": \"gemini-2.0-flash\"\n  }\n}\n```\n\n#### Video Recognition\n\n```json\n{\n  \"name\": \"video_recognition\",\n  \"arguments\": {\n    \"filepath\": \"/path/to/video.mp4\",\n    \"prompt\": \"Describe what happens in this video\",\n    \"modelname\": \"gemini-2.0-flash\"\n  }\n}\n```\n\n### Tool Parameters\n\nAll tools accept the following parameters:\n\n- `filepath` (required): Path to the media file to analyze\n- `prompt` (optional): Custom prompt for the recognition (defaults to \"Describe this content\")\n- `modelname` (optional): Gemini model to use for recognition (defaults to \"gemini-2.0-flash\")\n\n## Development\n\n### Running in Development Mode\n\n```bash\nGOOGLE_API_KEY=your_api_key npm run dev\n```\n\n### Project Structure\n\n- `src/index.ts`: Entry point\n- `src/server.ts`: MCP server implementation\n- `src/tools/`: Tool implementations\n- `src/services/`: Service implementations (Gemini API)\n- `src/types/`: Type definitions\n- `src/utils/`: Utility functions\n\n## License\n\nMIT"
}