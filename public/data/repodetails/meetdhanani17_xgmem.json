{
  "mcp_name": "meetdhanani17/xgmem",
  "mcp_description": "A TypeScript-based MCP server for managing project-specific and cross-project knowledge graph memory for LLM agents and tools.",
  "mcp_id": "meetdhanani17_xgmem",
  "fetch_timestamp": "2025-06-23T06:39:53.094250Z",
  "github_url": "https://github.com/meetdhanani17/xgmem",
  "repository": {
    "name": "xgmem",
    "full_name": "meetdhanani17/xgmem",
    "description": "Global Memory MCP server, that manage all projects data.",
    "html_url": "https://github.com/meetdhanani17/xgmem",
    "created_at": "2025-04-27T05:49:16Z",
    "updated_at": "2025-06-14T13:22:09Z",
    "pushed_at": "2025-06-14T13:22:05Z",
    "size": 93,
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": "MIT License",
    "topics": [
      "ai",
      "cursor",
      "mcp",
      "mcp-server",
      "typescript",
      "vscode",
      "windsurf"
    ],
    "default_branch": "main",
    "owner": {
      "login": "meetdhanani17",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/124246235?v=4",
      "html_url": "https://github.com/meetdhanani17"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 30811,
      "Dockerfile": 1125
    },
    "language_percentages": {
      "JavaScript": 96.48,
      "Dockerfile": 3.52
    },
    "pull_requests_count": 1,
    "contributors_count": 2,
    "package_json_version": "0.0.1"
  },
  "readme": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/meetdhanani17-xgmem-badge.png)](https://mseep.ai/app/meetdhanani17-xgmem)\n\n# xgmem MCP Memory Server\n\nxgmem is a TypeScript-based Model Context Protocol (MCP) server for enabling project-specific and knowledge graph-based memory for Claude, LLM agents, and other tools. It supports storing, retrieving, and managing entities, relations, and observations per project, with a focus on flexibility and cross-project knowledge sharing.\n\n## Features\n\n- Knowledge graph storage for entities, relations, and observations\n- CRUD operations via MCP tools\n- Persistence to disk (memory.json)\n- Docker and TypeScript support\n\n## Use Case\n\nxgmem is ideal for:\n\n- Agents and LLMs that need to store and retrieve structured memory (entities, relations, observations) per project.\n- Cross-project knowledge sharing and migration.\n- Scalable, disk-persistent, and queryable memory for agent ecosystems.\n\n## Usage\n\n### MCP Config Example\n\nAdd to your MCP config (e.g., for windsurf):\n\n```json\n\"mcpServers\": {\n    \"xgmem\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"xgmem@latest\"]\n    }\n  }\n```\n\n### Install dependencies\n\n```sh\nnpm install\n```\n\n### Build\n\n```sh\nnpm run build\n```\n\n### Run (development)\n\n```sh\nnpx ts-node index.ts\n```\n\n### Run (production)\n\n```sh\nnpm start\n```\n\n### Docker\n\n```sh\ndocker build -t xgmem-mcp-server .\ndocker run -v $(pwd)/memories:/app/memories xgmem-mcp-server\n```\n\nThis will persist all project memory files in the `memories` directory on your host.\n\n## How to Save Memory (MCP API)\n\nTo save observations (memory) for a project, call the `save_project_observations` tool via the MCP API:\n\n**Example JSON:**\n\n```json\n{\n  \"name\": \"save_project_observations\",\n  \"args\": {\n    \"projectId\": \"demo-project\",\n    \"observations\": [\n      {\n        \"entityName\": \"Alice\",\n        \"contents\": [\n          \"Alice joined Acme Corp in 2021.\",\n          \"Alice is a software engineer.\"\n        ]\n      },\n      {\n        \"entityName\": \"Bob\",\n        \"contents\": [\n          \"Bob joined Acme Corp in 2022.\",\n          \"Bob is a product manager.\"\n        ]\n      }\n    ]\n  }\n}\n```\n\nYou can use any compatible MCP client, or send this JSON via stdin if running the server directly.\n\n## Tooling and API\n\nxgmem exposes the following tools:\n\n- `save_project_observations`\n- `get_project_observations`\n- `add_graph_observations`\n- `create_entities`\n- `create_relations`\n- `delete_entities`\n- `delete_observations`\n- `delete_relations`\n- `read_graph`\n- `search_nodes`\n- `search_all_projects`\n- `open_nodes`\n- `copy_memory`\n\nSee the `get_help` tool (if enabled) for documentation and usage examples via the MCP API.\n\n## Configuration\n\n- Set `MEMORY_DIR_PATH` env variable to change the memory storage directory (default: `/app/memories`).\n\n## License\n\nMIT\n"
}