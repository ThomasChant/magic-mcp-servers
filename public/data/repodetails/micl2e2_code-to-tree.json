{
  "mcp_name": "micl2e2/code-to-tree",
  "mcp_description": "üåä üè† üìü üêß ü™ü üçé - A single-binary MCP server that converts source code into AST, regardless of language.",
  "mcp_id": "micl2e2_code-to-tree",
  "fetch_timestamp": "2025-06-23T06:44:51.875561Z",
  "github_url": "https://github.com/micl2e2/code-to-tree",
  "repository": {
    "name": "code-to-tree",
    "full_name": "micl2e2/code-to-tree",
    "description": "A runtime-free MCP server that converts source code into ASTüå≤, regardless of language.",
    "html_url": "https://github.com/micl2e2/code-to-tree",
    "created_at": "2025-05-17T09:55:01Z",
    "updated_at": "2025-06-20T12:56:15Z",
    "pushed_at": "2025-05-17T12:27:42Z",
    "size": 580,
    "stargazers_count": 10,
    "watchers_count": 10,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "C",
    "license": "MIT License",
    "topics": [
      "abstract-syntax-tree",
      "ast",
      "dependency-free",
      "mcp",
      "mcp-server",
      "mcp-tools",
      "no-runtime-dependencies",
      "tree-sitter"
    ],
    "default_branch": "master",
    "owner": {
      "login": "micl2e2",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/111233859?v=4",
      "html_url": "https://github.com/micl2e2"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "C": 12215,
      "Makefile": 1297
    },
    "language_percentages": {
      "C": 90.4,
      "Makefile": 9.6
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "latest_release": {
      "tag_name": "v0.1.0",
      "name": "0.1.0",
      "published_at": "2025-05-17T12:15:28Z",
      "body": "Windows (‚©æ10) : `code-to-tree.exe`\r\n\r\nmacOS (‚©æ13) : `code-to-tree`\r\n\r\nBuild details: https://github.com/micl2e2/code-to-tree/actions/runs/15084985919",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.1.0",
        "commit_sha": "6bb5f5b0ef241616ed946f88cde186f3cb5d49d5"
      }
    ],
    "latest_version": "v0.1.0"
  },
  "readme": "\n# Table of Contents\n\n-   [MCP Server: code-to-tree](#orgf542482)\n-   [Using code-to-tree](#org862e7dc)\n-   [Configure MCP Clients](#orge54fa87)\n-   [Building (Windows)](#org48a8180)\n-   [Building (macOS)](#orgbaa740e)\n\n\n\n<a id=\"orgf542482\"></a>\n\n# MCP Server: code-to-tree\n\nThe code-to-tree server's goals are:\n\n1.  Give LLMs the capability of **accurately** converting source code into\n    AST(Abstract Syntax Tree), regardless of language.\n2.  One **standalone** binary should be everything the MCP client needs.\n\nThese goals imply:\n\n1.  The underlying syntax parser should be **versatile** enough. Here we\n    choose [tree-sitter](https://github.com/tree-sitter/tree-sitter), and languages are: C, C++, Rust, Ruby, Go, Java, Python.\n2.  The server should be able to carry all capabilities within\n    itself, imposing **minimum** software dependencies on the end user's\n    machine. Here we choose [mcpc](https://github.com/micl2e2/mcpc).\n\n**Screenshots:**\n\n<img src=\"./chathistory.png\" width=\"450px\" /><img src=\"./wholeast.png\" width=\"200px\" />\n\nThe above screenshots are obtained by asking the question specified\nin `q.md`. \n\n(**IMPORTANT NOTE**: LLMs have no responsibility of generating the identical\nresult for the same question,  you will likely get a completely different\nstyle or content. The screenshots or questions provided here are just for the reference)\n\n\n<a id=\"org862e7dc\"></a>\n\n# Using code-to-tree\n\nBefore everthing, you need to have the code-to-tree executable on your\nmachine (`code-to-tree.exe` for Windows, `code-to-tree` for macOS),\nyou can download at GitHub release [page](https://github.com/micl2e2/code-to-tree/releases) or build it yourself. Once\ndownloaded, you configure your MCP clients to install it, check the section\n*\"Configure MCP Clients\"* for more details.\n\n\n<a id=\"orge54fa87\"></a>\n\n# Configure MCP Clients\n\nHere we use Claude as the example.\n\n\n## Windows\n\nIn your Claude configuration\n(`C:\\Users\\YOUR_NAME\\AppData\\Roaming\\Claude\\claude_desktop_config.json`),\nspecify the location of `code-to-tree.exe`:\n\n    {\n        \"mcpServers\": {\n    \t    \"code-to-tree\": { \"command\": \"C:\\\\path\\\\to\\\\code-to-tree.exe\" }\n        }\n    }\n\n\n## macOS\n\nIn your Claude configuration,\n(`~/Library/Application Support/Claude/claude_desktop_config.json`)\nspecify the location of `code-to-tree`\n\n    {\n        \"mcpServers\": {\n    \t    \"code-to-tree\": { \"command\": \"/path/to/code-to-tree\" }\n        }\n    }\n\n\n<a id=\"org48a8180\"></a>\n\n# Building (Windows)\n\n\n## 1. Prepare environment\n\n1.  download & install MSYS2.\n2.  open application \"MSYS2 MINGW64\"\n3.  run `pacman -S make gcc git`\n\n\n## 2. Prepare tree-sitter libraries\n\nHere we need to compile and install tree-sitter and all related grammars.\n\nClone them:\n\n    git clone https://github.com/tree-sitter/tree-sitter\n    \n    git clone https://github.com/tree-sitter/tree-sitter-c\n    \n    git clone https://github.com/tree-sitter/tree-sitter-cpp\n    \n    git clone https://github.com/tree-sitter/tree-sitter-rust\n    \n    git clone https://github.com/tree-sitter/tree-sitter-ruby\n    \n    git clone https://github.com/tree-sitter/tree-sitter-go\n    \n    git clone https://github.com/tree-sitter/tree-sitter-java\n\nCompile and install them:\n\n    cd tree-sitter && OS=1 make install\n    \n    cd tree-sitter-c && OS=1 make install\n    \n    cd tree-sitter-cpp && OS=1 make install\n    \n    cd tree-sitter-rust && OS=1 make install\n    \n    cd tree-sitter-ruby && OS=1 make install\n    \n    cd tree-sitter-go && OS=1 make install\n    \n    cd tree-sitter-java && OS=1 make install\n\n\n## 3. Build code-to-tree\n\nInstall mcpc:\n\n    git clone https://github.com/micl2e2/mcpc\n    cd mcpc && make install\n\nCompile code-to-tree:\n\n    cd mcpc/example/code-to-tree\n    \n    CFLAGS=\"-I/usr/local/include -L/usr/local/lib\" make\n    \n    # Check the binary\n    file code-to-tree.exe\n    \n    # Remember the binary's location\n    pwd\n    # Assume the output is: /c/path/to/code-to-tree.exe\n\n\n<a id=\"orgbaa740e\"></a>\n\n# Building (macOS)\n\n\n## 1. Prepare environment\n\n1.  Xcode Command Line Tools\n\n\n## 2. Prepare tree-sitter libraries\n\nHere we need to compile and install tree-sitter and all related grammars.\n\nClone them:\n\n    git clone https://github.com/tree-sitter/tree-sitter\n    \n    git clone https://github.com/tree-sitter/tree-sitter-c\n    \n    git clone https://github.com/tree-sitter/tree-sitter-cpp\n    \n    git clone https://github.com/tree-sitter/tree-sitter-rust\n    \n    git clone https://github.com/tree-sitter/tree-sitter-ruby\n    \n    git clone https://github.com/tree-sitter/tree-sitter-go\n    \n    git clone https://github.com/tree-sitter/tree-sitter-java\n\nCompile and install them:\n\n    cd tree-sitter && make install\n    \n    cd tree-sitter-c && make install\n    \n    cd tree-sitter-cpp && make install\n    \n    cd tree-sitter-rust && make install\n    \n    cd tree-sitter-ruby && make install\n    \n    cd tree-sitter-go && make install\n    \n    cd tree-sitter-java && make install\n\n\n## 3. Build code-to-tree\n\nInstall mcpc:\n\n    git clone https://github.com/micl2e2/mcpc\n    cd mcpc && make install\n\nCompile code-to-tree:\n\n    cd mcpc/example/code-to-tree\n    \n    make\n    \n    # Check the binary\n    file ./code-to-tree\n    \n    # Remember the binary's location\n    pwd\n    # Assume the output is: /path/to/code-to-tree\n\n"
}