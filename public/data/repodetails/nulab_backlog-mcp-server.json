{
  "mcp_name": "nulab/backlog-mcp-server",
  "mcp_description": "Facilitates project management and issue tracking on Backlog through Claude integration.",
  "mcp_id": "nulab_backlog-mcp-server",
  "fetch_timestamp": "2025-06-23T07:12:02.853973Z",
  "github_url": "https://github.com/nulab/backlog-mcp-server",
  "repository": {
    "name": "backlog-mcp-server",
    "full_name": "nulab/backlog-mcp-server",
    "description": null,
    "html_url": "https://github.com/nulab/backlog-mcp-server",
    "created_at": "2025-04-16T00:02:18Z",
    "updated_at": "2025-06-22T13:56:33Z",
    "pushed_at": "2025-06-20T00:23:49Z",
    "size": 344,
    "stargazers_count": 67,
    "watchers_count": 67,
    "forks_count": 14,
    "open_issues_count": 2,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "nulab",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/462626?v=4",
      "html_url": "https://github.com/nulab"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 14,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 249183,
      "JavaScript": 6304,
      "Dockerfile": 374
    },
    "language_percentages": {
      "TypeScript": 97.39,
      "JavaScript": 2.46,
      "Dockerfile": 0.15
    },
    "pull_requests_count": 3,
    "contributors_count": 3,
    "latest_release": {
      "tag_name": "v0.3.0",
      "name": "v0.3.0",
      "published_at": "2025-05-30T06:58:04Z",
      "body": "## 0.3.0 (2025-05-30)",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.3.0",
        "commit_sha": "f6dcf4667be591b40624ac2a43b39bbad8c812dc"
      },
      {
        "name": "v0.2.0",
        "commit_sha": "3206afebc587ad82888a8286b6c5b7d7689e904b"
      },
      {
        "name": "v0.1.1",
        "commit_sha": "3d39940f0c7455d93d483f2695af068f5e4103e7"
      },
      {
        "name": "v0.1.0",
        "commit_sha": "7d5ebb2cfa580d826a004467e9f6c955596c0ec3"
      },
      {
        "name": "v0.0.2",
        "commit_sha": "c4f6f9feb003c2ac10a69e28623003f852bda08e"
      },
      {
        "name": "v0.0.1",
        "commit_sha": "822af5f227159b0dff5b0218bdcdeaddcbccdb97"
      }
    ],
    "latest_version": "v0.3.0",
    "package_json_version": "0.1.1"
  },
  "readme": "# Backlog MCP Server\n\n![MIT License](https://img.shields.io/badge/license-MIT-green.svg)\n![Build](https://github.com/nulab/backlog-mcp-server/actions/workflows/ci.yml/badge.svg)\n![Last Commit](https://img.shields.io/github/last-commit/nulab/backlog-mcp-server.svg)\n\n[📘 日本語でのご利用ガイド](./README.ja.md) \n\nA Model Context Protocol (MCP) server for interacting with the Backlog API. This server provides tools for managing projects, issues, wiki pages, and more in Backlog through AI agents like Claude Desktop / Cline / Cursor etc.\n\n## Features\n\n- Project tools (create, read, update, delete)\n- Issue tracking and comments (create, update, delete, list)\n- Wiki page support\n- Git repository and pull request tools\n- Notification tools\n- GraphQL-style field selection for optimized responses\n- Token limiting for large responses\n\n## Getting Started\n\n### Requirements\n\n- Docker\n- A Backlog account with API access\n- API key from your Backlog account\n\n### Option 1: Install via Docker\n\nThe easiest way to use this MCP server is through MCP configurations:\n\n1. Open MCP settings\n2. Navigate to the MCP configuration section\n3. Add the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"backlog\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--pull\", \"always\",\n        \"-i\",\n        \"--rm\",\n        \"-e\", \"BACKLOG_DOMAIN\",\n        \"-e\", \"BACKLOG_API_KEY\",\n        \"ghcr.io/nulab/backlog-mcp-server\"\n      ],\n      \"env\": {\n        \"BACKLOG_DOMAIN\": \"your-domain.backlog.com\",\n        \"BACKLOG_API_KEY\": \"your-api-key\"\n      }\n    }\n  }\n}\n```\n\nReplace `your-domain.backlog.com` with your Backlog domain and `your-api-key` with your Backlog API key.\n\n✅ If you cannot use --pull always, you can manually update the image using:\n\n```\ndocker pull ghcr.io/nulab/backlog-mcp-server:latest\n```\n\n### Option 2: Manual Setup (Node.js)\n\n1. Clone and install:\n   ```bash\n   git clone https://github.com/nulab/backlog-mcp-server.git\n   cd backlog-mcp-server\n   npm install\n   npm run build\n   ```\n\n2. Set your json to use as MCP\n  ```json\n  {\n    \"mcpServers\": {\n      \"backlog\": {\n        \"command\": \"node\",\n        \"args\": [\n          \"your-repository-location/build/index.js\"\n        ],\n        \"env\": {\n          \"BACKLOG_DOMAIN\": \"your-domain.backlog.com\",\n          \"BACKLOG_API_KEY\": \"your-api-key\"\n        }\n      }\n    }\n  }\n  ```\n\n## Tool Configuration\n\nYou can selectively enable or disable specific **toolsets** using the `--enable-toolsets` command-line flag or the `ENABLE_TOOLSETS` environment variable. This allows better control over which tools are available to the AI agent and helps reduce context size.\n\n### Available Toolsets\n\nThe following toolsets are available (enabled by default when `\"all\"` is used):\n\n| Toolset         | Description                                                                          |\n|-----------------|--------------------------------------------------------------------------------------|\n| `space`         | Tools for managing Backlog space settings and general information                   |\n| `project`       | Tools for managing projects, categories, custom fields, and issue types              |\n| `issue`         | Tools for managing issues and their comments                                         |\n| `wiki`          | Tools for managing wiki pages                                                        |\n| `git`           | Tools for managing Git repositories and pull requests                                |\n| `notifications` | Tools for managing user notifications                                                |\n\n### Specifying Toolsets\n\nYou can control toolset activation in the following ways:\n\nUsing via CLI:\n\n```bash\n--enable-toolsets space,project,issue\n```\n\nOr via environment variable:\n\n```\nENABLE_TOOLSETS=\"space,project,issue\"\n```\n\nIf all is specified, all available toolsets will be enabled. This is also the default behavior.\n\nUsing selective toolsets can be helpful if the toolset list is too large for your AI agent or if certain tools are causing performance issues. In such cases, disabling unused toolsets may improve stability.\n\n> 🧩 Tip: `project` toolset is highly recommended, as many other tools rely on project data as an entry point.\n\n### Dynamic Toolset Discovery (Experimental)\n\nIf you're using the MCP server with AI agents, you can enable dynamic discovery of toolsets at runtime:\n\nEnabling via CLI:\n\n```\n--dynamic-toolsets\n```\n\nOr via environment variable::\n\n```\n-e DYNAMIC_TOOLSETS=1 \\\n```\n\nWith dynamic toolsets enabled, the LLM will be able to list and activate toolsets on demand via tool interface.\n\n## Available Tools\n\n### Toolset: `space`\nTools for managing Backlog space settings and general information.\n- `get_space`: Returns information about the Backlog space.\n- `get_users`: Returns list of users in the Backlog space.\n- `get_myself`: Returns information about the authenticated user.\n\n### Toolset: `project`\nTools for managing projects, categories, custom fields, and issue types.\n- `get_project_list`: Returns list of projects.\n- `add_project`: Creates a new project.\n- `get_project`: Returns information about a specific project.\n- `update_project`: Updates an existing project.\n- `delete_project`: Deletes a project.\n\n### Toolset: `issue`\nTools for managing issues, their comments, and related items like priorities, categories, custom fields, issue types, resolutions, and watching lists.\n- `get_issue`: Returns information about a specific issue.\n- `get_issues`: Returns list of issues.\n- `count_issues`: Returns count of issues.\n- `add_issue`: Creates a new issue in the specified project.\n- `update_issue`: Updates an existing issue.\n- `delete_issue`: Deletes an issue.\n- `get_issue_comments`: Returns list of comments for an issue.\n- `add_issue_comment`: Adds a comment to an issue.\n- `get_priorities`: Returns list of priorities.\n- `get_categories`: Returns list of categories for a project.\n- `get_custom_fields`: Returns list of custom fields for a project.\n- `get_issue_types`: Returns list of issue types for a project.\n- `get_resolutions`: Returns list of issue resolutions.\n- `get_watching_list_items`: Returns list of watching items for a user.\n- `get_watching_list_count`: Returns count of watching items for a user.\n\n### Toolset: `wiki`\nTools for managing wiki pages.\n- `get_wiki_pages`: Returns list of Wiki pages.\n- `get_wikis_count`: Returns count of wiki pages in a project.\n- `get_wiki`: Returns information about a specific wiki page.\n- `add_wiki`: Creates a new wiki page.\n\n### Toolset: `git`\nTools for managing Git repositories and pull requests.\n- `get_git_repositories`: Returns list of Git repositories for a project.\n- `get_git_repository`: Returns information about a specific Git repository.\n- `get_pull_requests`: Returns list of pull requests for a repository.\n- `get_pull_requests_count`: Returns count of pull requests for a repository.\n- `get_pull_request`: Returns information about a specific pull request.\n- `add_pull_request`: Creates a new pull request.\n- `update_pull_request`: Updates an existing pull request.\n- `get_pull_request_comments`: Returns list of comments for a pull request.\n- `add_pull_request_comment`: Adds a comment to a pull request.\n- `update_pull_request_comment`: Updates a comment on a pull request.\n\n### Toolset: `notifications`\nTools for managing user notifications.\n- `get_notifications`: Returns list of notifications.\n- `get_notifications_count`: Returns count of notifications.\n- `reset_unread_notification_count`: Resets unread notification count.\n- `mark_notification_as_read`: Marks a notification as read.\n\n## Usage Examples\n\nOnce the MCP server is configured in AI agents, you can use the tools directly in your conversations. Here are some examples:\n\n- Listing Projects\n```\nCould you list all my Backlog projects?\n```\n- Creating a New Issue\n```\nCreate a new bug issue in the PROJECT-KEY project with high priority titled \"Fix login page error\"\n```\n- Getting Project Details\n```\nShow me the details of the PROJECT-KEY project\n```\n- Working with Git Repositories\n```\nList all Git repositories in the PROJECT-KEY project\n```\n- Managing Pull Requests\n```\nShow me all open pull requests in the repository \"repo-name\" of PROJECT-KEY project\n```\n```\nCreate a new pull request from branch \"feature/new-feature\" to \"main\" in the repository \"repo-name\" of PROJECT-KEY project\n```\n- Watching Items\n```\nShow me all items I'm watching \n```\n\n### i18n / Overriding Descriptions\n\nYou can override the descriptions of tools by creating a `.backlog-mcp-serverrc.json` file in your **home directory**.\n\nThe file should contain a JSON object with the tool names as keys and the new descriptions as values.  \nFor example:\n\n```json\n{\n  \"TOOL_ADD_ISSUE_COMMENT_DESCRIPTION\": \"An alternative description\",\n  \"TOOL_CREATE_PROJECT_DESCRIPTION\": \"Create a new project in Backlog\"\n}\n```\n\nWhen the server starts, it determines the final description for each tool based on the following priority:\n\n1. Environment variables (e.g., `BACKLOG_MCP_TOOL_ADD_ISSUE_COMMENT_DESCRIPTION`)\n2. Entries in `.backlog-mcp-serverrc.json` - Supported configuration file formats: .json, .yaml, .yml\n3. Built-in fallback values (English)\n\nSample config: \n\n```json\n{\n  \"mcpServers\": {\n    \"backlog\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\", \"BACKLOG_DOMAIN\",\n        \"-e\", \"BACKLOG_API_KEY\",\n        \"-v\", \"/yourcurrentdir/.backlog-mcp-serverrc.json:/root/.backlog-mcp-serverrc.json:ro\",\n        \"ghcr.io/nulab/backlog-mcp-server\"\n      ],\n      \"env\": {\n        \"BACKLOG_DOMAIN\": \"your-domain.backlog.com\",\n        \"BACKLOG_API_KEY\": \"your-api-key\"\n      }\n    }\n  }\n}\n```\n\n### Exporting Current Translations\n\nYou can export the current default translations (including any overrides) by running the binary with the --export-translations flag.\n\nThis will print all tool descriptions to stdout, including any customizations you have made.\n\nExample:\n\n```bash\ndocker run -i --rm ghcr.io/nulab/backlog-mcp-server node build/index.js --export-translations\n```\n\nor \n\n```bash\nnpx github:nulab/backlog-mcp-server --export-translations\n```\n\n### Using a Japanese Translation Template\nA sample Japanese configuration file is provided at:\n\n```bash\ntranslationConfig/.backlog-mcp-serverrc.json.example\n```\n\nTo use it, copy it to your home directory as .backlog-mcp-serverrc.json:\n\nYou can then edit the file to customize the descriptions as needed.\n\n### Using Environment Variables\nAlternatively, you can override tool descriptions via environment variables.\n\nThe environment variable names are based on the tool keys, prefixed with BACKLOG_MCP_ and written in uppercase.\n\nExample:\nTo override the TOOL_ADD_ISSUE_COMMENT_DESCRIPTION:\n\n```json\n{\n  \"mcpServers\": {\n    \"backlog\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\", \"BACKLOG_DOMAIN\",\n        \"-e\", \"BACKLOG_API_KEY\",\n        \"-e\", \"BACKLOG_MCP_TOOL_ADD_ISSUE_COMMENT_DESCRIPTION\"\n        \"ghcr.io/nulab/backlog-mcp-server\"\n      ],\n      \"env\": {\n        \"BACKLOG_DOMAIN\": \"your-domain.backlog.com\",\n        \"BACKLOG_API_KEY\": \"your-api-key\",\n        \"BACKLOG_MCP_TOOL_ADD_ISSUE_COMMENT_DESCRIPTION\": \"An alternative description\"\n      }\n    }\n  }\n}\n```\n\nThe server loads the config file synchronously at startup.\n\nEnvironment variables always take precedence over the config file.\n\n## Advanced Features\n\n### Tool Name Prefixing\n\nAdd prefix to tool names with:\n\n```\n--prefix backlog_\n```\n\nor via environment variable:\n\n```\nPREFIX=\"backlog_\"\n```\n\nThis is especially useful if you're using multiple MCP servers or tools in the same environment and want to avoid name collisions. For example, get_project can become backlog_get_project to distinguish it from similarly named tools provided by other services.\n\n### Response Optimization & Token Limits\n\n#### Field Selection (GraphQL-style)\n\n```\n--optimize-response\n```\n\nOr environment variable:\n\n```\nOPTIMIZE_RESPONSE=1\n```\n\nThen, request only specific fields:\n\n```\nget_project(projectIdOrKey: \"PROJECT-KEY\", fields: \"{ name key description }\")\n```\n\nThe AI will use field selection to optimize the response:\n\n```\nget_project(projectIdOrKey: \"PROJECT-KEY\", fields: \"{ name key description }\")\n```\n\nBenefits:\n- Reduce response size by requesting only needed fields\n- Focus on specific data points\n- Improve performance for large responses\n\n#### Token Limiting\n\nLarge responses are automatically limited to prevent exceeding token limits:\n- Default limit: 50,000 tokens\n- Configurable via `MAX_TOKENS` environment variable\n- Responses exceeding the limit are truncated with a message\n\nYou can change this using:\n\n```\nMAX_TOKENS=10000\n```\n\nIf a response exceeds the limit, it will be truncated with a warning.\n> Note: This is a best-effort mitigation, not a guaranteed enforcement.\n\n### Full Custom Configuration Example\n\nThis section demonstrates advanced configuration using multiple environment variables. These are experimental features and may not be supported across all MCP clients. This is not part of the MCP standard specification and should be used with caution.\n\n```json\n{\n  \"mcpServers\": {\n    \"backlog\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\", \"BACKLOG_DOMAIN\",\n        \"-e\", \"BACKLOG_API_KEY\",\n        \"-e\", \"MAX_TOKENS\",\n        \"-e\", \"OPTIMIZE_RESPONSE\",\n        \"-e\", \"PREFIX\",\n        \"-e\", \"ENABLE_TOOLSETS\",\n        \"ghcr.io/nulab/backlog-mcp-server\"\n      ],\n      \"env\": {\n        \"BACKLOG_DOMAIN\": \"your-domain.backlog.com\",\n        \"BACKLOG_API_KEY\": \"your-api-key\",\n        \"MAX_TOKENS\": \"10000\",\n        \"OPTIMIZE_RESPONSE\": \"1\",\n        \"PREFIX\": \"backlog_\",\n        \"ENABLE_TOOLSETS\": \"space,project,issue\",\n        \"ENABLE_DYNAMIC_TOOLSETS\": \"1\"\n      }\n    }\n  }\n}\n```\n\n## Development\n\n### Running Tests\n\n```bash\nnpm test\n```\n\n### Adding New Tools\n\n1. Create a new file in `src/tools/` following the pattern of existing tools\n2. Create a corresponding test file\n3. Add the new tool to `src/tools/tools.ts`\n4. Build and test your changes\n\n### Command Line Options\n\nThe server supports several command line options:\n\n- `--export-translations`: Export all translation keys and values\n- `--optimize-response`: Enable GraphQL-style field selection\n- `--max-tokens=NUMBER`: Set maximum token limit for responses\n- `--prefix=STRING`: Optional string prefix to prepend to all tool names (default: \"\")\n- `--enable-toolsets <toolsets...>`: Specify which toolsets to enable (comma-separated or multiple arguments). Defaults to \"all\".\n  Example: `--enable-toolsets space,project` or `--enable-toolsets issue --enable-toolsets git`\n  Available toolsets: `space`, `project`, `issue`, `wiki`, `git`, `notifications`.\n\nExample:\n```bash\nnode build/index.js --optimize-response --max-tokens=100000 --prefix=\"backlog_\" --enable-toolsets space,issue\n```\n\n## License\n\nThis project is licensed under the [MIT License](./LICENSE).\n\nPlease note: This tool is provided under the MIT License **without any warranty or official support**.  \nUse it at your own risk after reviewing the contents and determining its suitability for your needs.  \nIf you encounter any issues, please report them via [GitHub Issues](../../issues).\n"
}