{
  "mcp_name": "chrisjmendez/mcp_quickstart",
  "mcp_description": "Facilitates secure local Claude brain setup using Docker, SQLite, and uvx for MCP-style queries.",
  "mcp_id": "chrisjmendez_mcp_quickstart",
  "fetch_timestamp": "2025-06-23T02:05:26.660960Z",
  "github_url": "https://github.com/chrisjmendez/mcp_quickstart",
  "repository": {
    "name": "mcp_quickstart",
    "full_name": "chrisjmendez/mcp_quickstart",
    "description": "https://www.claudemcp.com/docs/quickstart",
    "html_url": "https://github.com/chrisjmendez/mcp_quickstart",
    "created_at": "2025-04-19T15:58:31Z",
    "updated_at": "2025-05-10T17:06:36Z",
    "pushed_at": "2025-05-10T17:06:32Z",
    "size": 100,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Shell",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "chrisjmendez",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/65565?v=4",
      "html_url": "https://github.com/chrisjmendez"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Shell": 7947,
      "Python": 7354
    },
    "language_percentages": {
      "Shell": 51.94,
      "Python": 48.06
    },
    "pull_requests_count": 0,
    "contributors_count": 2,
    "tags": [
      {
        "name": "v2.0_mcp_ollama_fastapi",
        "commit_sha": "ad7d0bbbd6e11a7b3619caca488b08db4edc59dc"
      },
      {
        "name": "v1.0_mcp_server_sqlite",
        "commit_sha": "7129127f02a9c79cfebb6c75867a533d166ae901"
      }
    ],
    "latest_version": "v2.0_mcp_ollama_fastapi"
  },
  "readme": "# 🧠 MCP Quickstart: Claude + SQLite + Docker\n\n### TL;DR: Build a secure local Claude brain using Docker, SQLite, and `uvx`.\n\n---\n\n## 🛡️ Step 1: Build & Run the Docker SQLite Server\n\n```bash\ndocker-compose build\ndocker-compose up\n```\n\nYour server will be live at `http://localhost:8080`, ready to accept MCP-style queries.\n\n---\n\n## 🧠 Step 2: Install Astral (`uv` / `uvx`)\n\nAstral is the MCP-compatible package manager.\n\n```bash\ncurl -Ls https://astral.sh/uv/install.sh | sh\n```\n\nVerify it:\n\n```bash\nuvx mcp-server-sqlite --help\n```\n\n---\n\n## 🔧 Step 3: Make `uvx` Available to Claude Desktop\n\nClaude launched via Spotlight/Dock doesn’t see your shell config. So we have to tell macOS:\n\n```bash\nlaunchctl setenv PATH \"$HOME/.local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n```\n\nYou can also verify this:\n\n```bash\nlaunchctl getenv PATH\n```\n\n### 🔗 Add Symlink for `uv` (required by `uvx`)\n\nClaude expects `uv` at `/usr/local/bin/uv`, but Astral installs it in `~/.local/bin/uv`. Fix that with:\n\n```bash\nsudo ln -s $HOME/.local/bin/uv /usr/local/bin/uv\n```\n\nVerify:\n\n```bash\nuvx mcp-server-sqlite --help\n```\n\n---\n\n## ⚙️ Step 4: Configure Claude to Use Your SQLite DB\n\nCreate or edit:\n\n```bash\n~/Library/Application Support/Claude/claude_desktop_config.json\n```\n\nInsert:\n\n```json\n{\n  \"mcpServers\": {\n    \"sqlite\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-server-sqlite\",\n        \"--db-path\",\n        \"/Users/YOUR_USERNAME/Desktop/mcp_quickstart/data/test.db\"\n      ]\n    }\n  }\n}\n```\n\n✅ Make sure to replace `YOUR_USERNAME` with your actual username.\n\n---\n\n## 🧪 Step 5: Test It Manually\n\nTry this from the terminal:\n\n```bash\necho '{\"jsonrpc\":\"2.0\",\"id\":\"debug\",\"method\":\"query\",\"params\":{\"sql\":\"SELECT * FROM products LIMIT 1\"}}' \\\n  | uvx mcp-server-sqlite --db-path /Users/YOUR_USERNAME/Desktop/mcp_quickstart/data/test.db\n```\n\nYou should get back:\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"debug\",\n  \"result\": {\n    \"columns\": [\"id\", \"name\", \"price\"],\n    \"rows\": [[1, \"Widget\", 19.99]]\n  }\n}\n```\n\n---\n\n## 🧰 Troubleshooting\n\n### 🧹 Check if the DB is accessible\n\n```bash\ndocker exec -it $(docker ps --filter \"name=mcp-server\" -q) sqlite3 /data/test.db\n```\n\nThen run:\n\n```sql\nSELECT * FROM products LIMIT 1;\n```\n\n---\n\n### 🔄 Rebuild the Docker container\n\n```bash\ndocker-compose down -v && docker-compose build && docker-compose up\n```\n\n---\n\n## 💬 Bonus: Simulate Claude Queries with a Test JSON\n\n```bash\necho '{\"jsonrpc\":\"2.0\",\"id\":\"test123\",\"method\":\"query\",\"params\":{\"sql\":\"SELECT * FROM products\"}}' > test-mcp.json\n\ncat test-mcp.json | uvx mcp-server-sqlite --db-path /Users/YOUR_USERNAME/Desktop/mcp_quickstart/data/test.db\n```\n\n---\n\n## 📚 Resources\n\n- Claude MCP Docs → [https://www.claudemcp.com/docs/quickstart](https://www.claudemcp.com/docs/quickstart)\n- Model Context Protocol → [https://modelcontextprotocol.io](https://modelcontextprotocol.io)\n\n---\n\n## ✅ You now have:\n\n- 🐻 Dockerized SQLite server\n- 🧪 Secure query interface via FastAPI + Uvicorn\n- 📡 Claude MCP bridge using `uvx` + `mcp-server-sqlite`\n- 🧠 A local Claude brain that talks SQL\n\n"
}