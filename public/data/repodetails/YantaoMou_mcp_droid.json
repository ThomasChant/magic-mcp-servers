{
  "mcp_name": "YantaoMou/mcp_droid",
  "mcp_description": "Facilitates direct control and operation of Android devices by large language models through a standardized interface.",
  "mcp_id": "YantaoMou_mcp_droid",
  "fetch_timestamp": "2025-06-23T09:36:46.646381Z",
  "github_url": "https://github.com/YantaoMou/mcp_droid",
  "repository": {
    "name": "mcp_droid",
    "full_name": "YantaoMou/mcp_droid",
    "description": "MCPDroid是一个基于模型上下文协议(Model Context Protocol, MCP)的Android设备控制服务，旨在使大型语言模型(如Claude, GPT等)能够通过标准化接口直接控制和操作Android设备。",
    "html_url": "https://github.com/YantaoMou/mcp_droid",
    "created_at": "2025-04-25T11:28:58Z",
    "updated_at": "2025-05-22T15:37:12Z",
    "pushed_at": "2025-04-25T11:30:56Z",
    "size": 64,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "YantaoMou",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/1536690?v=4",
      "html_url": "https://github.com/YantaoMou"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 215834
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# MCPDroid\n\nMCPDroid是一个基于模型上下文协议(Model Context Protocol, MCP)的Android设备控制服务，旨在使大型语言模型(如Claude, GPT等)能够通过标准化接口直接控制和操作Android设备。\n\n## 功能特点\n\n- 通过MCP协议为大模型提供Android设备控制能力\n- 支持屏幕操作（点击、滑动、截图等）\n- 支持设备控制（返回键、电源键、音量键等）\n- 支持应用管理（启动、停止、安装、卸载等）\n- 支持文本输入和按键模拟\n- 提供设备信息查询功能\n- 支持高级图像识别和OCR文字识别功能\n\n## 系统要求\n\n- Python 3.8+\n- ADB工具\n- Android设备（Android 7.0+）\n\n## 安装步骤\n\n1. 克隆仓库\n\n```bash\ngit clone <repository-url>\ncd mcp_droid\n```\n\n2. 安装依赖\n\n```bash\npip install -r requirements.txt\n```\n\n3. 确保Android设备已通过USB或网络连接到电脑，并已开启USB调试模式\n\n## 使用方法\n\n### 启动服务\n\n```bash\npython main.py --adb-path <adb路径> --host <主机地址> --port <端口>\n```\n\n参数说明：\n- `--adb-path`: ADB命令路径，默认为\"adb\"\n- `--device-id`: 设备ID，多设备时需要指定\n- `--host`: 监听主机地址，默认为\"0.0.0.0\"\n- `--port`: 监听端口，默认为8000\n- `--debug`: 开启调试模式\n\n### 在Claude桌面客户端中配置\n\n在Claude Desktop的配置文件中添加：\n\n```json\n{\n  \"mcpServers\": {\n    \"android\": {\n      \"type\": \"sse\",\n      \"url\": \"http://localhost:8000/jsonrpc\"\n    }\n  }\n}\n```\n\n### 在Cursor中配置\n\n在Cursor的配置文件中添加：\n\n```json\n{\n  \"mcp\": {\n    \"servers\": {\n      \"android\": {\n        \"transport\": \"http\",\n        \"url\": \"http://localhost:8000/jsonrpc\"\n      }\n    }\n  }\n}\n```\n\n## 工具列表\n\nMCPDroid提供以下主要功能工具：\n\n### 屏幕操作相关\n- `get_screen_size`: 获取屏幕尺寸\n- `take_screenshot`: 截取屏幕截图\n- `tap_screen`: 点击屏幕\n- `long_press`: 长按屏幕\n- `swipe`: 滑动屏幕\n- `slide_screen`: 上下滑动屏幕\n- `multi_touch`: 多点触控操作\n- `pinch`: 双指缩放操作\n\n### 设备控制相关\n- `press_back`: 点击返回键\n- `go_to_home`: 返回桌面\n- `press_power`: 按下电源键\n- `keyevent`: 发送按键事件\n- `unlock_screen`: 解锁屏幕\n- `adjust_volume`: 调节音量\n- `rotate_screen`: 控制屏幕旋转\n- `set_brightness`: 设置屏幕亮度\n\n### 文本输入相关\n- `type_text`: 输入文本\n- `switch_ime`: 切换输入法\n- `paste_text`: 粘贴文本\n- `clear_text`: 清除文本\n\n### 应用管理相关\n- `start_app`: 启动应用\n- `stop_app`: 停止应用\n- `list_apps`: 列出已安装应用\n- `open_url`: 打开网址\n- `get_current_app`: 获取前台应用信息\n- `check_app_installed`: 检查应用是否已安装\n- `monitor_app_start`: 监控应用启动\n\n### 设备信息相关\n- `get_device_info`: 获取设备信息\n- `list_devices`: 列出已连接设备\n- `get_battery_info`: 获取设备电量信息\n- `get_storage_info`: 获取设备存储信息\n\n### 高级功能相关\n- `execute_shell`: 执行Shell命令\n- `image_recognition`: 图像识别与匹配\n- `ocr_recognition`: OCR文字识别\n- `capture_logs`: 截取系统日志\n- `wake_device`: 唤醒设备\n- `sleep_device`: 休眠设备\n- `explore_app`: 探索应用界面\n- `file_operations`: 文件操作(上传/下载)\n- `check_root`: 设备root检测\n- `connect_over_tcp`: TCP/IP连接设备\n- `record_and_replay`: 脚本录制和回放\n- `run_test_case`: 自动化测试用例执行\n- `monitor_performance`: 性能监控\n- `screenshot_watcher`: 设备截屏监听器\n- `multi_device_management`: 多设备管理与操作\n\n### 网络与连接相关\n- `toggle_wifi`: 设置WiFi开关\n- `toggle_bluetooth`: 设置蓝牙开关\n- `toggle_mobile_data`: 设置移动数据开关\n- `toggle_airplane_mode`: 设置飞行模式\n- `connect_wifi`: 连接到指定WiFi\n- `get_wifi_info`: 获取当前WiFi详细信息\n\n### 多设备协作相关\n- `device_messaging`: 设备间消息传递\n- `sync_operations`: 多设备同步操作\n- `device_group_actions`: 设备组操作\n- `share_between_devices`: 设备间文件共享\n\n## 项目结构\n\n```\nMCPDroid\n├── core/                  # 核心模块\n│   ├── __init__.py\n│   ├── mcp_server.py      # MCP协议服务器\n│   ├── device_controller.py  # 设备控制基类\n│   ├── app_controller.py  # 应用管理控制器\n│   ├── system_controller.py  # 系统信息控制器\n│   └── advanced_controller.py # 高级功能控制器\n├── tools/                 # MCP工具\n│   ├── __init__.py\n│   └── android_tools.py   # Android设备控制工具\n├── static/                # 静态资源\n│   └── screenshot/        # 截图存储目录\n├── main.py                # 主程序入口\n└── README.md              # 项目文档\n```\n\n## 常见问题解决方案\n\n1. 如果遇到ADB连接问题，请确保：\n   - 设备已开启USB调试\n   - 已在设备上允许来自电脑的调试\n   - ADB守护进程已启动（可尝试`adb kill-server`然后`adb start-server`）\n\n2. 如果需要使用高级图像识别功能，请确保已安装相关依赖：\n   - Airtest: `pip install airtest`\n   - OpenCV: `pip install opencv-python`\n\n3. 如果需要使用OCR功能，请确保已安装Tesseract和相关Python包：\n   - `pip install pytesseract`\n   - 安装Tesseract OCR引擎\n\n## 参考资料\n\n- [Model Context Protocol 规范文档](https://github.com/anthropics/anthropic-cookbook/tree/main/mcp)\n- [ADB命令行文档](https://developer.android.com/studio/command-line/adb)\n- [Airtest文档](https://airtest.readthedocs.io/)\n\n## 许可证\n\n[MIT License](LICENSE) "
}