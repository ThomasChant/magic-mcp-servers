{
  "mcp_name": "Integration App",
  "mcp_description": "Interact with any other SaaS applications on behalf of your customers.",
  "mcp_id": "integration-app_mcp-server",
  "fetch_timestamp": "2025-06-23T05:00:02.918382Z",
  "github_url": "https://github.com/integration-app/mcp-server",
  "repository": {
    "name": "mcp-server",
    "full_name": "integration-app/mcp-server",
    "description": null,
    "html_url": "https://github.com/integration-app/mcp-server",
    "created_at": "2025-01-14T21:52:32Z",
    "updated_at": "2025-06-21T23:20:36Z",
    "pushed_at": "2025-06-20T13:50:45Z",
    "size": 10022,
    "stargazers_count": 22,
    "watchers_count": 22,
    "forks_count": 6,
    "open_issues_count": 1,
    "language": "TypeScript",
    "license": "ISC License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "integration-app",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/81186166?v=4",
      "html_url": "https://github.com/integration-app"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 6,
    "subscribers_count": 4,
    "languages": {
      "TypeScript": 15849,
      "Dockerfile": 176
    },
    "language_percentages": {
      "TypeScript": 98.9,
      "Dockerfile": 1.1
    },
    "pull_requests_count": 9,
    "contributors_count": 3,
    "package_json_version": "1.2.0"
  },
  "readme": "# Integration App MCP Server\n\nThe Integration App MCP Server is a [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) server, it provides actions for connected integrations as tools.\n\nFor implementing your application, see our example AI Chat Agent:\n\n- [AI Chat Agent (MCP Client application)](https://github.com/integration-app/MCP-chat-example)\n\n### Prerequisites\n\n- Node.js (v14 or higher)\n- An [Integration.app](https://integration.app) account\n\n### Installation\n\n```bash\ngit clone https://github.com/integration-app/mcp-server.git\ncd mcp-server\nnpm install\nnpm run build\n```\n\n### Local Development\n\nTo run the server locally, start it with:\n\n```bash\nnpm start\n```\n\nAccess it at `http://localhost:3000`\n\n### Deployment\n\nIdeally, you'd want to deploy your own instance of this MCP server to any cloud hosting service of your choice.\n\n#### Docker\n\nThe project includes a Dockerfile for easy containerized deployment.\n\n```bash\ndocker build -t integration-app-mcp-server .\ndocker run -p 3000:3000 integration-app-mcp-server\n```\n\n### Connecting to the MCP server\n\nThis MCP server support two transports:\n\n| Transport                                                                                                              | Endpoint | Status                                                                 |\n| ---------------------------------------------------------------------------------------------------------------------- | -------- | ---------------------------------------------------------------------- |\n| [SSE](https://modelcontextprotocol.io/docs/concepts/transports#server-sent-events-sse-deprecated) (Serverâ€‘Sent Events) | `/sse`   | ðŸ”´ **Deprecated** â€” deprecated as of November 5, 2024 in MCP spec      |\n| [HTTP](https://modelcontextprotocol.io/docs/concepts/transports#streamable-http) (Streamable HTTP)                     | `/mcp`   | ðŸŸ¢ **Recommended** â€” replaces SSE and supports bidirectional streaming |\n\n### Authentication\n\nProvide an Integration.app access token via query or header:\n\n```http\n?token=ACCESS_TOKEN\nAuthorization: Bearer ACCESS_TOKEN\n```\n\n**SSE** (Deprecated)\n\n```js\nawait client.connect(\n  new SSEClientTransport(new URL(`https://<HOSTED_MCP_SERVER_URL>/sse?token=${ACCESS_TOKEN}`))\n);\n\n// ----- or -----\n\nawait client.connect(\n  new SSEClientTransport(\n    new URL(\n      `https://<HOSTED_MCP_SERVER_URL>/sse`\n    )\n    {\n      requestInit: {\n        headers: {\n          Authorization: `Bearer ${ACCESS_TOKEN}`,\n        },\n      },\n    }\n  )\n  );\n```\n\n**Streamable HTTP** (Recommended)\n\n```js\nawait client.connect(\n  new StreamableHTTPClientTransport(\n    new URL(`https://<HOSTED_MCP_SERVER_URL>/mcp?token=${ACCESS_TOKEN}`)\n  )\n);\n\n// ----- or -----\n\nawait client.connect(\n  new StreamableHTTPClientTransport(\n    new URL(`https://<HOSTED_MCP_SERVER_URL>/mcp`)\n    {\n      requestInit: {\n        headers: {\n          Authorization: `Bearer ${ACCESS_TOKEN}`,\n        },\n      },\n    }\n  )\n);\n```\n\n#### Cursor Configuration\n\nTo use this server with Cursor, update the `~/.cursor/mcp.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"integration-app\": {\n      \"url\": \"https://<HOSTED_MCP_SERVER_URL>/sse?token={ACCESS_TOKEN}\"\n    }\n  }\n}\n```\n\nRestart Cursor for the changes to take effect.\n\n#### Claude Desktop Configuration\n\nTo use this server with Claude, update the config file (Settings > Developer > Edit Config):\n\n```json\n{\n  \"mcpServers\": {\n    \"integration-app\": {\n      \"url\": \"https://<HOSTED_MCP_SERVER_URL>/sse?token={ACCESS_TOKEN}\"\n    }\n  }\n}\n```\n\n### Integration Scoping\n\nBy default, the MCP server fetches tools from all active connections associated with the provided token.\n\nYou can also get tools for a specific integration by passing the `integrationKey` query parameter: `/mcp?token={ACCESS_TOKEN}&integrationKey=google-calendar`\n\n## Troubleshooting\n\n- Ensure your access token is valid and you're generating it according to [these instructions](https://docs.integration.app/docs/authentication#access-token)\n- Check the MCP server logs for any errors or issues during startup or connection attempts.\n- Verify that your server is running with `/` endpoint.\n\n## License\n\nThis project is licensed under the terms of the ISC open source license. Please refer to [ISC](https://opensource.org/license/isc-license-txt) for the full terms.\n"
}