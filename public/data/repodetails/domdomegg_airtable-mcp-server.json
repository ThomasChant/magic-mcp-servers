{
  "mcp_name": "Airtable",
  "mcp_description": "üìá üè† - Airtable database integration with schema inspection, read and write capabilities",
  "mcp_id": "domdomegg_airtable-mcp-server",
  "fetch_timestamp": "2025-06-23T00:19:36.970195Z",
  "github_url": "https://github.com/domdomegg/airtable-mcp-server",
  "repository": {
    "name": "airtable-mcp-server",
    "full_name": "domdomegg/airtable-mcp-server",
    "description": "üóÇÔ∏èü§ñ Airtable Model Context Protocol Server, for allowing AI systems to interact with your Airtable bases",
    "html_url": "https://github.com/domdomegg/airtable-mcp-server",
    "created_at": "2024-12-12T17:16:40Z",
    "updated_at": "2025-06-22T07:52:48Z",
    "pushed_at": "2025-05-16T00:07:04Z",
    "size": 233,
    "stargazers_count": 177,
    "watchers_count": 177,
    "forks_count": 47,
    "open_issues_count": 2,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [
      "airtable",
      "mcp-server",
      "model-context-protocol"
    ],
    "default_branch": "master",
    "owner": {
      "login": "domdomegg",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/4953590?v=4",
      "html_url": "https://github.com/domdomegg"
    },
    "has_issues": true,
    "has_projects": false,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 47,
    "subscribers_count": 6,
    "languages": {
      "TypeScript": 75912,
      "JavaScript": 872,
      "Dockerfile": 776
    },
    "language_percentages": {
      "TypeScript": 97.88,
      "JavaScript": 1.12,
      "Dockerfile": 1
    },
    "pull_requests_count": 20,
    "contributors_count": 4,
    "tags": [
      {
        "name": "v1.4.1",
        "commit_sha": "d6b187218cb09418d1db9cc5029c3f32b43bb09a"
      },
      {
        "name": "v1.4.0",
        "commit_sha": "10151427a23a314a06f35af3d13e93523bdcaa0b"
      },
      {
        "name": "v1.3.0",
        "commit_sha": "dd457547fbea6fd3ad9da7f21bf76d00c46647aa"
      },
      {
        "name": "v1.2.0",
        "commit_sha": "b027c9ab5263d81771746e49c0896a8728006401"
      },
      {
        "name": "v1.1.0",
        "commit_sha": "22c9f11bbe56f4357083dc81b0bb8057023ed280"
      },
      {
        "name": "v1.0.0",
        "commit_sha": "5305ef58ec1bb76c51b4b296b03112337a810623"
      }
    ],
    "latest_version": "v1.4.1",
    "package_json_version": "1.4.1"
  },
  "readme": "# airtable-mcp-server\n\n[![smithery badge](https://smithery.ai/badge/airtable-mcp-server)](https://smithery.ai/server/airtable-mcp-server)\n\nA Model Context Protocol server that provides read and write access to Airtable databases. This server enables LLMs to inspect database schemas, then read and write records.\n\nhttps://github.com/user-attachments/assets/c8285e76-d0ed-4018-94c7-20535db6c944\n\n## Usage\n\nTo use this server with the Claude Desktop app, add the following configuration to the \"mcpServers\" section of your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"airtable\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"airtable-mcp-server\"\n      ],\n      \"env\": {\n        \"AIRTABLE_API_KEY\": \"pat123.abc123\"\n      }\n    }\n  }\n}\n```\n\nReplace `pat123.abc123` with your [Airtable personal access token](https://airtable.com/create/tokens). Your token should have at least `schema.bases:read` and `data.records:read`, and optionally the corresponding write permissions.\n\n## Components\n\n### Tools\n\n- **list_records**\n  - Lists records from a specified Airtable table\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `tableId` (string, required): The ID of the table to query\n    - `maxRecords` (number, optional): Maximum number of records to return. Defaults to 100.\n    - `filterByFormula` (string, optional): Airtable formula to filter records\n\n- **search_records**\n  - Search for records containing specific text\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `tableId` (string, required): The ID of the table to query\n    - `searchTerm` (string, required): Text to search for in records\n    - `fieldIds` (array, optional): Specific field IDs to search in. If not provided, searches all text-based fields.\n    - `maxRecords` (number, optional): Maximum number of records to return. Defaults to 100.\n\n- **list_bases**\n  - Lists all accessible Airtable bases\n  - No input parameters required\n  - Returns base ID, name, and permission level\n\n- **list_tables**\n  - Lists all tables in a specific base\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `detailLevel` (string, optional): The amount of detail to get about the tables (`tableIdentifiersOnly`, `identifiersOnly`, or `full`)\n  - Returns table ID, name, description, fields, and views (to the given `detailLevel`)\n\n- **describe_table**\n  - Gets detailed information about a specific table\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `tableId` (string, required): The ID of the table to describe\n    - `detailLevel` (string, optional): The amount of detail to get about the table (`tableIdentifiersOnly`, `identifiersOnly`, or `full`)\n  - Returns the same format as list_tables but for a single table\n  - Useful for getting details about a specific table without fetching information about all tables in the base\n\n- **get_record**\n  - Gets a specific record by ID\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `tableId` (string, required): The ID of the table\n    - `recordId` (string, required): The ID of the record to retrieve\n\n- **create_record**\n  - Creates a new record in a table\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `tableId` (string, required): The ID of the table\n    - `fields` (object, required): The fields and values for the new record\n\n- **update_records**\n  - Updates one or more records in a table\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `tableId` (string, required): The ID of the table\n    - `records` (array, required): Array of objects containing record ID and fields to update\n\n- **delete_records**\n  - Deletes one or more records from a table\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `tableId` (string, required): The ID of the table\n    - `recordIds` (array, required): Array of record IDs to delete\n\n- **create_table**\n  - Creates a new table in a base\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `name` (string, required): Name of the new table\n    - `description` (string, optional): Description of the table\n    - `fields` (array, required): Array of field definitions (name, type, description, options)\n\n- **update_table**\n  - Updates a table's name or description\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `tableId` (string, required): The ID of the table\n    - `name` (string, optional): New name for the table\n    - `description` (string, optional): New description for the table\n\n- **create_field**\n  - Creates a new field in a table\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `tableId` (string, required): The ID of the table\n    - `name` (string, required): Name of the new field\n    - `type` (string, required): Type of the field\n    - `description` (string, optional): Description of the field\n    - `options` (object, optional): Field-specific options\n\n- **update_field**\n  - Updates a field's name or description\n  - Input parameters:\n    - `baseId` (string, required): The ID of the Airtable base\n    - `tableId` (string, required): The ID of the table\n    - `fieldId` (string, required): The ID of the field\n    - `name` (string, optional): New name for the field\n    - `description` (string, optional): New description for the field\n\n### Resources\n\nThe server provides schema information for Airtable bases and tables:\n\n- **Table Schemas** (`airtable://<baseId>/<tableId>/schema`)\n  - JSON schema information for each table\n  - Includes:\n    - Base id and table id\n    - Table name and description\n    - Primary field ID\n    - Field definitions (ID, name, type, description, options)\n    - View definitions (ID, name, type)\n  - Automatically discovered from Airtable's metadata API\n\n## Contributing\n\nPull requests are welcomed on GitHub! To get started:\n\n1. Install Git and Node.js\n2. Clone the repository\n3. Install dependencies with `npm install`\n4. Run `npm run test` to run tests\n5. Build with `npm run build`\n  - You can use `npm run build:watch` to automatically build after editing [`src/index.ts`](./src/index.ts). This means you can hit save, reload Claude Desktop (with Ctrl/Cmd+R), and the changes apply.\n\n## Releases\n\nVersions follow the [semantic versioning spec](https://semver.org/).\n\nTo release:\n\n1. Use `npm version <major | minor | patch>` to bump the version\n2. Run `git push --follow-tags` to push with tags\n3. Wait for GitHub Actions to publish to the NPM registry.\n"
}