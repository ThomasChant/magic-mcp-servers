{
  "mcp_name": "BioMCP-Hub/PubTator-MCP-Server",
  "mcp_description": "Facilitates AI-driven biomedical literature annotation and relationship mining via the PubTator3 system using the MCP interface.",
  "mcp_id": "BioMCP-Hub_PubTator-MCP-Server",
  "fetch_timestamp": "2025-06-23T01:40:38.949266Z",
  "github_url": "https://github.com/BioMCP-Hub/PubTator-MCP-Server",
  "repository": {
    "name": "PubTator-MCP-Server",
    "full_name": "BioMCP-Hub/PubTator-MCP-Server",
    "description": null,
    "html_url": "https://github.com/BioMCP-Hub/PubTator-MCP-Server",
    "created_at": "2025-04-01T04:11:02Z",
    "updated_at": "2025-05-06T00:40:15Z",
    "pushed_at": "2025-04-01T04:14:06Z",
    "size": 44,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 1,
    "open_issues_count": 1,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "BioMCP-Hub",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/204162434?v=4",
      "html_url": "https://github.com/BioMCP-Hub"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 0,
    "languages": {
      "Python": 20997,
      "Dockerfile": 493
    },
    "language_percentages": {
      "Python": 97.71,
      "Dockerfile": 2.29
    },
    "pull_requests_count": 1,
    "contributors_count": 1
  },
  "readme": "# PubTator MCP Server\n[![smithery badge](https://smithery.ai/badge/@JackKuo666/pubtator-mcp-server)](https://smithery.ai/server/@JackKuo666/pubtator-mcp-server)\n\nüîç A biomedical literature annotation and relationship mining server based on PubTator3, providing convenient access through the MCP interface.\n\nPubTator MCP Server provides AI assistants with access to the PubTator3 biomedical literature annotation system through the Model Context Protocol (MCP). It allows AI models to programmatically search scientific literature, obtain annotation information, and analyze entity relationships.\n\nü§ù Contribute ‚Ä¢ üìù Report Issues\n\n## ‚ú® Core Features\n- üîé Literature Annotation Export: Support exporting PubTator annotation results in multiple formats ‚úÖ\n- üöÄ Entity ID Lookup: Query standard identifiers for biological concepts through free text ‚úÖ\n- üìä Relationship Mining: Discover biomedical relationships between entities ‚úÖ\n- üìÑ Literature Search: Support literature retrieval by keywords and entity IDs ‚úÖ\n- üß† Batch Processing: Support batch export of annotation information from search results ‚úÖ\n\n## üöÄ Quick Start\n\n### Requirements\n\n- Python 3.10+\n- FastMCP library\n\n### Installation\n\n#### Via Smithery\n\nUse [Smithery](https://smithery.ai/server/@JackKuo666/pubtator-mcp-server) to automatically install PubTator Server:\n\n##### Claude\n\n```sh\nnpx -y @smithery/cli@latest install @JackKuo666/pubtator-mcp-server --client claude --config \"{}\"\n```\n\n##### Cursor\n\nPaste in Settings ‚Üí Cursor Settings ‚Üí MCP ‚Üí Add new server:\n- Mac/Linux  \n```s\nnpx -y @smithery/cli@latest run @JackKuo666/pubtator-mcp-server --client cursor --config \"{}\" \n```\n\n##### Windsurf\n```sh\nnpx -y @smithery/cli@latest install @JackKuo666/pubtator-mcp-server --client windsurf --config \"{}\"\n```\n\n##### CLine\n```sh\nnpx -y @smithery/cli@latest install @JackKuo666/pubtator-mcp-server --client cline --config \"{}\"\n```\n\n#### Manual Installation\n\n1. Clone the repository:\n   ```\n   git clone https://github.com/JackKuo666/PubTator-MCP-Server.git\n   cd PubTator-MCP-Server\n   ```\n\n2. Install dependencies:\n   ```\n   pip install -r requirements.txt\n   ```\n\n## üìä Usage\n\n### Running the Server Directly\n\nStart the MCP server:\n\n```bash\npython pubtator_server.py\n```\n\nThe server now supports both stdio and TCP transports. By default, it uses TCP transport. You can configure the following environment variables:\n\n- `MCP_TRANSPORT`: Set to \"tcp\" for TCP transport or \"stdio\" for stdio transport (default is \"tcp\")\n- `MCP_HOST`: The host to bind to (default is \"0.0.0.0\")\n- `MCP_PORT`: The port to listen on (default is 8080)\n\nExample of starting the server with custom settings:\n\n```bash\nMCP_TRANSPORT=tcp MCP_HOST=127.0.0.1 MCP_PORT=8888 python pubtator_server.py\n```\n\nThe server implements lazy initialization and proper error handling. It will gracefully handle shutdown signals (SIGINT and SIGTERM) and log any errors that occur during startup or operation.\n\n### Using Docker\n\nWe provide a Dockerfile for easy deployment. To use the Docker container:\n\n1. Build the Docker image:\n   ```bash\n   docker build -t pubtator-mcp-server .\n   ```\n\n2. Run the Docker container:\n   ```bash\n   docker run -p 8080:8080 pubtator-mcp-server\n   ```\n\nThis will start the PubTator MCP server inside a Docker container, exposing it on port 8080.\n\n### Troubleshooting\n\nIf you encounter any issues starting the server:\n\n1. Check the console output for error messages.\n2. Ensure all required dependencies are installed (see Requirements section).\n3. Verify that the environment variables are set correctly.\n4. If the server fails to start, try running it with increased verbosity:\n\n```bash\npython -v pubtator_server.py\n```\n\nThis will provide more detailed logging information to help identify the source of any issues.\n\nWhen using Docker, you can check the logs with:\n\n```bash\ndocker logs <container_id>\n```\n\n### Configuration\n\n#### Claude Desktop Configuration\n\nAdd to `claude_desktop_config.json`:\n\n(Mac OS)\n\n```json\n{\n  \"mcpServers\": {\n    \"pubtator\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"pubtator-mcp-server\"]\n      }\n  }\n}\n```\n\n(Windows)\n\n```json\n{\n  \"mcpServers\": {\n    \"pubtator\": {\n      \"command\": \"C:\\\\Users\\\\YOUR\\\\PATH\\\\miniconda3\\\\envs\\\\mcp_server\\\\python.exe\",\n      \"args\": [\n        \"D:\\\\code\\\\YOUR\\\\PATH\\\\PubTator-MCP-Server\\\\pubtator_server.py\"\n      ],\n      \"env\": {},\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n#### CLine Configuration\n```json\n{\n  \"mcpServers\": {\n    \"pubtator\": {\n      \"command\": \"bash\",\n      \"args\": [\n        \"-c\",\n        \"source /home/YOUR/PATH/mcp-server-pubtator/.venv/bin/activate && python /home/YOUR/PATH/pubtator_server.py\"\n      ],\n      \"env\": {\n        \"MCP_TRANSPORT\": \"stdio\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nTo use TCP transport, modify the configuration as follows:\n\n```json\n{\n  \"mcpServers\": {\n    \"pubtator\": {\n      \"command\": \"bash\",\n      \"args\": [\n        \"-c\",\n        \"source /home/YOUR/PATH/mcp-server-pubtator/.venv/bin/activate && python /home/YOUR/PATH/pubtator_server.py\"\n      ],\n      \"env\": {\n        \"MCP_TRANSPORT\": \"tcp\",\n        \"MCP_HOST\": \"127.0.0.1\",\n        \"MCP_PORT\": \"8888\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n## üõ† API Features\n\nPubTator MCP Server provides the following core features:\n\n### 1. Export Publications (export_publications)\n\nExport PubTator annotation results for specified PMID literature:\n```python\nresult = await export_publications(\n    ids=[\"32133824\", \"34170578\"],\n    id_type=\"pmid\",\n    format=\"biocjson\",  # Supported: pubtator, biocxml, biocjson\n    full_text=False     # Whether to include full text\n)\n```\n\n### 2. Entity ID Lookup (find_entity_id)\n\nQuery standard identifiers for biological concepts through free text:\n```python\nresult = await find_entity_id(\n    query=\"COVID-19\",\n    concept=\"disease\",  # Optional: gene, disease, chemical, species, mutation\n    limit=5             # Optional: limit number of results\n)\n```\n\n### 3. Relationship Query (find_related_entities)\n\nFind other entities related to a specified entity:\n```python\nresult = await find_related_entities(\n    entity_id=\"@DISEASE_COVID_19\",\n    relation_type=\"treat\",    # Optional: treat, cause, interact, etc.\n    target_entity_type=\"chemical\",  # Optional: gene, disease, chemical\n    max_results=5       # Optional: limit number of results\n)\n```\n\n### 4. Literature Search (search_pubtator)\n\nSearch the PubTator database:\n```python\nresults = await search_pubtator(\n    query=\"COVID-19\",\n    max_pages=1     # Optional: maximum number of pages to retrieve\n)\n```\n\n### 5. Batch Export (batch_export_from_search)\n\nSearch and batch export literature annotations:\n```python\nresults = await batch_export_from_search(\n    query=\"COVID-19\",\n    format=\"biocjson\",\n    max_pages=1,\n    full_text=False,\n    batch_size=5\n)\n```\n\nNote: The actual function calls may vary depending on your implementation. These examples are based on our recent tests and may need to be adjusted to match your exact API.\n\n## ‚ö†Ô∏è Usage Limitations\n\n- API request rate limit: maximum 3 requests per second\n- When batch exporting, use a reasonable batch_size to avoid request timeout\n- For relationship queries, entity IDs must start with \"@\", e.g., \"@DISEASE_COVID-19\"\n\n## üìÑ License\n\nThis project is licensed under the MIT License.\n\n## ‚ö†Ô∏è Disclaimer\n\nThis tool is for research purposes only. Please comply with PubTator's terms of service and use this tool responsibly.\n"
}