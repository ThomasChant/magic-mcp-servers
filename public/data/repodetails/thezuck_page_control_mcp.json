{
  "mcp_name": "thezuck/page_control_mcp",
  "mcp_description": "Facilitates real-time web page control and interaction through a Node.js MCP server and a Chrome extension, enabling seamless integration with AI editors like Zencoder and Cursor.",
  "mcp_id": "thezuck_page_control_mcp",
  "fetch_timestamp": "2025-06-23T08:53:32.727689Z",
  "github_url": "https://github.com/thezuck/page_control_mcp",
  "repository": {
    "name": "page_control_mcp",
    "full_name": "thezuck/page_control_mcp",
    "description": null,
    "html_url": "https://github.com/thezuck/page_control_mcp",
    "created_at": "2025-04-16T17:28:26Z",
    "updated_at": "2025-04-19T18:41:13Z",
    "pushed_at": "2025-04-19T18:41:10Z",
    "size": 868,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "thezuck",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/2570799?v=4",
      "html_url": "https://github.com/thezuck"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 71984
    },
    "language_percentages": {
      "JavaScript": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 2
  },
  "readme": "# Page Control MCP Server and Chrome Extension\n\nThis project consists of two main components:\n1. A Node.js MCP server that communicates with an AI editor such as Zencoder or Cursor\n2. A Chrome extension that controls web pages\n\n## MCP Server Setup\n\n### Prerequisites\n- Node.js (v14 or higher)\n- npm (Node Package Manager)\n\n### Installation\n1. Navigate to the MCP server directory:\n   ```bash\n   cd mcp-server\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n3. Start the server:\n   ```bash\n   npm start\n   ```\n\nThe server will start on port 4000 and the WebSocket server on port 3001.\n\n### Zencoder Configuration (STDIO)\nOpen Zencoder settings => MCP servers\nand paste the following configuration:\n```json\n{\n    \"page-control\": {\n        \"command\": \"npm\",\n        \"args\": [\"start\"],\n        \"cwd\": \"mcp-server\"\n    }\n}\n```\n\n### Cursor Configuration\nCreate or update the `.cursor/mcp.json` file in your home directory or update through cursor MCP serttings:\n\n####  For SSE service (requires running the SSE service locally):\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"page-control\": {\n         \"url\": \"http://localhost:4000/page-control\"\n       }\n     }\n   }\n   ```\n#### For STDIO - note you have to replace the \\<\\<Path to mcp server directory\\>\\> with your own local path\n   ```json\n   {\n     \"mcpServers\": {\n       \"page-control\": {\n         \"command\": \"node\",\n         \"args\": [\n            \"<<Path to mcp server directory>>/mcp-server/page-control-mcp.js\", \"--stdio-only\"\n         ]\n       }\n     }\n   }\n   ```\n\n### Available Tools\nThe MCP server provides the following tools:\n\n1. `query_page`: Query elements on a web page\n   ```bash\n   /page-control query_page pageId=\"page_123456\" selector=\".my-class\"\n   ```\n\n2. `modify_page`: Modify elements on a web page\n   ```bash\n   /page-control modify_page targetPage=\"page_123456\" modification='{\"selector\":\".my-class\",\"operation\":\"setTextContent\",\"value\":\"New Text\"}'\n   ```\n\n3. `run_snippet`: Execute JavaScript code in the page context\n   ```bash\n   /page-control run_snippet pageId=\"page_123456\" code=\"return document.title;\"\n   ```\n\n4. `list_pages`: List all connected pages\n   ```bash\n   /page-control list_pages\n   ```\n\n5. `page_control_status`: Check the status of the page control server\n   ```bash\n   /page-control page_control_status detail_level=\"full\"\n   ```\n   This returns information about the server status, including:\n   - Server type (SSE or STDIO)\n   - Current status\n   - WebSocket status\n   - Number of connected pages\n   - Server uptime in seconds\n\n## Chrome Extension Setup\n\n### Prerequisites\n- Google Chrome browser\n- Developer mode enabled in Chrome\n\n### Installation\n1. Open Chrome and navigate to `chrome://extensions/`\n2. Enable \"Developer mode\" in the top right corner\n3. Click \"Load unpacked\" and select the `extension` directory from this project\n\n### Usage\n1. Click the extension icon in the Chrome toolbar to activate it on the current page\n2. A confirmation dialog will appear - click \"OK\" to activate\n3. The extension will connect to the MCP server and display a control panel\n4. The extension will automatically deactivate when:\n   - The page is refreshed\n   - The tab is closed\n   - The extension icon is clicked again\n\n### Features\n- Real-time page control through AI editor\n- Visual feedback for actions\n- Activity logging\n- Automatic reconnection\n- Secure code execution\n\n### Development\nTo modify the extension:\n1. Make changes to the files in the `extension` directory\n2. Go to `chrome://extensions/`\n3. Find the extension and click the refresh icon\n4. The changes will be applied immediately\n\n### File Structure\n```\n.\n├── mcp-server/\n│   ├── page-control-mcp.js    # Main MCP server implementation\n│   ├── page-control-commands.js # Command execution module\n│   ├── package.json          # Server dependencies\n│   └── ...\n├── extension/\n│   ├── manifest.json         # Extension configuration\n│   ├── background.js         # Background script\n│   ├── content.js            # Content script\n│   ├── icons/                # Extension icons\n│   └── ...\n├── LICENSE                   # License information\n└── README.md                 # This file\n```\n\n## Troubleshooting\n\n### MCP Server Issues\n1. If the server fails to start:\n   - Check if port 4000 is available\n   - Verify Node.js installation\n   - Check npm dependencies\n\n2. If AI editor can't connect:\n   - Verify the MCP server is running\n   - Check the configuration (`.cursor/mcp.json` for Cursor or Zencoder settings)\n   - Restart the AI editor\n\n### Extension Issues\n1. If the extension doesn't load:\n   - Verify Developer mode is enabled\n   - Check for manifest errors\n   - Try reloading the extension\n\n2. If the extension doesn't connect:\n   - Verify the MCP server is running\n   - Check the WebSocket connection\n   - Try deactivating and reactivating the extension\n\n### If the AI agent doesn't use the new MCP capabilities, you might need to notify it about these new capabilities, use the following prompt:\n```\nyou now have the ability to use a new MCP server capabilities, it is called page-control, it has the following capabilities:\nThe MCP server provides the following tools:\n\nquery_page: Query elements on a web page\n/page-control query_page pageId=\"page_123456\" selector=\".my-class\"\n\nmodify_page: Modify elements on a web page\n/page-control modify_page targetPage=\"page_123456\" modification='{\"selector\":\".my-class\",\"operation\":\"setTextContent\",\"value\":\"New Text\"}'\n\nrun_snippet: Execute JavaScript code in the page context\n/page-control run_snippet pageId=\"page_123456\" code=\"return document.title;\"\n\nlist_pages: List all connected pages\n/page-control list_pages\n\npage_control_status: Check the status of the page control server\n/page-control page_control_status detail_level=\"full\"\n\nplease keep this in memory so you do not forget\n```"
}