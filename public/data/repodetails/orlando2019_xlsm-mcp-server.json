{
  "mcp_name": "orlando2019/xlsm-mcp-server",
  "mcp_description": "Facilitates AI-driven manipulation of Excel files with macros, enhancing data analysis and office automation capabilities.",
  "mcp_id": "orlando2019_xlsm-mcp-server",
  "fetch_timestamp": "2025-06-23T07:23:14.239601Z",
  "github_url": "https://github.com/orlando2019/xlsm-mcp-server",
  "repository": {
    "name": "xlsm-mcp-server",
    "full_name": "orlando2019/xlsm-mcp-server",
    "description": "Este servidor implementa el Model Context Protocol (MCP) para manipular archivos Excel que contienen macros (.xlsm). Utiliza el protocolo stdio para la comunicaci√≥n, lo que permite integrarse f√°cilmente con clientes MCP como Claude.",
    "html_url": "https://github.com/orlando2019/xlsm-mcp-server",
    "created_at": "2025-04-24T19:35:53Z",
    "updated_at": "2025-04-24T20:07:40Z",
    "pushed_at": "2025-04-24T20:07:36Z",
    "size": 58,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "orlando2019",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/46435280?v=4",
      "html_url": "https://github.com/orlando2019"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 114905
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# üìä Servidor MCP para archivos Excel con macros (.xlsm)\n\n**Autor:** Orlando Ospino (orlando2019)\n\nEste servidor implementa el Model Context Protocol (MCP) para manipular archivos Excel que contienen macros (.xlsm). Utiliza el protocolo stdio para la comunicaci√≥n, lo que permite integrarse f√°cilmente con clientes MCP como Claude Desktop, Cursor o Windsurf.\n\n## üåü ¬øQu√© es MCP?\n\nMCP (Model Context Protocol) es un protocolo que permite a los modelos de lenguaje interactuar con herramientas externas. Con este servidor, Claude y otros asistentes AI pueden manipular archivos Excel con macros de forma nativa, ampliando sus capacidades para ayudar en tareas de an√°lisis de datos y automatizaci√≥n de oficina.\n\n## ‚ú® Caracter√≠sticas\n\n- Creaci√≥n y manipulaci√≥n de archivos Excel con macros (.xlsm)\n- Lectura y escritura de datos en hojas de c√°lculo\n- Gesti√≥n de hojas (crear, eliminar, renombrar)\n- Listar y obtener informaci√≥n de macros VBA\n- Aplicar formato a rangos de celdas\n- Compatible con Python 3.10+\n- Integraci√≥n sencilla con entornos virtuales y clientes MCP modernos\n\n## üîß Instalaci√≥n\n\n### Usando pip\n\n```bash\npip install xlsm-mcp-server\n```\n\n### Usando uv (recomendado)\n\n```bash\nuv venv\n.venv\\Scripts\\activate\nuv pip install -r requirements.txt\n```\n\n## üìù Uso\n\n### Ejecuci√≥n directa\n\n```bash\npython -m xlsm_mcp\n```\nO, si usas un entorno virtual:\n```bash\n.venv\\Scripts\\python.exe -m xlsm_mcp\n```\n\n### Configuraci√≥n para Claude Desktop, Cursor o Windsurf\n\nAgrega a tu configuraci√≥n (por ejemplo, `settings.json`):\n\n```json\n\"mcpServers\": {\n  \"xlsm\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"xlsm_mcp\"],\n    \"transport\": \"stdio\"\n  }\n}\n```\n- Puedes omitir `\"transport\": \"stdio\"` en algunos clientes, pero es recomendable dejarlo para m√°xima compatibilidad.\n- Si usas un entorno virtual, reemplaza `\"python\"` por la ruta a tu ejecutable Python.\n\n### Argumentos avanzados\n\nPuedes agregar argumentos personalizados en la secci√≥n `\"args\"` seg√∫n lo requiera tu servidor, por ejemplo:\n\n```json\n\"args\": [\"-m\", \"xlsm_mcp\", \"--log-level\", \"DEBUG\"]\n```\n\n### üõ†Ô∏è Herramientas disponibles\n\n- `read_data_from_excel`: Lee datos de una hoja de Excel\n- `write_data_to_excel`: Escribe datos en una hoja de Excel\n- `create_new_workbook`: Crea un nuevo libro de Excel con opci√≥n de habilitar macros\n- `create_new_worksheet`: Crea una nueva hoja en un libro de Excel existente\n- `get_workbook_metadata`: Obtiene metadatos del libro, incluyendo informaci√≥n sobre macros\n- `list_macros_in_workbook`: Lista todas las macros disponibles en un libro\n- `get_macro_details`: Obtiene informaci√≥n detallada sobre una macro espec√≠fica\n- `format_cell_range`: Aplica formato a un rango de celdas\n\n## üí° Ejemplos\n\n### Leer datos de un archivo Excel\n\n```python\n# Ejemplo de uso para leer datos\nresult = await read_data_from_excel(\"ejemplo.xlsm\", \"Hoja1\", \"A1\", \"C10\")\nprint(result[\"data\"])\n```\n\n### Listar macros en un archivo\n\n```python\n# Ejemplo para listar macros\nmacros = await list_macros_in_workbook(\"ejemplo.xlsm\")\nfor macro in macros[\"data\"]:\n    print(f\"Macro: {macro['name']}\")\n```\n\n## üìã Casos de uso\n\nEste servidor es especialmente √∫til para:\n- Analistas de datos que trabajan con modelos AI\n- Automatizaci√≥n de tareas administrativas\n- Generaci√≥n y manipulaci√≥n de informes financieros\n- Integraci√≥n de IA con flujos de trabajo basados en Excel\n\n## üë• Contribuir\n\nLas contribuciones son bienvenidas. Por favor, abre un issue o pull request en el repositorio.\n\n## üë®‚Äçüíª Autor\n\nDesarrollado por Orlando Ospino ([@Orlando_Ospino](https://github.com/orlando2019))\n\n## üìÑ Licencia\n\nMIT"
}