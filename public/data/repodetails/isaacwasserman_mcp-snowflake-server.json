{
  "mcp_name": "Snowflake",
  "mcp_description": "üêç ‚òÅÔ∏è - Snowflake integration implementing read and (optional) write operations as well as insight tracking",
  "mcp_id": "isaacwasserman_mcp-snowflake-server",
  "fetch_timestamp": "2025-06-23T08:31:37.023387Z",
  "github_url": "https://github.com/isaacwasserman/mcp-snowflake-server",
  "repository": {
    "name": "mcp-snowflake-server",
    "full_name": "isaacwasserman/mcp-snowflake-server",
    "description": null,
    "html_url": "https://github.com/isaacwasserman/mcp-snowflake-server",
    "created_at": "2024-12-13T20:30:59Z",
    "updated_at": "2025-06-21T22:03:42Z",
    "pushed_at": "2025-05-16T19:45:22Z",
    "size": 80,
    "stargazers_count": 105,
    "watchers_count": 105,
    "forks_count": 45,
    "open_issues_count": 4,
    "language": "Python",
    "license": "GNU General Public License v3.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "isaacwasserman",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/1498116?v=4",
      "html_url": "https://github.com/isaacwasserman"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 45,
    "subscribers_count": 3,
    "languages": {
      "Python": 30487,
      "Dockerfile": 852
    },
    "language_percentages": {
      "Python": 97.28,
      "Dockerfile": 2.72
    },
    "pull_requests_count": 7,
    "contributors_count": 5,
    "latest_release": {
      "tag_name": "v0.4.0",
      "name": "v0.4.0",
      "published_at": "2025-04-10T14:31:01Z",
      "body": "",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.4.0",
        "commit_sha": "76c3e4a1866cf95e1b6256434f9907681c6c49cc"
      },
      {
        "name": "v0.3.3",
        "commit_sha": "f81a83010e26666fdb6a1759c932b8cc6799c8b4"
      },
      {
        "name": "v0.3.2",
        "commit_sha": "29b06cfe57689243b9e91fdeda6cd23c8d856dd7"
      },
      {
        "name": "v0.3.1",
        "commit_sha": "54d59b9dd934aebcf62756b5058459e9ea77c4af"
      },
      {
        "name": "v0.3.0",
        "commit_sha": "540be496c240a904230864b2f5e07291c1835210"
      },
      {
        "name": "v0.2.2",
        "commit_sha": "4eb0f1549e8cee42588febba3ab97570e6463090"
      },
      {
        "name": "v0.2.1",
        "commit_sha": "af898094ebb6d3fe4a955b6e5bc0c880fa380e51"
      },
      {
        "name": "v0.2.0",
        "commit_sha": "3e9e6eabc5097f2444ff069a68daf5af0d0365d9"
      },
      {
        "name": "v0.1.7",
        "commit_sha": "30ec65c5d0d939055ac5ae3e1d9097beca94d1af"
      },
      {
        "name": "v0.1.6",
        "commit_sha": "7b1b119c750458acc5496fc7165c4f16b7e24943"
      }
    ],
    "latest_version": "v0.4.0"
  },
  "readme": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/isaacwasserman-mcp-snowflake-server-badge.png)](https://mseep.ai/app/isaacwasserman-mcp-snowflake-server)\n\n# Snowflake MCP Server\n\n[![smithery badge](https://smithery.ai/badge/mcp_snowflake_server)](https://smithery.ai/server/mcp_snowflake_server) [![PyPI - Version](https://img.shields.io/pypi/dm/mcp-snowflake-server?color&logo=pypi&logoColor=white&label=PyPI%20downloads)](https://pypi.org/project/mcp-snowflake-server/)\n\n---\n\n## Overview\nA Model Context Protocol (MCP) server implementation that provides database interaction with Snowflake. This server enables running SQL queries via tools and exposes data insights and schema context as resources.\n\n---\n\n## Components\n\n### Resources\n\n- **`memo://insights`**  \n  A continuously updated memo aggregating discovered data insights.  \n  Updated automatically when new insights are appended via the `append_insight` tool.\n\n- **`context://table/{table_name}`**  \n  (If prefetch enabled) Per-table schema summaries, including columns and comments, exposed as individual resources.\n\n---\n\n### Tools\n\nThe server exposes the following tools:\n\n#### Query Tools\n\n- **`read_query`**  \n  Execute `SELECT` queries to read data from the database.  \n  **Input:**  \n  - `query` (string): The `SELECT` SQL query to execute  \n  **Returns:** Query results as array of objects\n\n- **`write_query`** (enabled only with `--allow-write`)  \n  Execute `INSERT`, `UPDATE`, or `DELETE` queries.  \n  **Input:**  \n  - `query` (string): The SQL modification query  \n  **Returns:** Number of affected rows or confirmation\n\n- **`create_table`** (enabled only with `--allow-write`)  \n  Create new tables in the database.  \n  **Input:**  \n  - `query` (string): `CREATE TABLE` SQL statement  \n  **Returns:** Confirmation of table creation\n\n#### Schema Tools\n\n- **`list_databases`**  \n  List all databases in the Snowflake instance.  \n  **Returns:** Array of database names\n\n- **`list_schemas`**  \n  List all schemas within a specific database.  \n  **Input:**  \n  - `database` (string): Name of the database  \n  **Returns:** Array of schema names\n\n- **`list_tables`**  \n  List all tables within a specific database and schema.  \n  **Input:**  \n  - `database` (string): Name of the database  \n  - `schema` (string): Name of the schema  \n  **Returns:** Array of table metadata\n\n- **`describe_table`**  \n  View column information for a specific table.  \n  **Input:**  \n  - `table_name` (string): Fully qualified table name (`database.schema.table`)  \n  **Returns:** Array of column definitions with names, types, nullability, defaults, and comments\n\n#### Analysis Tools\n\n- **`append_insight`**  \n  Add new data insights to the memo resource.  \n  **Input:**  \n  - `insight` (string): Data insight discovered from analysis  \n  **Returns:** Confirmation of insight addition  \n  **Effect:** Triggers update of `memo://insights` resource\n\n---\n\n## Usage with Claude Desktop\n\n### Installing via Smithery\n\nTo install Snowflake Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp_snowflake_server):\n\n```bash\nnpx -y @smithery/cli install mcp_snowflake_server --client claude\n```\n\n---\n\n### Installing via UVX\n\n```json\n\"mcpServers\": {\n  \"snowflake_pip\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"--python=3.12\",  // Optional: specify Python version <=3.12\n      \"mcp_snowflake_server\",\n      \"--account\", \"your_account\",\n      \"--warehouse\", \"your_warehouse\",\n      \"--user\", \"your_user\",\n      \"--password\", \"your_password\",\n      \"--role\", \"your_role\",\n      \"--database\", \"your_database\",\n      \"--schema\", \"your_schema\"\n      // Optionally: \"--allow_write\"\n      // Optionally: \"--log_dir\", \"/absolute/path/to/logs\"\n      // Optionally: \"--log_level\", \"DEBUG\"/\"INFO\"/\"WARNING\"/\"ERROR\"/\"CRITICAL\"\n      // Optionally: \"--exclude_tools\", \"{tool_name}\", [\"{other_tool_name}\"]\n    ]\n  }\n}\n```\n\n---\n\n### Installing Locally\n\n1. Install [Claude AI Desktop App](https://claude.ai/download)\n\n2. Install `uv`:\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n3. Create a `.env` file with your Snowflake credentials:\n\n```bash\nSNOWFLAKE_USER=\"xxx@your_email.com\"\nSNOWFLAKE_ACCOUNT=\"xxx\"\nSNOWFLAKE_ROLE=\"xxx\"\nSNOWFLAKE_DATABASE=\"xxx\"\nSNOWFLAKE_SCHEMA=\"xxx\"\nSNOWFLAKE_WAREHOUSE=\"xxx\"\nSNOWFLAKE_PASSWORD=\"xxx\"\n# Alternatively, use external browser authentication:\n# SNOWFLAKE_AUTHENTICATOR=\"externalbrowser\"\n```\n\n4. [Optional] Modify `runtime_config.json` to set exclusion patterns for databases, schemas, or tables.\n\n5. Test locally:\n\n```bash\nuv --directory /absolute/path/to/mcp_snowflake_server run mcp_snowflake_server\n```\n\n6. Add the server to your `claude_desktop_config.json`:\n\n```json\n\"mcpServers\": {\n  \"snowflake_local\": {\n    \"command\": \"/absolute/path/to/uv\",\n    \"args\": [\n      \"--python=3.12\",  // Optional\n      \"--directory\", \"/absolute/path/to/mcp_snowflake_server\",\n      \"run\", \"mcp_snowflake_server\"\n      // Optionally: \"--allow_write\"\n      // Optionally: \"--log_dir\", \"/absolute/path/to/logs\"\n      // Optionally: \"--log_level\", \"DEBUG\"/\"INFO\"/\"WARNING\"/\"ERROR\"/\"CRITICAL\"\n      // Optionally: \"--exclude_tools\", \"{tool_name}\", [\"{other_tool_name}\"]\n    ]\n  }\n}\n```\n\n---\n\n## Notes\n\n- By default, **write operations are disabled**. Enable them explicitly with `--allow-write`.\n- The server supports filtering out specific databases, schemas, or tables via exclusion patterns.\n- The server exposes additional per-table context resources if prefetching is enabled.\n- The `append_insight` tool updates the `memo://insights` resource dynamically.\n\n---\n\n## License\n\nMIT\n"
}