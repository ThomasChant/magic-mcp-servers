{
  "mcp_name": "php-mcp/laravel",
  "mcp_description": "Seamlessly integrates the PHP MCP Server package into Laravel, enabling applications to expose MCP tools, resources, and prompts with ease.",
  "mcp_id": "php-mcp_laravel",
  "fetch_timestamp": "2025-06-23T07:29:31.081396Z",
  "github_url": "https://github.com/php-mcp/laravel",
  "repository": {
    "name": "laravel",
    "full_name": "php-mcp/laravel",
    "description": "An SDK building Laravel MCP servers",
    "html_url": "https://github.com/php-mcp/laravel",
    "created_at": "2025-04-28T15:11:56Z",
    "updated_at": "2025-06-22T19:40:31Z",
    "pushed_at": "2025-06-13T11:22:25Z",
    "size": 202,
    "stargazers_count": 153,
    "watchers_count": 153,
    "forks_count": 10,
    "open_issues_count": 6,
    "language": "PHP",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "php-mcp",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/209475819?v=4",
      "html_url": "https://github.com/php-mcp"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 10,
    "subscribers_count": 1,
    "languages": {
      "PHP": 70546
    },
    "language_percentages": {
      "PHP": 100
    },
    "pull_requests_count": 11,
    "contributors_count": 5,
    "latest_release": {
      "tag_name": "2.1.0",
      "name": "v2.1.0",
      "published_at": "2025-06-13T11:22:11Z",
      "body": "## What's Changed\r\n* Update README.md by @taylorotwell in https://github.com/php-mcp/laravel/pull/5\r\n* [docs] Fix publish config command for 2.x by @barryvdh in https://github.com/php-mcp/laravel/pull/7\r\n* [docs] Remove config call from app/bootstrap.php by @barryvdh in https://github.com/php-mcp/laravel/pull/8\r\n* Do not defer ServiceProvider to boot routes by @barryvdh in https://github.com/php-mcp/laravel/pull/9\r\n* Fix: Correct Client State Management in LaravelHttpTransport by @CodeWithKyrian in https://github.com/php-mcp/laravel/pull/17\r\n* chore: Update dependencies and improve MCP notification handling by @CodeWithKyrian in https://github.com/php-mcp/laravel/pull/18\r\n* docs: transport should be explicitly set to stdio for the tool to start by @xel1045 in https://github.com/php-mcp/laravel/pull/15\r\n\r\n## New Contributors\r\n* @taylorotwell made their first contribution in https://github.com/php-mcp/laravel/pull/5\r\n* @barryvdh made their first contribution in https://github.com/php-mcp/laravel/pull/7\r\n* @xel1045 made their first contribution in https://github.com/php-mcp/laravel/pull/15\r\n\r\n**Full Changelog**: https://github.com/php-mcp/laravel/compare/2.0.0...2.1.0",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "2.1.0",
        "commit_sha": "4fe2cbe7830a837741e9a606f537d31c45fff41a"
      },
      {
        "name": "2.0.0",
        "commit_sha": "7f02775e2a51eca3db67bda8601cd9e0eacfa795"
      },
      {
        "name": "1.1.1",
        "commit_sha": "44b8217a32cb8031bf2ed8c9000e007a24c33cba"
      },
      {
        "name": "1.1.0",
        "commit_sha": "d125181026d995779bf1a4998582846a4a4df07c"
      },
      {
        "name": "1.0.0",
        "commit_sha": "dbc9787595cef6a6160242b5cd2a7684b60bed1c"
      }
    ],
    "latest_version": "2.1.0"
  },
  "readme": "# PHP MCP Server for Laravel\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/php-mcp/laravel.svg?style=flat-square)](https://packagist.org/packages/php-mcp/laravel)\n[![Total Downloads](https://img.shields.io/packagist/dt/php-mcp/laravel.svg?style=flat-square)](https://packagist.org/packages/php-mcp/laravel)\n[![License](https://img.shields.io/packagist/l/php-mcp/laravel.svg?style=flat-square)](LICENSE)\n\n**Seamlessly integrate the [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) into your Laravel applications.**\n\nThis package is a Laravel compatible wrapper for the powerful [`php-mcp/server`](https://github.com/php-mcp/server) library. It allows you to effortlessly expose parts of your Laravel application as MCP **Tools**, **Resources**, and **Prompts**, enabling standardized communication with AI assistants like Anthropic's Claude, Cursor IDE, and others.\n\n**Key Features:**\n\n*   **Effortless Integration:** Designed from the ground up for Laravel, leveraging its service container, configuration, caching, logging, and Artisan console.\n*   **Fluent Element Definition:** Define MCP elements programmatically with a clean, Laravely API using the `Mcp` Facade (e.g., `Mcp::tool(...)->description(...)`).\n*   **Attribute-Based Discovery:** Alternatively, use PHP 8 attributes (`#[McpTool]`, etc.) on your classes and methods, then run a simple Artisan command to discover and cache them.\n*   **Flexible Transports:**\n    *   **Integrated HTTP+SSE:** Serve MCP requests directly through your Laravel application's routes, ideal for many setups.\n    *   **Dedicated HTTP+SSE Server:** Launch a high-performance, standalone ReactPHP-based HTTP server via an Artisan command for demanding scenarios.\n    *   **STDIO:** Run an MCP server over standard input/output, perfect for CLI-driven clients.\n*   **Robust Configuration:** Manage all aspects of your MCP server via the `config/mcp.php` file.\n*   **Artisan Commands:** Includes commands for serving, discovering elements, and listing registered components.\n*   **Event-Driven Updates:** Integrates with Laravel's event system to notify clients of dynamic changes to your MCP elements.\n\nThis package utilizes `php-mcp/server` v2.1.0+ which supports the `2024-11-05` version of the Model Context Protocol.\n\n## Requirements\n\n*   PHP >= 8.1\n*   Laravel >= 10.0\n*   [`php-mcp/server`](https://github.com/php-mcp/server) ^2.1.0 (automatically installed)\n\n## Installation\n\n1.  **Require the Package:**\n    ```bash\n    composer require php-mcp/laravel\n    ```\n\n2.  **Publish Configuration:**\n    ```bash\n    php artisan vendor:publish --provider=\"PhpMcp\\Laravel\\McpServiceProvider\" --tag=\"mcp-config\"\n    ```\n\n## Configuration\n\nAll MCP server settings are managed in `config/mcp.php`. Here are the key sections:\n\n### Server Information\n*   **`server`**: Basic server identity settings\n    *   `name`: Your MCP server's name (default: 'Laravel MCP')\n    *   `version`: Server version number\n    *   `instructions`: Optional initialization instructions for clients\n\n### Discovery Settings\n*   **`discovery`**: Controls how MCP elements are discovered\n    *   `base_path`: Root directory for scanning (defaults to `base_path()`)\n    *   `directories`: Paths to scan for MCP attributes (default: `['app/Mcp']`)\n    *   `exclude_dirs`: Directories to skip during scans (e.g., 'vendor', 'tests', etc.)\n    *   `definitions_file`: Path to manual element definitions (default: `routes/mcp.php`)\n    *   `auto_discover`: Enable automatic discovery in development (default: `true`)\n    *   `save_to_cache`: Cache discovery results (default: `true`)\n\n### Transport Configuration\n*   **`transports`**: Available communication methods\n    *   **`stdio`**: CLI-based transport\n        *   `enabled`: Enable the `mcp:serve` command with `stdio` option.\n    *   **`http_dedicated`**: Standalone HTTP server\n        *   `enabled`: Enable the `mcp:serve` command with `http` option.\n        *   `host`, `port`, `path_prefix` settings\n    *   **`http_integrated`**: Laravel route-based server\n        *   `enabled`: Serve through Laravel routes\n        *   `route_prefix`: URL prefix (default: 'mcp')\n        *   `middleware`: Applied middleware (default: 'web')\n\n### Cache & Performance\n*   **`cache`**: Caching configuration\n    *   `store`: Laravel cache store to use\n    *   `ttl`: Cache lifetime in seconds\n*   **`pagination_limit`**: Maximum items returned in list operations\n\n### Feature Control\n*   **`capabilities`**: Toggle MCP features\n    *   Enable/disable tools, resources, prompts\n    *   Control subscriptions and change notifications\n*   **`logging`**: Server logging configuration\n    *   `channel`: Laravel log channel\n    *   `level`: Default log level\n\nReview the published `config/mcp.php` file for detailed documentation of all available options and their descriptions.\n\n## Defining MCP Elements\n\nPHP MCP Laravel provides two approaches to define your MCP elements: manual registration using a fluent API or attribute-based discovery.\n\n### Manual Registration\n\nThe recommended approach is using the fluent `Mcp` facade to manually register your elements in `routes/mcp.php` (this path can be changed in config/mcp.php via the discovery.definitions_file key).\n\n```php\nMcp::tool([MyHandlers::class, 'calculateSum']);\n\nMcp::resource( 'status://app/health', [MyHandlers::class, 'getAppStatus']);\n\nMcp::prompt(MyInvokableTool::class);\n\nMcp::resourceTemplate('user://{id}/data', [MyHandlers::class, 'getUserData']);\n```\n\nThe facade provides several registration methods, each with optional fluent configuration methods:\n\n#### Tools (`Mcp::tool()`)\n\nDefines an action or function the MCP client can invoke. Register a tool by providing either:\n- Just the handler: `Mcp::tool(MyTool::class)` \n- Name and handler: `Mcp::tool('my_tool', [MyClass::class, 'method'])`\n\nAvailable configuration methods:\n- `name()`: Override the inferred name\n- `description()`: Set a custom description\n\n#### Resources (`Mcp::resource()`)\n\nDefines a specific, static piece of content or data identified by a URI. Register a resource by providing:\n- `$uri` (`required`): The unique URI for this resource instance (e.g., `config://app/settings`).\n- `$handler`: The handler that will return the resource's content.\n\nAvailable configuration methods:\n- `name(string $name): self`: Sets a human-readable name. Inferred if omitted.\n- `description(string $description): self`: Sets a description. Inferred if omitted.\n- `mimeType(string $mimeType): self`: Specifies the resource's MIME type. Can sometimes be inferred from the handler's return type or content.\n- `size(?int $size): self`: Specifies the resource size in bytes, if known.\n- `annotations(array $annotations): self`: Adds MCP-standard annotations (e.g., ['audience' => ['user']]).\n\n#### Resource Template (`Mcp::resourceTemplate()`)\n\nDefines a handler for resource URIs that contain variable parts, allowing dynamic resource instance generation. Register a resource template by providing:\n- `$uriTemplate` (`required`): The URI template string (`RFC 6570`), e.g., `user://{userId}/profile`.\n- `$handler`: The handler method. Its parameters must match the variables in the `$uriTemplate`.\n\nAvailable configuration methods:\n- `name(string $name): self`: Sets a human-readable name for the template type.\n- `description(string $description): self`: Sets a description for the template.\n- `mimeType(string $mimeType): self`: Sets a default MIME type for resources resolved by this template.\n- `annotations(array $annotations): self`: Adds MCP-standard annotations.\n\n#### Prompts (`Mcp::prompt()`)\n\nDefines a generator for MCP prompt messages, often used to construct conversations for an LLM. Register a prompt by providing just the handler, or the name and handler.\n- `$name` (`optional`): The MCP prompt name. Inferred if omitted.\n- `$handler`: The handler method. Its parameters become the prompt's input arguments.\n\n\nThe package automatically resolves handlers through Laravel's service container, allowing you to inject dependencies through constructor injection. Each registration method accepts either an invokable class or a `[class, method]` array.\n\nThe fluent methods like `description()`, `name()`, and `mimeType()` are optional. When omitted, the package intelligently infers these values from your handler's method signatures, return types, and DocBlocks. Use these methods only when you need to override the automatically generated metadata.\n\nManually registered elements are always available regardless of cache status and take precedence over discovered elements with the same identifier.\n\n### Attribute-Based Discovery\n\nAs an alternative, you can use PHP 8 attributes to mark your methods or invokable classes as MCP elements. That way, you don't have to manually register them in the definitions file:\n\n```php\nnamespace App\\Mcp;\n\nuse PhpMcp\\Server\\Attributes\\McpTool;\nuse PhpMcp\\Server\\Attributes\\McpResource;\n\nclass DiscoveredElements\n{\n    #[McpTool(name: 'echo_discovered')]\n    public function echoMessage(string $message): string\n    {\n        return \"Discovered echo: {$message}\";\n    }\n    \n    #[McpResource(uri: 'status://server/health', mimeType: 'application/json')]\n    public function getServerHealth(): array\n    {\n        return ['status' => 'healthy', 'uptime' => 123];\n    }\n}\n```\n\nWhen `auto_discover` enabled in your config, these elements are automatically discovered when needed. For production or to manually trigger discovery, run:\n\n```bash\nphp artisan mcp:discover\n```\n\nThis command scans the configured directories, registers the discovered elements, and caches the results for improved performance. Use the `--no-cache` flag to skip caching or `--force` to perform a fresh scan regardless of cache status.\n\nSee the [`php-mcp/server` documentation](https://github.com/php-mcp/server?tab=readme-ov-file#attribute-details--return-formatting) for detailed information on attribute parameters and return value formatting.\n\n## Running the MCP Server\n\nPHP MCP Laravel offers three transport options to serve your MCP elements.\n\n### Integrated HTTP+SSE via Laravel Routes\n\nThe most convenient option for getting started is serving MCP directly through your Laravel application's routes:\n\n```php\n// Client connects to: http://your-app.test/mcp/sse\n// No additional processes needed\n```\n\n**Configuration**:\n- Ensure `mcp.transports.http_integrated.enabled` is `true` in your config\n- The package registers routes at `/mcp/sse` (GET) and `/mcp/message` (POST) by default\n- You can customize the prefix, middleware, and domain in `config/mcp.php`\n\n**CSRF Protection**: You must exclude the MCP message endpoint from CSRF verification:\n\nFor Laravel 11+:\n```php\n// bootstrap/app.php\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->validateCsrfTokens(except: [\n         'mcp/message', // Adjust if you changed the route prefix\n    ]);\n})\n```\n\nFor Laravel 10 and below:\n```php\n// app/Http/Middleware/VerifyCsrfToken.php\nprotected $except = [\n    'mcp/message', // Adjust if you changed the route prefix\n];\n```\n\n**Server Environment Considerations**:\nStandard synchronous servers like PHP's built-in server or basic PHP-FPM setups can struggle with SSE connections. For eg, a single PHP-FPM worker will be tied up for each active SSE connection. For production, consider using Laravel Octane with Swoole/RoadRunner or properly configured Nginx with sufficient PHP-FPM workers.\n\n### Dedicated HTTP+SSE Server (Recommended)\n\nFor production environments or high-traffic applications, the dedicated HTTP server provides better performance and isolation:\n\n```bash\nphp artisan mcp:serve --transport=http\n```\n\nThis launches a standalone ReactPHP-based HTTP server specifically for MCP traffic:\n\n**Configuration**:\n- Ensure `mcp.transports.http_dedicated.enabled` is `true` in your config\n- Default server listens on `127.0.0.1:8090` with path prefix `/mcp`\n- Configure through any of these methods:\n  - Environment variables: `MCP_HTTP_DEDICATED_HOST`, `MCP_HTTP_DEDICATED_PORT`, `MCP_HTTP_DEDICATED_PATH_PREFIX`\n  - Edit values directly in `config/mcp.php`\n  - Override at runtime: `--host=0.0.0.0 --port=8091 --path-prefix=custom_mcp`\n\nThis is a blocking, long-running process that should be managed with Supervisor, systemd, or Docker in production environments.\n\n### STDIO Transport for Direct Client Integration\n\nIdeal for Cursor IDE and other MCP clients that directly launch server processes:\n\n```bash\nphp artisan mcp:serve\n# or explicitly:\nphp artisan mcp:serve --transport=stdio\n```\n\n**Client Configuration**:\nConfigure your MCP client to execute this command directly. For example, in Cursor:\n\n```json\n// .cursor/mcp.json\n{\n    \"mcpServers\": {\n        \"my-laravel-stdio\": {\n            \"command\": \"php\",\n            \"args\": [\n                \"/full/path/to/your/laravel/project/artisan\",\n                \"mcp:serve\",\n                \"--transport=stdio\"\n            ]\n        }\n    }\n}\n```\n\n**Important**: When using STDIO transport, your handler code must not write to STDOUT using echo, print, or similar functions. Use Laravel's logger or STDERR for any debugging output.\n\n## Listing Registered Elements\n\nTo see which MCP elements your server has registered (both manual and discovered/cached):\n\n```bash\nphp artisan mcp:list\n# Specific types:\nphp artisan mcp:list tools\nphp artisan mcp:list resources\n# JSON output:\nphp artisan mcp:list --json\n```\n\n## Dynamic Updates (Events)\n\nIf your available MCP elements or resource content change while the server is running, you can notify connected clients (most relevant for HTTP transports).\n\n*   **List Changes (Tools, Resources, Prompts):**\n    Dispatch the corresponding Laravel event. The package includes listeners to send the appropriate MCP notification.\n    ```php\n    use PhpMcp\\Laravel\\Events\\ToolsListChanged;\n    use PhpMcp\\Laravel\\Events\\ResourcesListChanged;\n    use PhpMcp\\Laravel\\Events\\PromptsListChanged;\n\n    ToolsListChanged::dispatch();\n    // ResourcesListChanged::dispatch();\n    // PromptsListChanged::dispatch();\n    ```\n\n*   **Specific Resource Content Update:**\n    Dispatch the `PhpMcp\\Laravel\\Events\\ResourceUpdated` event with the URI of the changed resource.\n    ```php\n    use PhpMcp\\Laravel\\Events\\ResourceUpdated;\n\n    $resourceUri = 'file:///path/to/updated_file.txt';\n    // ... your logic that updates the resource ...\n    ResourceUpdated::dispatch($resourceUri);\n    ```\n    The `McpNotificationListener` will handle sending the `notifications/resource/updated` MCP notification to clients subscribed to that URI.\n\n## Testing\n\nFor your application tests, you can mock the `Mcp` facade or specific MCP handlers as needed. When testing MCP functionality itself, consider integration tests that make HTTP requests to your integrated MCP endpoints (if used) or command tests for Artisan commands.\n\n## Contributing\n\nPlease see [CONTRIBUTING.md](CONTRIBUTING.md) in the main [`php-mcp/server`](https://github.com/php-mcp/server) repository for general contribution guidelines. For issues or PRs specific to this Laravel package, please use this repository's issue tracker.\n\n## License\n\nThe MIT License (MIT). See [LICENSE](LICENSE).\n"
}