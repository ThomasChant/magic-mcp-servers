{
  "mcp_name": "under-doc/underdoc-tutorial-expense-analytics-mcp-sqlite",
  "mcp_description": "Facilitates expense analytics by integrating GenAI with an MCP server for SQLite, enabling natural language interaction with expense data.",
  "mcp_id": "under-doc_underdoc-tutorial-expense-analytics-mcp-sqlite",
  "fetch_timestamp": "2025-06-23T09:10:33.056346Z",
  "github_url": "https://github.com/under-doc/underdoc-tutorial-expense-analytics-mcp-sqlite",
  "repository": {
    "name": "underdoc-tutorial-expense-analytics-mcp-sqlite",
    "full_name": "under-doc/underdoc-tutorial-expense-analytics-mcp-sqlite",
    "description": "UnderDoc Tutorial - Expense Analytics with MCP Server for SQLite",
    "html_url": "https://github.com/under-doc/underdoc-tutorial-expense-analytics-mcp-sqlite",
    "created_at": "2025-04-24T06:28:50Z",
    "updated_at": "2025-04-28T08:52:26Z",
    "pushed_at": "2025-04-28T08:52:23Z",
    "size": 3861,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": null,
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "under-doc",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/201878898?v=4",
      "html_url": "https://github.com/under-doc"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# UnderDoc Tutorial - Expense Analytics using GenAI and MCP server for SQLite DB\n\n- [UnderDoc Tutorial - Expense Analytics using GenAI and MCP server for SQLite DB](#underdoc-tutorial---expense-analytics-using-genai-and-mcp-server-for-sqlite-db)\n  - [Introduction](#introduction)\n  - [Overview](#overview)\n  - [What is MCP](#what-is-mcp)\n  - [Prerequisite](#prerequisite)\n    - [Get an UnderDoc API Key](#get-an-underdoc-api-key)\n      - [Step 1: Signup](#step-1-signup)\n      - [Step 2: Login](#step-2-login)\n      - [Step 3: Get the key from \"Key Management\" Page](#step-3-get-the-key-from-key-management-page)\n    - [Install uv](#install-uv)\n    - [Install Python 3.12](#install-python-312)\n    - [Install sqlite command line interface](#install-sqlite-command-line-interface)\n  - [Environment Setup](#environment-setup)\n    - [Clone the project for this tutorial](#clone-the-project-for-this-tutorial)\n    - [Setup Python Virtual Environment and Install Required Packages](#setup-python-virtual-environment-and-install-required-packages)\n    - [Environment Verification](#environment-verification)\n    - [Initialize a SQLite DB (optional)](#initialize-a-sqlite-db-optional)\n    - [Copy your expense images into the folder receipt-images](#copy-your-expense-images-into-the-folder-receipt-images)\n  - [Perform Data Extraction and Save to DB](#perform-data-extraction-and-save-to-db)\n    - [Data Verification](#data-verification)\n  - [Expense Analytics with Natural Language](#expense-analytics-with-natural-language)\n    - [Install Claude Desktop](#install-claude-desktop)\n    - [Clone the source of reference MCP server from Github](#clone-the-source-of-reference-mcp-server-from-github)\n    - [Install MCP Server for SQLite for Claude Desktop](#install-mcp-server-for-sqlite-for-claude-desktop)\n    - [Verify the MCP server in Claude Desktop](#verify-the-mcp-server-in-claude-desktop)\n    - [Overview of UnderDoc Expense (SQLite) DB](#overview-of-underdoc-expense-sqlite-db)\n    - [Expense Analytics by Asking Questions](#expense-analytics-by-asking-questions)\n  - [Final words](#final-words)\n  - [Resources](#resources)\n\n---\n\n## Introduction\n\nIn my previous [tutorial](https://medium.com/underdoc/expense-analytics-using-metabase-and-llm-with-receipt-invoice-images-part-1-c5ace9a8bd3c), I discussed about how to extract structure expense data from images, store it into a SQLite DB and use Metabase to perform expense analytics.\n\nIn this tutorial, I would like to discuss using GenAI and MCP server for SQLite in performing expense analytics by chatting with a LLM in natural language.\n\nThis tutorial focus on using GenAI (Claude Desktop) and MCP server for SQLite, and assume that the database was already populated with UnderDoc expense records. You can follow the previous tutorial up to the section \"Perform Data Extraction and Save to DB\" (skip the rest of the sections relating to Metabase). If you want to have a quick look on how the MCP server works, you can also download the sample SQLite DB with 20 sample expense records [here](https://github.com/under-doc/underdoc-tutorial-expense-analytics-mcp-sqlite/raw/refs/heads/main/underdoc.db).\n\nYou need to have the following in order to be able to run through this tutorial:\n\n- A laptop or desktop running MacOS\n- uv (a Python runtime and package manager for running the SQLite MCP server)\n- git (for cloning the MCP server source code from github)\n- Claude Desktop (this is the GenAI app we are using in this tutorial, which supports MCP servers)\n- Sqlite DB\n\nFor those reader haven't went through the previous tutorial, I have replicated the steps here for easy reference. If you already have the SQLite DB ready, you can skip to the section [\"Expense Analytics with Natural Language\"](#expense-analytics-with-natural-language).\n\n## Overview\n\nThis tutorial use the following components for various tasks:\n\n- [UnderDoc](https://underdoc.io) for extracting data from receipt/invoice/demand-notes images\n- [uv](https://github.com/astral-sh/uv) for managing Python runtime and runs the MCP servers\n- [SQLite](https://sqlite.com/) for storing extracted data\n- [Claude Desktop for Mac](https://claude.ai/download) for expense analytics using LLM with MCP servers\n\n## What is MCP\n\nThere are too many articles discussing MCP (Model Context Protocol), so I will not go into details here. In short, MCP provided a standardized way for LLM to interact with various resources and tools required for answering users' questions.\n\nThere are already a numbers of tools supports MCP server, like Claude desktop, Cursor IDE, etc. Many other GenAI providers (e.g. OpenAI, Google, etc.) also announced the support of MCP in their services as well.\n\nThe open source MCP repo in Github had provided a list of [reference servers](https://github.com/modelcontextprotocol/servers). There is one for [SQLite DB](https://github.com/modelcontextprotocol/servers/tree/main/src/sqlite) integration, which will be used in this tutorial.\n\n## Prerequisite\n\n### Get an UnderDoc API Key\n\nThe key step in this tutorial is to extract the expense information from images into structured data (e.g. shop name, amount, currency, inferred category, etc.) that is suitable for storing into a database for exploration. We will use [UnderDoc](https://underdoc.io), which is a cost-effective platform (with a free tier) in performing this task. This tool also works well with multi-language images.\n\nUsing UnderDoc is simple, just signup at their developer portal and get an API key.\n\n#### Step 1: Signup\n\nFirst of all, visit the signup page at [UnderDoc Developer Portal](https://dev-portal.underdoc.io/signup)\n\n![Signup at UnderDoc](images/underdoc-signup.png)\n\nEnter your email, password and then confirm Sign Up.\n\n![Confirm Signup at UnderDoc](images/underdoc-signup-confirm.png)\n\nUpon sign up successful, you will receive an email. You need to verify your email before login.\n\n![Email Verification at UnderDoc](images/underdoc-signup-email-verification.png)\n\n#### Step 2: Login\n\nOnce sign up success and email verified, you can then login to [UnderDoc Developer Portal](https://dev-portal.underdoc.io/) to login.\n\n![Login to UnderDoc](images/underdoc-login.png)\n\n#### Step 3: Get the key from \"Key Management\" Page\n\nOn the left, select \"Key Management\".\n\n![Login to UnderDoc](images/underdoc-key-management.png)\n\nIn the Key Management page, click the eye icon to display the key, and then copy it for use later in this tutorial.\n\n![Reveal and Copy UnderDoc API Key](images/underdoc-copy-key.png)\n\nNow you have the UnderDoc API key, and can proceed to the rest of the tutorial.\n\n### Install uv\n\nTo run the SQLite MCP server, \"uv\" is required. You can refer to their [site](https://docs.astral.sh/uv/getting-started/installation/) for installation instructions. The easiest way is to install it using brew:\n\n```bash\nbrew install uv\n```\n\n### Install Python 3.12\n\nThis tutorial was tested with Python 3.12. To install this into your Mac, the easiest way is to install via homebrew. The following is the command.\n\n```bash\nbrew install python@3.12\n```\n\n### Install sqlite command line interface\n\nThe expense data extracted will be persisted to SQLite DB locally. We will use SQLite to verify the database as well as the data stored. To install, we also use homebrew.\n\n```bash\nbrew install sqlite\n```\n\nThis concludes all prerequisites, let's proceed to environment setup!\n\n## Environment Setup\n\n### Clone the project for this tutorial\n\nAll the Python scripts required, and some sample images were provided by this tutorial. Clone it from GitHub with the following command.\n\n```bash\ngit clone https://github.com/under-doc/underdoc-expense-analytics-tutorial.git\n```\n\nOnce cloned, change directory into the project folder. For example, my folder is as follows:\n\n```bash\n/Users/clarenceho/workspace/underdoc/underdoc-expense-analytics-tutorial\n```\n\nIn this folder, you will see some folders and files. The following is an overview:\n\n- README.md: this file\n- model.py: the Python script for model classes\n- main.py: the Python script for the extraction process\n- requirements.txt: the Python library packages that this project requires\n- receipt-images: the expense images should be put here. You can see 20 sample images provided\n- metabase-data: this is where the Metabase and UnderDoc database will be stored\n\n### Setup Python Virtual Environment and Install Required Packages\n\nThe next step is to create a Python virtual environment for this tutorial and install the required packages. Run the following commands in order.\n\n```bash\n# Step 1: Create a Python virtual environment in the folder venv using Python 3.12\npython3.12 -m venv venv\n\n# Step 2: Activate the Python virtual environment\nsource venv/bin/activate\n\n# Step 3: Install the required Python packages\npip install -r requirements.txt\n```\n\n### Environment Verification\n\nTo verify the Python environment, run the following command.\n\n```bash\npip list\n```\n\nYou should see the list like one below.\n\n```bash\nPackage                   Version\n------------------------- -----------\naiosignal                 1.3.2\nannotated-types           0.7.0\nanyio                     4.9.0\nattrs                     25.3.0\nboto3                     1.37.22\nbotocore                  1.37.22\ncertifi                   2025.1.31\ncharset-normalizer        3.4.1\nclick                     8.1.8\nfilelock                  3.18.0\nfrozenlist                1.5.0\nh11                       0.14.0\nhttpcore                  1.0.7\nhttpx                     0.28.1\nidna                      3.10\njmespath                  1.0.1\njsonschema                4.23.0\njsonschema-specifications 2024.10.1\nmsgpack                   1.1.0\npackaging                 24.2\npip                       25.0\nprotobuf                  6.30.2\npydantic                  2.11.0\npydantic_core             2.33.0\npydantic-settings         2.8.1\npython-dateutil           2.9.0.post0\npython-dotenv             1.1.0\nPyYAML                    6.0.2\nray                       2.44.1\nreferencing               0.36.2\nrequests                  2.32.3\nrpds-py                   0.24.0\ns3transfer                0.11.4\nsix                       1.17.0\nsniffio                   1.3.1\nSQLAlchemy                2.0.40\nsqlmodel                  0.0.24\ntyping_extensions         4.13.0\ntyping-inspection         0.4.0\nunderdoc                  0.4.2\nurllib3                   2.3.0\n```\n\n### Initialize a SQLite DB (optional)\n\nWe need to have an empty SQLite DB file for storing extracted expense data. This repo already provided one (in metabase-data/underdoc.db). If you need to initialize one, run the following command:\n\n```bash\nsqlite3 metabase-data/underdoc.db\n```\n\n### Copy your expense images into the folder receipt-images\n\nThe script will process all images in the folder receipt-images. You can use the sample images provide, or copy your own images into the folder for analysis,.\n\nIf you follow this tutorial so far, I really want to express my sincere thanks! We are now ready for extracting the data from images into the DB.\n\n## Perform Data Extraction and Save to DB\n\nBefore running the script, setup the environment variable of your UnderDoc API key, as the script will use the key to interact with UnderDoc.\n\n```bash\nexport UNDERDOC_API_KEY=<your_api_key>\n```\n\nOnce you got the environment setup and ready, extract data to DB is easy. Just run the following command:\n\n```bash\npython main.py\n```\n\nThe script make use of the [UnderDoc Python SDK](https://github.com/under-doc/underdoc-python-sdk) to interact with UnderDoc's Document Understanding API, to get the returned structured data, and then store it into SQLite DB. Depends on your laptops hardware, it will also try to run the extraction of multiple images in parallel.\n\nThe script will take some time to run. If successful, you will see output similar to the following.\n\n```bash\npython main.py\n2025-04-01 12:38:25,873 - __main__ - INFO - UnderDoc Tutorial - Extract expense data from imagesand persist to DB\n2025-04-01 12:38:25,873 - __main__ - INFO - Extracting expense data and persist to DB\n2025-04-01 12:38:25,873 - __main__ - INFO - Extracting expense data from images - will take some time\n2025-04-01 12:38:25,873 - underdoc.underdoc_client - INFO - UnderDoc client initialized successfully\n2025-04-01 12:38:25,873 - underdoc.underdoc_client - INFO - Extracting expense data from file pattern: receipt-images/*.*, execution mode: BatchExecutionMode.Parallel\n2025-04-01 12:38:27,370\tINFO worker.py:1852 -- Started a local Ray instance.\n2025-04-01 12:39:16,704 - underdoc.underdoc_client - INFO - Extracted 20 expense data from 20 images\n2025-04-01 12:39:16,704 - __main__ - INFO - Extracted expense data from images completed successfully\n2025-04-01 12:39:16,733 - __main__ - INFO - Expense data saved to DB\n```\n\n### Data Verification\n\nTo verify that the data in SQLite DB, run the following command.\n\n```bash\nsqlite3 metabase-data/underdoc.db\n```\n\nIn the \"sqlite>\" prompt, type the following command to list the tables.\n\n```bash\nsqlite> .tables\n```\n\nYou should see a table \"myexpense\" appear.\n\n```bash\nsqlite> .tables\nmyexpense\n```\n\nTo list the records in the table, type the following command.\n\n```bash\nsqlite> select * from myexpense;\n```\n\nYou should be able to see all expense records, similar to the following one.\n\n```bash\nsqlite> select * from myexpense;\n1|2023-08-08 00:00:00.000000|Invoice|Uber||Misc|TWD|1642.0|receipt-images/expense_008.png\n2|2025-01-02 00:00:00.000000|Receipt|函太郎 Tokyo店|東京都千代田区丸の内1-9-1|Food|JPY|2299.0|receipt-images/expense_020.jpg\n3|2023-01-31 00:00:00.000000|Invoice|Google|70 Pasir Panjang Road, #03-71\nMapletree Business City\nSingapore 117371|Google Workspace|USD|18.0|receipt-images/expense_009.png\n4|2025-01-04 00:00:00.000000|Receipt|AEON|イオン新潟西店|Groceries|JPY|3923.0|receipt-images/expense_019.jpg\n5|2024-07-29 00:00:00.000000|Invoice|台灣自來水股份有限公司|236新北市土城區學享街63、65號|Utilities|TWD|149.0|receipt-images/expense_018.png\n6|2023-03-02 00:00:00.000000|Receipt|AXA 安盛|5/F, AXA Southside, 38 Wong Chuk Hang Road, Wong Chuk Hang, Hong Kong|Policy Premium Payment|HKD|2577.48|receipt-images/expense_001.png\n7|2024-09-07 00:00:00.000000|Invoice|48.Lindberg by Puyi|Shop OT 316, Level 3, Ocean Terminal, Harbour City, Tsimshatsui, Kowloon, Hong Kong|optical|HKD|12498.0|receipt-images/expense_015.jpg\n8|2021-04-27 00:00:00.000000|Receipt|深仔記|尖沙咀亞厘道29-39號\n九龍中心地下A舖|Food|HKD|39.0|receipt-images/expense_014.png\n9|2022-10-21 00:00:00.000000|Invoice|中華電信|台北營運處|Telecommunication|TWD|588.0|receipt-images/expense_002.png\n10|2021-05-27 00:00:00.000000|Receipt|OUTBACK STEAKHOUSE|Shop 304, 3/F,Silvercord\nTsim Sha Tsui, Kowloon.|food|HKD|78.0|receipt-images/expense_016.png\n11|2023-03-23 00:00:00.000000|Invoice|新加坡商蝦皮娛樂電商有限公司台灣分公司|台灣分公司|Electronics|TWD|3990.0|receipt-images/expense_017.png\n12|2025-03-04 00:00:00.000000|Receipt|namecheap|4600 East Washington Street. Suite 305, Phoenix, AZ 85034 USA|web services|USD|47.88|receipt-images/expense_003.png\n13|2023-07-29 00:00:00.000000|Invoice|CLP|DIAMOND HILL KOWLOON|Electricity|HKD|903.0|receipt-images/expense_007.png\n14|2024-12-18 00:00:00.000000|Invoice|RATING AND VALUATION DEPARTMENT||Misc|HKD|3130.0|receipt-images/expense_013.png\n15|2023-05-02 00:00:00.000000|Invoice|Manning Publications Co.|20 Baldwin Road Shelter Island, NY 11964|Books|USD|26.39|receipt-images/expense_012.png\n16|2021-08-25 00:00:00.000000|Invoice|香港寬頻 HONG KONG BROADBAND NETWORK||Misc|HKD|282.0|receipt-images/expense_006.png\n17|2021-08-09 00:00:00.000000|Invoice|Water Supplies Department|FLAT H, 30/F, BLOCK 1\nGRAND VIEW GARDEN\nDIAMOND HILL, KOWLOON|Water bill|HKD|287.8|receipt-images/expense_010.png\n18|2025-01-06 00:00:00.000000|Receipt|NIPPON Rent-A-Car|越後湯沢営業所|rental car|JPY|46750.0|receipt-images/expense_004.jpg\n19|2021-09-29 00:00:00.000000|Receipt|潮發大藥房|九龍九龍城衙前圍道88號地下|Medicine|HKD|515.0|receipt-images/expense_005.png\n20|2022-09-14 00:00:00.000000|Invoice|Apple||Cloud Storage|TWD|90.0|receipt-images/expense_011.png\n```\n\nAs you can see, the sample images provided include English, Chinese and Japanese. You can also see the source image file for each record.\n\n## Expense Analytics with Natural Language\n\nNow we have the expense data from our receipt/invoice images extracted and stored in the database, now we can use Claude Desktop and MCP server for SQLite to perform analytics.\n\nFirst of all, we need to install Claude Desktop (if you did not use it before).\n\n### Install Claude Desktop\n\nFollow the instructions in [Anthropic's website](https://claude.ai/download) to download and install Claude desktop. Then sign up an account if required.\n\n### Clone the source of reference MCP server from Github\n\nAt the moment of writing, using the reference MCP server for SQLite DB requires cloning the source code from their Github repo.\n\n```bash\ngit clone https://github.com/modelcontextprotocol/servers.git\n```\n\nUpon cloning, the source for the MCP server for SQLite is in the subfolder \"servers/src/sqlite\". You can refer to their README file for the MCP server's features and installation instructions.\n\n### Install MCP Server for SQLite for Claude Desktop\n\nTo install a MCP server for Claude Desktop, you need to edit the app's config file. For Mac, the location is:\n\n```bash\n~/Library/Application Support/Claude/claude_desktop_config.json\n```\n\nUse any editor, open the file and add the following snippet into the file:\n\n```json\n\"mcpServers\": {\n  \"sqlite\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"--directory\",\n      \"<parent_of_servers_repo>/servers/src/sqlite\",\n      \"run\",\n      \"mcp-server-sqlite\",\n      \"--db-path\",\n      \"<underdoc_db_file_path>\"\n    ]\n  }\n}\n```\n\nIf you already installed MCP server before, you just need to append the \"sqlite\" part into the \"mcpServers\" section.\n\nRemember to replace the placeholder:\n\n- <parent_of_servers_repo>: the folder where you cloned the MCP server source code\n- <underdoc_db_file_path>: the path to your underdoc.db file\n\nFor example, in my environment, the snippet is as follows:\n\n```json\n\"mcpServers\": {\n  \"sqlite\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"--directory\",\n      \"/Users/clarenceho/workspace/mcp/servers/src/sqlite\",\n      \"run\",\n      \"mcp-server-sqlite\",\n      \"--db-path\",\n      \"/Users/clarenceho/workspace/underdoc/sqlite/underdoc.db\"\n    ]\n  }\n}\n```\n\nUpon modification, restart Claude Desktop.\n\nNote: uv (you will notice that it's the command to start the MCP server) also need access to the folders ~/.local/share/uv and ~/.local/share/python. In my case, at the first time I start Claude Desktop after installing the MCP server, I got error like \"Permission denied to folder ~/.local/share/uv\". If you got the same error, create the folders and grant permission to yourself. For example, in my case:\n\n```bash\nsudo mkdir ~/.local/share/uv\nsudo mkdir ~/.local/share/python\nsudo chown <your-username> ~/.local/share/uv\nsudo chown <your-username> ~/.local/share/python\n```\n\n### Verify the MCP server in Claude Desktop\n\nLet's verify that the MCP server for SQLite was installed successfully for Claude.\n\nIn Claude's main chat windows, you will see a list of icon buttons. Click the \"MCP Tools icon\" as highlighted in the following screenshot.\n\n![Claude tools icon](images/claude-tools-icon.png)\n\nA dialog box will pop up which displays the list of MCP tools (provided by the configured MCP servers) available for it's LLM to invkoe. The following screenshot is an example:\n\n![Claude available MCP tools](images/claude-available-mcp-tools.png)\n\nI highlighted 2 of the tools provided by SQLite server. Those are function calls that LLM can use to retrieve information and data from the SQLite DB. Because the MCP server's config include the UnderDoc DB file, Claude will be able to reveal the schema and data of the expense table and data. The full list of tools provided by SQLite MCP server can be found [here](https://github.com/modelcontextprotocol/servers/tree/main/src/sqlite). Seeing the tools in this dialog box means that you installed the SQLite MCP server to Claude successfully.\n\nYou also see other tools in the screenshot as I also installed the [\"filesystem\" reference server](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem).\n\n### Overview of UnderDoc Expense (SQLite) DB\n\nLet's start with the following query to ask Claude to take a look at the SQLite DB:\n\n```bash\nShow me the tables in the sqlite db\n```\n\nAfter you submit the query, Claude figured out that it can use the SQLite MCP server's \"list_tables\" tool to answer my question. For safety purpose, it will ask for your permission to run the tools.\n\n![Claude sqlite run list tables](images/claude-sqlite-show-tables.png)\n\nClick \"Allow for this chat\" to let Claude runs the tool.\n\nClaude will run the tool and response that it found 1 table \"myexpense\", and ask if you want it to dscribe it's structure.\n\n![Claude sqlite run list tables results](images/claude-list-tables.png)\n\nYou can also expand the tool calling drop-down to see the detail request and response between Claude and the SQLite MCP server.\n\nType \"yes\" to continue. Claude will then call the appropriate tool in the SQLite MCP Server and displays the schema of the \"myexpense\" table in the UnderDoc expense DB in a table format.\n\n![Claude myexpense-schema](images/claude-myexpense-schema.png)\n\n### Expense Analytics by Asking Questions\n\nNow we can ask questions about the expenses. For example, I would like to see the distribution of my expense among different categories and currencies. Submit the following query.\n\n```bash\nShow me the total amount of expense by category, by currency\n```\n\nClaude will identify the right tool in SQLite MCP server (in this case read_query) and list the data in table format.\n\n![Claude myexpense data](images/claude-expense-data.png)\n\nClaude is also smart enought to notice that there are 2 categories (\"Food\" and \"food\") that are similar and ask if you want to combine them. Answer yes and Claude will submit another query to merge the 2 categories and re-display the data.\n\nNow let's ask Claude to display the data in chart format. Submit the following query.\n\n```bash\nShow me the result in a multi-line chart\n```\n\nClaude will then generate the necessary code and run it, and shows the chart. When you mouse over a particular category, it will show the amount in ecah currency. Feel free to interact with Claude to adjust the chart (e.g. change the scale of the amount in the y-axis to make it easier to read).\n\n![Claude myexpense data multiline chart](images/claude-expense-multi-line-chart.png)\n\nThe expenses cover multiple currencies (USD, TWD, JPY, HKD), and suppose I want to convert the amount of all expenses to my base currency for an unified overview. Type in the following query.\n\n```bash\nConvert all expense amount to HKD currency\n```\n\nClaude is smart enough to query the web for the latest exchange rates from other currencies to HKD, rerun the query and generate the new chart. The following is what I got.\n\n![Claude myexpense hkd](images/claude-expense-hkd.png)\n\nYou can continue to ask Claude to fine tune the chart (e.g. change the axis, color, etc.) or filter expense for a particular period, and perform analytics of your expenses without any tool (e.g. Metabase) and SQL knowledge!\n\n## Final words\n\nI hope you will find this tutorial interesting and helpful. If you have any comments or questions, please feel free to contact me (<clarence@underdoc.io>) and I am very happy to answer!\n\n## Resources\n\n- [Expense Analytics using Metabase and LLM with receipt/invoice images (Part 1)](https://medium.com/underdoc/expense-analytics-using-metabase-and-llm-with-receipt-invoice-images-part-1-c5ace9a8bd3c)\n"
}