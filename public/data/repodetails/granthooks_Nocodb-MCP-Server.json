{
  "mcp_name": "granthooks/Nocodb-MCP-Server",
  "mcp_description": "Facilitates CRUD operations on Nocodb databases via the Model Context Protocol, ensuring seamless integration and management of database records.",
  "mcp_id": "granthooks_Nocodb-MCP-Server",
  "fetch_timestamp": "2025-06-23T04:13:32.739708Z",
  "github_url": "https://github.com/granthooks/Nocodb-MCP-Server",
  "repository": {
    "name": "Nocodb-MCP-Server",
    "full_name": "granthooks/Nocodb-MCP-Server",
    "description": null,
    "html_url": "https://github.com/granthooks/Nocodb-MCP-Server",
    "created_at": "2025-04-01T07:44:11Z",
    "updated_at": "2025-06-02T08:51:48Z",
    "pushed_at": "2025-04-14T09:30:22Z",
    "size": 26,
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks_count": 0,
    "open_issues_count": 1,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "granthooks",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/7757243?v=4",
      "html_url": "https://github.com/granthooks"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 29109
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# Nocodb MCP Server\r\n\r\nThis MCP server provides tools to interact with a Nocodb database through the Model Context Protocol, offering CRUD operations (Create, Read, Update, Delete) for Nocodb tables.\r\n\r\n## Installation\r\n\r\n1. Install the required dependencies:\r\n\r\n```bash\r\npip install -r requirements.txt\r\n```\r\n\r\n2. Make sure you have the MCP Python SDK installed (it should be installed with the dependencies above):\r\n\r\n```bash\r\npip install \"mcp[cli]\"\r\n```\r\n\r\n## Configuration\r\n\r\nThis MCP server requires three environment variables:\r\n\r\n- `NOCODB_URL`: The base URL of your Nocodb instance (e.g., `https://example.com/ncdb`)\r\n- `NOCODB_API_TOKEN`: The API token for authentication with Nocodb\r\n- `NOCODB_BASE_ID`: The base ID of your Nocodb database\r\n\r\nYou can obtain an API token from your Nocodb instance by:\r\n1. Login to your Nocodb instance\r\n2. Go to Account settings > API Tokens\r\n3. Create a new token with appropriate permissions\r\n\r\nThe base ID can be found in the URL of your Nocodb dashboard: `https://your-nocodb.com/dashboard/#/nc/base/YOUR_BASE_ID/table/...`\r\n\r\n## Usage\r\n\r\n### With Claude Desktop\r\n\r\nTo integrate with **Claude Desktop**, add this configuration to `claude_desktop_config.json`:\r\n\r\n```json\r\n{\r\n  \"mcpServers\": {\r\n    \"nocodb\": {\r\n      \"command\": \"python\",\r\n      \"args\": [\r\n        \"path/to/nocodb_mcp_server.py\"\r\n      ],\r\n      \"env\": {\r\n        \"NOCODB_URL\": \"https://your-nocodb-instance.com\",\r\n        \"NOCODB_API_TOKEN\": \"your_api_token_here\",\r\n        \"NOCODB_BASE_ID\": \"your_base_id_here\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nOr use the MCP CLI to install (recommended):\r\n\r\n```bash\r\n# Basic installation\r\nmcp install nocodb_mcp_server.py\r\n\r\n# With environment variables\r\nmcp install nocodb_mcp_server.py -v NOCODB_URL=https://your-nocodb-instance.com -v NOCODB_API_TOKEN=your_token -v NOCODB_BASE_ID=your_base_id\r\n\r\n# OR using an .env file\r\nmcp install nocodb_mcp_server.py -f .env\r\n```\r\n\r\n### Running as a Standalone Server\r\n\r\n```bash\r\n# Install dependencies\r\npip install -r requirements.txt\r\n\r\n# Run the server directly\r\npython nocodb_mcp_server.py\r\n\r\n# Or using the MCP CLI\r\nmcp run nocodb_mcp_server.py\r\n```\r\n\r\n### Development Mode\r\n\r\nFor testing and debugging with the MCP Inspector:\r\n\r\n```bash\r\n# Run in development mode\r\nmcp dev nocodb_mcp_server.py\r\n```\r\n\r\n### With Cursor on Windows\r\n\r\nFor Cursor on Windows, use the following syntax in your `mcp.json` configuration file:\r\n\r\n```json\r\n{\r\n  \"mcpServers\": {\r\n    \"nocodb\": {\r\n      \"command\": \"C:\\\\Path\\\\To\\\\Your\\\\Python\\\\Executable\",\r\n      \"args\": [\r\n        \"C:\\\\Path\\\\To\\\\Your\\\\nocodb_mcp_server.py\"\r\n      ],\r\n      \"env\": {\r\n        \"NOCODB_URL\": \"http://localhost:8080\",\r\n        \"NOCODB_API_TOKEN\": \"your_api_token_here\",\r\n        \"NOCODB_BASE_ID\": \"your_base_id_here\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Available Tools\r\n\r\nThe server provides the following tools:\r\n\r\n### 1. retrieve_records\r\n\r\nRetrieve one or multiple records from a Nocodb table.\r\n\r\n**Parameters:**\r\n- `table_name`: Name of the table to query\r\n- `row_id` (Optional): Specific row ID to retrieve a single record\r\n- `filters` (Optional): Filter conditions in Nocodb format\r\n- `limit` (Optional): Maximum number of records to return (default: 10)\r\n- `offset` (Optional): Number of records to skip for pagination (default: 0)\r\n- `sort` (Optional): Column to sort by\r\n- `fields` (Optional): Comma-separated list of fields to include\r\n\r\n**Examples:**\r\n\r\n```python\r\n# Get all records from a table (limited to 10)\r\nretrieve_records(table_name=\"customers\")\r\n\r\n# Get a specific record by ID\r\nretrieve_records(table_name=\"customers\", row_id=\"123\")\r\n\r\n# Filter records with conditions\r\nretrieve_records(\r\n    table_name=\"customers\", \r\n    filters=\"(age,gt,30)~and(status,eq,active)\"\r\n)\r\n```\r\n\r\n### 2. create_records\r\n\r\nCreate one or multiple records in a Nocodb table.\r\n\r\n**Parameters:**\r\n- `table_name`: Name of the table to insert into\r\n- `data`: Dict with column:value pairs or a list of such dicts for bulk creation\r\n- `bulk` (Optional): Set to True for bulk creation\r\n\r\n**Examples:**\r\n\r\n```python\r\n# Create a single record\r\ncreate_records(\r\n    table_name=\"customers\",\r\n    data={\"name\": \"John Doe\", \"email\": \"john@example.com\", \"age\": 35}\r\n)\r\n\r\n# Create multiple records in bulk\r\ncreate_records(\r\n    table_name=\"customers\",\r\n    data=[\r\n        {\"name\": \"John Doe\", \"email\": \"john@example.com\", \"age\": 35},\r\n        {\"name\": \"Jane Smith\", \"email\": \"jane@example.com\", \"age\": 28}\r\n    ],\r\n    bulk=True\r\n)\r\n```\r\n\r\n### 3. update_records\r\n\r\nUpdate one or multiple records in a Nocodb table.\r\n\r\n**Parameters:**\r\n- `table_name`: Name of the table to update\r\n- `row_id`: ID of the record to update (required for single record update)\r\n- `data`: Dictionary with column:value pairs to update\r\n- `bulk` (Optional): Set to True for bulk updates\r\n- `bulk_ids` (Optional): List of record IDs to update when bulk=True\r\n\r\n**Examples:**\r\n\r\n```python\r\n# Update a single record by ID\r\nupdate_records(\r\n    table_name=\"customers\",\r\n    row_id=\"123\",\r\n    data={\"name\": \"John Smith\", \"status\": \"inactive\"}\r\n)\r\n\r\n# Update multiple records in bulk by IDs\r\nupdate_records(\r\n    table_name=\"customers\",\r\n    data={\"status\": \"inactive\"},  # Same update applied to all records\r\n    bulk=True,\r\n    bulk_ids=[\"123\", \"456\", \"789\"]\r\n)\r\n```\r\n\r\n### 4. delete_records\r\n\r\nDelete one or multiple records from a Nocodb table.\r\n\r\n**Parameters:**\r\n- `table_name`: Name of the table to delete from\r\n- `row_id`: ID of the record to delete (required for single record deletion)\r\n- `bulk` (Optional): Set to True for bulk deletion\r\n- `bulk_ids` (Optional): List of record IDs to delete when bulk=True\r\n\r\n**Examples:**\r\n\r\n```python\r\n# Delete a single record by ID\r\ndelete_records(\r\n    table_name=\"customers\",\r\n    row_id=\"123\"\r\n)\r\n\r\n# Delete multiple records in bulk by IDs\r\ndelete_records(\r\n    table_name=\"customers\",\r\n    bulk=True,\r\n    bulk_ids=[\"123\", \"456\", \"789\"]\r\n)\r\n```\r\n\r\n### 5. get_schema\r\n\r\nRetrieve the schema (columns) of a Nocodb table.\r\n\r\n**Parameters:**\r\n- `table_name`: Name of the table to get the schema for\r\n\r\n**Returns:**\r\n- Dictionary containing the table schema or error information. The schema details, including the list of columns, are typically nested within the response.\r\n\r\n**Example:**\r\n\r\n```python\r\n# Get the schema for the \"products\" table\r\nget_schema(table_name=\"products\")\r\n```\r\n\r\n## Notes on Nocodb API\r\n\r\nThis MCP server interacts with the Nocodb v2 REST API as described in the [Nocodb API documentation](https://docs.nocodb.com/developer-resources/rest-apis/).\r\n\r\n**Key Implementation Details:**\r\n- Uses v2 API endpoints for all operations\r\n- Gets the base ID from the NOCODB_BASE_ID environment variable\r\n- Automatically resolves table IDs from table names\r\n- Authentication is handled via the `xc-token` header (Nocodb v2 API requirement)\r\n- Provides comprehensive error handling and responses\r\n\r\nREST API References:\r\n- https://docs.nocodb.com/developer-resources/rest-APIs/overview\r\n- Specific endpoints: `/api/v2/tables/{tableId}/records/...` and `/api/v2/meta/tables/{tableId}`\r\n\r\n### Authentication\r\n\r\nAuthentication is handled via the `xc-token` header, which is automatically populated using the `NOCODB_API_TOKEN` environment variable. This is the authentication mechanism required by the Nocodb v2 API.\r\n\r\n### Logging\r\nThe server includes logging for debugging purposes. By default, the MCP server's log level is set to `ERROR` in `nocodb_mcp_server.py` ( `mcp = FastMCP(\"Nocodb MCP Server\", log_level=\"ERROR\")` ) to avoid excessive output during standard operations like `mcp list`. If more detailed logs are needed for troubleshooting, you can uncomment the `logging.basicConfig` section and adjust the level (e.g., `level=logging.INFO` or `level=logging.DEBUG`).\r\n\r\n### Error Handling\r\n\r\nAll tools return structured responses that include error information if the operation fails. This makes it easy to determine if an operation was successful and to troubleshoot any issues.\r\n\r\n## Security Considerations\r\n\r\n* **Use dedicated API tokens** with minimal privileges required for your operations.\r\n* **Never share API tokens** in public repositories or insecure locations.\r\n* **Restrict database access** to only necessary operations through Nocodb's permission system.\r\n* **Enable logging and auditing** in your Nocodb instance for security monitoring.\r\n* **Regularly review and rotate API tokens** to minimize security risks.\r\n* **Store environment variables securely**, especially in production environments.\r\n\r\n## Security Best Practices\r\n\r\nFor a secure setup:\r\n\r\n1. **Create a dedicated API token** with restricted permissions in Nocodb.\r\n2. **Avoid hardcoding credentials**—always use environment variables.\r\n3. **Set appropriate table-level permissions** in Nocodb to restrict access.\r\n4. **Enable audit logs** if available in your Nocodb instance.\r\n5. **Review database access regularly** to prevent unauthorized access.\r\n\r\n⚠️ **IMPORTANT:** Always follow the **Principle of Least Privilege** when configuring API tokens and database access.\r\n"
}