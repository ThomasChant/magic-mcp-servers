{
  "mcp_name": "hmn53/sql-mcp",
  "mcp_description": "Facilitates secure, read-only interactions between LLMs and SQL databases using MCP tools.",
  "mcp_id": "hmn53_sql-mcp",
  "fetch_timestamp": "2025-06-23T04:48:41.868766Z",
  "github_url": "https://github.com/hmn53/sql-mcp",
  "repository": {
    "name": "sql-mcp",
    "full_name": "hmn53/sql-mcp",
    "description": null,
    "html_url": "https://github.com/hmn53/sql-mcp",
    "created_at": "2025-04-22T15:56:57Z",
    "updated_at": "2025-04-22T15:57:04Z",
    "pushed_at": "2025-04-22T15:57:00Z",
    "size": 152,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "master",
    "owner": {
      "login": "hmn53",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/42088898?v=4",
      "html_url": "https://github.com/hmn53"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 10789
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# SQL MCP Server\n\nThis project provides a Python-based Model Context Protocol (MCP) server that allows a Large Language Model (LLM) to securely interact with SQL Server or PostgreSQL databases in a **read-only** capacity.\n\n## Features\n\n*   Connects to PostgreSQL or SQL Server databases.\n*   Provides MCP tools to:\n    *   `get_schema`: Fetch database schema (all tables or a specific table).\n    *   `query_data`: Execute read-only `SELECT` queries.\n*   Enforces read-only access through query validation.\n\n## Setup\n\n1.  **Environment:** This project uses `uv` for environment and dependency management. Ensure you have `uv` installed (`pip install uv`).\n\n2.  **Dependencies:** The necessary dependencies have already been installed into the `.venv` directory using `uv add`. If you need to reinstall:\n    ```bash\n    uv sync\n    ```\n\n3.  **Configuration:**\n    *   Copy the example environment file:\n        ```bash\n        cp .env.example .env\n        ```\n    *   Edit the `.env` file and set the `DATABASE_URL` variable to your database connection string. Examples are provided in the file for PostgreSQL and SQL Server (using `pyodbc`).\n    *   Choose the appropriate SQLAlchemy driver prefix (`postgresql+asyncpg`, `mssql+pyodbc`, etc.) based on your database and installed driver.\n    *   Ensure you have the necessary database drivers installed (e.g., `psycopg2-binary` is included, but for SQL Server, you might need `pyodbc` and system-level ODBC drivers).\n    *   Configure the `TRANSPORT` (e.g., `stdio` or `sse`), `HOST`, and `PORT` as needed.\n\n## Usage\n\n### Development & Testing\n\nYou can run the server locally for testing using the MCP development tools:\n\n```bash\n# Activate the virtual environment (optional, uv run handles it)\n# source .venv/bin/activate  # Linux/macOS\n# .\\.venv\\Scripts\\activate  # Windows\n\n# Run with uv (recommended)\nuv run mcp dev src/main.py\n\n# Or run directly if environment is activated\n# mcp dev src/main.py\n```\n\nThis will start the MCP Inspector, allowing you to interact with the `get_schema` and `query_data` tools.\n\n### Running Standalone\n\nYou can also run the server directly using the configured transport (stdio or sse):\n\n```bash\n# Ensure .env is configured (especially TRANSPORT)\nuv run python src/main.py\n```\n\n### Integration with MCP Clients (e.g., Claude Desktop)\n\nRefer to the `mcp install` command and the MCP client's documentation for integrating the server. You'll typically provide the command to run the server (using `uv run python src/main.py` or similar) and necessary environment variables.\n\n**Example Stdio Configuration (Conceptual):**\n\n```json\n{\n  \"mcpServers\": {\n    \"sql-explorer\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"python\", \"c:/path/to/sql-mcp/src/main.py\"],\n      \"envFiles\": [\"c:/path/to/sql-mcp/.env\"],\n      \"env\": {\n          \"TRANSPORT\": \"stdio\"\n          // DATABASE_URL will be picked from .env file\n      }\n    }\n  }\n}\n```\n\n**Example SSE Configuration (Conceptual):**\n\nEnsure `TRANSPORT=sse`, `HOST`, and `PORT` are set in `.env`.\n\n```json\n{\n  \"mcpServers\": {\n    \"sql-explorer\": {\n      \"transport\": \"sse\",\n      \"url\": \"http://localhost:8051/sse\" // Or configured HOST/PORT\n    }\n  }\n}\n```"
}