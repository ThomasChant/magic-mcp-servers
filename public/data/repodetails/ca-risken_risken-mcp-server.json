{
  "mcp_name": "ca-risken/risken-mcp-server",
  "mcp_description": "Facilitates seamless integration with RISKEN APIs for advanced automation and interaction capabilities.",
  "mcp_id": "ca-risken_risken-mcp-server",
  "fetch_timestamp": "2025-06-23T01:52:33.397798Z",
  "github_url": "https://github.com/ca-risken/risken-mcp-server",
  "repository": {
    "name": "risken-mcp-server",
    "full_name": "ca-risken/risken-mcp-server",
    "description": "RISKEN's official MCP Server",
    "html_url": "https://github.com/ca-risken/risken-mcp-server",
    "created_at": "2025-04-12T14:06:30Z",
    "updated_at": "2025-06-11T01:24:39Z",
    "pushed_at": "2025-06-10T17:17:53Z",
    "size": 275,
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Go",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "ca-risken",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/88366693?v=4",
      "html_url": "https://github.com/ca-risken"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 0,
    "languages": {
      "Go": 80472,
      "HCL": 11050,
      "Makefile": 5424,
      "Shell": 431,
      "Dockerfile": 327
    },
    "language_percentages": {
      "Go": 82.36,
      "HCL": 11.31,
      "Makefile": 5.55,
      "Shell": 0.44,
      "Dockerfile": 0.33
    },
    "pull_requests_count": 22,
    "contributors_count": 1
  },
  "readme": "# RISKEN MCP Server\n\n![Remote MCP Server](images/remote-mcp.png)\n\nThe RISKEN MCP Server is a [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) server that provides seamless integration with RISKEN APIs, enabling advanced automation and interaction capabilities for developers and tools.\n\n## Use Cases\n\nBy connecting the RISKEN MCP server to your everyday AI tools, you can perform various operations such as:\n\n- Checking active alerts in RISKEN and monitoring their status.\n- Searching, analyzing, and reviewing findings including their explanations and remediation steps.\n- Archiving resolved findings to maintain a clean and organized security posture.\n\n## Prerequisites\n\n1. To run the server in a container, you will need to have [Docker](https://www.docker.com/) installed.\n2. Once Docker is installed, you will also need to ensure Docker is running.\n3. You will also need to have a [RISKEN Access Token](https://docs.security-hub.jp/en/risken/access_token/).\n\n## Local MCP Server\n\nPlease add the following MCP server configuration to your MCP Client ([Claude Desktop](https://claude.ai/download) or [Cursor](https://www.cursor.com/)) settings.\n\n```json\n{\n  \"mcpServers\": {\n    \"risken\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"RISKEN_ACCESS_TOKEN\",\n        \"-e\",\n        \"RISKEN_URL\",\n        \"ghcr.io/ca-risken/risken-mcp-server\",\n        \"stdio\"\n      ],\n      \"env\": {\n        \"RISKEN_URL\": \"http://localhost:8000\",\n        \"RISKEN_ACCESS_TOKEN\": \"your_access_token\"\n      }\n    }\n  }\n}\n```\n\n## Remote MCP Server\n\nRISKEN MCP Server supports Streamable HTTP.\n\n### on Local\n\n```bash\ndocker run -it --rm \\\n  -e RISKEN_URL=http://localhost:8000 \\\n  -e RISKEN_ACCESS_TOKEN=xxxxxx \\\n  -p 8080:8080 \\\n  ghcr.io/ca-risken/risken-mcp-server http\n```\n\n### on Cloud Run\n\nYou can deploy the server on Google Cloud Run with Terraform.\n\n1. Visit [terraform/examples/googlecloud](terraform/examples/googlecloud) and deploy the server on Google Cloud Run with Terraform.\n\n2. Add the following MCP server configuration to your MCP Client ([Claude Desktop](https://claude.ai/download) or [Cursor](https://www.cursor.com/)) settings.\n\n**Note:** Since most MCP clients only allow stdio connections, it is currently necessary to use [mcp-remote](https://github.com/geelen/mcp-remote) as a proxy to connect to remote MCP servers.\n\n#### Claude Desktop, Cursor ...\n\n```json\n{\n  \"mcpServers\": {\n    \"risken\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"http://localhost:8080/mcp\",\n        \"--header\",\n        \"RISKEN-ACCESS-TOKEN:${RISKEN_ACCESS_TOKEN}\"\n      ],\n      \"env\": {\n        \"RISKEN_ACCESS_TOKEN\": \"xxxxxx\"\n      }\n    }\n  }\n}\n```\n\n## Third-Party Authorization (OAuth2.1)\n\nRISKEN MCP Server supports Third-Party Authorization (OAuth2.1) that enables secure authentication through external Identity Providers (IdP).\n\n### Overview\n\nThe OAuth2.1 implementation follows the [MCP Authorization specification](https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization#2-10-third-party-authorization-flow) with Third-Party Authorization Flow, where:\n\n1. **MCP Client** initiates OAuth flow with MCP Server\n2. **MCP Server** acts as authorization server and redirects user to IdP\n3. **IdP** authenticates user and returns to MCP Server\n4. **MCP Server** issues access token for MCP Client\n5. **MCP Client** uses access token for subsequent MCP requests\n\n\n### OAuth Flow\n\n```mermaid\nsequenceDiagram\n    participant Browser as User Browser\n    participant Client as MCP Client\n    participant Server as MCP Server\n    participant IdP as Identity Provider\n\n    Client->>Server: POST /mcp (no auth)\n    Server->>Client: 401 Unauthorized + WWW-Authenticate\n    Client->>Server: GET /.well-known/oauth-authorization-server\n    Server->>Client: Authorization metadata\n    Client->>Server: POST /register (Dynamic Client Registration)\n    Server->>Client: client_id\n    Client->>Browser: Open authorization URL\n    Browser->>IdP: User authentication\n    IdP->>Server: Authorization callback\n    Server->>IdP: Exchange code for token\n    Server->>Client: Authorization complete\n    Client->>Server: POST /mcp (with Bearer token)\n    Server->>Client: MCP response\n```\n\n### Configuration\n\n#### MCP Server Configuration\n\nThe following environment variables are required for OAuth2.1 support:\n\n| Variable | Required | Description | Example |\n|----------|----------|-------------|---------|\n| `MCP_SERVER_URL` | âœ… | Public URL of MCP server | `http://localhost:8080` |\n| `AUTHZ_METADATA_ENDPOINT` | âœ… | IdP's OAuth metadata endpoint | `https://your-idp.com/.well-known/oauth-authorization-server` |\n| `CLIENT_ID` | âœ… | OAuth client ID for IdP | `your-client-id` |\n| `CLIENT_SECRET` | âœ… | OAuth client secret for IdP | `your-client-secret` |\n| `JWT_SIGNING_KEY` | âœ… | Signing key for session JWT tokens | `your-256-bit-secret` |\n\n#### Identity Provider Requirements\n\nYour IdP must support the following OAuth features:\n\n| Feature | Requirement | Description |\n|---------|-------------|-------------|\n| **Authorization Code Flow** | âœ… **REQUIRED** | Standard OAuth authorization code grant |\n| **JWKS Endpoint** | âœ… **REQUIRED** | JSON Web Key Set for JWT validation |\n| **Metadata Discovery** | âœ… **REQUIRED** | RFC 8414 Authorization Server Metadata |\n| **PKCE (S256)** | ðŸŸ¡ **OPTIONAL** | Enhanced security, but not required for IdP |\n\n**Note**: PKCE is **REQUIRED** between MCP Client and MCP Server (per MCP specification), but the MCP Server can use traditional OAuth 2.0 with the IdP.\n\n## Tools\n\n### Project\n\n- **get_project** - Get RISKEN project.\n\n### Finding\n\n- **search_finding** - Search RISKEN findings.\n  - `finding_id` - Search by finding ID.\n  - `alert_id` - Search by alert ID.\n  - `data_source` - Search by data source.\n  - `resource_name` - Search by resource name.\n  - `from_score` - Search by minimum score.\n    - `0.0` ~ `0.3` - Low\n    - `0.3` ~ `0.6` - Medium\n    - `0.6` ~ `0.8` - High\n    - `0.8` ~ `1.0` - Critical\n  - `status` - Search by status.\n    - `0` - All\n    - `1` - Active (default)\n    - `2` - Pending\n  - `offset` - Search by offset.\n  - `limit` - Search by limit.\n\n- **archive_finding** - Archive RISKEN finding.\n  - `finding_id` - Archive by finding ID.\n  - `note` - Note.\n\n### Alert\n\n- **search_alert** - Search RISKEN alert.\n  - `status` - Search by status.\n    - `1` - Active\n    - `2` - Pending\n    - `3` - Deactive (already closed)\n\n## Resources\n\n### Finding Contents\n\n- **Get Finding Contents** Retrieves the content of a specific finding.\n  - **Template**: `finding://{project_id}/{finding_id}`\n  - **Parameters**:\n    - `project_id`: The ID of the project.\n    - `finding_id`: The ID of the finding.\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n"
}