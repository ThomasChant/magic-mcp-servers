{
  "mcp_name": "jdubois/azure-cli-mcp",
  "mcp_description": "A wrapper around the Azure CLI command line that allows you to talk directly to Azure",
  "mcp_id": "jdubois_azure-cli-mcp",
  "fetch_timestamp": "2025-06-23T05:21:13.625733Z",
  "github_url": "https://github.com/jdubois/azure-cli-mcp",
  "repository": {
    "name": "azure-cli-mcp",
    "full_name": "jdubois/azure-cli-mcp",
    "description": "Talk with Azure using MCP",
    "html_url": "https://github.com/jdubois/azure-cli-mcp",
    "created_at": "2025-03-28T16:51:51Z",
    "updated_at": "2025-06-22T22:32:50Z",
    "pushed_at": "2025-05-02T11:09:42Z",
    "size": 39188,
    "stargazers_count": 73,
    "watchers_count": 73,
    "forks_count": 12,
    "open_issues_count": 0,
    "language": "Java",
    "license": "MIT License",
    "topics": [
      "azure",
      "mcp",
      "mcp-server"
    ],
    "default_branch": "main",
    "owner": {
      "login": "jdubois",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/316835?v=4",
      "html_url": "https://github.com/jdubois"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 12,
    "subscribers_count": 2,
    "languages": {
      "Java": 16276,
      "Dockerfile": 1334,
      "HTML": 1143,
      "CSS": 287,
      "JavaScript": 34
    },
    "language_percentages": {
      "Java": 85.33,
      "Dockerfile": 6.99,
      "HTML": 5.99,
      "CSS": 1.5,
      "JavaScript": 0.18
    },
    "pull_requests_count": 4,
    "contributors_count": 4,
    "latest_release": {
      "tag_name": "v0.1.2",
      "name": "v0.1.2",
      "published_at": "2025-05-02T11:10:17Z",
      "body": null,
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.1.2",
        "commit_sha": "88cb6b55063aacb3657c6e032d8baf930f2a4275"
      },
      {
        "name": "v0.1.1",
        "commit_sha": "a16b71290071cf257b7699c4a908d6731ca7f007"
      },
      {
        "name": "v0.1.0",
        "commit_sha": "54a942b9373dc921e41a81ac7d2578db7744037b"
      },
      {
        "name": "v0.0.11",
        "commit_sha": "7ae4ccecf9ed29d343e7d1db4ac9c975f94da35d"
      },
      {
        "name": "v0.0.10",
        "commit_sha": "535c9e04ea06461175251f6a8a1dd4577857363c"
      },
      {
        "name": "v0.0.9",
        "commit_sha": "607312dc70fb84ddbca29a306f057aa662ed5b34"
      },
      {
        "name": "v0.0.8",
        "commit_sha": "8fc834772a2f86c60f67f6154be82a3349015a39"
      },
      {
        "name": "v0.0.7",
        "commit_sha": "ab6e3c56ae1126b4f1d3411d199736d5b83748a0"
      },
      {
        "name": "v0.0.6",
        "commit_sha": "35ceb164da546226ba8416937fa35fb80e14398b"
      },
      {
        "name": "v0.0.5",
        "commit_sha": "596c4f25fa33f17150ce773ea483e5df1a8172d8"
      }
    ],
    "latest_version": "v0.1.2"
  },
  "readme": "# Azure CLI MCP Server\n\nThis is an [MCP Server](https://modelcontextprotocol.io) that wraps the [Azure CLI](https://learn.microsoft.com/en-us/cli/azure/), adds a nice prompt to improve how it works, and exposes it.\n\n[![smithery badge](https://smithery.ai/badge/@jdubois/azure-cli-mcp)](https://smithery.ai/server/@jdubois/azure-cli-mcp)\n\n## Demos\n\n### Short 2-minute demo with Claude Desktop\n\n[![Short Demo](https://img.youtube.com/vi/y_OexCcfhW0/0.jpg)](https://www.youtube.com/watch?v=y_OexCcfhW0)\n\n### Complete 18-minute demo with VS Code\n\n[![Complete Demo](https://img.youtube.com/vi/NZxTr32A9lY/0.jpg)](https://www.youtube.com/watch?v=NZxTr32A9lY)\n\n## What can it do?\n\nIt has access to the full Azure CLI, so it can do anything the Azure CLI can do. Here are a few scenarios:\n\n- Listing your resources and checking their configuration. For example, you can get the rate limits of a model deployed\n  to Azure OpenAI.\n- Fixing some configuration or security issues. For example, you can ask it to secure a Blob Storage account.\n- Creating resources. For example, you can ask it to create an Azure Container Apps instance, an Azure Container Registry, and connect them using managed identity.\n\n## Is it safe to use?\n\nAs the MCP server is driven by an LLM, we would recommend to be careful and validate the commands it generates. Then, if\nyou're using a good LLM like Claude 3.7 or GPT-4o, which has\nexcellent training data on Azure, our experience has been very good.\n\nPlease read our [License](LICENSE) which states that \"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND\",\nso you use this MCP server at your own risk.\n\n## Is it secured, and should I run this on a remote server?\n\nShort answer: **NO**.\n\nThis MCP server runs `az` commands for you, and could be hacked by an attacker to run any other command. The current\nimplementation, as with most MCP servers at the moment, only works with the `stio` transport:\nit's supposed to run locally on your machine, using your Azure CLI credentials, as you would do by yourself.\n\nIn the future, it's totally possible to have this MCP server support the `http` transport, and an Azure token\nauthentication, so that it could be used remotely by different persons. It's a second step, that will be done once the\nMCP specification and SDK are more stable.\n\n## How do I install it?\n\n_This server can run inside a Docker container or as a Java executable JAR file._\n\nFor both options, only the `stio` transport is available. The `http` transport will be available later.\n\n### Install and configure the server with Docker\n\nCreate an Azure Service Principal and set the `AZURE_CREDENTIALS` environment variable. You can do this by running the\nfollowing command in your terminal:\n\n```bash\naz ad sp create-for-rbac --name \"azure-cli-mcp\" --role contributor --scopes /subscriptions/<your-subscription-id>/resourceGroups/<your-resource-group> --json-auth\n```\n\nThis will create a new Service Principal with the specified name and role, and output the credentials in JSON format.\n\nYou can then run the server using Docker with the following command. To authenticate, set the `AZURE_CREDENTIALS` with\nthe output of the previous command.\n\n```bash\ndocker run --rm -p 6273:6273 -e AZURE_CREDENTIALS=\"{\"clientId\":\"....\",\"clientSecret\":\"....\",...}\" -i ghcr.io/jdubois/azure-cli-mcp:latest\n```\n\n#### Using VS Code\n\nTo use the server from VS Code:\n\n- Install GitHub Copilot\n- Install this MCP Server using the command palette: `MCP: Add Server...`\n  - The configuration connects to the server using the `stio` transport\n  - The command to run is `docker run -i --rm -e AZURE_CREDENTIALS ghcr.io/jdubois/azure-cli-mcp:latest`. You'll need to\n    set the `AZURE_CREDENTIALS` environment variable to the JSON output from the Service Principal creation, with the\n    quotes escaped: have a look below for a complete and secure example.\n- Configure GitHub Copilot to run in `Agent` mode, by clicking on the arrow at the bottom of the the chat window\n- On top of the chat window, you should see the `azure-cli-mcp` server configured as a tool\n\nYou can secure the `AZURE_CREDENTIALS` environment using the methode\ndescribed [in the documentation](https://code.visualstudio.com/docs/copilot/chat/mcp-servers#_configuration-example),\nhere is a complete example:\n\n```json\n{\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"azure-credentials\",\n      \"description\": \"Azure Credentials\",\n      \"password\": true\n    }\n  ],\n  \"servers\": {\n    \"azure-cli\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"AZURE_CREDENTIALS\",\n        \"ghcr.io/jdubois/azure-cli-mcp:latest\"\n      ],\n      \"env\": {\n        \"AZURE_CREDENTIALS\": \"${input:azure-credentials}\"\n      }\n    }\n  }\n}\n```\n\n#### Using Claude Desktop\n\nTo use the server from Claude Desktop, add the server to your `claude_desktop_config.json` file.\nThe `AZURE_CREDENTIALS` environment variable should be set to the JSON output from the Service Principal creation, with\nthe quotes escaped.\n\n```json\n{\n  \"mcpServers\": {\n    \"azure-cli\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"AZURE_CREDENTIALS\",\n        \"ghcr.io/jdubois/azure-cli-mcp:latest\"\n      ],\n      \"env\": {\n        \"AZURE_CREDENTIALS\": \"{\\\"clientId\\\":\\\"...\\\",\\\"clientSecret\\\":\\\"...\\\",...\"\n      }\n    }\n  }\n}\n```\n\n### Installation with Smithery.ai\n\nYou can install the MCP server through Smithery.ai:\n\n[![smithery badge](https://smithery.ai/badge/@jdubois/azure-cli-mcp)](https://smithery.ai/server/@jdubois/azure-cli-mcp)\n\nThis is similar to our Docker container installation above, but runs on Smithery.ai's servers. While this installation\nis initially the easiest, please note that:\n\n- You will need an `AZURE_CREDENTIALS` key, as described below in the Docker installation section, and this key\n  will be sent to Smithery.ai.\n- Smithery.ai is a third-party service, and you need to trust them to build this MCP server for you (it uses the same\n  Dockerfile as our Docker image, but isn't built by us).\n- This is still an early preview service, so we can't guarantee how it will evolve.\n\n### Install and configure the server with Java\n\nThis configuration is running the server locally. It's easier to set up than with Docker,\nbut it's less secured as it uses directly your credentials using the Azure CLI configured on your machine.\n\n- Install the Azure CLI: you can do this by following the instructions [here](https://learn.microsoft.com/en-us/cli/azure/install-azure-cli).\n- Authenticate to your Azure account. You can do this by running `az login` in your terminal.\n- Make sure you have Java 17 or higher installed. You can check this by running `java -version` in your terminal.\n\nBinaries are available on the [GitHub Release page](https://github.com/jdubois/azure-cli-mcp/releases), here's how you\ncan download the latest one with the GitHub CLI:\n\n- Download the latest release: `gh release download --repo jdubois/azure-cli-mcp --pattern='azure-cli-mcp.jar'`\n\n#### Using VS Code\n\n- Install GitHub Copilot\n- Install this MCP Server using the command palette: `MCP: Add Server...`\n  - The configuration connects to the server using the `stio` transport\n  - The command to run is `java -jar ~/Downloads/azure-cli-mcp.jar` (you need to point to the location where you\n    downloaded the `azure-cli-mcp.jar` file)\n- Configure GitHub Copilot to run in `Agent` mode, by clicking on the arrow at the bottom of the the chat window\n- On top of the chat window, you should see the `azure-cli-mcp` server configured as a tool\n\n#### Using Claude Desktop\n\nTo use the server from Claude Desktop, add the server to your `claude_desktop_config.json` file. Please note that you\nneed to point to the location where you downloaded the `azure-cli-mcp.jar` file.\n\n```json\n{\n    \"mcpServers\": {\n        \"azure-cli\": {\n            \"command\": \"java\",\n            \"args\": [\n                \"-jar\",\n              \"~/Downloads/azure-cli-mcp.jar\"\n            ]\n        }\n    }\n}\n```\n"
}