{
  "mcp_name": "jhgaylor/me_mcp_server",
  "mcp_description": "Facilitates personalized job search and profile management through a Model Context Protocol server.",
  "mcp_id": "jhgaylor_me_mcp_server",
  "fetch_timestamp": "2025-06-23T05:24:24.719332Z",
  "github_url": "https://github.com/jhgaylor/me_mcp_server",
  "repository": {
    "name": "me_mcp_server",
    "full_name": "jhgaylor/me_mcp_server",
    "description": null,
    "html_url": "https://github.com/jhgaylor/me_mcp_server",
    "created_at": "2025-04-16T05:18:11Z",
    "updated_at": "2025-05-06T14:38:54Z",
    "pushed_at": "2025-04-20T05:30:30Z",
    "size": 80,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Dart",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "jhgaylor",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/1731794?v=4",
      "html_url": "https://github.com/jhgaylor"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Dart": 23580,
      "Dockerfile": 391
    },
    "language_percentages": {
      "Dart": 98.37,
      "Dockerfile": 1.63
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# Me MCP Server\n\nA MCP (Model Context Protocol) server for learning about and interacting with YOU.\n\n## Features\n\nThis MCP server provides the following capabilities:\n\n### Prompts\n- **JobSearch** - Generate job search instructions tailored to your profile with specified salary range, location, and company type preferences.\n\n### Resources\n- **Resume Text** - Access your full resume text (`candidate-info://resume`)\n- **Resume URL** - Get the URL to your resume PDF (`candidate-info://resume-url`)\n- **LinkedIn Profile URL** - Access your LinkedIn profile (`candidate-info://linkedin-url`)\n- **GitHub Profile URL** - Access your GitHub profile (`candidate-info://github-url`)\n- **Website URL** - Get your personal website URL (`candidate-info://website-url`)\n- **Website Contents** - Fetch and analyze the HTML contents of your website (`candidate-info://website-contents`)\n\n## Running the server\n\n### Using Docker\n\nThe easiest way to run the server is using Docker Compose:\n\n```bash\ndocker-compose up -d\n```\n\nThis will start the server on port 3000.\n\n## Transport Options\n\nThis MCP server supports two different transport mechanisms:\n\n### SSE (Server-Sent Events) Transport\n\nThe SSE transport allows the server to communicate over HTTP with clients that support server-sent events. This is useful for web-based clients or any client that can establish an HTTP connection.\n\nTo run the server with SSE transport:\n\n```bash\ndart bin/sse_server.dart\n```\n\nThe SSE server will start on the configured host and port (default: 0.0.0.0:3000).\n\n### Stdio Transport\n\nThe Stdio transport uses standard input/output streams for communication. This is ideal for integration with desktop clients like Claude Desktop that launch the MCP server as a subprocess.\n\nTo run the server with Stdio transport:\n\n```bash\ndart bin/stdio_server.dart\n```\n\n#### Configuring Claude Desktop\n\nTo use the MCP server with Claude Desktop, add the following to your Claude configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"me_mcp\": {\n      \"command\": \"dart\",\n      \"args\": [\n        \"path/to/bin/stdio_server.dart\"\n      ]\n    }\n  }\n}\n```\n\nAlternatively, you can compile the server to a standalone executable:\n\n```bash\ndart compile exe bin/stdio_server.dart -o ./mcp_server\n```\n\nAnd then configure Claude Desktop to use the compiled version:\n\n```json\n{\n  \"mcpServers\": {\n    \"me_mcp\": {\n      \"command\": \"path/to/mcp_server\"\n    }\n  }\n}\n```\n\n## Configuration\n\nThe server uses a hybrid configuration approach:\n\n1. **Server settings** - Configured using environment variables\n2. **Personal information** - Configured using a `me.yaml` file\n\n### Environment Variables\n\nServer-related settings are configured through environment variables:\n\n| Variable | Description | Default |\n|----------|-------------|---------|\n| HOST | Host address to bind to | 0.0.0.0 |\n| PORT | Port to listen on | 3000 |\n| ENVIRONMENT | Environment (development, production) | development |\n\n### YAML Configuration\n\nPersonal information and job search preferences are configured through the `me.yaml` file.\n\n#### Initializing Configuration\n\nTo create a default configuration file:\n\n```bash\ndart bin/me_init.dart [path]\n```\n\nThis will generate a `me.yaml` file (or at the specified path) with default values that you can edit.\n\n#### Example Configuration\n\n```yaml\n# Personal information\nname: Jake Gaylor\nresume_url: https://example.com/resume.pdf\nwebsite_url: https://jakegaylor.com\nlinkedin_url: https://linkedin.com/in/jakegaylor\ngithub_url: https://github.com/jhgaylor\n\n# Optional content (can be loaded from URLs above if not specified)\nresume_text: |\n  Jake Gaylor\n  Software Engineer\n\n  Experience:\n  - Example Company (2020-Present)\n    Senior Software Engineer\n  \n  Skills:\n  - Dart, JavaScript, TypeScript\n  - Cloud Infrastructure\n\nwebsite_text: \"\"  # Will be fetched from website_url if empty\n\n# Job search preferences\njob_search:\n  min_salary: 150000\n  max_salary: 250000\n  location: Remote\n  company_type: Startup\n  industry: Technology\n  description: \"Looking for senior engineering roles with focus on cloud infrastructure\"\n```\n\n### YAML Configuration Options\n\n| Section | Option | Description | Default |\n|---------|--------|-------------|---------|\n| - | name | Your profile/candidate name | Jane Smith |\n| - | resume_url | URL to the resume | https://example.com/resume.pdf |\n| - | linkedin_url | URL to LinkedIn profile | https://linkedin.com/in/example |\n| - | github_url | URL to GitHub profile | https://github.com/example |\n| - | website_url | URL to personal website | https://example.com |\n| - | resume_text | Full text content of the resume | An empty resume. |\n| job_search | min_salary | Minimum salary for job search | 100000 |\n| job_search | max_salary | Maximum salary for job search | 500000 |\n| job_search | location | Preferred job location | Remote |\n| job_search | company_type | Preferred company type | Startup |\n| job_search | industry | Preferred industry | Technology |\n| job_search | description | Additional job search details | \"\" |\n\n### Type-Safe Configuration (For Developers)\n\nThe YAML configuration is parsed into strongly-typed Dart objects:\n\n```dart\nimport 'package:me_mcp_server/me_mcp_server.dart';\n\n// Create a configuration programmatically\nfinal config = MeConfig(\n  name: 'Jane Smith',\n  resumeUrl: 'https://example.com/resume.pdf',\n  jobSearch: JobSearchConfig(\n    minSalary: 150000,\n    maxSalary: 250000,\n    location: 'Remote',\n  ),\n);\n\n// Convert to YAML\nfinal yamlString = configToYaml(config);\n```\n\n### Running Locally\n\nTo run the server locally:\n\n1. Ensure you have Dart SDK 3.7.2 or later installed\n2. Install dependencies: `dart pub get`\n3. Create a `me.yaml` file in the root directory with your configuration\n   ```bash\n   dart bin/me_init.dart\n   ```\n4. Set any environment variables as needed\n5. Run the server with your preferred transport: \n   - SSE: `dart bin/sse_server.dart`\n   - Stdio: `dart bin/stdio_server.dart`\n\n## Development\n\n### Building the Docker Image\n\n```bash\ndocker build -t jhgaylor/me-mcp-server:local .\n```\n\n### Running the Docker Image\n\n```bash\ndocker run -p 3000:3000 \\\n  -v $(pwd)/me.yaml:/app/me.yaml \\\n  -e PORT=3000 \\\n  -e ENVIRONMENT=production \\\n  jhgaylor/me-mcp-server:local\n```\n\n## Docker Configuration\n\nWhen using Docker, you can:\n\n1. **Mount your me.yaml file**:\n   ```bash\n   -v $(pwd)/me.yaml:/app/me.yaml\n   ```\n\n2. **Set environment variables**:\n   ```bash\n   -e HOST=0.0.0.0 -e PORT=3000 -e ENVIRONMENT=production\n   ```\n\n3. **Use docker-compose.yml**:\n   ```yaml\n   services:\n     mcp-server:\n       volumes:\n         - ./me.yaml:/app/me.yaml\n       environment:\n         - HOST=0.0.0.0\n         - PORT=3000\n         - ENVIRONMENT=production\n   ```\n\n## Deployment Examples\n\n### Deploying to a Custom Domain\n\nYou can deploy this MCP server to your own domain. Here's an example of a deployment that runs at `mcp.jakegaylor.com`:\n\n- GitHub Repository: [jhgaylor/jakegaylor-com-mcp-server](https://github.com/jhgaylor/jakegaylor-com-mcp-server)\n\n"
}