{
  "mcp_name": "Eliran79/Vulnerable-file-reader-server",
  "mcp_description": "A Python MCP server showcasing command injection vulnerabilities for educational purposes, highlighting the risks of improper input sanitization.",
  "mcp_id": "Eliran79_Vulnerable-file-reader-server",
  "fetch_timestamp": "2025-06-23T02:50:34.806284Z",
  "github_url": "https://github.com/Eliran79/Vulnerable-file-reader-server",
  "repository": {
    "name": "Vulnerable-file-reader-server",
    "full_name": "Eliran79/Vulnerable-file-reader-server",
    "description": "A deliberately vulnerable MCP server demonstrating command injection flaws. This Python implementation shows how lack of input sanitization in file paths leads to critical security vulnerabilities allowing attackers to execute arbitrary commands. For educational purposes only - demonstrates both the vulnerability and proper security practices.",
    "html_url": "https://github.com/Eliran79/Vulnerable-file-reader-server",
    "created_at": "2025-04-27T06:43:28Z",
    "updated_at": "2025-05-14T05:52:26Z",
    "pushed_at": "2025-04-29T19:20:36Z",
    "size": 17,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "Eliran79",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/18571653?v=4",
      "html_url": "https://github.com/Eliran79"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 26702
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# Command Injection Vulnerability in MCP File Reader\n\nThis repository demonstrates a critical command injection vulnerability in a Python MCP (Model Context Protocol) server implementation. The vulnerability allows attackers to execute arbitrary shell commands on the host system by manipulating the file path parameter.\n\n## The Vulnerability\n\nThe vulnerability exists in the `read_file` function which is intended to read files from a \"safe\" directory but contains a dangerous implementation flaw:\n\n```python\ncommand = f\"cat {file_name}\"\nresult = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT)\n```\n\nThis code is vulnerable because:\n\n1. It uses `shell=True` which invokes a shell to execute the command\n2. It directly interpolates user input (`file_name`) into the command string without proper sanitization\n3. It performs only superficial validation on the input path\n\nA simple semantic difference between using quotes around the filename (`'file_name'`) and not using quotes (`file_name`) exposes the entire system to command execution.\n\n## Installation\n\n### Prerequisites\n\n- Python 3.12 or higher\n- MCP library version 1.6.0\n\n### Setup\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/Eliran79/Vulnerable-file-reader-server.git\n   cd Vulnerable-file-reader-server\n   ```\n\n2. Install the MCP server:\n   ```bash\n   mcp install main.py\n   ```\n\n3. Configure Claude Desktop to use your MCP server by editing `~/.config/claude-desktop/claude_desktop_config.json`:\n   ```json\n   {\n     \"mcpServers\": {\n       \"file-reader\": {\n         \"command\": \"/ABSOLUTE/PATH/TO/uv\",\n         \"args\": [\n           \"--directory\",\n           \"/data/git/file_reader_server\",\n           \"/usr/bin/uv\",\n           \"run,--with,mcp,mcp,run,main.py\"\n         ]\n       }\n     }\n   }\n   ```\n   \n   Be sure to replace `/ABSOLUTE/PATH/TO/uv` with the actual path to your uv executable and adjust the directory path if needed.\n\n4. Start the MCP server in development mode:\n   ```bash\n   mcp dev main.py\n   ```\n\n## Demonstration\n\n1. In a separate terminal, install and run the MCP inspector:\n   ```bash\n   pip install mcp-inspector\n   mcp-inspector\n   ```\n\n2. Connect to the server in the MCP Inspector GUI:\n   - Set Transport Type to \"STDIO\"\n   - Set Command to: `run --with mcp run main.py`\n   - Click \"Restart\"\n\n3. Exploit the vulnerability:\n   - Go to the \"Tools\" tab\n   - Find the \"read_file\" tool\n   - In the \"file_name\" field, enter:\n     ```\n     /tmp/safe/test.txt; whoami\n     ```\n   - Click \"Run Tool\"\n\n4. You should see the contents of test.txt followed by your username, demonstrating successful command execution.\n\n## Additional Exploitation Examples\n\nHere are more command injection payloads to try:\n\n```\n/tmp/safe/test.txt; id\n/tmp/safe/test.txt; ls -la /etc\n/tmp/safe/test.txt; cat /etc/passwd\n/tmp/safe/test.txt; echo $(hostname)\n/tmp/safe/test.txt; find / -name \"*.conf\" 2>/dev/null | head -5\n```\n\n## Proper Fix\n\nTo fix this vulnerability, never use `shell=True` with user-provided input. Instead:\n\n```python\n# SECURE: Use a list of arguments instead of shell=True\nresult = subprocess.check_output(['cat', file_name], shell=False)\n\n# OR, if shell=True is necessary, properly quote the argument:\nimport shlex\nresult = subprocess.check_output(f\"cat {shlex.quote(file_name)}\", shell=True)\n\n# AND perform proper path validation:\nimport os\nsafe_dir_resolved = os.path.abspath(SAFE_DIRECTORY)\nrequested_path_resolved = os.path.abspath(file_name)\nif not requested_path_resolved.startswith(safe_dir_resolved):\n    return f\"Error: Access denied. Path traversal attempt detected.\"\n```\n\n## Warning\n\n⚠️ **FOR EDUCATIONAL PURPOSES ONLY**: This implementation contains deliberate security vulnerabilities. Never use this code in a production environment or on any system that contains sensitive information."
}