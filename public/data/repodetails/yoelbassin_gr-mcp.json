{
  "mcp_name": "yoelbassin/gnuradioMCP",
  "mcp_description": "🐍 📟 🏠 - An MCP server for GNU Radio that enables LLMs to autonomously create and modify RF `.grc` flowcharts.",
  "mcp_id": "yoelbassin_gr-mcp",
  "fetch_timestamp": "2025-06-23T09:41:06.914916Z",
  "github_url": "https://github.com/yoelbassin/gnuradioMCP",
  "repository": {
    "name": "gr-mcp",
    "full_name": "yoelbassin/gr-mcp",
    "description": "MCP server for GNU Radio",
    "html_url": "https://github.com/yoelbassin/gr-mcp",
    "created_at": "2025-04-26T01:19:37Z",
    "updated_at": "2025-06-20T19:05:55Z",
    "pushed_at": "2025-05-12T20:40:42Z",
    "size": 525,
    "stargazers_count": 6,
    "watchers_count": 6,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "GNU General Public License v3.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "yoelbassin",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/46793414?v=4",
      "html_url": "https://github.com/yoelbassin"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 27065
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 2
  },
  "readme": "# GR-MCP: A gnuradio MCP Server\n\n[![Python Version](https://img.shields.io/badge/python-3.13%2B-blue.svg)](https://www.python.org/downloads/release/python-3130/)\n\n\n**GNURadio MCP Server** is a modern, extensible Machine Control Protocol (MCP) server for [GNURadio](https://www.gnuradio.org/), enabling programmatic, automated, and AI-driven creation of GNURadio flowgraphs. Designed for seamless integration with Large Language Models (LLMs), automation frameworks, and custom clients, it empowers you to generate `.grc` files and control SDR workflows at scale.\n\n> **Why GNURadio MCP Server?**\n> - Automate SDR workflows and flowgraph generation\n> - Integrate with LLMs, bots, and custom tools\n> - Build, modify, and validate flowgraphs programmatically\n> - Save time and reduce manual errors in SDR prototyping\n\n\n## Features\n- 🌐 **MCP API**: Exposes a robust MCP interface for GNURadio\n- 🛠️ **Programmatic Flowgraph Creation**: Build, edit, and save `.grc` files from code or automation\n- 🤖 **LLM & Automation Ready**: Designed for AI and automation integration\n- 🧩 **Extensible**: Modular architecture for easy extension and customization\n- 📝 **Example Flowgraphs**: Includes ready-to-use `.grc` examples in the `misc/` directory\n- 🧪 **Tested**: Comprehensive unit tests with `pytest`\n\n\n## Quickstart\n\n### Requirements\n- Python >= 3.13\n- GNURadio (Tested with GNURadio Companion v3.10.12.0)\n- UV\n\n### Usage\n1. **Clone the repository**\n```bash\ngit clone https://github.com/yoelbassin/gr-mcp\n```\n\n2. [**Install GNURadio**](https://wiki.gnuradio.org/index.php/InstallingGR)\n\n3. **Set up a UV environment**\n```bash\ncd gr-mcp\nuv venv --system-site-packages\n```\n   > The `--system-site-packages` flag is required because GNURadio installs the `gnuradio` Python package globally.\n\n4. **Add the MCP server configuration to your client configuration.** For example, for Claude Desktop or Cursor:\n```json\n\"mcpServers\": {\n    \"gr-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/gr-mcp\",\n        \"run\",\n        \"main.py\"\n      ]\n    }\n  }\n```\n\n## Development\nInstall development dependencies and run tests with:\n```bash\npip install -e \".[dev]\"\npytest\n```\n\n\n## Project Status\n**In active development.** Core server functionality is available, but the API and features are evolving. Your feedback and contributions are highly valued!\n"
}