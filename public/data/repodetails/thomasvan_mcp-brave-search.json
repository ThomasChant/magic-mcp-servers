{
  "mcp_name": "thomasvan/mcp-brave-search",
  "mcp_description": "Facilitates AI assistant integration with Brave Search through a Model Context Protocol server.",
  "mcp_id": "thomasvan_mcp-brave-search",
  "fetch_timestamp": "2025-06-23T08:54:36.181763Z",
  "github_url": "https://github.com/thomasvan/mcp-brave-search",
  "repository": {
    "name": "mcp-brave-search",
    "full_name": "thomasvan/mcp-brave-search",
    "description": null,
    "html_url": "https://github.com/thomasvan/mcp-brave-search",
    "created_at": "2025-04-26T04:13:08Z",
    "updated_at": "2025-04-26T10:50:51Z",
    "pushed_at": "2025-04-26T10:50:48Z",
    "size": 37,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "thomasvan",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/9481872?v=4",
      "html_url": "https://github.com/thomasvan"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 24588,
      "Dockerfile": 1323
    },
    "language_percentages": {
      "Python": 94.89,
      "Dockerfile": 5.11
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# Brave Search MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@thomasvan/mcp-brave-search)](https://smithery.ai/server/@thomasvan/mcp-brave-search)\n\nThis project implements a Model Context Protocol (MCP) server for Brave Search, allowing integration with AI assistants like Claude.\n\n## Prerequisites\n\n- Python 3.11+\n- [uv](https://github.com/astral-sh/uv) - A fast Python package installer and resolver\n\n## Installation\n\n### Installing via Smithery\n\nTo install Brave Search MCP server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@thomasvan/mcp-brave-search):\n\n```bash\nnpx -y @smithery/cli install @thomasvan/mcp-brave-search --client claude\n```\n\n### Manual Installation\n1. Clone the repository:\n   ```\n   git clone https://github.com/thomasvan/mcp-brave-search.git\n   cd mcp-brave-search\n   ```\n\n2. Create a virtual environment and install dependencies using uv:\n   ```\n   uv venv\n   source .venv/bin/activate  # On Windows, use: .venv\\Scripts\\activate\n   uv pip install -r requirements.txt\n   ```\n\n3. Set up your Brave Search API key:\n   ```\n   export BRAVE_API_KEY=your_api_key_here\n   ```\n   On Windows, use: `set BRAVE_API_KEY=your_api_key_here`\n\n## Usage\n\n1. Configure your MCP settings file (e.g., `claude_desktop_config.json`) to include the Brave Search MCP server:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"brave-search\": {\n         \"command\": \"uv\",\n         \"args\": [\n           \"--directory\",\n           \"path-to\\\\mcp-python\\\\mcp-brave-search\\\\src\",\n           \"run\",\n           \"server.py\"\n         ],\n         \"env\": {\n           \"BRAVE_API_KEY\": \"YOUR_BRAVE_API_KEY_HERE\"\n         }\n       }\n     }\n   }\n   ```\n\n   Replace `YOUR_BRAVE_API_KEY_HERE` with your actual Brave API key.\n\n2. Start the Brave Search MCP server by running your MCP-compatible AI assistant with the updated configuration.\n\n3. The server will now be running and ready to accept requests from MCP clients.\n\n4. You can now use the Brave Search functionality in your MCP-compatible AI assistant (like Claude) by invoking the available tools.\n\n## Available Tools\n\nThe server provides two main tools:\n\n1. `brave_web_search`: Performs a web search using the Brave Search API.\n2. `brave_local_search`: Searches for local businesses and places.\n\nRefer to the tool docstrings in `src/server.py` for detailed usage information.\n\n## Development\n\nTo make changes to the project:\n\n1. Modify the code in the `src` directory as needed.\n2. Update the `requirements.txt` file if you add or remove dependencies:\n   ```\n   uv pip freeze > requirements.txt\n   ```\n3. Restart the server to apply changes.\n\n## Testing\n\nThe project includes both unit tests and integration tests:\n\n### Installing Test Dependencies\n\n```bash\nuv pip install pytest pytest-asyncio pytest-cov\n```\n\n### Running Unit Tests\n\nUnit tests can be run without an API key and use mocks to simulate API responses:\n\n```bash\n# Run all unit tests\npython -m pytest tests/unit/\n\n# Run with verbose output\npython -m pytest tests/unit/ -v\n```\n\n### Running Integration Tests\n\nIntegration tests require a valid Brave API key and make real API calls:\n\n```bash\n# Run integration tests with your API key\nBRAVE_API_KEY_INTEGRATION=\"your_api_key_here\" python -m pytest tests/integration/ -v\n```\n\n### Test Coverage\n\nTo check test coverage:\n\n```bash\npython -m pytest --cov=src/mcp_brave_search\n```\n\n## Troubleshooting\n\nIf you encounter any issues:\n\n1. Ensure your Brave API key is correctly set.\n2. Check that all dependencies are installed.\n3. Verify that you're using a compatible Python version.\n4. If you make changes to the code, make sure to restart the server.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n"
}