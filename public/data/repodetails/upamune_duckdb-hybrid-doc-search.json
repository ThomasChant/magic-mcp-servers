{
  "mcp_name": "upamune/duckdb-hybrid-doc-search",
  "mcp_description": "Facilitates hybrid indexing and search of Markdown documents using DuckDB, integrating full-text and vector search capabilities with AI coding agents via an MCP stdio server.",
  "mcp_id": "upamune_duckdb-hybrid-doc-search",
  "fetch_timestamp": "2025-06-23T09:12:37.049067Z",
  "github_url": "https://github.com/upamune/duckdb-hybrid-doc-search",
  "repository": {
    "name": "duckdb-hybrid-doc-search",
    "full_name": "upamune/duckdb-hybrid-doc-search",
    "description": null,
    "html_url": "https://github.com/upamune/duckdb-hybrid-doc-search",
    "created_at": "2025-04-28T16:09:29Z",
    "updated_at": "2025-05-26T05:05:37Z",
    "pushed_at": "2025-05-26T06:19:01Z",
    "size": 267,
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks_count": 0,
    "open_issues_count": 1,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "upamune",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/8219560?v=4",
      "html_url": "https://github.com/upamune"
    },
    "has_issues": true,
    "has_projects": false,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 72156,
      "Dockerfile": 603
    },
    "language_percentages": {
      "Python": 99.17,
      "Dockerfile": 0.83
    },
    "pull_requests_count": 17,
    "contributors_count": 1,
    "latest_release": {
      "tag_name": "v0.1",
      "name": "First Release",
      "published_at": "2025-05-26T06:19:01Z",
      "body": "<!-- Release notes generated using configuration in .github/release.yml at main -->\r\n\r\n\r\n\r\n**Full Changelog**: https://github.com/upamune/duckdb-hybrid-doc-search/compare/v0.0.8...v0.1",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.1",
        "commit_sha": "531e062405572723096738c19da0cb3164de720d"
      },
      {
        "name": "v0.0.8",
        "commit_sha": "7ef15bafcd677b9b2f29500e8fb4f80649854b2b"
      },
      {
        "name": "v0.0.7",
        "commit_sha": "27912c374ceac3ab2b4a7ffdf230dcaf9af3151a"
      },
      {
        "name": "v0.0.6",
        "commit_sha": "b81eb60981a34d76aead01465b871eaba07c09c3"
      },
      {
        "name": "v0.0.5",
        "commit_sha": "2278b83fdf4352e5549296380663ffd576cdbade"
      },
      {
        "name": "v0.0.4",
        "commit_sha": "d6faaba8e271b377faeba2f4e0e30b792acef546"
      },
      {
        "name": "v0.0.3",
        "commit_sha": "913c31d44d10ee6b74c01780a28d72ef85303990"
      },
      {
        "name": "v0.0.2",
        "commit_sha": "0f63b8b97eeb53a7879d7295eb7025dc7ef0e26f"
      },
      {
        "name": "v0.0.1",
        "commit_sha": "8c763201552839f98db800d87e0213a6fadfbc03"
      }
    ],
    "latest_version": "v0.1"
  },
  "readme": "# duckdb-hybrid-doc-search\n\nA tool for hybrid indexing of internal documents managed in Markdown using DuckDB with full-text search (FTS) + vector search (VSS), and making them callable from AI coding agents as an MCP stdio server.\n\n## Features\n\n- Advanced splitting and indexing of Markdown documents\n- Hybrid search combining full-text search (FTS) and vector search (VSS)\n- High-precision search using Japanese morphological analysis\n- Search result re-ranking using CrossEncoder\n- Integration with AI agents via MCP stdio server\n\n## Usage\n\n### Creating an Index\n\n```bash\nduckdb-hybrid-doc-search index docs/ handbook/ \\\n    --db index.duckdb\n```\n\nTo use a different model, re-run the index command with a different model specified using the --embedding-model parameter.\n\n```bash\nduckdb-hybrid-doc-search index docs/ handbook/ \\\n    --db index.duckdb \\\n    --embedding-model cl-nagoya/ruri-v3-310m\n```\n\nYou can also trim a prefix from file paths during indexing, which is useful when using Docker:\n\n```bash\nduckdb-hybrid-doc-search index docs/ handbook/ \\\n    --db index.duckdb \\\n    --trim-path-prefix \"/app/\"\n```\n\n### Starting the Server\n\nBy default, the server uses STDIO transport:\n\n```bash\nduckdb-hybrid-doc-search serve --db index.duckdb\n```\n\nYou can customize the MCP tool name and description:\n\n```bash\nduckdb-hybrid-doc-search serve --db index.duckdb \\\n    --tool-name \"my_search\" \\\n    --tool-description \"Search my documentation\"\n```\n\n#### HTTP Transport Support\n\nThe server also supports HTTP-based transport:\n\n```bash\nduckdb-hybrid-doc-search serve --db index.duckdb \\\n    --transport streamable-http \\\n    --host 127.0.0.1 \\\n    --port 8765 \\\n    --path /mcp\n```\n\n### Changing the Model\n\n\n## Docker\n\nYou can also use the Docker image:\n\n```bash\ndocker pull ghcr.io/upamune/duckdb-hybrid-doc-search:latest\n```\n\n### Creating an Index with Docker\n\n```bash\n# Mount document directories and create an index\ndocker run -v /path/to/docs:/docs -v /path/to/output:/output \\\n    ghcr.io/upamune/duckdb-hybrid-doc-search:latest \\\n    index /docs --db /output/index.duckdb --embedding-model cl-nagoya/ruri-v3-310m\n```\n\n### Starting the MCP Server with Docker\n\n#### STDIO Transport (Default)\n\n```bash\n# Mount only the index.duckdb file and start the server with STDIO transport\ndocker run -v /path/to/index.duckdb:/app/index.duckdb \\\n    ghcr.io/upamune/duckdb-hybrid-doc-search:latest \\\n    serve --db /app/index.duckdb --rerank-model cl-nagoya/ruri-v3-reranker-310m\n\n# With custom tool name and description\ndocker run -v /path/to/index.duckdb:/app/index.duckdb \\\n    ghcr.io/upamune/duckdb-hybrid-doc-search:latest \\\n    serve --db /app/index.duckdb --rerank-model cl-nagoya/ruri-v3-reranker-310m \\\n    --tool-name \"my_search\" --tool-description \"Search my documentation\"\n```\n\n#### HTTP Transport\n\n```bash\n# Using Streamable HTTP transport\ndocker run -v /path/to/index.duckdb:/app/index.duckdb -p 8765:8765 \\\n    ghcr.io/upamune/duckdb-hybrid-doc-search:latest \\\n    serve --db /app/index.duckdb --rerank-model cl-nagoya/ruri-v3-reranker-310m \\\n    --transport streamable-http --host 0.0.0.0 --port 8765 --path /mcp\n```\n\n> **Note:** When running in Docker, use `--host 0.0.0.0` to make the server accessible from outside the container.\n\n### Searching Documents with Docker\n\n```bash\n# Direct search with a specific query\ndocker run -v /path/to/index.duckdb:/app/index.duckdb -it \\\n    ghcr.io/upamune/duckdb-hybrid-doc-search:latest \\\n    search --db /app/index.duckdb --query \"your search query\" --rerank-model cl-nagoya/ruri-v3-reranker-310m\n\n# Interactive search mode (when --query is omitted)\ndocker run -v /path/to/index.duckdb:/app/index.duckdb -it \\\n    ghcr.io/upamune/duckdb-hybrid-doc-search:latest \\\n    search --db /app/index.duckdb --rerank-model cl-nagoya/ruri-v3-reranker-310m\n```\n\n#### Path Manipulation in Search Results\n\nYou can manipulate file paths in search results using the following flags:\n\n```bash\n# Remove a prefix from file paths in search results\nduckdb-hybrid-doc-search search --query \"example\" --remove-path-prefix \"/app/\"\n\n# Add a prefix to file paths in search results\nduckdb-hybrid-doc-search search --query \"example\" --add-path-prefix \"docs/\"\n\n# Combine both: first remove, then add prefix\nduckdb-hybrid-doc-search search --query \"example\" \\\n    --remove-path-prefix \"/app/\" \\\n    --add-path-prefix \"docs/\"\n```\n\nThese flags are also available for the MCP server:\n\n```bash\n# Start server with path manipulation\nduckdb-hybrid-doc-search serve --db index.duckdb \\\n    --remove-path-prefix \"/app/\" \\\n    --add-path-prefix \"docs/\"\n```\n\n### Using as an MCP Server with VS Code and Cursor\n\n#### VS Code Configuration\n\nTo use as an MCP server with VS Code:\n\n##### STDIO Transport (Default)\n\nCreate a `.vscode/mcp.json` file in your workspace:\n\n```json\n{\n  \"servers\": [\n    {\n      \"name\": \"DuckDB Hybrid Doc Search\",\n      \"description\": \"Document search server for Markdown files\",\n      \"connection\": {\n        \"type\": \"stdio\",\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"-i\",\n          \"-v\", \"${workspaceFolder}/index.duckdb:/app/index.duckdb\",\n          \"ghcr.io/upamune/duckdb-hybrid-doc-search:latest\",\n          \"serve\",\n          \"--db\", \"/app/index.duckdb\",\n          \"--rerank-model\", \"cl-nagoya/ruri-v3-reranker-310m\",\n          \"--tool-name\", \"search_documents\",\n          \"--tool-description\", \"Search for documentation\"\n        ]\n      }\n    }\n  ]\n}\n```\n\n##### HTTP Transport\n\nFor HTTP-based transport, use the `http` connection type:\n\n```json\n{\n  \"servers\": [\n    {\n      \"name\": \"DuckDB Hybrid Doc Search\",\n      \"description\": \"Document search server with HTTP transport\",\n      \"connection\": {\n        \"type\": \"http\",\n        \"url\": \"http://localhost:8765/mcp\"\n      }\n    }\n  ]\n}\n```\n\nThen start the server separately with:\n\n```bash\ndocker run -v ${workspaceFolder}/index.duckdb:/app/index.duckdb -p 8765:8765 \\\n  ghcr.io/upamune/duckdb-hybrid-doc-search:latest \\\n  serve --db /app/index.duckdb --rerank-model cl-nagoya/ruri-v3-reranker-310m \\\n  --transport streamable-http --host 0.0.0.0 --port 8765 --path /mcp\n```\n\n##### Using a Pre-indexed Image\n\n```json\n{\n  \"servers\": [\n    {\n      \"name\": \"DuckDB Hybrid Doc Search\",\n      \"description\": \"Pre-indexed document search server\",\n      \"connection\": {\n        \"type\": \"stdio\",\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"--rm\",\n          \"-i\",\n          \"your-org/doc-search-with-index:latest\"\n        ]\n      }\n    }\n  ]\n}\n```\n\n#### Cursor Configuration\n\nTo use as an MCP server with Cursor:\n\n##### STDIO Transport (Default)\n\nCreate a `mcp.json` file in your workspace or add to your global configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"duckdb-doc-search\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-v\", \"${workspaceFolder}/index.duckdb:/app/index.duckdb\",\n        \"ghcr.io/upamune/duckdb-hybrid-doc-search:latest\",\n        \"serve\",\n        \"--db\", \"/app/index.duckdb\",\n        \"--rerank-model\", \"cl-nagoya/ruri-v3-reranker-310m\",\n        \"--tool-name\", \"search_documents\",\n        \"--tool-description\", \"Search for documentation\"\n      ]\n    }\n  }\n}\n```\n\n##### HTTP Transport\n\nFor HTTP-based transport, use the `url` property:\n\n```json\n{\n  \"mcpServers\": {\n    \"duckdb-doc-search\": {\n      \"url\": \"http://localhost:8765/mcp\"\n    }\n  }\n}\n```\n\nThen start the server separately with:\n\n```bash\ndocker run -v ${workspaceFolder}/index.duckdb:/app/index.duckdb -p 8765:8765 \\\n  ghcr.io/upamune/duckdb-hybrid-doc-search:latest \\\n  serve --db /app/index.duckdb --rerank-model cl-nagoya/ruri-v3-reranker-310m \\\n  --transport streamable-http --host 0.0.0.0 --port 8765 --path /mcp\n```\n\n##### Using a Pre-indexed Image\n\n```json\n{\n  \"mcpServers\": {\n    \"duckdb-doc-search\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"your-org/doc-search-with-index:latest\"\n      ]\n    }\n  }\n}\n```\n\n## Practical Example: Creating and Distributing Docker Images with Pre-built Indexes\n\nHere's a practical example for efficiently deploying document search within your organization by pre-building indexes and embedding them in Docker images.\n\n### Creating a Docker Image with Pre-built Index\n\nWhen using Docker, file paths in the index often include the container path (like `/app/docs/`), but you might want search results to show just `docs/`. The `--trim-path-prefix` parameter solves this by removing the specified prefix from file paths during indexing.\n\nCreate a `Dockerfile.with-index-args` file:\n\n```dockerfile\n# Use base image with build arguments\nFROM ghcr.io/upamune/duckdb-hybrid-doc-search:latest AS builder\n\n# Define build arguments with defaults\nARG DOCS_DIR=./docs\nARG MODEL=cl-nagoya/ruri-v3-310m\n\n# Copy documents from specified directory\nCOPY ${DOCS_DIR} /docs\n\n# Create index with specified model\nRUN duckdb-hybrid-doc-search index /docs \\\n    --db /app/index.duckdb \\\n    --embedding-model ${MODEL} \\\n    --trim-path-prefix \"/app/\"\n\n# Create final image\nFROM ghcr.io/upamune/duckdb-hybrid-doc-search:latest\n\n# Copy index file from builder\nCOPY --from=builder /app/index.duckdb /app/index.duckdb\n\n# Set default command\nCMD [\"serve\", \"--db\", \"/app/index.duckdb\", \"--rerank-model\", \"cl-nagoya/ruri-v3-reranker-310m\", \"--tool-name\", \"search_documents\", \"--tool-description\", \"Search for documentation\"]\n```\n\nBuild and run:\n\n```bash\n# Build image for development documents\ndocker build -t your-org/doc-search-dev:latest \\\n  --build-arg DOCS_DIR=./docs-dev \\\n  --build-arg MODEL=cl-nagoya/ruri-v3-310m \\\n  -f Dockerfile.with-index-args .\n\n# Build image for production documents\ndocker build -t your-org/doc-search-prod:latest \\\n  --build-arg DOCS_DIR=./docs-prod \\\n  --build-arg MODEL=cl-nagoya/ruri-v3-310m \\\n  -f Dockerfile.with-index-args .\n\n# Push to your organization's registry\ndocker push your-org/doc-search-prod:latest\n\n# Run with STDIO transport (default)\ndocker run your-org/doc-search-prod:latest\n\n# Run with Streamable HTTP transport\ndocker run -p 8765:8765 -e TRANSPORT=streamable-http your-org/doc-search-prod:latest\n\n# Run with custom HTTP settings\ndocker run -p 9000:9000 -e TRANSPORT=streamable-http -e PORT=9000 -e PATH=/api/mcp your-org/doc-search-prod:latest\n```\n\nThis approach enables efficient deployment and management of document search systems within your organization.\n\n## Development\n\nThis project uses [Task](https://taskfile.dev/) to manage build and development tasks.\n\n### Setting Up Development Environment\n\n```bash\ntask dev:setup\nsource .venv/bin/activate\n```\n\n### Running Tests\n\n```bash\ntask test\n```\n\n### Running Linters\n\n```bash\ntask lint\n```\n\n### Formatting Code\n\n```bash\ntask format\n```\n\n### Creating Document Index\n\n```bash\ntask run:index DIRS=\"docs/ handbook/\"\n```\n\n### Starting the Server\n\n```bash\ntask run:serve\n```\n\n### Running Search\n\n```bash\ntask run:search\n```\n\n### Building and Running Docker Image\n\n```bash\ntask docker:build\ntask docker:run CLI_ARGS=\"serve --db /app/index.duckdb\"\n```\n\n### Listing Available Tasks\n\n```bash\ntask\n```\n\n### Migration from Makefile\n\nPreviously, we used Makefile, but we've migrated to Task for more flexibility and features.\nYou can replace any `make` command with the corresponding `task` command.\n\n## License\n\nMIT\n"
}