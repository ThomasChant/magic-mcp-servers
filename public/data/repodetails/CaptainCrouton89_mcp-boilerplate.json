{
  "mcp_name": "CaptainCrouton89/mcp-boilerplate",
  "mcp_description": "A boilerplate for creating an MCP server that utilizes vector embeddings for storing and retrieving information, enabling semantic search and integration with AI assistants like Claude.",
  "mcp_id": "CaptainCrouton89_mcp-boilerplate",
  "fetch_timestamp": "2025-06-23T01:57:26.878788Z",
  "github_url": "https://github.com/CaptainCrouton89/mcp-boilerplate",
  "repository": {
    "name": "mcp-boilerplate",
    "full_name": "CaptainCrouton89/mcp-boilerplate",
    "description": null,
    "html_url": "https://github.com/CaptainCrouton89/mcp-boilerplate",
    "created_at": "2025-04-22T21:24:38Z",
    "updated_at": "2025-06-02T02:00:26Z",
    "pushed_at": "2025-06-02T02:00:23Z",
    "size": 26,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "CaptainCrouton89",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/49383285?v=4",
      "html_url": "https://github.com/CaptainCrouton89"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 9595
    },
    "language_percentages": {
      "JavaScript": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "1.0.0"
  },
  "readme": "# MCP Server Boilerplate\n\nA starter template for building MCP (Model Context Protocol) servers. This boilerplate provides a clean foundation for creating your own MCP server that can integrate with Claude, Cursor, or other MCP-compatible AI assistants.\n\n## Purpose\n\nThis boilerplate helps you quickly start building:\n\n- Custom tools for AI assistants\n- Resource providers for dynamic content\n- Prompt templates for common operations\n- Integration points for external APIs and services\n\n## Features\n\n- Simple \"hello-world\" tool example\n- TypeScript support with proper type definitions\n- Easy installation scripts for different MCP clients\n- Clean project structure ready for customization\n\n## How It Works\n\nThis MCP server template provides:\n\n1. A basic server setup using the MCP SDK\n2. Example tool implementation\n3. Build and installation scripts\n4. TypeScript configuration for development\n\nThe included example demonstrates how to create a simple tool that takes a name parameter and returns a greeting.\n\n## Getting Started\n\n```bash\n# Clone the boilerplate\ngit clone <your-repo-url>\ncd mcp-server-boilerplate\n\n# Install dependencies\npnpm install\n\n# Build the project\npnpm run build\n\n# Start the server\npnpm start\n```\n\n## Installation Scripts\n\nThis boilerplate includes convenient installation scripts for different MCP clients:\n\n```bash\n# For Claude Desktop\npnpm run install-desktop\n\n# For Cursor\npnpm run install-cursor\n\n# For Claude Code\npnpm run install-code\n\n# Generic installation\npnpm run install-server\n```\n\nThese scripts will build the project and automatically update the appropriate configuration files.\n\n## Usage with Claude Desktop\n\nThe installation script will automatically add the configuration, but you can also manually add it to your `claude_desktop_config.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"your-server-name\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/your/dist/index.js\"]\n    }\n  }\n}\n```\n\nThen restart Claude Desktop to connect to the server.\n\n## Customizing Your Server\n\n### Adding Tools\n\nTools are functions that the AI assistant can call. Here's the basic structure:\n\n```typescript\nserver.tool(\n  \"tool-name\",\n  \"Description of what the tool does\",\n  {\n    // Zod schema for parameters\n    param1: z.string().describe(\"Description of parameter\"),\n    param2: z.number().optional().describe(\"Optional parameter\"),\n  },\n  async ({ param1, param2 }) => {\n    // Your tool logic here\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: \"Your response\",\n        },\n      ],\n    };\n  }\n);\n```\n\n### Adding Resources\n\nResources provide dynamic content that the AI can access:\n\n```typescript\nserver.resource(\n  \"resource://example/{id}\",\n  \"Description of the resource\",\n  async (uri) => {\n    // Extract parameters from URI\n    const id = uri.path.split(\"/\").pop();\n\n    return {\n      contents: [\n        {\n          uri,\n          mimeType: \"text/plain\",\n          text: `Content for ${id}`,\n        },\n      ],\n    };\n  }\n);\n```\n\n### Adding Prompts\n\nPrompts are reusable templates:\n\n```typescript\nserver.prompt(\n  \"prompt-name\",\n  \"Description of the prompt\",\n  {\n    // Parameters for the prompt\n    topic: z.string().describe(\"The topic to discuss\"),\n  },\n  async ({ topic }) => {\n    return {\n      description: `A prompt about ${topic}`,\n      messages: [\n        {\n          role: \"user\",\n          content: {\n            type: \"text\",\n            text: `Please help me with ${topic}`,\n          },\n        },\n      ],\n    };\n  }\n);\n```\n\n## Project Structure\n\n```\n├── src/\n│   └── index.ts          # Main server implementation\n├── scripts/              # Installation and utility scripts\n├── dist/                 # Compiled JavaScript (generated)\n├── package.json          # Project configuration\n├── tsconfig.json         # TypeScript configuration\n└── README.md            # This file\n```\n\n## Development\n\n1. Make changes to `src/index.ts`\n2. Run `pnpm run build` to compile\n3. Test your server with `pnpm start`\n4. Use the installation scripts to update your MCP client configuration\n\n## Next Steps\n\n1. Update `package.json` with your project details\n2. Customize the server name and tools in `src/index.ts`\n3. Add your own tools, resources, and prompts\n4. Integrate with external APIs or databases as needed\n\n## License\n\nMIT\n"
}