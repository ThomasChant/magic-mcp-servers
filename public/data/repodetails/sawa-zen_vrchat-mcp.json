{
  "mcp_name": "sawa-zen/vrchat-mcp",
  "mcp_description": "üìá üè† This is an MCP server for interacting with the VRChat API. You can retrieve information about friends, worlds, avatars, and more in VRChat.",
  "mcp_id": "sawa-zen_vrchat-mcp",
  "fetch_timestamp": "2025-06-23T08:11:16.326190Z",
  "github_url": "https://github.com/sawa-zen/vrchat-mcp",
  "repository": {
    "name": "vrchat-mcp",
    "full_name": "sawa-zen/vrchat-mcp",
    "description": "This project is a Model Context Protocol (MCP) server for interacting with the VRChat API.",
    "html_url": "https://github.com/sawa-zen/vrchat-mcp",
    "created_at": "2025-03-14T07:56:53Z",
    "updated_at": "2025-06-20T21:31:55Z",
    "pushed_at": "2025-04-29T06:35:24Z",
    "size": 508,
    "stargazers_count": 35,
    "watchers_count": 35,
    "forks_count": 6,
    "open_issues_count": 1,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [
      "ai",
      "claude",
      "cline",
      "mcp",
      "vrchat"
    ],
    "default_branch": "main",
    "owner": {
      "login": "sawa-zen",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/3971271?v=4",
      "html_url": "https://github.com/sawa-zen"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 6,
    "subscribers_count": 2,
    "languages": {
      "TypeScript": 26112,
      "JavaScript": 2390
    },
    "language_percentages": {
      "TypeScript": 91.61,
      "JavaScript": 8.39
    },
    "pull_requests_count": 20,
    "contributors_count": 1,
    "package_json_version": "0.15.0"
  },
  "readme": "![VRChat MCP](./eyecatch.jpg)\n\n[![npm version](https://badge.fury.io/js/vrchat-mcp.svg)](https://badge.fury.io/js/vrchat-mcp) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n[Êó•Êú¨Ë™û](./README.ja.md) | [ÌïúÍµ≠Ïñ¥](./README.ko.md)\n\nThis project is a Model Context Protocol (MCP) server for interacting with the VRChat API. It allows you to retrieve various information from VRChat using a standardized protocol.\n\n<a href=\"https://youtu.be/0MRxhzlFCkw\">\n  <img width=\"300\" src=\"https://github.com/user-attachments/assets/85c00cc4-46b3-4f66-ab36-bf2891fdb283\" alt=\"YouTube\" />\n</a>\n\n<a href=\"https://glama.ai/mcp/servers/u763zoyi5a\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/u763zoyi5a/badge\" />\n</a>\n\n## Overview\n\nThe VRChat MCP server provides a way to access VRChat's API endpoints in a structured manner. It supports a wide range of functionalities, including user authentication, retrieving user and friend information, accessing avatar and world data, and more.\n\n## Usage\n\nTo start the server, ensure you have the necessary environment variables set:\n\n```bash\nexport VRCHAT_USERNAME=your_username\nexport VRCHAT_AUTH_TOKEN=your_auth_token\n```\n\n> [!NOTE]\n> #### How to obtain AUTH TOKEN\n>\n> You can use the following command to login and obtain an auth token:\n> ```\n> $ npx vrchat-auth-token-checker\n>\n> VRChat Username: your-username\n> Password: ********\n>\n> # If 2FA is enabled\n> 2FA Code: 123456\n>\n> # Success output\n> Auth Token: authcookie-xxxxx\n> ```\n> [Command source code](https://github.com/sawa-zen/vrchat-auth-token-checker)\n>\n> **Please handle the obtained token with care as it has a very long lifetime**\n\nThen, run the following command:\n\n```bash\nnpx vrchat-mcp\n```\n\nThis will launch the MCP server, allowing you to interact with the VRChat API through the defined tools.\n\n## Usage with Claude Desktop\n\nTo use this MCP server with Claude Desktop, you do not need to run `npx vrchat-mcp` manually. Instead, add the following configuration to your Claude Desktop config file:\n\n- MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"vrchat-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"vrchat-mcp\"],\n      \"env\": {\n        \"VRCHAT_USERNAME\": \"your-username\",\n        \"VRCHAT_AUTH_TOKEN\": \"your-auth-token\"\n      }\n    }\n  }\n}\n```\n\nThen, start Claude Desktop as usual. If you have to use nodenv or nvm, you may need to specify the full path to the `npx` command.\n\n## Available Tools\n\nThis Model Context Protocol server provides the following VRChat-related tools:\n\n### User Related\n- vrchat_get_friends_list: Get a list of friends\n- vrchat_send_friend_request: Send a friend request\n\n### Avatar Related\n- vrchat_search_avatars: Search for avatars\n- vrchat_select_avatar: Select and switch to a specific avatar\n\n### World Related\n- vrchat_search_worlds: Search for worlds\n- vrchat_list_favorited_worlds: Get a list of favorited worlds\n\n### Instance Related\n- vrchat_create_instance: Create a new instance\n- vrchat_get_instance: Get information about a specific instance\n\n### Group Related\n- vrchat_search_groups: Search for groups\n- vrchat_join_group: Join a group\n\n### Favorites Related\n- vrchat_list_favorites: Get a list of favorites\n- vrchat_add_favorite: Add a new favorite\n- vrchat_list_favorite_groups: Get a list of favorite groups\n\n### Invite Related\n- vrchat_list_invite_messages: Get a list of invite messages\n- vrchat_request_invite: Request an invite\n- vrchat_get_invite_message: Get a specific invite message\n\n### Notification Related\n- vrchat_get_notifications: Get a list of notifications\n\n## Debugging\n\nFirst, build the project:\n\n```bash\nnpm install\nnpm run build\n```\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging experience, we strongly recommend using the MCP Inspector.\n\nYou can launch the MCP Inspector via npm with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector \"./dist/main.js\"\n```\n\nBe sure that environment variables are properly configured.\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\n## Publishing\n\nTo publish a new version of the package, follow these steps:\n\n1. Pull the latest code from the main branch\n   ```bash\n   git checkout main\n   git pull origin main\n   ```\n\n2. Build the package\n   ```bash\n   npm run build\n   ```\n\n4. Publish to npm\n   ```bash\n   npm publish\n   ```\n\n5. Push changes to the remote repository\n   ```bash\n   git push origin main --tags\n   ```\n\n## Contributing\n\nContributions are welcome! Please fork the repository and submit a pull request for any improvements or bug fixes.\n\n## License\n\nThis project is licensed under the MIT License. See the LICENSE file for details.\n"
}