{
  "mcp_name": "u1i/mcp-server-disk-usage",
  "mcp_description": "Enables real-time disk usage monitoring on macOS through Claude integration, providing detailed storage statistics.",
  "mcp_id": "u1i_mcp-server-disk-usage",
  "fetch_timestamp": "2025-06-23T09:09:44.043769Z",
  "github_url": "https://github.com/u1i/mcp-server-disk-usage",
  "repository": {
    "name": "mcp-server-disk-usage",
    "full_name": "u1i/mcp-server-disk-usage",
    "description": null,
    "html_url": "https://github.com/u1i/mcp-server-disk-usage",
    "created_at": "2025-04-08T07:42:56Z",
    "updated_at": "2025-04-08T08:47:13Z",
    "pushed_at": "2025-04-08T08:47:10Z",
    "size": 419,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "PowerShell",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "u1i",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/27874591?v=4",
      "html_url": "https://github.com/u1i"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "PowerShell": 9033,
      "Shell": 3106,
      "Python": 2656
    },
    "language_percentages": {
      "PowerShell": 61.05,
      "Shell": 20.99,
      "Python": 17.95
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# Disk Usage MCP Server (Demo)\n\n## What is MCP?\n\nModel Context Protocol (MCP) is a protocol that enables AI models like Claude to interact with external tools and services. It allows Claude to access real-time system information and perform actions on your behalf. \n\nLearn more about MCP:\n\n- [MCP Documentation](https://modelcontextprotocol.io/docs/)\n- [MCP Python SDK](https://modelcontextprotocol.io/docs/sdks/python)\n\n## What You Get\n\nWhen integrated with Claude Desktop, this demo MCP server enables Claude to check your disk usage (on the Mac) in real-time. Here's an example interaction:\n\n![](usage.png)\n\nUser: \"What is my current disk usage?\"\n\nClaude: \"Let me check your current disk usage for you.\"\n\n[approval to use disk-usage tool, user gives consent]\n\n<details>\n<summary>View result from ```get_disk_usage``` from ```disk-usage``` (local)</summary>\n\n```json\n{\n    \"device\": \"/dev/disk3s5\",\n    \"total_gb\": \"228.0GB\",\n    \"used_gb\": \"177.0GB\",\n    \"available_gb\": \"27.0GB\",\n    \"reserved_gb\": \"24.0GB\",\n    \"percent_used\": \"87%\",\n    \"mount\": \"/System/Volumes/Data\",\n    \"summary\": \"Total: 228.0GB | Used: 177.0GB | Available: 27.0GB | Reserved: 24.0GB | Usage: 87%\"\n}\n```\n</details>\n\nClaude: \"Here's your current disk usage information:\n\nTotal Disk Space: 228.0GB   \nUsed Space: 177.0GB   \nAvailable Space: 27.0GB   \nReserved Space: 24.0GB   \nUsage Percentage: 87%   \nMount Point: /System/Volumes/Data   \nDevice: /dev/disk3s5\n\nYour disk is currently at 87% capacity, with 27.0GB of space still available. If you're concerned about the high usage, you might want to consider cleaning up some files to free up more space.\"\n\n## How It Works\n\n### Server Capabilities\n\nWhen the server starts, it advertises its capabilities to Claude through the MCP protocol. Here's what Claude sees:\n\n```python\n@mcp.tool()\ndef get_disk_usage() -> Dict[str, str]:\n    \"\"\"Get current disk usage information for the system disk\n    \n    Returns:\n        A dictionary containing disk usage information with fields:\n        - device: Device name\n        - total_gb: Total size in GB\n        - used_gb: Used space in GB\n        - available_gb: Available space in GB\n        - reserved_gb: Space reserved by system in GB\n        - percent_used: Usage percentage\n        - mount: Mount point\n        - summary: Human-readable summary of disk usage\n    \"\"\"\n```\n\nThis tells Claude that:\n\n1. The server provides a tool called `get_disk_usage`\n2. The tool returns a dictionary with detailed disk information\n3. The docstring explains what each field means\n\n### The Complete Claude-MCP Interaction Flow\n\n1. **Initial System Prompt to Claude**:\n```\nYou are Claude, an AI assistant. You have access to these tools:\n\nget_disk_usage() -> Dict[str, str]\n    \"Get current disk usage information for the system disk\"\n\nTo use this tool, respond with a <tool_call> XML block:\n<tool_call>\n<name>get_disk_usage</name>\n<reason>Explain why you need disk usage information</reason>\n</tool_call>\n```\n\n2. **User Query**:\n```\nUser: What is my current disk usage?\n```\n\n3. **Claude's Tool Selection Response**:\n```\nI'll check your disk usage information.\n\n<tool_call>\n<name>get_disk_usage</name>\n<reason>User has requested current disk usage information. This tool will provide detailed statistics about disk space utilization.</reason>\n</tool_call>\n```\n\n4. **Claude Desktop App → MCP Server**:\n```json\n// HTTP POST to MCP Server\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"invoke\",\n    \"params\": {\n        \"tool\": \"get_disk_usage\",\n        \"args\": {}\n    },\n    \"id\": 1\n}\n```\n\n5. **MCP Server → Claude Desktop App**:\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"device\": \"/dev/disk3s5\",\n        \"total_gb\": \"228.0GB\",\n        \"used_gb\": \"177.0GB\",\n        \"available_gb\": \"27.0GB\",\n        \"reserved_gb\": \"24.0GB\",\n        \"percent_used\": \"87%\",\n        \"mount\": \"/System/Volumes/Data\",\n        \"summary\": \"Total: 228.0GB | Used: 177.0GB | Available: 27.0GB | Reserved: 24.0GB | Usage: 87%\"\n    },\n    \"id\": 1\n}\n```\n\n6. **New Request to Claude** (with tool output as context):\n```\nUser: What is my current disk usage?\n\nTool Response:\n{\n    \"device\": \"/dev/disk3s5\",\n    \"total_gb\": \"228.0GB\",\n    \"used_gb\": \"177.0GB\",\n    \"available_gb\": \"27.0GB\",\n    \"reserved_gb\": \"24.0GB\",\n    \"percent_used\": \"87%\",\n    \"mount\": \"/System/Volumes/Data\",\n    \"summary\": \"Total: 228.0GB | Used: 177.0GB | Available: 27.0GB | Reserved: 24.0GB | Usage: 87%\"\n}\n\nProvide a helpful response to the user based on this disk usage information.\n```\n\n7. **Claude's Final Response**:\n```\nHere's your current disk usage information:\n\nTotal Disk Space: 228.0GB   \nUsed Space: 177.0GB   \nAvailable Space: 27.0GB   \nReserved Space: 24.0GB   \nUsage Percentage: 87%   \nMount Point: /System/Volumes/Data   \nDevice: /dev/disk3s5\n\nYour disk is currently at 87% capacity, with 27.0GB of space still available. If you're concerned about the high usage, you might want to consider cleaning up some files to free up more space.\n```\n\nThis shows the complete flow:\n1. Claude starts with knowledge of available tools\n2. User asks a question\n3. Claude recognizes the need for disk info and proposes using the tool\n4. After approval, tool response is injected into the conversation\n5. Claude processes the raw data into a helpful response\n\n### Technical Implementation\n   ```python\n   # Tool advertisement from server\n   {\n     \"tools\": [\n       {\n         \"name\": \"get_disk_usage\",\n         \"description\": \"Get current disk usage information for the system disk\",\n         \"parameters\": {},  # No parameters needed\n         \"returns\": {\n           \"type\": \"object\",\n           \"properties\": {\n             \"device\": {\"type\": \"string\"},\n             \"total_gb\": {\"type\": \"string\"},\n             \"used_gb\": {\"type\": \"string\"},\n             \"available_gb\": {\"type\": \"string\"},\n             \"reserved_gb\": {\"type\": \"string\"},\n             \"percent_used\": {\"type\": \"string\"},\n             \"mount\": {\"type\": \"string\"},\n             \"summary\": {\"type\": \"string\"}\n           }\n         }\n       }\n     ]\n   }\n   ```\n\n2. **User Query**:\n   ```\n   User: \"What is my current disk usage?\"\n   ```\n\n3. **Claude's Tool Selection**:\n   Claude recognizes this query requires disk information and decides to use the `get_disk_usage` tool.\n   ```\n   Claude: \"Let me check your current disk usage for you.\"\n   [approval to use disk-usage tool, user gives consent]\n   ```\n\n4. **Tool Invocation and Response**:\n   ```json\n   // Raw tool response\n   {\n     \"device\": \"/dev/disk3s5\",\n     \"total_gb\": \"228.0GB\",\n     \"used_gb\": \"177.0GB\",\n     \"available_gb\": \"27.0GB\",\n     \"reserved_gb\": \"24.0GB\",\n     \"percent_used\": \"87%\",\n     \"mount\": \"/System/Volumes/Data\",\n     \"summary\": \"Total: 228.0GB | Used: 177.0GB | Available: 27.0GB | Reserved: 24.0GB | Usage: 87%\"\n   }\n   ```\n\n5. **Claude's Natural Response**:\n   Claude processes the raw data and provides a human-friendly response:\n   ```\n   Here's your current disk usage information:\n\n   Total Disk Space: 228.0GB   \n   Used Space: 177.0GB   \n   Available Space: 27.0GB   \n   Reserved Space: 24.0GB   \n   Usage Percentage: 87%   \n   Mount Point: /System/Volumes/Data   \n   Device: /dev/disk3s5\n\n   Your disk is currently at 87% capacity, with 27.0GB of space still available. If you're concerned about the high usage, you might want to consider cleaning up some files to free up more space.\"\n   ```\n\n### Communication Protocol\n\nUnder the hood, MCP uses a bidirectional JSON-RPC protocol over WebSocket. Here's how it works:\n\n1. **Initialization**:\n   ```json\n   // Claude -> Server\n   {\n     \"jsonrpc\": \"2.0\",\n     \"method\": \"initialize\",\n     \"params\": {\n       \"protocolVersion\": \"2024-11-05\",\n       \"capabilities\": {},\n       \"clientInfo\": {\n         \"name\": \"claude-ai\",\n         \"version\": \"0.1.0\"\n       }\n     },\n     \"id\": 0\n   }\n   ```\n\n2. **Tool Advertisement**:\n   The server responds with its capabilities, including the `get_disk_usage` tool and its schema.\n\n3. **Tool Invocation**:\n   ```json\n   // Claude -> Server\n   {\n     \"jsonrpc\": \"2.0\",\n     \"method\": \"invoke\",\n     \"params\": {\n       \"tool\": \"get_disk_usage\",\n       \"args\": {}\n     },\n     \"id\": 1\n   }\n   ```\n\n4. **Server Response**:\n   ```json\n   // Server -> Claude\n   {\n     \"jsonrpc\": \"2.0\",\n     \"result\": {\n       \"device\": \"/dev/disk3s5\",\n       \"total_gb\": \"228.0GB\",\n       \"used_gb\": \"177.0GB\",\n       ...\n     },\n     \"id\": 1\n   }\n   ```\n\nThis WebSocket-based protocol allows for:\n- Persistent connections\n- Bidirectional communication\n- Structured type information\n- Tool discovery and documentation\n\n### Implementation\n\n1. The MCP server (`disk_usage_server.py`) uses Python's `subprocess` module to run the `df` command\n2. It specifically looks at the `/System/Volumes/Data` partition (disk3s5 on macOS)\n3. The server parses the output and returns structured data including:\n   - Total disk space\n   - Used space\n   - Available space\n   - Reserved space (space reserved by the system)\n   - Usage percentage\n   - Mount point and device information\n\n## Requirements\n\n- macOS (this tool is specifically designed for Mac's disk structure)\n- Python 3.11+\n- pip (Python package manager)\n\n## Running the Server\n\n1. Clone this repository\n\n2. Install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n3. Run the server:\n```bash\npython disk_usage_server.py\n```\n\n**Note**: This server specifically looks for the `/System/Volumes/Data` partition (disk3s5) on macOS. It will not work on other operating systems.\n\n## Claude Desktop Integration\n\n1. Create a `claude-config.txt` file in your Claude Desktop configuration directory (usually `~/.config/claude-desktop/` on macOS) with:\n```json\n{\n  \"mcpServers\": {\n    \"disk-usage\": {\n      \"command\": \"python3\",\n      \"args\": [\n        \"<path-to-your-directory>/disk_usage_server.py\"\n      ]\n    }\n  }\n}\n```\n\n2. Replace `<path-to-your-directory>` with the actual path to where you saved the server files\n\n3. Restart Claude Desktop\n\n## Learning Outcomes\n\nThis project demonstrates:\n1. How to create a simple MCP server using Python\n2. How to integrate system commands into an MCP tool\n3. How to structure data for AI consumption\n4. How to handle system-specific details (like disk partitions)\n5. How to provide clear, human-readable summaries of technical data\n\n## Files\n- `disk_usage_server.py`: The main MCP server implementation\n- `requirements.txt`: Python dependencies\n- `claude-config.txt`: Example Claude Desktop configuration\n"
}