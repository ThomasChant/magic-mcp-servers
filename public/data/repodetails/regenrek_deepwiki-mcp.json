{
  "mcp_name": "regenrek/deepwiki-mcp",
  "mcp_description": "Fetches and converts Deepwiki content into Markdown for LLM consumption, ensuring domain safety and efficient crawling.",
  "mcp_id": "regenrek_deepwiki-mcp",
  "fetch_timestamp": "2025-06-23T07:55:47.699273Z",
  "github_url": "https://github.com/regenrek/deepwiki-mcp",
  "repository": {
    "name": "deepwiki-mcp",
    "full_name": "regenrek/deepwiki-mcp",
    "description": "ðŸ“– MCP server for fetch deepwiki.com and get latest knowledge in Cursor and other Code Editors",
    "html_url": "https://github.com/regenrek/deepwiki-mcp",
    "created_at": "2025-04-28T08:32:56Z",
    "updated_at": "2025-06-23T07:28:52Z",
    "pushed_at": "2025-05-22T21:40:43Z",
    "size": 1054,
    "stargazers_count": 685,
    "watchers_count": 685,
    "forks_count": 43,
    "open_issues_count": 5,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "regenrek",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/5182020?v=4",
      "html_url": "https://github.com/regenrek"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 43,
    "subscribers_count": 7,
    "languages": {
      "TypeScript": 55142,
      "JavaScript": 2176,
      "Dockerfile": 963
    },
    "language_percentages": {
      "TypeScript": 94.61,
      "JavaScript": 3.73,
      "Dockerfile": 1.65
    },
    "pull_requests_count": 6,
    "contributors_count": 4,
    "tags": [
      {
        "name": "v0.0.10",
        "commit_sha": "f2b15eeee33d623236fa24753785f24792da7f2e"
      },
      {
        "name": "v0.0.9",
        "commit_sha": "27eb55ffdad5c145eaa9629a822a3eeab29efcca"
      },
      {
        "name": "v0.0.8",
        "commit_sha": "eb5e6176765057164e367aceb1ef24d5f52ea8b9"
      },
      {
        "name": "v0.0.7",
        "commit_sha": "e28e722d3a611d4fe857ffe12522afa369366dce"
      },
      {
        "name": "v0.0.6",
        "commit_sha": "067f87c5983f59ff3696e52d8777480c76c207f5"
      },
      {
        "name": "v0.0.5",
        "commit_sha": "55fb477b52fe9817f9ac9707452cc4c8cf21a6d5"
      },
      {
        "name": "v0.0.4",
        "commit_sha": "cc78c3d53d33f4a71aebfea4f535fc3f1072079e"
      }
    ],
    "latest_version": "v0.0.10",
    "package_json_version": "0.0.10"
  },
  "readme": "# Deepwiki MCP Server\n\nThis is an **unofficial Deepwiki MCP Server**\n\nIt takes a Deepwiki URL via MCP, crawls all relevant pages, converts them to Markdown, and returns either one document or a list by page.\n\n## Features\n\n- ðŸ”’ **Domain Safety**: Only processes URLs from deepwiki.com\n- ðŸ§¹ **HTML Sanitization**: Strips headers, footers, navigation, scripts, and ads\n- ðŸ”— **Link Rewriting**: Adjusts links to work in Markdown\n- ðŸ“„ **Multiple Output Formats**: Get one document or structured pages\n- ðŸš€ **Performance**: Fast crawling with adjustable concurrency and depth\n- **NLP**: It's to search just for the library name\n\n## Usage\n\nPrompts you can use:\n\n```\ndeepwiki fetch how can i use gpt-image-1 with \"vercel ai\" sdk\n```\n\n```\ndeepwiki fetch how can i create new blocks in shadcn?\n```\n\n```\ndeepwiki fetch i want to understand how X works\n```\n\nFetch complete Documentation (Default)\n```\nuse deepwiki https://deepwiki.com/shadcn-ui/ui\nuse deepwiki multiple pages https://deepwiki.com/shadcn-ui/ui\n```\n\nSingle Page\n```\nuse deepwiki fetch single page https://deepwiki.com/tailwindlabs/tailwindcss/2.2-theme-system\n```\n\nGet by shortform\n```\nuse deepwiki fetch tailwindlabs/tailwindcss\n```\n\n```\ndeepwiki fetch library\n\ndeepwiki fetch url\ndeepwiki fetch <name>/<repo>\n\ndeepwiki multiple pages ...\ndeepwiki single page url ...\n```\n\n## Cursor\n\nAdd this to `.cursor/mcp.json` file.\n\n```\n{\n  \"mcpServers\": {\n    \"mcp-deepwiki\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-deepwiki@latest\"]\n    }\n  }\n}\n```\n\n![Deepwiki Logo](public/deepwiki.jpg)\n\n### MCP Tool Integration\n\nThe package registers a tool named `deepwiki_fetch` that you can use with any MCP-compatible client:\n\n```json\n{\n  \"action\": \"deepwiki_fetch\",\n  \"params\": {\n    \"url\": \"https://deepwiki.com/user/repo\",\n    \"mode\": \"aggregate\",\n    \"maxDepth\": \"1\"\n  }\n}\n```\n\n#### Parameters\n\n- `url` (required): The starting URL of the Deepwiki repository\n- `mode` (optional): Output mode, either \"aggregate\" for a single Markdown document (default) or \"pages\" for structured page data\n- `maxDepth` (optional): Maximum depth of pages to crawl (default: 10)\n\n### Response Format\n\n#### Success Response (Aggregate Mode)\n\n```json\n{\n  \"status\": \"ok\",\n  \"data\": \"# Page Title\\n\\nPage content...\\n\\n---\\n\\n# Another Page\\n\\nMore content...\",\n  \"totalPages\": 5,\n  \"totalBytes\": 25000,\n  \"elapsedMs\": 1200\n}\n```\n\n#### Success Response (Pages Mode)\n\n```json\n{\n  \"status\": \"ok\",\n  \"data\": [\n    {\n      \"path\": \"index\",\n      \"markdown\": \"# Home Page\\n\\nWelcome to the repository.\"\n    },\n    {\n      \"path\": \"section/page1\",\n      \"markdown\": \"# First Page\\n\\nThis is the first page content.\"\n    }\n  ],\n  \"totalPages\": 2,\n  \"totalBytes\": 12000,\n  \"elapsedMs\": 800\n}\n```\n\n#### Error Response\n\n```json\n{\n  \"status\": \"error\",\n  \"code\": \"DOMAIN_NOT_ALLOWED\",\n  \"message\": \"Only deepwiki.com domains are allowed\"\n}\n```\n\n#### Partial Success Response\n\n```json\n{\n  \"status\": \"partial\",\n  \"data\": \"# Page Title\\n\\nPage content...\",\n  \"errors\": [\n    {\n      \"url\": \"https://deepwiki.com/user/repo/page2\",\n      \"reason\": \"HTTP error: 404\"\n    }\n  ],\n  \"totalPages\": 1,\n  \"totalBytes\": 5000,\n  \"elapsedMs\": 950\n}\n```\n\n### Progress Events\n\nWhen using the tool, you'll receive progress events during crawling:\n\n```\nFetched https://deepwiki.com/user/repo: 12500 bytes in 450ms (status: 200)\nFetched https://deepwiki.com/user/repo/page1: 8750 bytes in 320ms (status: 200)\nFetched https://deepwiki.com/user/repo/page2: 6200 bytes in 280ms (status: 200)\n```\n\n## Local Development - Installation\n\n### Local Usage\n\n```\n{\n  \"mcpServers\": {\n    \"mcp-deepwiki\": {\n      \"command\": \"node\",\n      \"args\": [\"./bin/cli.mjs\"]\n    }\n  }\n}\n```\n\n### From Source\n\n```bash\n# Clone the repository\ngit clone https://github.com/regenrek/deepwiki-mcp.git\ncd deepwiki-mcp\n\n# Install dependencies\nnpm install\n\n# Build the package\nnpm run build\n```\n\n#### Direct API Calls\n\nFor HTTP transport, you can make direct API calls:\n\n```bash\ncurl -X POST http://localhost:3000/mcp \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"id\": \"req-1\",\n    \"action\": \"deepwiki_fetch\",\n    \"params\": {\n      \"url\": \"https://deepwiki.com/user/repo\",\n      \"mode\": \"aggregate\"\n    }\n  }'\n```\n\n## Configuration\n\n### Environment Variables\n\n- `DEEPWIKI_MAX_CONCURRENCY`: Maximum concurrent requests (default: 5)\n- `DEEPWIKI_REQUEST_TIMEOUT`: Request timeout in milliseconds (default: 30000)\n- `DEEPWIKI_MAX_RETRIES`: Maximum retry attempts for failed requests (default: 3)\n- `DEEPWIKI_RETRY_DELAY`: Base delay for retry backoff in milliseconds (default: 250)\n\nTo configure these, create a `.env` file in the project root:\n\n```\nDEEPWIKI_MAX_CONCURRENCY=10\nDEEPWIKI_REQUEST_TIMEOUT=60000\nDEEPWIKI_MAX_RETRIES=5\nDEEPWIKI_RETRY_DELAY=500\n```\n\n## Docker Deployment (Untested)\n\nBuild and run the Docker image:\n\n```bash\n# Build the image\ndocker build -t mcp-deepwiki .\n\n# Run with stdio transport (for development)\ndocker run -it --rm mcp-deepwiki\n\n# Run with HTTP transport (for production)\ndocker run -d -p 3000:3000 mcp-deepwiki --http --port 3000\n\n# Run with environment variables\ndocker run -d -p 3000:3000 \\\n  -e DEEPWIKI_MAX_CONCURRENCY=10 \\\n  -e DEEPWIKI_REQUEST_TIMEOUT=60000 \\\n  mcp-deepwiki --http --port 3000\n```\n\n## Development\n\n```bash\n# Install dependencies\npnpm install\n\n# Run in development mode with stdio\npnpm run dev-stdio\n\n# Run tests\npnpm test\n\n# Run linter\npnpm run lint\n\n# Build the package\npnpm run build\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Permission Denied**: If you get EACCES errors when running the CLI, make sure to make the binary executable:\n   ```bash\n   chmod +x ./node_modules/.bin/mcp-deepwiki\n   ```\n\n2. **Connection Refused**: Make sure the port is available and not blocked by a firewall:\n   ```bash\n   # Check if port is in use\n   lsof -i :3000\n   ```\n\n3. **Timeout Errors**: For large repositories, consider increasing the timeout and concurrency:\n   ```\n   DEEPWIKI_REQUEST_TIMEOUT=60000 DEEPWIKI_MAX_CONCURRENCY=10 npx mcp-deepwiki\n   ```\n\n## Contributing\n\nWe welcome contributions! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for details.\n\n## License\n\nMIT\n\n## Links\n\n- X/Twitter: [@kregenrek](https://x.com/kregenrek)\n- Bluesky: [@kevinkern.dev](https://bsky.app/profile/kevinkern.dev)\n\n## Courses\n- Learn Cursor AI: [Ultimate Cursor Course](https://www.instructa.ai/en/cursor-ai)\n- Learn to build software with AI: [instructa.ai](https://www.instructa.ai)\n\n## See my other projects:\n\n* [AI Prompts](https://github.com/instructa/ai-prompts/blob/main/README.md) - Curated AI Prompts for Cursor AI, Cline, Windsurf and Github Copilot\n* [codefetch](https://github.com/regenrek/codefetch) - Turn code into Markdown for LLMs with one simple terminal command\n* [aidex](https://github.com/regenrek/aidex) A CLI tool that provides detailed information about AI language models, helping developers choose the right model for their needs.# tool-starter\n"
}