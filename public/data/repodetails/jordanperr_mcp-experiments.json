{
  "mcp_name": "jordanperr/mcp-experiments",
  "mcp_description": "Facilitates LLM-driven control of a Mac desktop via Bash and AppleScript commands.",
  "mcp_id": "jordanperr_mcp-experiments",
  "fetch_timestamp": "2025-06-23T05:33:28.207542Z",
  "github_url": "https://github.com/jordanperr/mcp-experiments",
  "repository": {
    "name": "mcp-experiments",
    "full_name": "jordanperr/mcp-experiments",
    "description": "This project provides an MCP (Model Context Protocol) server that allows LLMs to perform actions to control a Mac desktop computer using bash and AppleScript.",
    "html_url": "https://github.com/jordanperr/mcp-experiments",
    "created_at": "2025-04-23T22:50:55Z",
    "updated_at": "2025-05-06T14:46:42Z",
    "pushed_at": "2025-04-24T17:27:04Z",
    "size": 5,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "applescript",
      "bash",
      "macos",
      "mcp",
      "mcp-server"
    ],
    "default_branch": "main",
    "owner": {
      "login": "jordanperr",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/355615?v=4",
      "html_url": "https://github.com/jordanperr"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 7065
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# MCP Experiments\n\n[![Tests](https://github.com/jordanperr/mcp-experiments/actions/workflows/test.yml/badge.svg)](https://github.com/jordanperr/mcp-experiments/actions/workflows/test.yml)\n\nThis repository contains some MCP (Model Context Protocol) servers I've been playing around with for executing Bash and AppleScript commands from large language models (LLMs) on a Mac. I tested it using the [Claude Desktop](https://claude.ai/download) client.\n\n## Example Usage\n\nOnce the tool is properly configured and loaded into Claude Desktop, you can ask Claude to do new things. The tools available in restricted mode include:\n\n- `say`: Could you please say \"Hello World!\"\n- `whoami`: Which user am I running as?\n\nIn arbitrary execution mode (described below), you can ask Claude to perform more complicated actions.\n\n## Requirements\n\n- macOS (Required for AppleScript tool)\n- [Claude Desktop](https://claude.ai/download), or other MCP client\n- Python 3.13 or higher\n- `mcp` package for Python\n- `pytest` package for tests\n\n## Installation\n\n1. Clone the repository:\n   ```sh\n   git clone .../mcp-experiments\n   cd mcp-experiments\n   ```\n\n2. Create and activate a virtual environment:\n   ```sh\n   python3 -m venv .venv\n   source .venv/bin/activate\n   ```\n\n3. Install the required dependencies:\n   ```sh\n   pip install -r requirements.txt\n   ```\n\n4. Configure Claude Desktop for Mac to load the servers.\n\n    i. Modify the configuration file located at: `~/Library/Application Support/Claude/claude_desktop_config.json`.\n\n    ii. An example configuration is provided in `claude_decktop_config.example.json` in this repository. \n\n    iii. Ensure the `command` and `args` fields point to the correct Python interpreter and script path.\n    \n    iv. Ensure that `MCP_EXECUTION_MODE` is set to your desired safety level.\n\n```json\n{\n    \"mcpServers\": {\n        \"applescript\": {\n            \"command\": \"/path/to/mcp-experiments/.venv/bin/python\",\n            \"args\": [\n                \"/path/to/mcp-experiments/applescript.py\"\n            ],\n            \"env\": {\n                \"MCP_EXECUTION_MODE\": \"restricted\"\n            }\n        },\n        \"bash\": {\n            \"command\": \"/path/to/mcp-experiments/.venv/bin/python\",\n            \"args\": [\n                \"/path/to/mcp-experiments/bash.py\"\n            ],\n            \"env\": {\n                \"MCP_EXECUTION_MODE\": \"restricted\"\n            }\n        }\n    }\n}\n```\n\n## Arbitrary Execution Mode\n\n> [!WARNING]\n> Setting the environment variable `MCP_EXECUTION_MODE` to `arbitrary` will allow this server to execute arbitrary code generated by the client (LLM) on your computer. This is a security concern and may result in unintended consequences. Please consider using a sandbox to play around with this mode.\n\nTO enable arbitrary execution mode, set the environment variable `MCP_EXECUTION_MODE` to `arbitrary`. Two more tools are then exposed to the client:\n\n- `execute_bash`: Runs arbitrary bash script as the current user and returns the result.\n- `execute_applescript`: Runs arbitrary AppleScript script as the current user and returns the result.\n\n## File Structure\n\n- `applescript.py`: A server script that defines the `execute_applescript` tool, which uses AppleScript to complete tasks.\n- `bash.py`: A server script that defines the `execute_bash` tool, which uses bash to complete tasks.\n- `claude_desktop_config.example.json`: Example configuration file for the MCP server. Yours may be located in `~/Library/Application Support/Claude`.\n- `requirements.txt`: Python dependencies for the project.\n- `test`: Pytest unit tests for the applescript and bash tools.\n\n## License\n\nThis project is licensed under the MIT License. See the LICENSE file for details.\n\n\n## Credits\n\nThis project was created by Jordan Perr-Sauer.\nGithub Copilot (with GPT-4o and Claude 3.5 Sonnet) was used to generate some of the content in this repository."
}