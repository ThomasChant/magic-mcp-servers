{
  "mcp_name": "giannisalinetti/python-mcp-server",
  "mcp_description": "Facilitates Python code execution for web scraping tasks using an LLM, leveraging Podman for container management.",
  "mcp_id": "giannisalinetti_python-mcp-server",
  "fetch_timestamp": "2025-06-23T03:47:16.548227Z",
  "github_url": "https://github.com/giannisalinetti/python-mcp-server",
  "repository": {
    "name": "python-mcp-server",
    "full_name": "giannisalinetti/python-mcp-server",
    "description": null,
    "html_url": "https://github.com/giannisalinetti/python-mcp-server",
    "created_at": "2025-04-28T20:36:43Z",
    "updated_at": "2025-04-29T07:10:51Z",
    "pushed_at": "2025-04-29T07:10:47Z",
    "size": 15,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Go",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "giannisalinetti",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/7509808?v=4",
      "html_url": "https://github.com/giannisalinetti"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Go": 3153
    },
    "language_percentages": {
      "Go": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# Sample MCP Server in Go.\n\nThis MCP server runs a Python environment when called that can be used to execute the code \ngenerated by an LLM. It can be useful for scraping web content.\n\nThis project is based on this [demo](https://www.youtube.com/watch?v=qoaeYMrXJH0) on YouTube with a few slight mods.\n\nThis demo uses [Podman](https://podman.io/) as the container engine instead of Docker.\n\n## Build the project\nThis project requires Go 1.23+. To build locally:\n```\n$ go mod tidy && go install\n```\n\n## Testing with a lab host\n\nFor testing use `mcphost`: https://github.com/mark3labs/mcphost\n\n### Configure the MCP server\nEdit the `~/.mcp.json` file adding the following content:\n```\n{\n  \"mcpServers\": {\n      \"python-repl\": {\n          \"command\": \"python-mcp-server\"\n      }\n  }\n}\n```\n\nThis configuration tells the mcphost to run the `python-mcp-server` command aliased as `python-repl`.\n\n### Running mcphost\nThis example uses Claude-3.5 Sonnet as the defaul LLM. This allows testing without a local GPU.\n\nExport the Anthropic key:\n```\n$ export ANTHROPIC_API_KEY='your-api-key'\n```\n\nExecute the host\n```\n$ mcphost\n```\n\nIt should prompt something like this:\n```\n$Â mcphost                                                                                                                                        \n2025/04/28 21:44:32 INFO Model loaded provider=anthropic model=claude-3-5-sonnet-latest\n2025/04/28 21:44:32 INFO Initializing server... name=python-repl\n2025/04/28 21:44:32 INFO Server connected name=python-repl\n2025/04/28 21:44:32 INFO Tools loaded server=python-repl count=1\n  Enter your prompt (Type /help for commands, Ctrl+C to quit)\n```\n\nFrom now on it is possible to prompt requests that imply a web scraping to see the MCP server in action.\n\n```\n  Enter your prompt (Type /help for commands, Ctrl+C to quit)\n  Show me the most starred repositories on github\n\n  Assistant:                                                                                                                                    \n\n  I'll create a script to fetch the most starred repositories from GitHub using their API:                                                                                  \n\n2025/04/28 22:14:16 INFO ðŸ”§ Using tool name=python-repl__execute-python\n2025/04/28 22:14:16 INFO Usage statistics input_tokens=1665 output_tokens=309 total_tokens=1974\n```\n\n"
}