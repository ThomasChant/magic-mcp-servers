{
  "mcp_name": "eiz/fooddb",
  "mcp_description": "Query USDA Food Data Central with smart keyword and semantic vector search capabilities.",
  "mcp_id": "eiz_fooddb",
  "fetch_timestamp": "2025-06-23T02:49:17.574899Z",
  "github_url": "https://github.com/eiz/fooddb",
  "repository": {
    "name": "fooddb",
    "full_name": "eiz/fooddb",
    "description": "v i b e c o d i n g",
    "html_url": "https://github.com/eiz/fooddb",
    "created_at": "2025-03-30T09:08:24Z",
    "updated_at": "2025-04-12T09:04:55Z",
    "pushed_at": "2025-03-30T20:28:02Z",
    "size": 166,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "eiz",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/405658?v=4",
      "html_url": "https://github.com/eiz"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 87403
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# FoodDB - USDA Food Database MCP Server\n\nAn MCP server for querying USDA Food Data Central information. It provides tools to search for foods and get detailed nutritional information.\n\n> **Note**: This project was 100% created with Claude AI. No human has directly edited any code files. All development was done through AI-assisted programming.\n\n## Data Source\n\nTo use this project, you'll need to download the USDA Food Data Central dataset:\n\n1. Visit [USDA FDC Download Datasets](https://fdc.nal.usda.gov/download-datasets.html)\n2. Download the \"Full Download\" package\n3. Extract the CSV files to the `./data` directory in this project\n\n## Features\n\n- Import USDA Food Data Central CSV files into a SQLite database\n- Model Context Protocol (MCP) server for integration with Claude for Desktop and other MCP clients\n- Smart keyword-based search for food items\n- Semantic vector search using OpenAI embeddings\n- Comprehensive nutritional data including calories, macros, and serving sizes\n\n## Installation\n\n```bash\n# Install in development mode\nuv pip install -e .\n```\n\n## Usage\n\n### Initialize the Database\n\nBefore using the server, you need to import the USDA data:\n\n```bash\n# Import data from the default location (./data) with embeddings generation\nuv run food init-db\n\n# Custom data and database paths\nuv run food init-db --data-dir /path/to/data --db-path custom.sqlite\n\n# Skip embeddings generation\nuv run food init-db --no-embeddings\n```\n\n### Generate Embeddings\n\nIf you need to generate or update embeddings for vector search:\n\n```bash\n# Generate ALL embeddings for foods that don't have them yet\nuv run food generate-embeddings\n\n# Process foods in larger batches (default is 1000)\nuv run food generate-embeddings --batch-size 5000\n```\n\nFor vector search to work, you need to set the `OPENAI_API_KEY` environment variable:\n\n```bash\nexport OPENAI_API_KEY=your-api-key\n```\n\n### Search for Foods\n\nYou can search for foods using the CLI:\n\n```bash\n# Search for foods matching a query\nuv run food search \"ice cream\" --limit 5\n```\n\n### Get Food Information\n\nGet detailed information about a specific food by its ID:\n\n```bash\n# Display detailed nutrition information for a food\nuv run food info 167575\n```\n\n### Run the MCP Server\n\nRun the server with the stdio transport (for use with Claude Desktop):\n\n```bash\nuv run food run-server\n```\n\nOr with the HTTP transport for other clients:\n\n```bash\nuv run food run-server --transport http --port 8000\n```\n\n## Integrating with Claude for Desktop\n\nTo use this server with Claude for Desktop, add it to your Claude Desktop configuration at `~/Library/Application Support/Claude/claude_desktop_config.json`:\n\n```json\n{\n    \"mcpServers\": {\n        \"fooddb\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/path/to/fooddb\",\n                \"run\",\n                \"food\",\n                \"run-server\"\n            ],\n            \"env\": {\n                \"OPENAI_API_KEY\": \"your-openai-api-key-here\"\n            }\n        }\n    }\n}\n```\n\n**Important**: \n- Replace `/path/to/fooddb` with the absolute path to your fooddb installation\n- Replace `your-openai-api-key-here` with your actual OpenAI API key\n- The `env` section is required for vector search functionality\n- Without a valid OpenAI API key, only basic text matching searches will work\n\n## MCP Tools\n\nThe server provides the following MCP tools:\n\n### food_search\n\nSearch for foods using semantic vector search via embeddings. This can find foods that match the concept even if they don't contain the exact keywords.\n\n```python\nfood_search(query: str, limit: int = 10, model: str = \"text-embedding-3-small\") -> List[Dict]\n```\n\n### food_info\n\nGet detailed information about a specific food by ID, including nutritional content, portions, and brand information.\n\n```python\nfood_info(food_id: int) -> str\n```\n\n## Development\n\n### Running Tests\n\n```bash\nuv run pytest\n```\n\n### Linting\n\n```bash\nuv run ruff check .\n```\n\n## Data Structure\n\nThe USDA Food Data Central dataset includes:\n\n- **Food**: Basic food information (name, category, etc.)\n- **Nutrient**: Definitions of nutrients (calories, protein, etc.)\n- **FoodNutrient**: Mapping of foods to their nutrient values\n- **FoodPortion**: Serving size information for foods\n- **FoodEmbeddings**: Vector embeddings for semantic search\n\n## Vector Search\n\nThe system uses OpenAI's text-embedding-3-small model to generate vector embeddings for food descriptions. These embeddings are stored in the SQLite database using the sqlite-vec extension, which enables efficient similarity searches.\n\nFor vector search functionality:\n\n1. Make sure the sqlite-vec extension is installed and available\n2. Set the OPENAI_API_KEY environment variable\n3. Generate embeddings during database initialization or with the generate-embeddings command\n4. Use the semantic_food_search MCP tool for natural language food searches"
}