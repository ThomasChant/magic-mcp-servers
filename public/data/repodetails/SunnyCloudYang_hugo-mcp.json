{
  "mcp_name": "SunnyCloudYang/hugo-mcp",
  "mcp_description": "Manage and deploy Hugo static sites with a comprehensive suite of tools for environment setup, site management, and theme customization.",
  "mcp_id": "SunnyCloudYang_hugo-mcp",
  "fetch_timestamp": "2025-06-23T08:42:56.395594Z",
  "github_url": "https://github.com/SunnyCloudYang/hugo-mcp",
  "repository": {
    "name": "hugo-mcp",
    "full_name": "SunnyCloudYang/hugo-mcp",
    "description": "A powerful MCP (Model Control Protocol) server for managing Hugo static site generator.",
    "html_url": "https://github.com/SunnyCloudYang/hugo-mcp",
    "created_at": "2025-04-14T09:43:20Z",
    "updated_at": "2025-06-22T19:04:30Z",
    "pushed_at": "2025-05-09T04:37:04Z",
    "size": 49,
    "stargazers_count": 6,
    "watchers_count": 6,
    "forks_count": 0,
    "open_issues_count": 1,
    "language": "Python",
    "license": null,
    "topics": [
      "hugo",
      "mcp",
      "mcp-server"
    ],
    "default_branch": "main",
    "owner": {
      "login": "SunnyCloudYang",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/101109361?v=4",
      "html_url": "https://github.com/SunnyCloudYang"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": true,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 38404
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# Hugo MCP Server\n\nA powerful MCP (Model Control Protocol) server for managing Hugo static site generator. This server provides a comprehensive set of tools for creating, managing, and deploying Hugo sites.\n\n## Table of Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Tools](#tools)\n  - [Environment Setup Tools](#environment-setup-tools)\n  - [Site Management Tools](#site-management-tools)\n  - [Theme Management Tools](#theme-management-tools)\n  - [Content Management Tools](#content-management-tools)\n  - [Preview and Build Tools](#preview-and-build-tools)\n- [Complete Workflow Example](#complete-workflow-example)\n- [Troubleshooting](#troubleshooting)\n\n## Installation\n\n### Prerequisites\n\n- Python 3.10+\n- uv (Python package manager)\n- Git (Highly recommended)\n\n### Installing the Hugo MCP Server\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/sunnycloudyang/hugo-mcp.git\n   ```\n\n2. Add server to your config (make sure `uv` has been installed before):\n\n   ```json\n   {\n        \"mcpServers\": {\n            \"hugo-mcp\": {\n                \"command\": \"uv\",\n                \"args\": [\n                    \"--directory\",\n                    \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/hugo-mcp\",\n                    \"run\",\n                    \"main.py\"\n                ]\n            }\n        }\n    }\n   ```\n\n   Remember to replace \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/hugo-mcp\" to your installation path\n\n3. Enalble this mcp server and try it!\n\n## Usage\n\nThe Hugo MCP server provides a set of tools that can be used to manage Hugo sites. Each tool has specific parameters and returns a structured response.\n\n### Basic Usage\n\n1. Start the server manually (If needed):\n\n   ```bash\n   uv run main.py\n   ```\n\n2. Connect to the server using an MCP client.\n\n3. Use the tools to manage your Hugo sites.\n\n## Tools\n\n### Environment Setup Tools\n\n#### check_hugo_installation\n\n**Description**: Check if Hugo is installed and get its version.\n\n**Parameters**: None\n\n**Returns**:\n\n```json\n{\n  \"status\": \"success\",\n  \"version\": \"Hugo Static Site Generator v0.92.0/extended linux/amd64 BuildDate=unknown\"\n}\n```\n\n**Error Response**:\n\n```json\n{\n  \"status\": \"error\",\n  \"message\": \"Hugo is not installed or not in PATH\"\n}\n```\n\n**Prerequisites**: None\n\n**Actions After Success**: None\n\n**Actions After Failure**: Install Hugo using the `install_hugo` tool.\n\n#### install_hugo\n\n**Description**: Install Hugo using the appropriate method for the current OS.\n\n**Parameters**:\n\n- `version` (optional): The version of Hugo to install. Defaults to \"latest\".\n\n**Returns**:\n\n```json\n{\n  \"status\": \"success\",\n  \"message\": \"Hugo installed via Homebrew\"\n}\n```\n\n**Error Response**:\n\n```json\n{\n  \"status\": \"error\",\n  \"message\": \"Installation failed: Command 'brew install hugo' returned non-zero exit status 1.\"\n}\n```\n\n**Prerequisites**: Appropriate package manager (Homebrew, apt, dnf, yum) must be installed.\n\n**Actions After Success**: Hugo is installed and ready to use.\n\n**Actions After Failure**: Manual installation may be required.\n\n#### check_go_installation\n\n**Description**: Check if Go is installed and get its version.\n\n**Parameters**: None\n\n**Returns**:\n\n```json\n{\n  \"status\": \"success\",\n  \"version\": \"go version go1.17.5 darwin/amd64\"\n}\n```\n\n**Error Response**:\n\n```json\n{\n  \"status\": \"error\",\n  \"message\": \"Go is not installed or not in PATH\"\n}\n```\n\n**Prerequisites**: None\n\n**Actions After Success**: None\n\n**Actions After Failure**: Install Go using the `install_go` tool.\n\n#### install_go\n\n**Description**: Install Go using the appropriate method for the current OS.\n\n**Parameters**:\n\n- `version` (optional): The version of Go to install. Defaults to \"latest\".\n\n**Returns**:\n\n```json\n{\n  \"status\": \"success\",\n  \"message\": \"Go installed via Homebrew\"\n}\n```\n\n**Error Response**:\n\n```json\n{\n  \"status\": \"error\",\n  \"message\": \"Installation failed: Command 'brew install go' returned non-zero exit status 1.\"\n}\n```\n\n**Prerequisites**: Appropriate package manager (Homebrew, apt, dnf, yum) must be installed.\n\n**Actions After Success**: Go is installed and ready to use.\n\n**Actions After Failure**: Manual installation may be required.\n\n#### check_git_installation\n\n**Description**: Check if Git is installed and get its configuration.\n\n**Parameters**: None\n\n**Returns**:\n\n```json\n{\n  \"status\": \"success\",\n  \"version\": \"git version 2.30.1 (Apple Git-130)\",\n  \"user\": {\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\"\n  },\n  \"default_branch\": \"main\"\n}\n```\n\n**Error Response**:\n\n```json\n{\n  \"status\": \"error\",\n  \"message\": \"Git is not installed or not in PATH\"\n}\n```\n\n**Prerequisites**: None\n\n**Actions After Success**: None\n\n**Actions After Failure**: Install Git using the `install_git` tool.\n\n#### install_git\n\n**Description**: Install Git using the appropriate method for the current OS.\n\n**Parameters**: None\n\n**Returns**:\n\n```json\n{\n  \"status\": \"success\",\n  \"message\": \"Git installed via Homebrew\"\n}\n```\n\n**Error Response**:\n\n```json\n{\n  \"status\": \"error\",\n  \"message\": \"Installation failed: Command 'brew install git' returned non-zero exit status 1.\"\n}\n```\n\n**Prerequisites**: Appropriate package manager (Homebrew, apt, dnf, yum) must be installed.\n\n**Actions After Success**: Git is installed and ready to use.\n\n**Actions After Failure**: Manual installation may be required.\n\n#### configure_git\n\n**Description**: Configure Git with user name and email.\n\n**Parameters**:\n\n- `name`: The user name to set.\n- `email`: The email address to set.\n\n**Returns**:\n\n```json\n{\n  \"status\": \"success\",\n  \"message\": \"Git configured with name 'John Doe' and email 'john.doe@example.com'\"\n}\n```\n\n**Error Response**:\n\n```json\n{\n  \"status\": \"error\",\n  \"message\": \"Failed to configure Git: Command 'git config --global user.name John Doe' returned non-zero exit status 1.\"\n}\n```\n\n**Prerequisites**: Git must be installed.\n\n**Actions After Success**: Git is configured with the specified user name and email.\n\n**Actions After Failure**: Manual configuration may be required.\n\n### Site Management Tools\n\n#### create_site\n\n**Description**: Create a new Hugo site.\n\n**Parameters**:\n\n- `site_name`: The name of the site to create.\n- `theme` (optional): The theme to use for the site.\n- `force` (optional): Whether to force creation if the directory already exists. Defaults to `false`.\n- `use_example_site` (optional): Whether to use the example site from the theme. Defaults to `true`.\n\n**Returns**:\n\n```json\n{\n  \"status\": \"success\",\n  \"path\": \"/path/to/site\",\n  \"theme\": \"paper\",\n  \"example_site\": true,\n  \"author\": {\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\"\n  }\n}\n```\n\n**Error Response**:\n\n```json\n{\n  \"status\": \"error\",\n  \"message\": \"Directory 'site' already exists. Use force=True to overwrite.\"\n}\n```\n\n**Prerequisites**: Hugo must be installed.\n\n**Actions After Success**: A new Hugo site is created with the specified theme and example content.\n\n**Actions After Failure**: The site is not created.\n\n### Theme Management Tools\n\n#### list_themes\n\n**Description**: List available Hugo themes from the official Hugo themes website.\n\n**Parameters**: None\n\n**Returns**:\n\n```json\n{\n  \"status\": \"success\",\n  \"themes\": [\n    {\n      \"name\": \"PaperMod\",\n      \"url\": \"https://github.com/gohugoio/hugoThemes/tree/master/themes/hugo-papermod\",\n      \"image\": \"https://themes.gohugo.io/themes/hugo-papermod/tn-featured_hu_275191178647f5e7.png\"\n    },\n    {\n      \"name\": \"Hugo Blox - Tailwind\",\n      \"url\": \"https://github.com/gohugoio/hugoThemes/tree/master/themes/blox-tailwind\",\n      \"image\": \"https://themes.gohugo.io/themes/blox-tailwind/tn-featured_hu_8c1541d303ce3b9b.png\"\n    }\n  ],\n  \"count\": 150\n}\n```\n\n**Error Response**:\n\n```json\n{\n  \"status\": \"error\",\n  \"message\": \"Network error: Connection refused\"\n}\n```\n\n**Prerequisites**: Internet connection.\n\n**Actions After Success**: A list of available themes is returned.\n\n**Actions After Failure**: No themes are returned.\n\n#### get_theme_details\n\n**Description**: Get detailed information about a specific Hugo theme.\n\n**Parameters**:\n\n- `theme_name`: The name of the theme to get details for.\n\n**Returns**:\n\n```json\n{\n  \"status\": \"success\",\n  \"theme\": {\n    \"name\": \"Paper\",\n    \"url\": \"https://github.com/gohugoio/hugoThemes/tree/master/themes/paper\",\n    \"image\": \"https://themes.gohugo.io/themes/paper/tn-featured.png\",\n    \"description\": \"A simple, clean, and responsive Hugo theme for personal blog.\",\n    \"features\": [\n      \"Responsive design\",\n      \"Clean and minimal\",\n      \"Fast and lightweight\",\n      \"SEO friendly\"\n    ],\n    \"tags\": [\"blog\", \"minimal\", \"responsive\"],\n    \"github_url\": \"https://github.com/nanxiaobei/hugo-paper\",\n    \"demo_url\": \"https://themes.gohugo.io/theme/paper/\",\n    \"installation\": \"git submodule add https://github.com/nanxiaobei/hugo-paper themes/paper\"\n  }\n}\n```\n\n**Error Response**:\n\n```json\n{\n  \"status\": \"error\",\n  \"message\": \"Theme 'NonExistentTheme' not found on the Hugo themes website\"\n}\n```\n\n**Prerequisites**: Internet connection.\n\n**Actions After Success**: Detailed information about the theme is returned.\n\n**Actions After Failure**: No theme details are returned.\n\n#### install_theme\n\n**Description**: Install a Hugo theme using git submodule or Hugo modules.\n\n**Parameters**:\n\n- `site_path`: The path to the Hugo site.\n- `theme_name`: The name of the theme to install.\n- `theme_url`: The URL of the theme repository.\n- `use_modules` (optional): Whether to use Hugo modules instead of git submodules. Defaults to `false`.\n\n**Returns**:\n\n```json\n{\n  \"status\": \"success\",\n  \"theme\": \"paper\",\n  \"method\": \"git_submodule\"\n}\n```\n\n**Error Response**:\n\n```json\n{\n  \"status\": \"error\",\n  \"message\": \"Failed to install theme: Command 'git submodule add https://github.com/nanxiaobei/hugo-paper themes/paper' returned non-zero exit status 1.\"\n}\n```\n\n**Prerequisites**:\n\n- Hugo must be installed.\n- Git must be installed (for git submodules).\n- Go must be installed (for Hugo modules).\n\n**Actions After Success**: The theme is installed and configured in the site.\n\n**Actions After Failure**: The theme is not installed.\n\n#### update_theme\n\n**Description**: Update an installed Hugo theme.\n\n**Parameters**:\n\n- `site_path`: The path to the Hugo site.\n- `theme_name`: The name of the theme to update.\n- `use_modules` (optional): Whether the theme was installed using Hugo modules. Defaults to `false`.\n\n**Returns**:\n\n```json\n{\n  \"status\": \"success\",\n  \"theme\": \"paper\",\n  \"method\": \"git_submodule\"\n}\n```\n\n**Error Response**:\n\n```json\n{\n  \"status\": \"error\",\n  \"message\": \"Failed to update theme: Command 'git submodule update --remote themes/paper' returned non-zero exit status 1.\"\n}\n```\n\n**Prerequisites**:\n\n- Hugo must be installed.\n- Git must be installed (for git submodules).\n- Go must be installed (for Hugo modules).\n- The theme must be already installed.\n\n**Actions After Success**: The theme is updated to the latest version.\n\n**Actions After Failure**: The theme is not updated.\n\n### Content Management Tools\n\n#### create_post\n\n**Description**: Create a new Hugo post.\n\n**Parameters**:\n\n- `site_path`: The path to the Hugo site.\n- `post_title`: The title of the post.\n- `content_type` (optional): The content type of the post. Defaults to \"posts\".\n- `draft` (optional): Whether the post should be a draft. Defaults to `true`.\n- `date` (optional): The date of the post.\n\n**Returns**:\n\n```json\n{\n  \"status\": \"success\",\n  \"file\": \"content/posts/my-first-post.md\",\n  \"draft\": true\n}\n```\n\n**Error Response**:\n\n```json\n{\n  \"status\": \"error\",\n  \"message\": \"Site path '/path/to/site' does not exist\"\n}\n```\n\n**Prerequisites**: Hugo must be installed.\n\n**Actions After Success**: A new post is created in the specified content type directory.\n\n**Actions After Failure**: The post is not created.\n\n#### list_content\n\n**Description**: List content in the Hugo site.\n\n**Parameters**:\n\n- `site_path`: The path to the Hugo site.\n- `content_type` (optional): The content type to list. If not specified, all content is listed.\n\n**Returns**:\n\n```json\n{\n  \"status\": \"success\",\n  \"content\": [\n    \"posts/my-first-post.md\",\n    \"posts/another-post.md\",\n    \"pages/about.md\"\n  ]\n}\n```\n\n**Error Response**:\n\n```json\n{\n  \"status\": \"error\",\n  \"message\": \"Site path '/path/to/site' does not exist\"\n}\n```\n\n**Prerequisites**: Hugo must be installed.\n\n**Actions After Success**: A list of content files is returned.\n\n**Actions After Failure**: No content is returned.\n\n### Preview and Build Tools\n\n#### start_preview\n\n**Description**: Start Hugo local server.\n\n**Parameters**:\n\n- `site_path`: The path to the Hugo site.\n- `port` (optional): The port to use. Defaults to 1313.\n- `bind` (optional): The address to bind to. Defaults to \"127.0.0.1\".\n- `build_drafts` (optional): Whether to build draft content. Defaults to `false`.\n- `build_future` (optional): Whether to build future content. Defaults to `false`.\n- `build_expired` (optional): Whether to build expired content. Defaults to `false`.\n\n**Returns**:\n\n```json\n{\n  \"status\": \"success\",\n  \"url\": \"http://127.0.0.1:1313\",\n  \"pid\": 12345,\n  \"options\": {\n    \"build_drafts\": false,\n    \"build_future\": false,\n    \"build_expired\": false\n  }\n}\n```\n\n**Error Response**:\n\n```json\n{\n  \"status\": \"error\",\n  \"message\": \"Site path '/path/to/site' does not exist\"\n}\n```\n\n**Prerequisites**: Hugo must be installed.\n\n**Actions After Success**: The Hugo server is started and accessible at the specified URL.\n\n**Actions After Failure**: The server is not started.\n\n#### stop_preview\n\n**Description**: Stop a running Hugo preview server.\n\n**Parameters**:\n\n- `pid`: The process ID of the server to stop.\n\n**Returns**:\n\n```json\n{\n  \"status\": \"success\",\n  \"message\": \"Server with PID 12345 stopped\"\n}\n```\n\n**Error Response**:\n\n```json\n{\n  \"status\": \"error\",\n  \"message\": \"Process with PID 12345 not found\"\n}\n```\n\n**Prerequisites**: None.\n\n**Actions After Success**: The Hugo server is stopped.\n\n**Actions After Failure**: The server is not stopped.\n\n#### build_site\n\n**Description**: Build the Hugo site for production.\n\n**Parameters**:\n\n- `site_path`: The path to the Hugo site.\n- `destination` (optional): The destination directory. Defaults to \"public\".\n- `clean_destination` (optional): Whether to clean the destination directory before building. Defaults to `false`.\n- `minify` (optional): Whether to minify the output. Defaults to `false`.\n\n**Returns**:\n\n```json\n{\n  \"status\": \"success\",\n  \"destination\": \"/path/to/site/public\",\n  \"output\": \"Built in 123 ms\"\n}\n```\n\n**Error Response**:\n\n```json\n{\n  \"status\": \"error\",\n  \"message\": \"Site path '/path/to/site' does not exist\"\n}\n```\n\n**Prerequisites**: Hugo must be installed.\n\n**Actions After Success**: The site is built and ready for deployment.\n\n**Actions After Failure**: The site is not built.\n\n#### deploy_site\n\n**Description**: Deploy a Hugo site to various platforms.\n\n**Parameters**:\n\n- `site_path`: The path to the Hugo site.\n- `platform`: Deployment platform (github-pages, netlify, vercel, custom).\n- `destination` (optional): Build destination directory. Defaults to \"public\".\n- `branch` (optional): Branch to deploy to. Defaults to \"main\".\n- `commit_message` (optional): Commit message for the deployment. Defaults to \"Update site\".\n- `remote_url` (optional): Remote URL for custom deployment.\n- `api_key` (optional): API key for the deployment platform.\n- `additional_options` (optional): Additional platform-specific options.\n\n**Returns**:\n\n```json\n{\n  \"status\": \"success\",\n  \"platform\": \"github-pages\",\n  \"branch\": \"gh-pages\",\n  \"url\": \"https://username.github.io\"\n}\n```\n\n**Error Response**:\n\n```json\n{\n  \"status\": \"error\",\n  \"message\": \"Deployment failed: GitHub Pages deployment failed: Command 'git push origin gh-pages --force' returned non-zero exit status 1.\"\n}\n```\n\n**Prerequisites**:\n\n- Hugo must be installed.\n- Git must be installed.\n- For GitHub Pages: Git repository must be initialized.\n- For Netlify: Netlify CLI must be installed (will be installed automatically if not present).\n- For Vercel: Vercel CLI must be installed (will be installed automatically if not present).\n\n**Actions After Success**: The site is deployed to the specified platform and accessible at the returned URL.\n\n**Actions After Failure**: The site is not deployed.\n\n**Platform-specific notes**:\n\n- **GitHub Pages**: Requires a Git repository and optionally an API key for authentication.\n- **Netlify**: Requires Netlify CLI and optionally an API key for authentication.\n- **Vercel**: Requires Vercel CLI and optionally an API key for authentication.\n- **Custom**: Requires a Git repository and a remote URL.\n\n## Complete Workflow Example\n\nHere's a complete workflow example (in python scripts rather than mcp server tools to show the common route) for creating a new Hugo site with a theme:\n\n1. Check if Hugo is installed:\n\n   ```python\n   result = await check_hugo_installation()\n   if result[\"status\"] != \"success\":\n       result = await install_hugo()\n   ```\n\n2. Check if Git is installed:\n\n   ```python\n   result = await check_git_installation()\n   if result[\"status\"] != \"success\":\n       result = await install_git()\n   ```\n\n3. Configure Git:\n\n   ```python\n   result = await configure_git(\"John Doe\", \"john.doe@example.com\")\n   ```\n\n4. List available themes:\n\n   ```python\n   result = await list_themes()\n   themes = result[\"themes\"]\n   ```\n\n5. Get details for a specific theme:\n\n   ```python\n   result = await get_theme_details(\"Paper\")\n   theme_details = result[\"theme\"]\n   ```\n\n6. Create a new site with the theme:\n\n   ```python\n   result = await create_site(\"my-blog\", theme=\"nanxiaobei/hugo-paper\", use_example_site=True)\n   site_path = result[\"path\"]\n   ```\n\n7. Start the preview server:\n\n   ```python\n   result = await start_preview(site_path, build_drafts=True)\n   preview_url = result[\"url\"]\n   ```\n\n8. Create a new post:\n\n   ```python\n   result = await create_post(site_path, \"my-first-post\", draft=False)\n   post_file = result[\"file\"]\n   ```\n\n9. Build the site for production:\n\n   ```python\n   result = await build_site(site_path, minify=True)\n   ```\n\n10. Deploy the site to GitHub Pages:\n    ```python\n    result = await deploy_site(\n        site_path=site_path,\n        platform=\"github-pages\",\n        branch=\"gh-pages\",\n        commit_message=\"Deploy site\",\n        api_key=\"your-github-token\"\n    )\n    deploy_url = result[\"url\"]\n    ```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Hugo is not installed**:\n\n   - Use the `install_hugo` tool to install Hugo.\n\n2. **Git is not installed**:\n\n   - Use the `install_git` tool to install Git.\n\n3. **Theme installation fails**:\n\n   - Check if the theme URL is correct.\n   - Make sure Git is installed for git submodules.\n   - Make sure Go is installed for Hugo modules.\n   - Read the theme's doc to check if there is sth. different\n\n4. **Preview server fails to start**:\n\n   - Check if the port is already in use.\n   - Make sure the site path is correct.\n   - Check your network\n\n5. **Build fails**:\n   - Check if the site path is correct.\n   - Make sure all required dependencies are installed.\n\n### Getting Help\n\nIf you encounter any issues not covered in this documentation, please [open an issue](https://github.com/sunnycloudyang/hugo-mcp/issues) on the GitHub repository.\n"
}