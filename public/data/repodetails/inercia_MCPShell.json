{
  "mcp_name": "MCP-CLI Adapter",
  "mcp_description": "Use command line tools in a secure fashion as MCP tools.",
  "mcp_id": "inercia_MCPShell",
  "fetch_timestamp": "2025-06-23T06:33:15.696876Z",
  "github_url": "https://github.com/inercia/mcp-cli-adapter",
  "repository": {
    "name": "MCPShell",
    "full_name": "inercia/MCPShell",
    "description": "Use shell scripts as MCP tools",
    "html_url": "https://github.com/inercia/MCPShell",
    "created_at": "2025-05-10T14:18:45Z",
    "updated_at": "2025-06-09T07:43:44Z",
    "pushed_at": "2025-05-19T09:07:57Z",
    "size": 3644,
    "stargazers_count": 22,
    "watchers_count": 22,
    "forks_count": 2,
    "open_issues_count": 0,
    "language": "Go",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "inercia",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/1841612?v=4",
      "html_url": "https://github.com/inercia"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 2,
    "subscribers_count": 2,
    "languages": {
      "Go": 221978,
      "Shell": 15769,
      "Makefile": 4061,
      "Smarty": 1873
    },
    "language_percentages": {
      "Go": 91.09,
      "Shell": 6.47,
      "Makefile": 1.67,
      "Smarty": 0.77
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "latest_release": {
      "tag_name": "v0.1.5",
      "name": "Release v0.1.5",
      "published_at": "2025-05-19T09:08:57Z",
      "body": "**Full Changelog**: https://github.com/inercia/MCPShell/compare/v0.1.4...v0.1.5",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.1.5",
        "commit_sha": "da07eead8a2f28fc6f5895e1bc05a1b72e3a0ef9"
      },
      {
        "name": "v0.1.4",
        "commit_sha": "836b4a45b0765f896cb3af500d3966408038e49b"
      },
      {
        "name": "v0.1.3",
        "commit_sha": "537508a962ed94db56cd165548ee8ec925127455"
      },
      {
        "name": "v0.1.2",
        "commit_sha": "9a39e52fba65cae01fc5d9d690695f791e5eb8fb"
      },
      {
        "name": "v0.1.1",
        "commit_sha": "f0b766b9261848d15afb9e47b44307553c51cc66"
      },
      {
        "name": "v0.1.0",
        "commit_sha": "4d53d3766cf0ecf815371bad4d9141881c07a533"
      },
      {
        "name": "v0.0.17",
        "commit_sha": "90c5c9d1e7177571b11a981ce342265cadb8b6c9"
      },
      {
        "name": "v0.0.16",
        "commit_sha": "233347c1e0658fedc9339fd41c8c02865d19b32c"
      },
      {
        "name": "v0.0.15",
        "commit_sha": "2797cd8798e8eae65dc8e7ff6554466aeb368fb4"
      },
      {
        "name": "v0.0.14",
        "commit_sha": "69dba2e88df657eeb9838956cf32f1c7b668e73b"
      }
    ],
    "latest_version": "v0.1.5"
  },
  "readme": "# MCPShell\n\n<p align=\"center\">\n  <img src=\"docs/logo.png\" alt=\"banner\" width=\"300\"/>\n</p>\n\n\nThe **MCPShell** is a tool that allows LLMs to safely execute **command-line tools**\nthrough the [**Model Context Protocol (MCP)**](https://modelcontextprotocol.io/).\nIt provides a secure bridge between LLMs and operating system commands.\n\n## Features\n\n- **Flexible command execution**: Run any shell commands as MCP tools,\n  with parameter substitution through templates.\n- **Configuration-based tool definitions**: Define tools in YAML with parameters,\n  constraints, and output formatting.\n- **Security through constraints**: Validate tool parameters using CEL expressions\n  before execution, as well as optional [**sanboxed environments**](docs/config-runners.md)\n  for running commands.\n- **Quick proptotyping of MCP tools**: just add some shell code and use it as\n  a MCP tool in your LLM.\n- **Simple integration**: Works with any LLM client supporting the MCP protocol\n  (ie, Cursor, VSCode, Witsy...)\n\n## Quick Start\n\nImagine you want Cursor (or some other MCP client) help you with your\nspace problems in your hard disk.\n\n1. Create a configuration file `/my/example.yaml` defining your tools:\n\n   ```yaml\n   mcp:\n     description: |\n       Tool for analyzing disk usage to help identify what's consuming space.\n     run:\n       shell: bash\n     tools:\n       - name: \"disk_usage\"\n         description: \"Check disk usage for a directory\"\n         params:\n           directory:\n             type: string\n             description: \"Directory to analyze\"\n             required: true\n           max_depth:\n             type: number\n             description: \"Maximum depth to analyze (1-3)\"\n             default: 2\n         constraints:\n           - \"directory.startsWith('/')\"  # Must be absolute path\n           - \"!directory.contains('..')\"  # Prevent directory traversal\n           - \"max_depth >= 1 && max_depth <= 3\"  # Limit recursion depth\n           - \"directory.matches('^[\\\\w\\\\s./\\\\-_]+$')\"  # Only allow safe path characters, prevent command injection\n         run:\n           command: |\n             du -h --max-depth={{ .max_depth }} {{ .directory }} | sort -hr | head -20\n         output:\n           prefix: |\n             Disk Usage Analysis (Top 20 largest directories):\n   ```\n\n   Take a look at the [examples directory](examples) for more sophisticated and useful examples.\n   Maybe you prefer to let the LLM know about your Kubernetes cluster with\n   [kubectl](examples/kubectl-ro.yaml)?\n   Or let it run some [AWS CLI](examples/aws-networking-ro.yaml) commands?\n\n2. Configure the MCP server in Cursor (or in any other LLM client with support for MCP)\n\n   For example, for Cursor, create `.cursor/mcp.json`:\n\n   ```json\n   {\n       // you need the \"go\" command available\n       \"mcpServers\": {\n           \"mcp-cli-examples\": {\n               \"command\": \"go\",\n               \"args\": [\n                  \"run\", \"github.com/inercia/MCPShell@v0.1.5\",\n                  \"mcp\", \"--config\", \"/my/example.yaml\",\n                  \"--logfile\", \"/some/path/mcpshell/example.log\"\n               ]\n           }\n       }\n   }\n   ```\n\n   See more details on how to configure [Cursor](docs/usage-cursor.md) or\n   [Visual Studio Code](docs/usage-vscode.md). Other LLMs with support for MCPs\n   should be configured in a similar way.\n\n3. Make sure your MCP client is refreshed (Cursor should recognize it automatically the\n   firt time, but any change in the config file will require a refresh).\n4. Ask your LLM some questions it should be able to answer with the new tool. For example:\n   _\"I'm running out of space in my hard disk. Could you help me finding the problem?\"_.\n\n## Usage and Configuration\n\nTake a look at all the command in [this document](docs/usage.md).\n\nConfiguration files use a YAML format defined [here](docs/config.md).\nSee the [this directory](examples) for some examples.\n\n## Agent Mode\n\nMCPShell can also be run in agent mode, providing direct connectivity between Large Language Models\n(LLMs) and your command-line tools without requiring a separate MCP client. In this mode,\nMCPShell connects to an OpenAI-compatible API (including local LLMs like Ollama), makes your\ntools available to the model, executes requested tool operations, and manages the conversation flow.\nThis enables the creation of specialized AI assistants that can autonomously perform system tasks\nusing the tools you define in your configuration. The agent mode supports both interactive\nconversations and one-shot executions, and allows you to define system and user prompts directly\nin your configuration files.\n\nFor detailed information on using agent mode, see the [Agent Mode documentation](docs/usage-agent.md).\n\n## Security Considerations\n\nSo you will probably thing\n_\"this AI has helped me finding all those big files. What if I create another tool for removing files?\"_.\n**Don't do that!**.\n\n- Limit the scope of these tools to **read-only actions**, do not give the LLM the power to change things.\n- Use **constraints** to limit command execution to safe parameters\n- Consider using a [**sanboxed environment**](docs/config-runners.md) for running commands.\n- Review all command templates for potential injection vulnerabilities\n- Only expose tools that are safe for external use\n- All of the above!\n\nPlease read the [Security Considerations](docs/security.md) document before using this software.\n\n## Contributing\n\nContributions are welcome! Take a look at the [development guide](docs/development.md).\nPlease open an issue or submit a pull request on GitHub.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n"
}