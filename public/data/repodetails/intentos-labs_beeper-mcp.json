{
  "mcp_name": "intentos-labs/beeper-mcp",
  "mcp_description": "🐍 - Beeper provides transactions on BSC, including balance/token transfers, token swaps in Pancakeswap and beeper reward claims.",
  "mcp_id": "intentos-labs_beeper-mcp",
  "fetch_timestamp": "2025-06-23T05:00:19.084900Z",
  "github_url": "https://github.com/intentos-labs/beeper-mcp",
  "repository": {
    "name": "beeper-mcp",
    "full_name": "intentos-labs/beeper-mcp",
    "description": "A backend service for executing beeper transactions on Binance Smart Chain",
    "html_url": "https://github.com/intentos-labs/beeper-mcp",
    "created_at": "2025-04-09T08:08:41Z",
    "updated_at": "2025-05-30T19:12:51Z",
    "pushed_at": "2025-04-10T09:12:10Z",
    "size": 469,
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks_count": 2,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "intentos-labs",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/193672991?v=4",
      "html_url": "https://github.com/intentos-labs"
    },
    "has_issues": false,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 2,
    "subscribers_count": 0,
    "languages": {
      "Python": 8445
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 2
  },
  "readme": "# beeper-mcp\n\nA backend service for executing beeper transactions on Binance Smart Chain (BSC). This service provides a set of tools for interacting with the BSC blockchain, including balance checking, balance transfers, token transfers, token swaps in Pancakeswap and beeper reward claims.\n\n## Features\n\n- Get BNB and token balances\n- Transfer BNB and tokens\n- Swap tokens in Pancakeswap\n- Get token prices\n- Buy and sell tokens\n- Claim rewards of beeper tokens\n- Manage default wallet and token addresses\n\n## Prerequisites\n\n- Python >=3.10\n- Access to BSC network (mainnet or testnet)\n- Wallet account and private key\n\n## Environment Variables\n\nCreate a `.env` file in the project root with the following variables:\n\n```env\nBEEPER_CHAIN=<bsc or bsc-testnet>\nBEEPER_ACCOUNT=<your-wallet-address>\nBEEPER_SECRET_KEY=<your-private-key>\nBEEPER_TARGET_TOKEN=<default-token-address>  # Optional\n```\n\n## API Endpoints\n\nThe service exposes the following MCP tools:\n\n### Wallet and Token Management\n- `get_default_wallet_address() -> str`: Get the default wallet address\n- `get_default_token_address() -> str`: Get the default token address\n- `switch_default_token_address(new_token_address: str) -> str`: Switch to a new default token address\n\n### Balance Operations\n- `get_balance(address: str) -> str`: Get BNB balance of an address\n- `get_token_balance(address: str, token_address: str) -> str`: Get token balance of an address\n\n### Transfer Operations\n- `transfer(recipient_address: str, amount: Decimal = 0.01) -> dict`: Transfer BNB to an address\n- `transfer_token(recipient_address: str, token_address: str, amount: Decimal = 0.01) -> dict`: Transfer tokens to an address\n\n### Trading Operations\n- `swap_token(token_in: str, token_out: str, amount: Decimal = 0.01) -> dict`: Swap between tokens\n- `get_token_price(token_address: str) -> float`: Get token price in BNB\n- `buy_token(token_address: str, amount: Decimal = 0.01) -> dict`: Buy tokens with BNB\n- `sell_token(token_address: str, amount: Decimal = 0.01) -> dict`: Sell tokens for BNB\n\n### Reward Operations\n- `claim_rewards(token_address: str) -> dict`: Claim rewards for a token\n\n## Running the Service\n\n```bash\ngit clone https://github.com/unibaseio/beeper-mcp.git\ncd beeper-mcp\n# start server over stdio\nuv run src/beeper_mcp/server.py \n```\n\n+ start using sse\n\nThe sse service will start on port 8000 by default. You can specify a different port using the `--port` argument:\n\n```bash\nuv run src/beeper_mcp/server.py --port 8008 --transport=sse\n```\n\n### Configuration on Claude/Windsurf/Cursor/Cline\n\n```json\n{\n  \"mcpServers\": {\n    \"beeper\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"path/to/beeper-mcp\",\n        \"run\", \n        \"src/beeper_mcp/server.py\"\n        ],\n      \"env\": {\n        \"BEEPER_ACCOUNT\": \"your account, 0x...\",\n        \"BEEPER_SECRET_KEY\": \"your private key or in .env\",\n        \"BEEPER_TARGET_TOKEN\": \"default token address\",\n        \"BEEPER_CHAIN\": \"chain type <bsc/bsc-testnet>\"\n      }\n    }\n  }\n}\n```\n\n## Notes\n\n- All amounts are in native units (e.g., BNB, tokens)\n- Token addresses should be provided in the correct format\n- Make sure you have sufficient BNB for gas fees\n- The service supports both BSC mainnet and testnet\n- All operations return detailed response objects with transaction hashes and status information\n- The service includes built-in error handling and status tracking for transactions\n\n\n## Usage\n\ncall functions in llm chat\n\n+ show wallet and buy tokens\n\n![show wallet and buy tokens](./asset/buy.png)\n\n+ sell tokens\n\n![sell tokens](./asset/sell.png)"
}