{
  "mcp_name": "j4c0bs/mcp-server-sql-analyzer",
  "mcp_description": "üêç - MCP server that provides SQL analysis, linting, and dialect conversion using [SQLGlot](https://github.com/tobymao/sqlglot)",
  "mcp_id": "j4c0bs_mcp-server-sql-analyzer",
  "fetch_timestamp": "2025-06-23T05:04:53.920500Z",
  "github_url": "https://github.com/j4c0bs/mcp-server-sql-analyzer",
  "repository": {
    "name": "mcp-server-sql-analyzer",
    "full_name": "j4c0bs/mcp-server-sql-analyzer",
    "description": "MCP server for SQL static analysis.",
    "html_url": "https://github.com/j4c0bs/mcp-server-sql-analyzer",
    "created_at": "2025-01-23T16:33:06Z",
    "updated_at": "2025-06-17T17:27:45Z",
    "pushed_at": "2025-01-30T18:45:21Z",
    "size": 31,
    "stargazers_count": 19,
    "watchers_count": 19,
    "forks_count": 5,
    "open_issues_count": 1,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "j4c0bs",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/20891193?v=4",
      "html_url": "https://github.com/j4c0bs"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 5,
    "subscribers_count": 1,
    "languages": {
      "Python": 14755
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 2,
    "contributors_count": 1
  },
  "readme": "# mcp-server-sql-analyzer\n\nA Model Context Protocol (MCP) server that provides SQL analysis, linting, and dialect conversion capabilities using [SQLGlot](https://sqlglot.com/sqlglot.html).\n\n## Overview\n\nThe SQL Analyzer MCP server provides tools for analyzing and working with SQL queries. It helps with:\n\n- SQL syntax validation and linting\n- Converting queries between different SQL dialects (e.g., MySQL to PostgreSQL)\n- Extracting and analyzing table references and dependencies\n- Identifying column usage and relationships\n- Discovering supported SQL dialects\n\n### How Claude Uses This Server\n\nAs an AI assistant, this server enhances my ability to help users work with SQL efficiently by:\n\n1. **Query Validation**: I can instantly validate SQL syntax before suggesting it to users, ensuring I provide correct and dialect-appropriate queries.\n\n2. **Dialect Conversion**: When users need to migrate queries between different database systems, I can accurately convert the syntax while preserving the query's logic.\n\n3. **Code Analysis**: The table and column reference analysis helps me understand complex queries, making it easier to explain query structure and suggest optimizations.\n\n4. **Compatibility Checking**: By knowing the supported dialects and their specific features, I can guide users toward database-specific best practices.\n\nThis toolset allows me to provide more accurate and helpful SQL-related assistance while reducing the risk of syntax errors or dialect-specific issues.\n\n### Tips\n\nUpdate your personal preferences in Claude Desktop settings to request that generated SQL is first validated using the `lint_sql` tool.\n\n## Tools\n\n1. lint_sql\n   - Validates SQL query syntax and returns any errors\n   - Input:\n     - sql (string): SQL query to analyze\n     - dialect (string, optional): SQL dialect (e.g., 'mysql', 'postgresql')\n   - Returns: ParseResult containing:\n     - is_valid (boolean): Whether the SQL is valid\n     - message (string): Error message or \"No syntax errors\"\n     - position (object, optional): Line and column of error if present\n\n2. transpile_sql\n   - Converts SQL between different dialects\n   - Inputs:\n     - sql (string): SQL statement to transpile\n     - read_dialect (string): Source SQL dialect\n     - write_dialect (string): Target SQL dialect\n   - Returns: TranspileResult containing:\n     - is_valid (boolean): Whether transpilation succeeded\n     - message (string): Error message or success confirmation\n     - sql (string): Transpiled SQL if successful\n\n3. get_all_table_references\n   - Extracts table and CTE references from SQL\n   - Inputs:\n     - sql (string): SQL statement to analyze\n     - dialect (string, optional): SQL dialect\n   - Returns: TableReferencesResult containing:\n     - is_valid (boolean): Whether analysis succeeded\n     - message (string): Status message\n     - tables (array): List of table references with type, catalog, database, table name, alias, and fully qualified name\n\n4. get_all_column_references\n   - Extracts column references with table context\n   - Inputs:\n     - sql (string): SQL statement to analyze\n     - dialect (string, optional): SQL dialect\n   - Returns: ColumnReferencesResult containing:\n     - is_valid (boolean): Whether analysis succeeded\n     - message (string): Status message\n     - columns (array): List of column references with column name, table name, and fully qualified name\n\n## Resources\n\n### SQL Dialect Discovery\n\n```\ndialects://all\n```\n\nReturns a list of all supported SQL dialects for use in all tools.\n\n## Configuration\n\n### Using uvx (recommended)\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n      \"sql-analyzer\": {\n          \"command\": \"uvx\",\n          \"args\": [\n              \"--from\",\n              \"git+https://github.com/j4c0bs/mcp-server-sql-analyzer.git\",\n              \"mcp-server-sql-analyzer\"\n          ]\n      }\n  }\n}\n```\n\n### Using uv\n\nAfter cloning this repo, add this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n      \"sql-analyzer\": {\n          \"command\": \"uv\",\n          \"args\": [\n              \"--directory\",\n              \"/path/to/mcp-server-sql-analyzer\",\n              \"run\",\n              \"mcp-server-sql-analyzer\"\n          ]\n      }\n  }\n}\n```\n\n## Development\n\nTo run the server in development mode:\n\n```bash\n# Clone the repository\ngit clone git@github.com:j4c0bs/mcp-server-sql-analyzer.git\n\n# Run the server\nnpx @modelcontextprotocol/inspector uv --directory /path/to/mcp-server-sql-analyzer run mcp-server-sql-analyzer\n```\n\nTo run unit tests:\n\n```bash\nuv run pytest .\n```\n\n## License\n\nMIT\n"
}