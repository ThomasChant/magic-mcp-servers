{
  "mcp_name": "danielsuguimoto/readonly-filesystem-mcp",
  "mcp_description": "Node.js server for readonly filesystem operations using Model Context Protocol.",
  "mcp_id": "danielsuguimoto_readonly-filesystem-mcp",
  "fetch_timestamp": "2025-06-23T02:26:54.623264Z",
  "github_url": "https://github.com/danielsuguimoto/readonly-filesystem-mcp",
  "repository": {
    "name": "readonly-filesystem-mcp",
    "full_name": "danielsuguimoto/readonly-filesystem-mcp",
    "description": null,
    "html_url": "https://github.com/danielsuguimoto/readonly-filesystem-mcp",
    "created_at": "2025-04-14T01:21:15Z",
    "updated_at": "2025-05-09T13:34:42Z",
    "pushed_at": "2025-04-18T13:38:34Z",
    "size": 21,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 1,
    "language": "JavaScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "danielsuguimoto",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/25229545?v=4",
      "html_url": "https://github.com/danielsuguimoto"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 19940
    },
    "language_percentages": {
      "JavaScript": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "0.6.3"
  },
  "readme": "Filesystem MCP Server\n---------------------\nA Python server implementing Model Context Protocol (MCP) for secure filesystem operations.\nFeatures\n--------\n*   Read/write files with multiple access methods (whole file, line ranges, keyword-based)\n*   Create/list directories and file trees\n*   Move files/directories\n*   Search files by name and content\n*   Perform diff-based edits with preview support\n*   Get detailed file metadata (size, permissions, ownership)\n*   Git-aware directory tree listing respecting .gitignore\n*   Function/keyword search in files with contextual results\n*   Multi-file read operations\n*   Path validation and security checks\n**Note**: The server only allows operations within directories specified via command-line arguments.\nInstallation\n------------\nBuild the Docker image locally:\ndocker build -t mcp/filesystem .\nUsage with Claude\n-----------------\nAdd this to your `claude_desktop_config.json`:\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"--mount\", \"type=bind,src=/path/to/your/directory,dst=/projects\",\n        \"mcp/filesystem\",\n        \"/projects\"\n      ]\n    }\n  }\n}\nNote: All directories are mounted to `/projects` by default. Adding the `,ro` flag will make the directory read-only.\nAvailable Tools\n---------------\n### read_file\n*   Read complete contents of a file\n*   Input: `path` (string)\n### read_multiple_files\n*   Read multiple files simultaneously\n*   Input: `paths` (string[])\n*   Failed reads won't stop the entire operation\n### read_file_by_line\n*   Read specific lines or line ranges from a file\n*   Inputs: \n    *   `path` (string)\n    *   `ranges` (string[]): Line numbers or ranges (e.g., [\"5\", \"10-20\"])\n### read_file_by_keyword\n*   Find lines containing a keyword with optional context\n*   Inputs: \n    *   `path` (string)\n    *   `keyword` (string): Text to search for\n    *   `before` (int): Lines to include before match (default: 0)\n    *   `after` (int): Lines to include after match (default: 0)\n    *   `use_regex` (bool): Use regex pattern (default: false)\n    *   `ignore_case` (bool): Case-insensitive search (default: false)\n*   Returns matching lines with \">\" prefix and line numbers\n### read_function_by_keyword\n*   Extract function definitions by keyword\n*   Inputs: \n    *   `path` (string)\n    *   `keyword` (string): Typically function name\n    *   `before` (int): Lines to include before match (default: 0)\n    *   `use_regex` (bool): Use regex pattern (default: false)\n### write_file\n*   Create or overwrite a file\n*   Inputs: \n    *   `path` (string)\n    *   `content` (string)\n### edit_file_diff\n*   Make surgical edits to a file without specifying line numbers\n*   Inputs: \n    *   `path` (string)\n    *   `replacements` (object): Dictionary with keys as content to find and values as replacement content\n    *   `inserts` (object): Dictionary for inserting content after specified anchor text\n    *   `replace_all` (boolean): Replace all occurrences or just first match (default: true)\n    *   `dry_run` (boolean): Preview changes without applying (default: false)\n*   Returns a summary of changes made\n### edit_file_diff_line\n*   Edit a file with precise line number specifications\n*   Inputs: \n    *   `path` (string)\n    *   `edits` (object): Dictionary of edits with keys as line specifiers and values as content \n        *   \"N\": Replace line N with provided content\n        *   \"N-M\": Replace lines N through M with provided content\n        *   \"Ni\": Insert content after line N (use \"0i\" for beginning)\n        *   \"a\": Append content to end of file\n    *   `dry_run` (boolean): Preview changes without applying (default: false)\n*   Returns a summary of applied changes\n### create_directory\n*   Create directory or ensure it exists\n*   Input: `path` (string)\n*   Creates parent directories if needed\n### list_directory\n*   List directory contents with [FILE] or [DIR] prefixes\n*   Input: `path` (string)\n### directory_tree\n*   Get a recursive tree view of files and directories with metadata\n*   Inputs: \n    *   `path` (string)\n    *   `count_lines` (boolean): Include line counts (default: false)\n    *   `show_permissions` (boolean): Show file permissions (default: false)\n    *   `show_owner` (boolean): Show file ownership information (default: false)\n    *   `show_size` (boolean): Show file sizes (default: false)\n### git_directory_tree\n*   Get a directory tree for a git repository respecting .gitignore\n*   Inputs: \n    *   `path` (string)\n    *   `count_lines` (boolean): Include line counts (default: false)\n    *   `show_permissions` (boolean): Show file permissions (default: false)\n    *   `show_owner` (boolean): Show file ownership information (default: false)\n    *   `show_size` (boolean): Show file sizes (default: false)\n### move_file\n*   Move or rename files and directories\n*   Inputs: \n    *   `source` (string)\n    *   `destination` (string)\n### search_files\n*   Recursively search for files/directories matching a pattern\n*   Inputs: \n    *   `path` (string): Starting directory\n    *   `pattern` (string): Search pattern (case-insensitive)\n    *   `excludePatterns` (string[]): Glob patterns to exclude\n*   Returns full paths to all matching files and directories\n### get_file_info\n*   Get detailed file metadata\n*   Input: `path` (string)\n*   Returns size, creation time, modified time, permissions, etc.\n### list_allowed_directories\n*   List all directories the server is allowed to access\nSecurity\n--------\nThe server implements comprehensive security measures:\n*   Maintains a whitelist of allowed directories specified via command-line arguments\n*   Performs strict path validation to prevent unauthorized access outside allowed directories\n*   Validates symlink targets to ensure they don't escape the allowed directories\n*   Handles circular symlinks and invalid paths gracefully\n*   Verifies parent directories for non-existent paths to ensure they're within allowed boundaries\nRequirements\n------------\n*   Python 3.12+\n*   MCP 1.5.0+\n*   Docker\n*   httpx 0.28.1+\n*   Git (optional, for git_directory_tree)\nLicense\n-------\n[MIT](https://github.com/0kenx/filesystem-mcp/blob/main/LICENSE)"
}