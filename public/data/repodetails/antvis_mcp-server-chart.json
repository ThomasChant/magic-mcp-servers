{
  "mcp_name": "Chart",
  "mcp_description": "üéñÔ∏è üìá ‚òÅÔ∏è - A Model Context Protocol server for generating visual charts using [AntV](https://github.com/antvis).",
  "mcp_id": "antvis_mcp-server-chart",
  "fetch_timestamp": "2025-06-23T02:02:44.244869Z",
  "github_url": "https://github.com/antvis/mcp-server-chart",
  "repository": {
    "name": "mcp-server-chart",
    "full_name": "antvis/mcp-server-chart",
    "description": "ü§ñ A visualization Model Context Protocol server for generating 25+ visual charts using @antvis.",
    "html_url": "https://github.com/antvis/mcp-server-chart",
    "created_at": "2025-04-25T09:10:06Z",
    "updated_at": "2025-06-23T01:50:00Z",
    "pushed_at": "2025-06-19T13:55:17Z",
    "size": 122,
    "stargazers_count": 1372,
    "watchers_count": 1372,
    "forks_count": 138,
    "open_issues_count": 13,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [
      "antv",
      "llm",
      "mcp",
      "mcp-server",
      "visualization"
    ],
    "default_branch": "main",
    "owner": {
      "login": "antvis",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/19199542?v=4",
      "html_url": "https://github.com/antvis"
    },
    "has_issues": true,
    "has_projects": false,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 138,
    "subscribers_count": 14,
    "languages": {
      "TypeScript": 78422,
      "JavaScript": 1772,
      "Dockerfile": 288,
      "Shell": 52
    },
    "language_percentages": {
      "TypeScript": 97.38,
      "JavaScript": 2.2,
      "Dockerfile": 0.36,
      "Shell": 0.06
    },
    "pull_requests_count": 57,
    "contributors_count": 8,
    "latest_release": {
      "tag_name": "0.7.1",
      "name": "0.7.1",
      "published_at": "2025-06-18T12:47:58Z",
      "body": "## What's Changed\r\n* fix: remove the `timeout` option for fetch request by @wang1212 in https://github.com/antvis/mcp-server-chart/pull/116\r\n\r\n\r\n**Full Changelog**: https://github.com/antvis/mcp-server-chart/compare/0.7.0...0.7.1",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "0.7.1",
        "commit_sha": "e765ef876e74c62d26e820d15dcc6f9e0c0849d9"
      },
      {
        "name": "0.7.0",
        "commit_sha": "fac49e1f1c3b36dcce9582266103d3d846b5283b"
      },
      {
        "name": "0.6.1",
        "commit_sha": "6029951068ffa336caa10b45229647831b7df9c9"
      },
      {
        "name": "0.6.0",
        "commit_sha": "556826ab4927380f08705b34db3705e718747756"
      },
      {
        "name": "0.5.3",
        "commit_sha": "d62244fec3797401d7bb5c4b9e8fbaff6a7802b7"
      },
      {
        "name": "0.5.0",
        "commit_sha": "770809d18dfc1b5d094948ea7d8d4b91da7f8a87"
      },
      {
        "name": "0.4.0",
        "commit_sha": "18a3e8abc3f1d2c153c0940acc22ddc10bbad96e"
      },
      {
        "name": "0.3.0",
        "commit_sha": "d3683c9fef22fe29cff198503eacdfb259c06c9a"
      }
    ],
    "latest_version": "0.7.1",
    "package_json_version": "0.7.1"
  },
  "readme": "# MCP Server Chart  ![](https://badge.mcpx.dev?type=server 'MCP Server')  [![build](https://github.com/antvis/mcp-server-chart/actions/workflows/build.yml/badge.svg)](https://github.com/antvis/mcp-server-chart/actions/workflows/build.yml) [![npm Version](https://img.shields.io/npm/v/@antv/mcp-server-chart.svg)](https://www.npmjs.com/package/@antv/mcp-server-chart) [![smithery badge](https://smithery.ai/badge/@antvis/mcp-server-chart)](https://smithery.ai/server/@antvis/mcp-server-chart) [![npm License](https://img.shields.io/npm/l/@antv/mcp-server-chart.svg)](https://www.npmjs.com/package/@antv/mcp-server-chart)\n\nA Model Context Protocol server for generating charts using [AntV](https://github.com/antvis/).\n\n<a href=\"https://www.star-history.com/#antvis/mcp-server-chart&Date\">\n  <img width=\"512\" src=\"https://api.star-history.com/svg?repos=antvis/mcp-server-chart&type=Date\" />\n</a>\n\nThis is a TypeScript-based MCP server that provides chart generation capabilities. It allows you to create various types of charts through MCP tools. You can also use it in [Dify](https://marketplace.dify.ai/plugins/antv/visualization).\n\n## ‚ú® Features\n\nNow 20+ charts supported.\n\n<img width=\"768\" alt=\"mcp-server-chart preview\" src=\"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*IyIRQIQHyKYAAAAAgCAAAAgAemJ7AQ/fmt.avif\" />\n\n1. `generate_area_chart`: Generate an `area` chart, used to display the trend of data under a continuous independent variable, allowing observation of overall data trends.\n1. `generate_bar_chart`: Generate a `bar` chart, used to compare values across different categories, suitable for horizontal comparisons.\n1. `generate_boxplot_chart`: Generate a `boxplot`, used to display the distribution of data, including the median, quartiles, and outliers.\n1. `generate_column_chart`: Generate a `column` chart, used to compare values across different categories, suitable for vertical comparisons.\n1. `generate_district_map` - Generate a `district-map`, used to show administrative divisions and data distribution.\n1. `generate_dual_axes_chart`: Generate a `dual-axes` chart, used to display the relationship between two variables with different units or ranges.\n1. `generate_fishbone_diagram`: Generate a `fishbone` diagram, also known as an Ishikawa diagram, used to identify and display the root causes of a problem.\n1. `generate_flow_diagram`: Generate a `flowchart`, used to display the steps and sequence of a process.\n1. `generate_funnel_chart`: Generate a `funnel` chart, used to display data loss at different stages.\n1. `generate_histogram_chart`: Generate a `histogram`, used to display the distribution of data by dividing it into intervals and counting the number of data points in each interval.\n1. `generate_line_chart`: Generate a `line` chart, used to display the trend of data over time or another continuous variable.\n1. `generate_liquid_chart`: Generate a `liquid` chart, used to display the proportion of data, visually representing percentages in the form of water-filled spheres.\n1. `generate_mind_map`: Generate a `mind-map`, used to display thought processes and hierarchical information.\n1. `generate_network_graph`: Generate a `network` graph, used to display relationships and connections between nodes.\n1. `generate_organization_chart`: Generate an `organizational` chart, used to display the structure of an organization and personnel relationships.\n1. `generate_path_map` - Generate a `path-map`, used to display route planning results for POIs.\n1. `generate_pie_chart`: Generate a `pie` chart, used to display the proportion of data, dividing it into parts represented by sectors showing the percentage of each part.\n1. `generate_pin_map` - Generate a `pin-map`, used to show the distribution of POIs.\n1. `generate_radar_chart`: Generate a `radar` chart, used to display multi-dimensional data comprehensively, showing multiple dimensions in a radar-like format.\n1. `generate_sankey_chart`: Generate a `sankey` chart, used to display data flow and volume, representing the movement of data between different nodes in a Sankey-style format.\n1. `generate_scatter_chart`: Generate a `scatter` plot, used to display the relationship between two variables, showing data points as scattered dots on a coordinate system.\n1. `generate_treemap_chart`: Generate a `treemap`, used to display hierarchical data, showing data in rectangular forms where the size of rectangles represents the value of the data.\n1. `generate_venn_chart`: Generate a `venn` diagram, used to display relationships between sets, including intersections, unions, and differences.\n1. `generate_violin_chart`: Generate a `violin` plot, used to display the distribution of data, combining features of boxplots and density plots to provide a more detailed view of the data distribution.\n1. `generate_word_cloud_chart`: Generate a `word-cloud`, used to display the frequency of words in textual data, with font sizes indicating the frequency of each word.\n\n> [!NOTE]\n> The above geographic visualization chart generation tool uses [AMap service](https://lbs.amap.com/) and currently only supports map generation within China.\n\n## ü§ñ Usage\n\nTo use with `Desktop APP`, such as Claude, VSCode, [Cline](https://cline.bot/mcp-marketplace), Cherry Studio, Cursor, and so on, add the MCP server config below. On Mac system:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-chart\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@antv/mcp-server-chart\"\n      ]\n    }\n  }\n}\n```\n\nOn Window system:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-chart\": {\n      \"command\": \"cmd\",\n      \"args\": [\n        \"/c\",\n        \"npx\",\n        \"-y\",\n        \"@antv/mcp-server-chart\"\n      ]\n    }\n  }\n}\n```\n\nAlso, you can use it on [aliyun](https://bailian.console.aliyun.com/?tab=mcp#/mcp-market/detail/antv-visualization-chart), [modelscope](https://www.modelscope.cn/mcp/servers/@antvis/mcp-server-chart), [glama.ai](https://glama.ai/mcp/servers/@antvis/mcp-server-chart), [smithery.ai](https://smithery.ai/server/@antvis/mcp-server-chart) or others with HTTP, SSE Protocol.\n\n## üö∞ Run with SSE or Streamable transport\n\nInstall the package globally.\n\n```bash\nnpm install -g @antv/mcp-server-chart\n```\n\nRun the server with your preferred transport option:\n\n```bash\n# For SSE transport (default endpoint: /sse)\nmcp-server-chart --transport sse\n\n# For Streamable transport with custom endpoint\nmcp-server-chart --transport streamable\n```\n\nThen you can access the server at:\n\n- SSE transport: `http://localhost:1122/sse`\n- Streamable transport: `http://localhost:1122/mcp`\n\n## üéÆ CLI Options\n\nYou can also use the following CLI options when running the MCP server. Command options by run cli with `-h`.\n\n```plain\nMCP Server Chart CLI\n\nOptions:\n  --transport, -t  Specify the transport protocol: \"stdio\", \"sse\", or \"streamable\" (default: \"stdio\")\n  --port, -p       Specify the port for SSE or streamable transport (default: 1122)\n  --endpoint, -e   Specify the endpoint for the transport:\n                   - For SSE: default is \"/sse\"\n                   - For streamable: default is \"/mcp\"\n  --help, -h       Show this help message\n```\n\n## üì† Private Deployment\n\n`MCP Server Chart` provides a free chart generation service by default. For users with a need for private deployment, they can try using `VIS_REQUEST_SERVER` to customize their own chart generation service.\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-chart\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@antv/mcp-server-chart\"\n      ],\n      \"env\": {\n        \"VIS_REQUEST_SERVER\": \"<YOUR_VIS_REQUEST_SERVER>\"\n      }\n    }\n  }\n}\n```\n\nYou can use AntV's project [GPT-Vis-SSR](https://github.com/antvis/GPT-Vis/tree/main/bindings/gpt-vis-ssr) to deploy an HTTP service in a private environment, and then pass the URL address through env `VIS_REQUEST_SERVER`.\n\n- **Method**: `POST`\n- **Parameter**: Which will be passed to `GPT-Vis-SSR` for renderring. Such as, `{ \"type\": \"line\", \"data\": [{ \"time\": \"2025-05\", \"value\": \"512\" }, { \"time\": \"2025-06\", \"value\": \"1024\" }] }`.\n- **Return**: The return object of HTTP service.\n  - **success**: `boolean` Whether generate chart image successfully.\n  - **resultObj**: `string` The chart image url.\n  - **errorMessage**: `string` When `success = false`, return the error message.\n\n> [!NOTE]\n> The private deployment solution currently does not support geographic visualization chart generation include 3 tools: `geographic-district-map`, `geographic-path-map`, `geographic-pin-map`.\n\n## üó∫Ô∏è Generate Records\n\nBy default, users are required to save the results themselves, but we also provide a service for viewing the chart generation records, which requires users to generate a service identifier for themselves and configure it.\n\nUse Alipay to scan and open the mini program to generate a personal service identifier (click the \"My\" menu below, enter the \"My Services\" page, click the \"Generate\" button, and click the \"Copy\" button after success):\n\n<img alt=\"my service identifier website\" width=\"240\" src=\"https://mdn.alipayobjects.com/huamei_dxq8v0/afts/img/dASoTLt6EywAAAAARqAAAAgADu43AQFr/fmt.webp\" />\n\nNext, you need to add the `SERVICE_ID` environment variable to the MCP server configuration. For example, the configuration for Mac is as follows (for Windows systems, just add the `env` variable):\n\n```json\n{\n  \"mcpServers\": {\n    \"AntV Map\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@antv/mcp-server-chart\"\n      ],\n      \"env\": {\n        \"SERVICE_ID\": \"***********************************\"\n      }\n    }\n  }\n}\n```\n\nAfter updating the MCP Server configuration, you need to restart your AI client application and check again whether you have started and connected to the MCP Server successfully. Then you can try to generate the map again. After the generation is successful, you can go to the \"My Map\" page of the mini program to view your map generation records.\n\n<img alt=\"my map records website\" width=\"240\" src=\"https://mdn.alipayobjects.com/huamei_dxq8v0/afts/img/RacFR7emR3QAAAAAUkAAAAgADu43AQFr/original\" />\n\n## üî® Development\n\nInstall dependencies:\n\n```bash\nnpm install\n```\n\nBuild the server:\n\n```bash\nnpm run build\n```\n\nStart the MCP server:\n\n```bash\nnpm run start\n```\n\n## üìÑ License\n\nMIT@[AntV](https://github.com/antvis).\n"
}