{
  "mcp_name": "Plugged.in",
  "mcp_description": "üìá üè† - A comprehensive proxy server that combines multiple MCP servers into a single interface with extensive visibility features. It provides discovery and management of tools, prompts, resources, and templates across servers, plus a playground for debugging when building MCP servers.",
  "mcp_id": "VeriTeknik_pluggedin-mcp-proxy",
  "fetch_timestamp": "2025-06-23T07:33:32.165142Z",
  "github_url": "https://github.com/VeriTeknik/pluggedin-mcp-proxy",
  "repository": {
    "name": "pluggedin-mcp-proxy",
    "full_name": "VeriTeknik/pluggedin-mcp-proxy",
    "description": "Plugged.in MCP Server manages all your other MCPs in one MCP.",
    "html_url": "https://github.com/VeriTeknik/pluggedin-mcp-proxy",
    "created_at": "2025-04-07T12:26:50Z",
    "updated_at": "2025-06-21T12:47:53Z",
    "pushed_at": "2025-06-21T12:47:50Z",
    "size": 302,
    "stargazers_count": 45,
    "watchers_count": 45,
    "forks_count": 6,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "VeriTeknik",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/10081598?v=4",
      "html_url": "https://github.com/VeriTeknik"
    },
    "has_issues": false,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 3,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 85663,
      "JavaScript": 11682,
      "Shell": 1521,
      "Dockerfile": 627
    },
    "language_percentages": {
      "TypeScript": 86.1,
      "JavaScript": 11.74,
      "Shell": 1.53,
      "Dockerfile": 0.63
    },
    "pull_requests_count": 0,
    "contributors_count": 4,
    "package_json_version": "1.0.0"
  },
  "readme": "# plugged.in MCP Proxy Server\n\n<div align=\"center\">\n  <img src=\"https://plugged.in/_next/image?url=%2Fpluggedin-wl.png&w=256&q=75\" alt=\"plugged.in Logo\" width=\"256\" height=\"75\">\n  <h3>The Crossroads for AI Data Exchanges</h3>\n  <p>A unified interface for managing all your MCP servers with real-time notifications</p>\n\n  [![Version](https://img.shields.io/badge/version-1.0.0-blue?style=for-the-badge)](https://github.com/VeriTeknik/pluggedin-mcp/releases)\n  [![GitHub Stars](https://img.shields.io/github/stars/VeriTeknik/pluggedin-mcp?style=for-the-badge)](https://github.com/VeriTeknik/pluggedin-mcp/stargazers)\n  [![License](https://img.shields.io/github/license/VeriTeknik/pluggedin-mcp?style=for-the-badge)](LICENSE)\n  [![TypeScript](https://img.shields.io/badge/TypeScript-4.9+-blue?style=for-the-badge&logo=typescript)](https://www.typescriptlang.org/)\n  [![MCP](https://img.shields.io/badge/MCP-Compatible-green?style=for-the-badge)](https://modelcontextprotocol.io/)\n</div>\n\n## üìã Overview\n\nThe plugged.in MCP Proxy Server is a powerful middleware that aggregates multiple Model Context Protocol (MCP) servers into a single unified interface. It fetches tool, prompt, and resource configurations from the [plugged.in App](https://github.com/VeriTeknik/pluggedin-app) and intelligently routes requests to the appropriate underlying MCP servers.\n\nThis proxy enables seamless integration with any MCP client (Claude, Cline, Cursor, etc.) while providing advanced management capabilities through the plugged.in ecosystem.\n\n## ‚ú® Key Features\n\n### üöÄ Core Capabilities\n- **Universal MCP Compatibility**: Works with any MCP client including Claude Desktop, Cline, and Cursor\n- **Multi-Server Support**: Connect both STDIO (command-line) and WebSocket (HTTP-based) MCP servers\n- **Namespace Isolation**: Keep joined MCPs separate and organized with proper prefixing\n- **Multi-Workspace Layer**: Switch between different sets of MCP configurations with one click\n- **API-Driven Proxy**: Fetches capabilities from plugged.in App APIs rather than direct discovery\n- **Full MCP Support**: Handles tools, resources, resource templates, and prompts\n- **Custom Instructions**: Supports server-specific instructions formatted as MCP prompts\n\n### üîî New in v1.0.0\n- **Real-Time Notifications**: Track all MCP activities with comprehensive notification support\n- **RAG Integration**: Support for document-enhanced queries through the plugged.in App\n- **Enhanced Security**: Industry-standard input validation and sanitization\n- **Inspector Scripts**: Automated testing tools for debugging and development\n- **Health Monitoring**: Built-in ping endpoint for connection monitoring\n\n## üöÄ Quick Start\n\n### Prerequisites\n\n- Node.js 18+ (recommended v20+)\n- An API key from the plugged.in App (get one at [plugged.in/api-keys](https://plugged.in/api-keys))\n\n### Installation\n\n```bash\n# Install and run with npx (latest v1.0.0)\nnpx -y @pluggedin/mcp-proxy@latest --pluggedin-api-key YOUR_API_KEY\n```\n\n### üîÑ Upgrading to v1.0.0\n\nFor existing installations, see our [Migration Guide](./MIGRATION_GUIDE_v1.0.0.md) for detailed upgrade instructions.\n\n```bash\n# Quick upgrade\nnpx -y @pluggedin/mcp-proxy@1.0.0 --pluggedin-api-key YOUR_API_KEY\n```\n\n### Configuration for MCP Clients\n\n#### Claude Desktop\n\nAdd the following to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"pluggedin\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@pluggedin/mcp-proxy@latest\"],\n      \"env\": {\n        \"PLUGGEDIN_API_KEY\": \"YOUR_API_KEY\"\n      }\n    }\n  }\n}\n```\n\n#### Cline\n\nAdd the following to your Cline configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"pluggedin\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@pluggedin/mcp-proxy@latest\"],\n      \"env\": {\n        \"PLUGGEDIN_API_KEY\": \"YOUR_API_KEY\"\n      }\n    }\n  }\n}\n```\n\n#### Cursor\n\nFor Cursor, you can use command-line arguments instead of environment variables:\n\n```bash\nnpx -y @pluggedin/mcp-proxy@latest --pluggedin-api-key YOUR_API_KEY\n```\n\n## ‚öôÔ∏è Configuration Options\n\n### Environment Variables\n\n| Variable | Description | Required | Default |\n|----------|-------------|----------|---------|\n| `PLUGGEDIN_API_KEY` | API key from plugged.in App | Yes | - |\n| `PLUGGEDIN_API_BASE_URL` | Base URL for plugged.in App | No | `https://plugged.in` |\n\n### Command Line Arguments\n\nCommand line arguments take precedence over environment variables:\n\n```bash\nnpx -y @pluggedin/mcp-proxy@latest --pluggedin-api-key YOUR_API_KEY --pluggedin-api-base-url https://your-custom-url.com\n```\n\nFor a complete list of options:\n\n```bash\nnpx -y @pluggedin/mcp-proxy@latest --help\n```\n\n## üê≥ Docker Usage\n\nYou can also build and run the proxy server using Docker.\n\n### Building the Image\n\nEnsure you have Docker installed and running. Navigate to the `pluggedin-mcp` directory and run:\n\n```bash\ndocker build -t pluggedin-mcp-proxy:latest .\n```\n\nA `.dockerignore` file is included to optimize the build context.\n\n### Running the Container\n\nRun the container, providing the necessary environment variables:\n\n```bash\ndocker run -it --rm \\\n  -e PLUGGEDIN_API_KEY=\"YOUR_API_KEY\" \\\n  -e PLUGGEDIN_API_BASE_URL=\"YOUR_API_BASE_URL\" \\\n  --name pluggedin-mcp-container \\\n  pluggedin-mcp-proxy:latest\n```\n\nReplace `YOUR_API_KEY` and `YOUR_API_BASE_URL` (if not using the default `https://plugged.in`).\n\n### Testing with MCP Inspector\n\nWhile the container is running, you can connect to it using the MCP Inspector:\n\n```bash\nnpx @modelcontextprotocol/inspector docker://pluggedin-mcp-container\n```\n\nThis will connect to the standard input/output of the running container.\n\n### Stopping the Container\n\nPress `Ctrl+C` in the terminal where `docker run` is executing. The `--rm` flag ensures the container is removed automatically upon stopping.\n\n## üèóÔ∏è System Architecture\n\nThe plugged.in MCP Proxy Server acts as a bridge between MCP clients and multiple underlying MCP servers:\n\n```mermaid\nsequenceDiagram\n    participant MCPClient as MCP Client (e.g. Claude Desktop)\n    participant PluggedinMCP as plugged.in MCP Proxy\n    participant PluggedinApp as plugged.in App\n    participant MCPServers as Underlying MCP Servers\n\n    MCPClient ->> PluggedinMCP: Request list tools/resources/prompts\n    PluggedinMCP ->> PluggedinApp: Get capabilities via API\n    PluggedinApp ->> PluggedinMCP: Return capabilities (prefixed)\n\n    MCPClient ->> PluggedinMCP: Call tool/read resource/get prompt\n    alt Standard capability\n        PluggedinMCP ->> PluggedinApp: Resolve capability to server\n        PluggedinApp ->> PluggedinMCP: Return server details\n        PluggedinMCP ->> MCPServers: Forward request to target server\n        MCPServers ->> PluggedinMCP: Return response\n    else Custom instruction\n        PluggedinMCP ->> PluggedinApp: Get custom instruction\n        PluggedinApp ->> PluggedinMCP: Return formatted messages\n    end\n    PluggedinMCP ->> MCPClient: Return response\n\n    alt Discovery tool\n        MCPClient ->> PluggedinMCP: Call pluggedin_discover_tools\n        PluggedinMCP ->> PluggedinApp: Trigger discovery action\n        PluggedinApp ->> MCPServers: Connect and discover capabilities\n        MCPServers ->> PluggedinApp: Return capabilities\n        PluggedinApp ->> PluggedinMCP: Confirm discovery complete\n        PluggedinMCP ->> MCPClient: Return discovery result\n    end\n```\n\n## üîÑ Workflow\n\n1. **Configuration**: The proxy fetches server configurations from the plugged.in App\n2. **Capability Listing**: The proxy fetches discovered capabilities from plugged.in App APIs\n   - `tools/list`: Fetches from `/api/tools` (returns prefixed names)\n   - `resources/list`: Fetches from `/api/resources`\n   - `resource-templates/list`: Fetches from `/api/resource-templates`\n   - `prompts/list`: Fetches from `/api/prompts` and `/api/custom-instructions`, merges results\n3. **Capability Resolution**: The proxy resolves capabilities to target servers\n   - `tools/call`: Parses prefix from tool name, looks up server in internal map\n   - `resources/read`: Calls `/api/resolve/resource?uri=...` to get server details\n   - `prompts/get`: Checks for custom instruction prefix or calls `/api/resolve/prompt?name=...`\n4. **Request Routing**: Requests are routed to the appropriate underlying MCP server\n5. **Response Handling**: Responses from the underlying servers are returned to the client\n\n## üîí Security Features\n\nThe plugged.in MCP Proxy implements comprehensive security measures to protect your system and data:\n\n### Input Validation & Sanitization\n- **Command Injection Prevention**: All commands and arguments are validated against allowlists before execution\n- **Environment Variable Security**: Secure parsing of `.env` files with proper handling of quotes and multiline values\n- **Token Validation**: Strong regex patterns for API keys and authentication tokens (32-64 hex characters)\n\n### Network Security\n- **SSRF Protection**: URL validation blocks access to localhost and private IP ranges\n- **Rate Limiting**: \n  - Tool calls: 60 requests per minute\n  - API calls: 100 requests per minute\n- **Error Sanitization**: Prevents information disclosure by sanitizing error messages\n\n### Process Security\n- **Safe Command Execution**: Uses `execFile()` instead of `exec()` to prevent shell injection\n- **Argument Sanitization**: Removes shell metacharacters and control characters from all arguments\n- **Environment Variable Validation**: Only allows alphanumeric keys with underscores\n\n### Security Utilities\nA dedicated `security-utils.ts` module provides:\n- Bearer token validation\n- URL validation with SSRF protection\n- Command argument sanitization\n- Environment variable validation\n- Rate limiting implementation\n- Error message sanitization\n\nFor detailed security implementation, see [SECURITY.md](SECURITY.md).\n\n## üß© Integration with plugged.in App\n\nThe plugged.in MCP Proxy Server is designed to work seamlessly with the [plugged.in App](https://github.com/VeriTeknik/pluggedin-app), which provides:\n\n- A web-based interface for managing MCP server configurations\n- Centralized capability discovery (Tools, Resources, Templates, Prompts)\n- Custom instructions management\n- Multi-workspace support for different configuration sets\n- An interactive playground for testing MCP tools\n- User authentication and API key management\n\n## üìö Related Resources\n\n- [plugged.in App Repository](https://github.com/VeriTeknik/pluggedin-app)\n- [Model Context Protocol (MCP) Specification](https://modelcontextprotocol.io/)\n- [Claude Desktop Documentation](https://docs.anthropic.com/claude/docs/claude-desktop)\n- [Cline Documentation](https://docs.cline.bot/)\n\n## ü§ù Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## üìù Recent Updates\n\n### Version 1.0.0 (June 2025)\n\n#### üéØ Major Features\n- **Real-Time Notification System**: Track all MCP activities with comprehensive notification support\n- **RAG Integration**: Support for document-enhanced queries through the plugged.in App\n- **Inspector Scripts**: New automated testing tools for debugging and development\n- **Health Monitoring**: Built-in ping endpoint for connection monitoring\n\n#### üîí Security Enhancements\n- **Input Validation**: Industry-standard validation and sanitization for all inputs\n- **URL Security**: Enhanced URL validation with SSRF protection\n- **Environment Security**: Secure parsing of environment variables with dotenv\n- **Error Sanitization**: Prevents information disclosure in error responses\n\n#### üêõ Bug Fixes\n- Fixed JSON-RPC protocol interference (stdout vs stderr separation)\n- Resolved localhost URL validation for development environments\n- Fixed API key handling in inspector scripts\n- Improved connection stability and memory management\n\n#### üîß Developer Tools\n- New inspector scripts for automated testing\n- Improved error messages and debugging capabilities\n- Structured logging with proper stderr usage\n- Enhanced TypeScript type safety\n\nSee [Release Notes](./RELEASE_NOTES_v1.0.0.md) for complete details.\n\n## üìÑ License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## üôè Acknowledgements\n\n- Inspired by the [MCP Proxy Server](https://github.com/adamwattis/mcp-proxy-server/)\n- Built on the [Model Context Protocol](https://modelcontextprotocol.io/)\n"
}