{
  "mcp_name": "MSAdministrator/enrichment-mcp",
  "mcp_description": "Enhance security data by enriching observables using third-party services like VirusTotal and Hybrid Analysis.",
  "mcp_id": "MSAdministrator_enrichment-mcp",
  "fetch_timestamp": "2025-06-23T06:55:36.172581Z",
  "github_url": "https://github.com/MSAdministrator/enrichment-mcp",
  "repository": {
    "name": "enrichment-mcp",
    "full_name": "MSAdministrator/enrichment-mcp",
    "description": "A Model Context Protocol server for enriching data from multiple security products",
    "html_url": "https://github.com/MSAdministrator/enrichment-mcp",
    "created_at": "2025-04-29T14:55:19Z",
    "updated_at": "2025-04-30T15:51:38Z",
    "pushed_at": "2025-04-30T15:51:13Z",
    "size": 6,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 3,
    "open_issues_count": 2,
    "language": "Python",
    "license": null,
    "topics": [
      "enrichment",
      "mcp-server",
      "security-tools"
    ],
    "default_branch": "main",
    "owner": {
      "login": "MSAdministrator",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/10687261?v=4",
      "html_url": "https://github.com/MSAdministrator"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 3,
    "subscribers_count": 1,
    "languages": {
      "Python": 2297
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 2,
    "contributors_count": 1
  },
  "readme": "# Enrichment MCP Server\n\nThis project is a Model Context Protocol (MCP) server for performing enrichment given a provided observable. The combination of configured services and the provided observable(s) will determine which enrichment services to call.\n\nThis tool provides a simple MCP server implementation to perform third-party enrichment using common services (e.g. VirusTotal, Hybrid Analysis, etc.) utilizing the [security-cli](https://github.com/MSAdministrator/security-cli) python package to perform enrichment/communicate with different services.\n\n## MCP Server\n\nThis implementation of the `enrichment-mcp` MCP server exposes the following [tools](https://modelcontextprotocol.io/docs/concepts/tools).\n\n* lookup-observable - A generic endpoint which examines and routes the given observable to the correct tool.\n\n## Supported Services\n\nThe following services and observable types are currently supported:\n\n> If you have any suggestions or believe another service should be implemented, please create an issue or pull request!\n\n| Name | API Key Required | Supports IP | Supports Domain | Supports URL | Supports Email |\n|------|------------------|-------------|-----------------|--------------|----------------|\n| VirusTotal | Yes        | Yes         | Yes             | Yes          | No             |\n| HybridAnalysis | Yes    | Yes         | Yes             | Yes          | No             |\n| AlienVault | Yes        | Yes         | Yes             | Yes          | No             |\n| Shodan     | Yes        | Yes         | Yes             | Yes          | No             |\n| Urlscan.io | Yes        | Yes         | Yes             | Yes          | No             |\n| AbuseIPDB  | Yes        | Yes         | No              | No           | No             |\n| HaveIBeenPwned | Yes    | No          | No              | No           | Yes            |\n\n## Requirements\n\nThis MCP service uses `security-cli` and a custom [config.yaml.example](./config.yaml.example) file to determine which third-party enrichment services are supported for observable lookups.\n\nThe easiest way to run this on a local mac/system is:\n\n```bash\nuv run --env-file .env server.py\n```\n\nThis requires that you use the provided template [.env.example](.env.example) and create a new `.env` file with your secrets.\n\n> NOTE: Please review the documentation for [security-cli](https://github.com/MSAdministrator/security-cli) for information on configuring different services.\n> The default will suffice for most use cases.\n\n### Environmental Variables\n\n> NOTE: It is highly recommended to set secrets as environmental variables when implementing this service. Stop storing secrets silly goose.\n\nIn order for the `security-cli` package to discover these variables, they must be in a specific format. Below is the list of currently supported variables:\n\n* ENRICHMENT_MCP_VIRUSTOTAL_KEY\n* ENRICHMENT_MCP_HYBRIDANALYSIS_KEY\n* ENRICHMENT_MCP_ALIENVAULT_KEY\n* ENRICHMENT_MCP_SHODAN_KEY\n* ENRICHMENT_MCP_URLSCAN_KEY\n* ENRICHMENT_MCP_ABUSEIPDB_KEY\n* ENRICHMENT_MCP_HIBP_KEY\n\n### Enrichments Configuration\n\nEach enrichment service is defined in the `securiy-cli` config file. Additionally, I have broken out the different types of enrichment that can be performed. This means, in the current implementation, we have a single action type called `enrich` but in the future this can be expanded for things like `scans` or `queries` etc.\n\nUnderneath these high-level actions, we list out the observable type followed by a list of services that support that type. The currently supported observable types are:\n\n* ipaddress - ipv4 addresses\n* domain - A domain or netloc\n* url - A fully qualified URL with schema, etc.\n* email - A standard email address\n\nWe also support these types but they are currently not implemented:\n\n* md5 - A file MD5 hash\n* sha1 - A file SHA1 hash\n* sha256 - A file SHA256 hash\n\nEach service must have a `name` and a `template`. The `apikey` field can be provided but we recommend to use environmental variables.\n\n### Prompt Templates\n\nEach service and observable type can have it's own response template. These reside in the `security-cli` [templates](./templates/) directory and all templates are expected to exist here.\n\nEach service defined has a prompt template using jinja2 templates. You can modify these are needed, but the format of the filename must remain the same. \n\nThese files have the following filename pattern.\n\n```bash\n{service.name}.{enrichment.type}.jinja2\n```\n\n> Ensure that the response object has the correct fields in the template itself or you will receive an error.\n\nBelow is an example output for a prompt of `Enrich this IP 91.195.240.94` with some errors mixed in:\n\n```python\n{\n    \"virustotal\": \"error occurred looking up ip 91.195.240.94 in virustotal\",\n    \"alienvault\": \"Service: alienvault\\nIPAddress: \\nReputation Score: 0\\nTotal Votes: \",\n    \"shodan\": \"Service: shodan\\nIPAddress: 91.195.240.94\\nLast Analysis Results: 2025-04-25T21:02:52.644602\\n\\nTags\\n\\n\\nAdditional information includes:\\n\\n* Latitude: 48.13743\\n* Longitude: 11.57549\\n* ASN: AS47846\\n* Domains: [\"servervps.net\"]\",\n    \"hybridanalysis\": \"error occurred looking up ip 91.195.240.94 in hybridanalysis\",\n    \"urlscan\": \"Service: urlscan\\nResult: https://urlscan.io/api/v1/result/01966efe-c8fa-74a4-bfc0-1ed479838e85/\\n\\nStats\\n\\n* uniqIPs - 6\\n\\n* uniqCountries - 2\\n\\n* dataLength - 432561\\n\\n* encodedDataLength - 218606\\n\\n* requests - 14\\n\\n\\nPage\\n* country - DE\\n* server - Parking/1.0\\n* ip - 91.195.240.94\\n* mimeType - text/html\\n* title - wearab.org\\xa0-\\xa0Informationen zum Thema wearab.\\n* url - https://login.wearab.org/\\n* tlsValidDays - 364\\n* tlsAgeDays - 0\\n* tlsValidFrom - 2025-04-25T00:00:00.000Z\\n* domain - login.wearab.org\\n* apexDomain - wearab.org\\n* asnname - SEDO-AS SEDO GmbH, DE\\n* asn - AS47846\\n* tlsIssuer - Encryption Everywhere DV TLS CA - G2\\n* status - 200\\n\",\n    \"abuseipdb\": \"Service: abuseripdb\\nIPAddress: 91.195.240.94\\nLast Analysis Result: 2025-03-30T14:04:45+00:00\\nScore: 7\\nUsage: Data Center/Web Hosting/Transit\\nIs Tor: False\\nIs Whitelisted: False\\nISP: Sedo Domain Parking\"\n}\n```\n\n## MCP Server Usage\n\nFor using a pre-built server, instructions from here: https://modelcontextprotocol.io/quickstart/user\n\n* Download Claude for Desktop\n* Install uv\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n* Download this repo and add to Claude for Desktop config\n\t* Claude for Desktop > Settings > Developer > Edit Config\n\n> You can copy the provided [.desktop_config.example.json](.desktop_config.example.json) file \n\nIf you want to create it yourself, these are the paths for Claude Desktop.\n\n```bash\nmacOS: ~/Library/Application Support/Claude/claude_desktop_config.json\nWindows: %APPDATA%\\Claude\\claude_desktop_config.json\n```\n\nOpen up the configuration file in any text editor. Replace the file contents with this:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"enrichment-mcp\": {\n\t\t\t\"command\": \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/uv\",\n\t\t\t\"args\": [\n\t\t\t\t\"--directory\",\n\t\t\t\t\"/ABSOLUTE/PATH/TO/CLONED/REPOSITORY/enrichment-mcp\",\n\t\t\t\t\"run\",\n\t\t\t\t\"server.py\"\n\t\t\t]\n\t\t}\n    }\n}\n```\n\n4. Relaunch Claude for Desktop\n\nYou should now see two icons in the chat bar, a hammer which shows the tools available and a connection icon which shows the prompt defined and the input required.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit pull requests.\n"
}