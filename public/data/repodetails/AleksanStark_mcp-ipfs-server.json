{
  "mcp_name": "AleksanStark/mcp-ipfs-server",
  "mcp_description": "A server leveraging IPFS for decentralized data storage and retrieval, integrated with Claude AI for enhanced MCP interactions.",
  "mcp_id": "AleksanStark_mcp-ipfs-server",
  "fetch_timestamp": "2025-06-23T03:10:02.282730Z",
  "github_url": "https://github.com/AleksanStark/mcp-ipfs-server",
  "repository": {
    "name": "mcp-ipfs-server",
    "full_name": "AleksanStark/mcp-ipfs-server",
    "description": null,
    "html_url": "https://github.com/AleksanStark/mcp-ipfs-server",
    "created_at": "2025-03-28T09:08:19Z",
    "updated_at": "2025-04-07T11:50:32Z",
    "pushed_at": "2025-04-07T11:50:29Z",
    "size": 116,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "AleksanStark",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/103109833?v=4",
      "html_url": "https://github.com/AleksanStark"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 5767
    },
    "language_percentages": {
      "TypeScript": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 2,
    "package_json_version": "1.0.0"
  },
  "readme": "# MCP Server\n\n## 1. What is MCP (Model Context Protocol)?\n\nModel Context Protocol (MCP) is a standard for interaction between models, agents, and contextual data. It is developed and maintained by the community. More details can be found in the official repository: [MCP GitHub](https://github.com/modelcontextprotocol).\n\n## 2. What is IPFS?\n\n[InterPlanetary File System (IPFS)](https://ipfs.tech/) is a distributed file system that enables decentralized data storage and sharing. It is used in MCP for storing and interacting with data, ensuring reliability and fault tolerance.\n\n## 3. MCP Server Architecture Overview\n\n### Components:\n\n- **MCP Node** — the core server component that processes MCP requests.\n- **IPFS** — a decentralized storage system for handling content.\n- **Client** — interacts with the MCP server to send and receive data.\n- **Claude AI** — used for processing and enhancing MCP interactions.\n\n### Component Interaction:\n\n1. The client sends a request to the MCP node.\n2. The MCP node processes the request and interacts with IPFS if necessary.\n3. Claude AI assists in processing and optimizing responses.\n4. The response is returned to the client.\n\n## 4. Deploying the MCP Server\n\n### Requirements:\n\n- Node.js (recommended version 18+)\n- NPM or Yarn\n\n### Installation\n\nInstallation will depend on whether you are using Claude Code or Claude Desktop\n\n**Claude Code**\n\nRun `claude mcp add` and follow the prompts with the following information:\n\n```\nServer Name: mcp-ipfs\nServer Command: node\nCommand Arguments: node /ABSOLUTE/PATH/TO/PARENT/FOLDER/mcp-ipfs-server/build/index.js\n```\n\n**Claude Desktop**\n\nAdd the following config to `claude_desktop_config.json`\n\n```json\n  {\n  \"mcpServers\": {\n    \"ipfs-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/Absolute/path/to/mcp-ipfs-server/build/index.js\"\n      ]\n    }\n  }\n}\n```\n\n### Automated Installation And Deployment\n\nUse the following bash script to automate the server deployment:\n\n```bash\n#!/bin/bash\n\nsudo apt update\nsudo apt install -y wget tar git npm\n\nwget https://github.com/ipfs/kubo/releases/download/v0.34.1/kubo_v0.34.1_linux-amd64.tar.gz\n\ntar -xvzf kubo_v0.34.1_linux-amd64.tar.gz\n\ncd kubo\nsudo bash install.sh\n\nipfs init\n\nsudo apt install ufw\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow 4001/tcp\nsudo ufw allow 8080/tcp\nsudo ufw allow 22/tcp\nsudo ufw allow 5001/tcp\nsudo ufw enable\nsudo ufw status\n\n\n\n\n# Clone the MCP server repository\ngit clone https://github.com/AleksanStark/mcp-ipfs-server.git\ncd mcp-ipfs-server\n\n# Install dependencies\nnpm install\nnpm install @modelcontextprotocol/sdk zod\nnpm install -D @types/node typescript\n# Build the project\nnpm run build\nipfs daemon\n```\n\n### Usage\n\nTo start using the MCP start up Claude Code with the command `claude` or start Claude Desktop. Below are the available operations:\n\n## File Operations\n\n- **upload-file** to IPFS\n- **get-file** by CID\n- **pin-file** by CID\n- **list-folder** get list of directory by CID\n- **unpin-file-** by CID\n\n\n## Example Prompts for Claude\n\nHere are some examples of how to instruct Claude to use ipfs-mcp:\n\n```\nUpload an image to IPFS:\n\"Please upload the file at ~/Pictures/example.jpg to my Pinata account as a private file named 'My Example Image'\"\n\nGet a file from IPFS:\n\"Get the file from IPFS using the CID\"\"\n\nPin a file to IPFS:\n\"Pin the file by it's CID\"\n\nUnpin a file to IPFS:\n\"Unpin the file based on the CID\"\n```\n\n## Questions\n\nSend us an [email](mailto:kadzutostark@gmail.com) with any issues you may encounter!\n\n"
}