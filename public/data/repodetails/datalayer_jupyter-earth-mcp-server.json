{
  "mcp_name": "datalayer/jupyter-earth-mcp-server",
  "mcp_description": "Facilitates geospatial analysis in Jupyter notebooks by integrating NASA Earthdata with Model Context Protocol.",
  "mcp_id": "datalayer_jupyter-earth-mcp-server",
  "fetch_timestamp": "2025-06-23T02:29:14.210152Z",
  "github_url": "https://github.com/datalayer/jupyter-earth-mcp-server",
  "repository": {
    "name": "jupyter-earth-mcp-server",
    "full_name": "datalayer/jupyter-earth-mcp-server",
    "description": "ü™ê üåé Jupyter Earth MCP Server",
    "html_url": "https://github.com/datalayer/jupyter-earth-mcp-server",
    "created_at": "2025-04-09T07:51:03Z",
    "updated_at": "2025-06-18T23:23:31Z",
    "pushed_at": "2025-05-20T10:37:23Z",
    "size": 22,
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks_count": 4,
    "open_issues_count": 1,
    "language": "Python",
    "license": "BSD 3-Clause \"New\" or \"Revised\" License",
    "topics": [
      "earth",
      "esa",
      "jupyter",
      "mcp",
      "mcp-server",
      "nasa"
    ],
    "default_branch": "main",
    "owner": {
      "login": "datalayer",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/5007189?v=4",
      "html_url": "https://github.com/datalayer"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 4,
    "subscribers_count": 1,
    "languages": {
      "Python": 2697,
      "Makefile": 1891,
      "Dockerfile": 411
    },
    "language_percentages": {
      "Python": 53.95,
      "Makefile": 37.83,
      "Dockerfile": 8.22
    },
    "pull_requests_count": 6,
    "contributors_count": 2
  },
  "readme": "<!--\n  ~ Copyright (c) 2023-2024 Datalayer, Inc.\n  ~\n  ~ BSD 3-Clause License\n-->\n\n[![Datalayer](https://assets.datalayer.tech/datalayer-25.svg)](https://datalayer.io)\n\n[![Become a Sponsor](https://img.shields.io/static/v1?label=Become%20a%20Sponsor&message=%E2%9D%A4&logo=GitHub&style=flat&color=1ABC9C)](https://github.com/sponsors/datalayer)\n\n# üåé ‚ú® Jupyter Earth MCP Server\n\n[![Github Actions Status](https://github.com/datalayer/jupyter-earth-mcp-server/workflows/Build/badge.svg)](https://github.com/datalayer/jupyter-earth-mcp-server/actions/workflows/build.yml)\n[![PyPI - Version](https://img.shields.io/pypi/v/jupyter-earth-mcp-server)](https://pypi.org/project/jupyter-earth-mcp-server)\n\nüåç Jupyter Earth MCP Server is a [Model Context Protocol](https://modelcontextprotocol.io) (MCP) server implementation that provides a set of tools for üó∫Ô∏è Geospatial analysis in üìì Jupyter notebooks. \n\nThe following demo uses the [Earthdata MCP server](https://github.com/datalayer/earthdata-mcp-server) to search for datasets and data granules on NASA Earthdata, this MCP server to download the data in Jupyter and the [jupyter-mcp-server](https://github.com/datalayer/jupyter-mcp-server) to run further analysis.\n\n<div>\n  <a href=\"https://www.loom.com/share/c2b5b05f548d4f1492d5c107f0c48dbc\">\n    <p>Analyzing Sea Level Rise with AI-Powered Geospatial Tools and Jupyter - Watch Video</p>\n  </a>\n  <a href=\"https://www.loom.com/share/c2b5b05f548d4f1492d5c107f0c48dbc\">\n    <img style=\"max-width:100%;\" src=\"https://cdn.loom.com/sessions/thumbnails/c2b5b05f548d4f1492d5c107f0c48dbc-598a84f02de7e74e-full-play.gif\">\n  </a>\n</div>\n\n## Start JupyterLab\n\nMake sure you have the following installed. The collaboration package is needed as the modifications made on the notebook can be seen thanks to [Jupyter Real Time Collaboration](https://jupyterlab.readthedocs.io/en/stable/user/rtc.html).\n\n```bash\npip install jupyterlab==4.4.1 jupyter-collaboration==4.0.2 ipykernel\npip uninstall -y pycrdt datalayer_pycrdt\npip install datalayer_pycrdt==0.12.17\n```\n\nThen, start JupyterLab with the following command.\n\n```bash\njupyter lab --port 8888 --IdentityProvider.token MY_TOKEN --ip 0.0.0.0\n```\n\nYou can also run `make jupyterlab`.\n\n> [!NOTE]\n>\n> The `--ip` is set to `0.0.0.0` to allow the MCP server running in a Docker container to access your local JupyterLab.\n\n## Use with Claude Desktop\n\nClaude Desktop can be downloaded [from this page](https://claude.ai/download) for macOS and Windows.\n\nFor Linux, we had success using this [UNOFFICIAL build script based on nix](https://github.com/k3d3/claude-desktop-linux-flake)\n\n```bash\n# ‚ö†Ô∏è UNOFFICIAL\n# You can also run `make claude-linux`\nNIXPKGS_ALLOW_UNFREE=1 nix run github:k3d3/claude-desktop-linux-flake \\\n  --impure \\\n  --extra-experimental-features flakes \\\n  --extra-experimental-features nix-command\n```\n\nTo use this with Claude Desktop, add the following to your `claude_desktop_config.json` (read more on the [MCP documentation website](https://modelcontextprotocol.io/quickstart/user#2-add-the-filesystem-mcp-server)).\n\n> [!IMPORTANT]\n>\n> Ensure the port of the `SERVER_URL`and `TOKEN` match those used in the `jupyter lab` command.\n>\n> The `NOTEBOOK_PATH` should be relative to the directory where JupyterLab was started.\n\n### Claude Configuration on macOS and Windows\n\n```json\n{\n  \"mcpServers\": {\n    \"jupyter-earth\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"SERVER_URL\",\n        \"-e\",\n        \"TOKEN\",\n        \"-e\",\n        \"NOTEBOOK_PATH\",\n        \"datalayer/jupyter-earth-mcp-server:latest\"\n      ],\n      \"env\": {\n        \"SERVER_URL\": \"http://host.docker.internal:8888\",\n        \"TOKEN\": \"MY_TOKEN\",\n        \"NOTEBOOK_PATH\": \"notebook.ipynb\"\n      }\n    }\n  }\n}\n```\n\n### Claude Configuration on Linux\n\n```bash\nCLAUDE_CONFIG=${HOME}/.config/Claude/claude_desktop_config.json\ncat <<EOF > $CLAUDE_CONFIG\n{\n  \"mcpServers\": {\n    \"jupyter-earth\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"SERVER_URL\",\n        \"-e\",\n        \"TOKEN\",\n        \"-e\",\n        \"NOTEBOOK_PATH\",\n        \"--network=host\",\n        \"datalayer/jupyter-earth-mcp-server:latest\"\n      ],\n      \"env\": {\n        \"SERVER_URL\": \"http://localhost:8888\",\n        \"TOKEN\": \"MY_TOKEN\",\n        \"NOTEBOOK_PATH\": \"notebook.ipynb\"\n      }\n    }\n  }\n}\nEOF\ncat $CLAUDE_CONFIG\n```\n\n## Components\n\n### Tools\n\nThe server currently offers 1 tool:\n\n1. `download_earth_data_granules`\n\n- Add a code cell in a Jupyter notebook to download Earth data granules from NASA Earth Data.\n- Input:\n  - `folder_name`(string): Local folder name to save the data.\n  - `short_name`(string): Short name of the Earth dataset to download.\n  - `count`(int): Number of data granules to download.\n  - `temporal` (tuple): (Optional) Temporal range in the format (date_from, date_to).\n  - `bounding_box` (tuple): (Optional) Bounding box in the format (lower_left_lon, lower_left_lat, upper_right_lon, upper_right_lat).\n- Returns: Cell output.\n\n### Prompts\n\n1. `download_analyze_global_sea_level`\n    - To ask for downloading and analyzing global sea level data in Jupyter.\n    - Returns: Prompt correctly formatted.\n\n## Building\n\nYou can build the Docker image it from source.\n\n```bash\nmake build-docker\n```"
}