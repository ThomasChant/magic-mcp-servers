{
  "mcp_name": "c-rick/jimeng-mcp",
  "mcp_description": "A TypeScript-based MCP server integrating Volcengine's AI image generation service, offering tools for creating images with customizable parameters and direct URL returns.",
  "mcp_id": "c-rick_jimeng-mcp",
  "fetch_timestamp": "2025-06-23T01:52:12.776443Z",
  "github_url": "https://github.com/c-rick/jimeng-mcp",
  "repository": {
    "name": "jimeng-mcp",
    "full_name": "c-rick/jimeng-mcp",
    "description": null,
    "html_url": "https://github.com/c-rick/jimeng-mcp",
    "created_at": "2025-04-27T03:32:23Z",
    "updated_at": "2025-06-10T06:35:08Z",
    "pushed_at": "2025-06-10T06:35:05Z",
    "size": 2562,
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks_count": 3,
    "open_issues_count": 1,
    "language": "TypeScript",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "c-rick",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/17995300?v=4",
      "html_url": "https://github.com/c-rick"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 3,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 32368,
      "Dockerfile": 786
    },
    "language_percentages": {
      "TypeScript": 97.63,
      "Dockerfile": 2.37
    },
    "pull_requests_count": 3,
    "contributors_count": 2,
    "tags": [
      {
        "name": "v1.6.1",
        "commit_sha": "a0926d500267ff99d85da7bb91dac474f5399620"
      },
      {
        "name": "v1.6.0",
        "commit_sha": "b631900d5211a53e22a745faada80cf8abc3d9d0"
      },
      {
        "name": "v1.5.1",
        "commit_sha": "56095958e9eb7767508bb0a0e68385f21475764b"
      },
      {
        "name": "v1.5.0",
        "commit_sha": "08b9bbd9471c0b774e07fa381fe8d657f0bbbf65"
      },
      {
        "name": "v1.4.0",
        "commit_sha": "eb8266ab102a036757a9342c9a9a190f96f21945"
      },
      {
        "name": "v1.3.0",
        "commit_sha": "880df94f1cdc641608b41a4bab09e0c45f4e4a1f"
      },
      {
        "name": "v1.2.1",
        "commit_sha": "07aab9175cdfa20e509e90775d2c531dab93a0d7"
      },
      {
        "name": "v1.2.0",
        "commit_sha": "3be7c10071a664fa3fef5884d893e510e076b1ac"
      },
      {
        "name": "v1.1.0",
        "commit_sha": "a636eb93bafab39fad8ac3851c2e6db6fc0c5d9b"
      }
    ],
    "latest_version": "v1.6.1",
    "package_json_version": "1.6.1"
  },
  "readme": "# Jimeng MCP 服务器\n\n\n使用TypeScript实现的Model Context Protocol (MCP) 服务器项目，集成了即梦AI图像生成服务，通过逆向工程直接调用即梦官方API。\n\n\n## 功能\n\n- 基于TypeScript构建\n- 使用tsup作为构建工具\n- 实现了MCP协议，支持标准的stdio通信\n- 直接调用即梦AI图像生成服务，无需第三方API\n- 提供多种即梦模型的图像生成工具\n- 支持多种图像参数调整，如尺寸、精细度、负面提示词等\n- 支持图片混合/参考图生成（通过filePath参数，支持本地图片和网络图片）\n\n## 安装\n\n### 通过Smithery安装\n\n要通过 [Smithery](https://smithery.ai/server/@c-rick/jimeng-mcp) 自动为Claude Desktop安装jimeng-mcp，请执行以下命令：\n\n```bash\nnpx -y @smithery/cli install @c-rick/jimeng-mcp --client claude\n```\n\n### 手动安装\n```bash\n# 使用yarn安装依赖\nyarn install\n\n# 或使用npm安装依赖\nnpm install\n```\n\n## 环境配置\n\n在MCP客户端配置（如Claude Desktop）中设置以下环境变量：\n\n进入[Smithery托管项目](https://smithery.ai/server/@c-rick/jimeng-mcp)，点击json, 填入JIMENG_API_TOKEN， 点击connect, 生成下面mcpServers config json\n\n```json\n{\n  \"mcpServers\": {\n    \"jimeng-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@smithery/cli@latest\",\n        \"run\",\n        \"@c-rick/jimeng-mcp\",\n        \"--key\",\n        \"[Smithery生成]\",\n        \"--profile\",\n        \"[Smithery生成]\"\n      ]\n    }\n  }\n}\n```\n\n### 获取JIMENG_API_TOKEN\n\n1. 访问 [即梦AI官网](https://jimeng.jianying.com) 并登录账号\n2. 按F12打开浏览器开发者工具\n3. 在Application > Cookies中找到`sessionid`的值\n4. 将找到的sessionid值配置为JIMENG_API_TOKEN环境变量\n\n## 开发\n\n```bash\n# 开发模式运行\nyarn dev\n\n# 使用nodemon开发并自动重启\nyarn start:dev\n```\n\n## 构建\n\n```bash\n# 构建项目\nyarn build\n```\n\n## 运行\n\n```bash\n# 启动服务器\nyarn start\n\n# 测试MCP服务器\nyarn test\n```\n\n## Claude Desktop 配置示例\n\n以下是在Claude Desktop中配置此MCP服务器的完整示例:\n\n```json\n{\n  \"mcpServers\": {\n    \"jimeng\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/jimeng-mcp/lib/index.js\"],\n      \"env\": {\n        \"JIMENG_API_TOKEN\": \"your_jimeng_session_id_here\"\n      }\n    }\n  }\n}\n```\n\n## 即梦AI图像生成\n\n本MCP服务器直接调用即梦AI图像生成API，提供图像生成工具：\n\n`generateImage` - 提交图像生成请求并返回图像URL列表\n- 参数：\n  - `prompt`：生成图像的文本描述（必填）\n  - `filePath`：本地图片路径或图片URL（可选，若填写则为图片混合/参考图生成功能）\n  - `model`：模型名称，可选值: jimeng-3.0, jimeng-2.1, jimeng-2.0-pro, jimeng-2.0, jimeng-1.4, jimeng-xl-pro（可选，默认为jimeng-2.1，图片混合时自动切换为jimeng-2.0-pro）\n  - `width`：图像宽度，默认值：1024（可选）\n  - `height`：图像高度，默认值：1024（可选）\n  - `sample_strength`：精细度，默认值：0.5，范围0-1（可选）\n  - `negative_prompt`：反向提示词，告诉模型不要生成什么内容（可选）\n\n> **注意：**\n> - `filePath` 支持本地绝对/相对路径和图片URL。\n> - 若指定 `filePath`，将自动进入图片混合/参考图生成模式，底层模型自动切换为 `jimeng-2.0-pro`。\n> - 网络图片需保证可公开访问。\n\n### 图片混合/参考图生成功能\n\n如需基于图片进行混合生成，只需传入`filePath`参数（支持本地路径或图片URL），即可实现图片风格融合、参考图生成等高级玩法。\n\n#### 示例：\n\n```javascript\n// 参考图片混合生成\nclient.callTool({\n  name: \"generateImage\",\n  arguments: {\n    prompt: \"梵高风格的猫\",\n    filePath: \"./test.png\", // 本地图片路径\n    sample_strength: 0.6\n  }\n});\n```\n\n或\n\n```javascript\n// 使用网络图片作为参考\nclient.callTool({\n  name: \"generateImage\",\n  arguments: {\n    prompt: \"未来城市\",\n    filePath: \"https://example.com/your-image.png\"\n  }\n});\n```\n\n### 支持的模型\n\n服务器支持以下即梦AI模型：\n\n- `jimeng-3.0`：即梦第三代模型，效果更好，支持更强的图像生成能力\n- `jimeng-2.1`：即梦2.1版本模型，默认模型\n- `jimeng-2.0-pro`：即梦2.0 Pro版本\n- `jimeng-2.0`：即梦2.0标准版本\n- `jimeng-1.4`：即梦1.4版本\n- `jimeng-xl-pro`：即梦XL Pro特殊版本\n\n### 技术实现\n\n- 直接调用即梦官方API，无需第三方服务\n- 逆向工程API调用流程，实现完整的图像生成过程\n- 支持积分自动领取和使用\n- 基于面向对象设计，将API实现封装为类\n- 返回高质量图像URL列表\n- 支持图片上传，自动处理本地/网络图片，自动切换混合模型\n- 图片混合时自动上传图片到即梦云端，流程全自动\n\n### 使用示例\n\n通过MCP协议调用图像生成功能：\n\n```javascript\n// 生成图像（文本生成）\nclient.callTool({\n  name: \"generateImage\",\n  arguments: {\n    prompt: \"一只可爱的猫咪在草地上\",\n    model: \"jimeng-3.0\",\n    width: 1024,\n    height: 1024,\n    sample_strength: 0.7,\n    negative_prompt: \"模糊，扭曲，低质量\"\n  }\n});\n\n// 生成图像（图片混合/参考图生成）\nclient.callTool({\n  name: \"generateImage\",\n  arguments: {\n    prompt: \"未来城市\",\n    filePath: \"https://example.com/your-image.png\"\n  }\n});\n```\n\n## 响应格式\n\nAPI将返回生成的图像URL数组，可以直接在各类客户端中显示：\n\n```javascript\n[\n  \"https://example.com/generated-image-1.jpg\",\n  \"https://example.com/generated-image-2.jpg\",\n  \"https://example.com/generated-image-3.jpg\",\n  \"https://example.com/generated-image-4.jpg\"\n]\n```\n\n## 资源\n\n服务器还提供了以下信息资源：\n\n- `greeting://{name}` - 提供个性化问候\n- `info://server` - 提供服务器基本信息\n- `jimeng-ai://info` - 提供即梦AI图像生成服务的使用说明\n\n## Cursor或Claude使用提示\n\n在Cursor或Claude中，你可以这样使用Jimeng图像生成服务：\n\n1. 确保已经配置了MCP服务器\n2. 提示Claude/Cursor生成图像，例如：\n   ```\n   请生成一张写实风格的日落下的山脉图片\n   ```\n3. Claude/Cursor会调用Jimeng MCP服务器生成图像并显示\n\n## 常见问题\n\n1. **图像生成失败**\n   - 检查JIMENG_API_TOKEN是否正确配置\n   - 登录即梦官网检查账号积分是否充足\n   - 尝试更换提示词，避免敏感内容\n   - 若为图片混合，检查filePath路径/URL是否有效、图片是否可访问\n   - 网络图片建议使用https直链，避免防盗链/权限问题\n\n2. **服务器无法启动**\n   - 确保已安装所有依赖\n   - 确保环境变量正确设置\n   - 检查Node.js版本是否为14.0或更高\n\n## 许可证\n\nMIT \n"
}