{
  "mcp_name": "ertugrul59/tradingview-chart-mcp",
  "mcp_description": "Fetches TradingView chart images using ticker and interval inputs for seamless integration with MCP clients.",
  "mcp_id": "ertugrul59_tradingview-chart-mcp",
  "fetch_timestamp": "2025-06-23T02:54:18.874802Z",
  "github_url": "https://github.com/ertugrul59/tradingview-chart-mcp",
  "repository": {
    "name": "tradingview-chart-mcp",
    "full_name": "ertugrul59/tradingview-chart-mcp",
    "description": null,
    "html_url": "https://github.com/ertugrul59/tradingview-chart-mcp",
    "created_at": "2025-04-24T19:41:08Z",
    "updated_at": "2025-06-01T20:13:24Z",
    "pushed_at": "2025-06-01T20:13:21Z",
    "size": 32,
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "ertugrul59",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/12951668?v=4",
      "html_url": "https://github.com/ertugrul59"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 57863,
      "Dockerfile": 872
    },
    "language_percentages": {
      "Python": 98.52,
      "Dockerfile": 1.48
    },
    "pull_requests_count": 1,
    "contributors_count": 2
  },
  "readme": "# MCP Server - TradingView Chart Image Scraper\n\n[![smithery badge](https://smithery.ai/badge/@ertugrul59/tradingview-chart-mcp)](https://smithery.ai/server/@ertugrul59/tradingview-chart-mcp)\n\nThis MCP server provides tools to fetch TradingView chart images based on ticker and interval.\n\n## Setup\n\n1.  **Create Virtual Environment:**\n    ```bash\n    # Navigate to the project directory\n    cd tradingview-chart-mcp\n    # Create the venv (use python3 if python is not linked)\n    python3 -m venv .venv\n    ```\n2.  **Activate Virtual Environment:**\n\n    - **macOS/Linux:**\n      ```bash\n      source .venv/bin/activate\n      ```\n    - **Windows (Git Bash/WSL):**\n      ```bash\n      source .venv/Scripts/activate\n      ```\n    - **Windows (Command Prompt):**\n      ```bash\n      .venv\\\\Scripts\\\\activate.bat\n      ```\n    - **Windows (PowerShell):**\n      ```bash\n      .venv\\\\Scripts\\\\Activate.ps1\n      ```\n      _(Note: You might need to adjust PowerShell execution policy: `Set-ExecutionPolicy RemoteSigned -Scope CurrentUser`)_\n\n    Your terminal prompt should now indicate you are in the `(.venv)`.\n\n3.  **Install Dependencies (inside venv):**\n    ```bash\n    pip install -r requirements.txt\n    ```\n4.  **Configure Environment (for Local Testing):**\n    - Copy `.env.example` to `.env`.\n    - Fill in your `TRADINGVIEW_SESSION_ID` and `TRADINGVIEW_SESSION_ID_SIGN` in the `.env` file. You can obtain these from your browser's cookies after logging into TradingView.\n    - This `.env` file is used when running the server directly (e.g., `python main.py`) for local testing.\n    - Adjust optional scraper settings (`MCP_SCRAPER_HEADLESS`, etc.) in `.env` if needed for local runs.\n5.  **Ensure ChromeDriver:** Make sure `chromedriver` is installed and accessible in your system's PATH, or configure the `tview-scraper.py` accordingly if it allows specifying a path.\n\n## Running the Server\n\nEnsure your virtual environment is activated (`source .venv/bin/activate` or equivalent).\n\n```bash\npython main.py\n```\n\n## Deactivating the Virtual Environment\n\nWhen you are finished, you can deactivate the environment:\n\n```bash\ndeactivate\n```\n\n## Usage\n\nOnce the server is running (within the activated venv), you can interact with it using an MCP client, targeting the `TradingView Chart Image` server name.\n\n**Available Tools:**\n\n- `get_tradingview_chart_image(ticker: str, interval: str)`: Fetches the direct image URL for a TradingView chart.\n\n**Example Prompts:**\n\n- \"Get the 15 minute chart for NASDAQ:AAPL\"\n- \"Show me the daily chart for BYBIT:BTCUSDT.P\"\n- \"Fetch TradingView chart image for COINBASE:ETHUSD on the 60 timeframe\"\n\n## ðŸ”Œ Using with MCP Clients (Claude Desktop / Cursor)\n\nThis server supports two ways of providing configuration:\n\n1.  **Via `.env` file (for local testing):** When running `python main.py` directly, the server will load credentials and settings from a `.env` file in the project directory.\n2.  **Via Client Environment Variables (Recommended for Integration):** When run by an MCP client (like Claude/Cursor), you should configure the client to inject the required environment variables directly. **These will override any values found in a `.env` file.**\n\n### Claude Desktop\n\n1.  Open your Claude Desktop configuration file:\n    - **Windows:** `%APPDATA%\\\\Claude\\\\claude_desktop_config.json`\n    - **macOS:** `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n2.  Add or merge the following within the `mcpServers` object. Provide your credentials in the `env` block:\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"tradingview-chart-mcp\": {\n          \"command\": \"/absolute/path/to/your/tradingview-chart-mcp/.venv/bin/python3\",\n          \"args\": [\"/absolute/path/to/your/tradingview-chart-mcp/main.py\"],\n          \"env\": {\n            \"TRADINGVIEW_SESSION_ID\": \"YOUR_SESSION_ID_HERE\",\n            \"TRADINGVIEW_SESSION_ID_SIGN\": \"YOUR_SESSION_ID_SIGN_HERE\"\n            // Optional: Add MCP_SCRAPER_* variables here too if needed\n            // \"MCP_SCRAPER_HEADLESS\": \"False\"\n          }\n        }\n        // ... other servers if any ...\n      }\n    }\n    ```\n\n3.  Replace the placeholder paths (`command`, `args`) with your actual absolute paths.\n4.  Replace `YOUR_SESSION_ID_HERE` and `YOUR_SESSION_ID_SIGN_HERE` with your actual TradingView credentials.\n5.  Restart Claude Desktop.\n\n### Cursor\n\n1.  Go to: `Settings -> Cursor Settings -> MCP -> Edit User MCP Config (~/.cursor/mcp.json)`.\n2.  Add or merge the following within the `mcpServers` object. Provide your credentials in the `env` block:\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"tradingview-chart-mcp\": {\n          \"command\": \"/absolute/path/to/your/tradingview-chart-mcp/.venv/bin/python3\",\n          \"args\": [\"/absolute/path/to/your/tradingview-chart-mcp/main.py\"],\n          \"env\": {\n            \"TRADINGVIEW_SESSION_ID\": \"YOUR_SESSION_ID_HERE\",\n            \"TRADINGVIEW_SESSION_ID_SIGN\": \"YOUR_SESSION_ID_SIGN_HERE\"\n            // Optional: Add MCP_SCRAPER_* variables here too if needed\n            // \"MCP_SCRAPER_HEADLESS\": \"False\"\n          }\n        }\n        // ... other servers if any ...\n      }\n    }\n    ```\n\n3.  Replace the placeholder paths (`command`, `args`) with your actual absolute paths.\n4.  Replace `YOUR_SESSION_ID_HERE` and `YOUR_SESSION_ID_SIGN_HERE` with your actual TradingView credentials.\n5.  Restart Cursor.\n\n### Installing via Smithery\n\nTo install TradingView Chart Image Scraper for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@ertugrul59/tradingview-chart-mcp):\n\n```bash\nnpx -y @smithery/cli install @ertugrul59/tradingview-chart-mcp --client claude\n```\n\n## Configuration\n\n### Environment Variables\n\nThe following environment variables can be set to configure the scraper:\n\n- `TRADINGVIEW_SESSION_ID`: Your TradingView session ID (required)\n- `TRADINGVIEW_SESSION_ID_SIGN`: Your TradingView session ID signature (required)\n- `MCP_SCRAPER_HEADLESS`: Run browser in headless mode (default: `True`)\n- `MCP_SCRAPER_WINDOW_WIDTH`: Browser window width (default: `1920`)\n- `MCP_SCRAPER_WINDOW_HEIGHT`: Browser window height (default: `1080`)\n- `MCP_SCRAPER_USE_SAVE_SHORTCUT`: Use clipboard image capture instead of screenshot links (default: `True`)\n- `MCP_SCRAPER_CHART_PAGE_ID`: Custom chart page ID (optional)\n\n### Save Shortcut Feature\n\nThe `MCP_SCRAPER_USE_SAVE_SHORTCUT` feature allows you to capture chart images directly to the clipboard as base64 data URLs instead of getting screenshot links. This eliminates the need to download images from URLs.\n\n**Benefits:**\n\n- Faster chart capture (no HTTP requests needed)\n- More reliable (no dependency on TradingView's CDN)\n- Works offline once the chart is loaded\n- Direct base64 data URLs for immediate use\n\n**How it works:**\n\n- When enabled (`True`): Uses `Shift+Ctrl+S` (or `Shift+Cmd+S` on Mac) to capture chart image directly to clipboard\n- When disabled (`False`): Uses traditional `Alt+S` to get screenshot links, then converts to image URLs\n\n**Configuration:**\n\n```bash\n# Enable clipboard image capture (DEFAULT)\nMCP_SCRAPER_USE_SAVE_SHORTCUT=True\n\n# Disable and use traditional screenshot links\nMCP_SCRAPER_USE_SAVE_SHORTCUT=False\n```\n"
}