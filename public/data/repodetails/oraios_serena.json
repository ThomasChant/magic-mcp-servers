{
  "mcp_name": "oraios/serena",
  "mcp_description": "üêçüè† - A fully-featured coding agent that relies on symbolic code operations by using language servers.",
  "mcp_id": "oraios_serena",
  "fetch_timestamp": "2025-06-23T07:22:27.623347Z",
  "github_url": "https://github.com/oraios/serena",
  "repository": {
    "name": "serena",
    "full_name": "oraios/serena",
    "description": "a powerful coding agent toolkit providing semantic retrieval and editing capabilities (MCP server & Agno integration)",
    "html_url": "https://github.com/oraios/serena",
    "created_at": "2025-03-23T22:35:24Z",
    "updated_at": "2025-06-23T07:17:30Z",
    "pushed_at": "2025-06-22T22:44:27Z",
    "size": 2390,
    "stargazers_count": 2363,
    "watchers_count": 2363,
    "forks_count": 182,
    "open_issues_count": 53,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "agent",
      "ai",
      "ai-coding",
      "language-server",
      "llms",
      "mcp-server",
      "programming",
      "vibe-coding"
    ],
    "default_branch": "main",
    "owner": {
      "login": "oraios",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/181485370?v=4",
      "html_url": "https://github.com/oraios"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 182,
    "subscribers_count": 16,
    "languages": {
      "Python": 1268743,
      "JavaScript": 7027,
      "HTML": 3150,
      "Dockerfile": 1726,
      "Java": 850,
      "TypeScript": 397,
      "PHP": 395,
      "Rust": 301,
      "Go": 227,
      "Shell": 93
    },
    "language_percentages": {
      "Python": 98.9,
      "JavaScript": 0.55,
      "HTML": 0.25,
      "Dockerfile": 0.13,
      "Java": 0.07,
      "TypeScript": 0.03,
      "PHP": 0.03,
      "Rust": 0.02,
      "Go": 0.02,
      "Shell": 0.01
    },
    "pull_requests_count": 85,
    "contributors_count": 17,
    "tags": [
      {
        "name": "2025-06-20",
        "commit_sha": "383a5093700fec9153c28e8b227f5d0088185c58"
      },
      {
        "name": "2025-05-24",
        "commit_sha": "52f0afa16256ee34dc7dfbff8d3be5376831fc00"
      },
      {
        "name": "2025-05-21",
        "commit_sha": "8ed8fce62088e8c423487466cee6be4e2fc8740c"
      },
      {
        "name": "2025-05-19",
        "commit_sha": "c596bce092d9f9c93fc816f24bebed451d43069f"
      },
      {
        "name": "2025-04-07",
        "commit_sha": "fdc13403de5bc4cde382c154c22551788966befa"
      },
      {
        "name": "2025-04-01",
        "commit_sha": "452aeaf68fc696257be1f46405f30d2ac6c44c53"
      }
    ],
    "latest_version": "2025-06-20"
  },
  "readme": "<p align=\"center\" style=\"text-align:center\">\n  <img src=\"resources/serena-logo.svg#gh-light-mode-only\" style=\"width:500px\">\n  <img src=\"resources/serena-logo-dark-mode.svg#gh-dark-mode-only\" style=\"width:500px\">\n</p>\n\n* :rocket: Serena is a powerful **coding agent toolkit** capable of turning an LLM into a fully-featured agent that works **directly on your codebase**.\n* :wrench: Serena provides essential **semantic code retrieval and editing tools** that are akin to an IDE's capabilities, extracting code entities at the symbol level and exploiting relational structure.\n* :free: Serena is **free & open-source**, enhancing the capabilities of LLMs you already have access to free of charge.\n\n### Demonstration\n\nHere is a demonstration of Serena implementing a small feature for itself (a better log GUI) with Claude Desktop.\nNote how Serena's tools enable Claude to find and edit the right symbols.\n\nhttps://github.com/user-attachments/assets/6eaa9aa1-610d-4723-a2d6-bf1e487ba753\n\n<p align=\"center\">\n  <em>Serena is under active development! See the latest updates, upcoming features, and lessons learned to stay up to date.</em>\n</p>\n\n<p align=\"center\">\n  <a href=\"CHANGELOG.md\">\n    <img src=\"https://img.shields.io/badge/Updates-1e293b?style=flat&logo=rss&logoColor=white&labelColor=1e293b\" alt=\"Changelog\" />\n  </a>\n  <a href=\"roadmap.md\">\n    <img src=\"https://img.shields.io/badge/Roadmap-14532d?style=flat&logo=target&logoColor=white&labelColor=14532d\" alt=\"Roadmap\" />\n  </a>\n  <a href=\"lessons_learned.md\">\n    <img src=\"https://img.shields.io/badge/Lessons-Learned-7c4700?style=flat&logo=readthedocs&logoColor=white&labelColor=7c4700\" alt=\"Lessons Learned\" />\n  </a>\n</p>\n\n\n\n### LLM Integration\n\nSerena provides the necessary [tools](#full-list-of-tools) for coding workflows, but an LLM is required to do the actual work,\norchestrating tool use.\n\nFor example, **supercharge the performance of Claude Code** with a [one-line shell command](#claude-code).\n\nSerena can be integrated with an LLM in several ways:\n * by using the **model context protocol (MCP)**.  \n   Serena provides an MCP server which integrates with \n     * Claude Code and Claude Desktop, \n     * IDEs like VSCode, Cursor or IntelliJ,\n     * Extensions like Cline or Roo Code\n     * Goose (for a nice CLI experience)\n     * and many others, including [the ChatGPT app soon](https://x.com/OpenAIDevs/status/1904957755829481737)\n * by using **Agno ‚Äì the model-agnostic agent framework**.  \n   Serena's Agno-based agent allows you to turn virtually any LLM into a coding agent, whether it's provided by Google, OpenAI or Anthropic (with a paid API key)\n   or a free model provided by Ollama, Together or Anyscale.\n * by incorporating Serena's tools into an agent framework of your choice.  \n   Serena's tool implementation is decoupled from the framework-specific code and can thus easily be adapted to any agent framework.\n\n### Programming Language Support & Semantic Analysis Capabilities\n\nSerena's semantic code analysis capabilities build on **language servers** using the widely implemented\nlanguage server protocol (LSP). The LSP provides a set of versatile code querying\nand editing functionalities based on symbolic understanding of the code. \nEquipped with these capabilities, Serena discovers and edits code just like a seasoned developer \nmaking use of an IDE's capabilities would.\nSerena can efficiently find the right context and do the right thing even in very large and\ncomplex projects! So not only is it free and open-source, it frequently achieves better results \nthan existing solutions that charge a premium.\n\nLanguage servers provide support for a wide range of programming languages.\nWith Serena, we provide \n * direct, out-of-the-box support for:\n     * Python \n     * TypeScript/Javascript\n     * PhP\n     * Go (need to install go and gopls first)\n     * Rust\n     * C/C++\n     * Java (_Note_: startup is slow, initial startup especially so. There seem to be issues with java on macos)\n * indirect support (may require some code changes/manual installation) for:\n     * Ruby (untested)\n     * C# (untested)\n     * Kotlin (untested)\n     * Dart (untested)\n     \n   These languages are supported by the language server library [multilspy](https://github.com/microsoft/multilspy), which Serena uses under the hood.\n   But we did not explicitly test whether the support for these languages actually works.\n       \nFurther languages can, in principle, easily be supported by providing a shallow adapter for a new language server\nimplementation.\n\n\n## Table of Contents\n\n<!-- Created with markdown-toc -i README.md -->\n<!-- Install it with npm install -g markdown-toc -->\n\n<!-- toc -->\n\n- [What Can I Use Serena For?](#what-can-i-use-serena-for)\n- [Free Coding Agents with Serena](#free-coding-agents-with-serena)\n- [Quick Start](#quick-start)\n  * [Running the Serena MCP Server](#running-the-serena-mcp-server)\n    + [Usage](#usage)\n        * [Local Installation](#local-installation)\n      - [Using uvx](#using-uvx)\n      - [Using Docker (Experimental)](#using-docker-experimental)\n    + [SSE Mode](#sse-mode)\n    + [Command-Line Arguments](#command-line-arguments)\n  * [Configuration](#configuration)\n  * [Project Activation & Indexing](#project-activation--indexing)\n  * [Claude Code](#claude-code)\n  * [Claude Desktop](#claude-desktop)\n  * [Other MCP Clients (Cline, Roo-Code, Cursor, Windsurf, etc.)](#other-mcp-clients-cline-roo-code-cursor-windsurf-etc)\n  * [Agno Agent](#agno-agent)\n  * [Other Agent Frameworks](#other-agent-frameworks)\n- [Detailed Usage and Recommendations](#detailed-usage-and-recommendations)\n  * [Tool Execution](#tool-execution)\n    + [Shell Execution and Editing Tools](#shell-execution-and-editing-tools)\n  * [Modes and Contexts](#modes-and-contexts)\n    + [Contexts](#contexts)\n    + [Modes](#modes)\n    + [Customization](#customization)\n  * [Onboarding and Memories](#onboarding-and-memories)\n  * [Prepare Your Project](#prepare-your-project)\n    + [Structure Your Codebase](#structure-your-codebase)\n    + [Start from a Clean State](#start-from-a-clean-state)\n    + [Logging, Linting, and Automated Tests](#logging-linting-and-automated-tests)\n  * [Prompting Strategies](#prompting-strategies)\n  * [Potential Issues in Code Editing](#potential-issues-in-code-editing)\n  * [Running Out of Context](#running-out-of-context)\n  * [Combining Serena with Other MCP Servers](#combining-serena-with-other-mcp-servers)\n  * [Serena's Logs: The Dashboard and GUI Tool](#serenas-logs-the-dashboard-and-gui-tool)\n  * [Troubleshooting](#troubleshooting)\n- [Comparison with Other Coding Agents](#comparison-with-other-coding-agents)\n  * [Subscription-Based Coding Agents](#subscription-based-coding-agents)\n  * [API-Based Coding Agents](#api-based-coding-agents)\n  * [Other MCP-Based Coding Agents](#other-mcp-based-coding-agents)\n- [Acknowledgements](#acknowledgements)\n- [Customizing and Extending Serena](#customizing-and-extending-serena)\n- [Full List of Tools](#full-list-of-tools)\n\n<!-- tocstop -->\n\n## What Can I Use Serena For?\n\nYou can use Serena for any coding tasks ‚Äì whether it is focussed on analysis, planning, \ndesigning new components or refactoring existing ones.\nSince Serena's tools allow an LLM to close the cognitive perception-action loop, \nagents based on Serena can autonomously carry out coding tasks from start to finish ‚Äì \nfrom the initial analysis to the implementation, testing and, finally, the version\ncontrol system commit.\n\nSerena can read, write and execute code, read logs and the terminal output.\nWhile we do not necessarily encourage it, \"vibe coding\" is certainly possible, and if you \nwant to almost feel like \"the code no longer exists\",\nyou may find Serena even more adequate for vibing than an agent inside an IDE\n(since you will have a separate GUI that really lets you forget).\n\n## Free Coding Agents with Serena\n\nEven the free tier of Anthropic's Claude has support for MCP Servers, so you can use Serena with Claude for free.\nPresumably, the same will soon be possible with ChatGPT Desktop once support for MCP servers is added.  \nThrough Agno, you furthermore have the option to use Serena with a free/open-weights model.\n\nSerena is [Oraios AI](https://oraios-ai.de/)'s contribution to the developer community.  \nWe use it ourselves on a regular basis.\n\nWe got tired of having to pay multiple\nIDE-based subscriptions (such as Windsurf or Cursor) that forced us to keep purchasing tokens on top of the chat subscription costs we already had.\nThe substantial API costs incurred by tools like Claude Code, Cline, Aider and other API-based tools are similarly unattractive.\nWe thus built Serena with the prospect of being able to cancel most other subscriptions.\n\n## Quick Start\n\nSerena can be used in various ways, below you will find instructions for selected integrations.\n\n- If you just want to turn Claude into a free-to-use coding agent, we recommend using Serena through [Claude Code](#claude-code) or [Claude Desktop](#claude-desktop).\n- If you want to use Gemini or any other model, and you want a GUI experience, you can use [Agno](#agno-agent). On macOS, you can also use the GUI of [goose](#goose).\n- If you want to use Serena integrated in your IDE, see the section on [other MCP clients](#other-mcp-clients---cline-roo-code-cursor-windsurf-etc).\n\nSerena is managed by `uv`, so you will need to [install it](https://docs.astral.sh/uv/getting-started/installation/)).\n\n### Running the Serena MCP Server\n\nYou have several options for running the MCP server, which are explained in the subsections below.\n\n#### Usage\n\nThe typical usage involves the client (Claude Code, Claude Desktop, etc.) running\nthe MCP server as a subprocess (using stdio communication), \nso the client needs to be provided with the command to run the MCP server.\n(Alternatively, you can run the MCP server in SSE mode and tell your client \nhow to connect to it.)\n\nNote that no matter how you run the MCP server, Serena will, by default, start a small web-based dashboard on localhost that will display logs and allow shutting down the\nMCP server (since many clients fail to clean up processes correctly).\nThis and other settings can be adjusted in the [configuration](#configuration) and/or by providing [command-line arguments](#command-line-arguments).\n\n###### Local Installation\n\n1. Clone the repository and change into it.\n   ```shell\n   git clone https://github.com/oraios/serena\n   cd serena\n   ```\n2. Optionally create a config file from the template and adjust it according to your preferences.\n   ```shell\n   cp src/serena/resources/serena_config.template.yml serena_config.yml\n   ```\n   If you just want the default config, you can skip this part, and a config file will be created when you first run Serena.\n3. Run the server with `uv`:\n   ```shell\n   uv run serena-mcp-server\n   ```\n   When running from outside the serena installation directory, be sure to pass it, i.e. use\n   ```shell\n    uv run --directory /abs/path/to/serena serena-mcp-server\n    ```\n\n##### Using uvx\n\n`uvx` can be used to run the latest version of Serena directly from the repository, without an explicit local installation.\n\n* Windows:\n  ```shell\n  uvx --from git+https://github.com/oraios/serena serena-mcp-server.exe\n  ```\n* Other operating systems:\n  ```shell\n  uvx --from git+https://github.com/oraios/serena serena-mcp-server\n  ```\n\n##### Using Docker (Experimental)\n\n‚ö†Ô∏è Docker support is currently experimental with several limitations. Please read the [Docker documentation](DOCKER.md) for important caveats before using it.\n\nYou can run the Serena MCP server directly via docker as follows,\nassuming that the projects you want to work on are all located in `/path/to/your/projects`:\n\n```shell\ndocker run --rm -i --network host -v /path/to/your/projects:/workspaces/projects ghcr.io/oraios/serena:latest serena-mcp-server --transport stdio\n```\n\nReplace `/path/to/your/projects` with the absolute path to your projects directory. The Docker approach provides:\n- Better security isolation for shell command execution\n- No need to install language servers and dependencies locally\n- Consistent environment across different systems\n\nSee the [Docker documentation](DOCKER.md) for detailed setup instructions, configuration options, and known limitations.\n\n#### SSE Mode\n\n‚ÑπÔ∏è Note that MCP servers which use stdio as a protocol are somewhat unusual as far as client/server architectures go, as the server\nnecessarily has to be started by the client in order for communication to take place via the server's standard input/output stream.\nIn other words, you do not need to start the server yourself. The client application (e.g. Claude Desktop) takes care of this and\ntherefore needs to be configured with a launch command. \n\nWhen using instead the SSE mode, which uses HTTP-based communication, you control the server lifecycle yourself,\ni.e. you start the server and provide the client with the URL to connect to it.\n\nSimply provide `serena-mcp-server` with the `--transport sse` option and optionally provide the port.\nFor example, to run the Serena MCP server in SSE mode on port 9121 using a local installation,\nyou would run this command from the Serena directory, \n\n```shell\nuv run serena-mcp-server --transport sse --port 9121\n```\n\nand then configure your client to connect to `http://localhost:9121`.\n\n\n#### Command-Line Arguments\n\nThe Serena MCP server supports a wide range of additional command-line options, including the option to run in SSE mode\nand to adapt Serena to various [contexts and modes of operation](#modes-and-contexts).\n\nRun with parameter `--help` to get a list of available options.\n\n\n### Configuration\n\nSerena's behavior (active tools and prompts as well as logging configuration, etc.) is configured in four places:\n\n1. The `serena_config.yml` for general settings that apply to all clients and projects\n2. In the arguments passed to the `serena-mcp-server` in your client's config (see below), \n   which will apply to all sessions started by the respective client. In particular, the [context](#contexts) parameter\n   should be set appropriately for Serena to be best adjusted to existing tools and capabilities of your client.\n   See for a detailed explanation. You can override all entries from the `serena_config.yml` through command line arguments.\n3. In the `.serena/project.yml` file within your project. This will hold project-level configuration that is used whenever\n   that project is activated.\n4. Through the currently active set of [modes](#modes).\n\n\n> ‚ö†Ô∏è **Note:** Serena is under active development. We are continuously adding features, improving stability and the UX.\n> As a result, configuration may change in a breaking manner. If you have an invalid configuration,\n> the MCP server or Serena-based Agent may fail to start (investigate the MCP logs in the former case).\n> Check the [changelog](CHANGELOG.md)\n> and the configuration templates when updating Serena, adapting your configurations accordingly.\n\nAfter the initial setup, continue with one of the sections below, depending on how you\nwant to use Serena.\n\nYou can just ask the LLM to show you the config of your session, Serena has a tool for it.\n\n### Project Activation & Indexing\n\nThe recommended way is to just ask the LLM to activate a project by providing it an absolute path to, or,\nin case the project was activated in the past, by its name. The default project name is the directory name.\n\n  * \"Activate the project /path/to/my_project\"\n  * \"Activate the project my_project\"\n\nAll projects that have been activated will be automatically added to your `serena_config.yml`, and for each \nproject, the file `.serena/project.yml` will be generated. You can adjust the latter, e.g., by changing the name\n(which you refer to during the activation) or other options. Make sure to not have two different projects with the\nsame name.\n\nIf you are mostly working with the same project, you can also configure to always activate a project at startup\nby passing `--project <path_or_name>` to the `serena-mcp-server` command in your client's MCP config.\n\n‚ÑπÔ∏è For larger projects, we recommend that you index your project to accelerate Serena's tools; otherwise the first\ntool application may be very slow.\nTo do so, run one of these commands the project directory or pass the path to the project as an argument:\n\n* When using a local installation:\n  ```shell\n  uv run --directory /abs/path/to/serena index-project\n  ```\n* When using uvx:\n  ```shell\n  uvx --from git+https://github.com/oraios/serena index-project\n  ```\n\n### Claude Code\n\nSerena is a great way to make Claude Code both cheaper and more powerful! \n\nFrom your project directory, add serena with a command like this,\n\n```shell\nclaude mcp add serena -- <serena-mcp-server> --context ide-assistant --project $(pwd)\n```\n\nwhere `<serena-mcp-server>` is your way of [running the Serena MCP server](#running-the-serena-mcp-server).\nFor example, when using `uvx`, you would run\n```shell\nclaude mcp add serena -- uvx --from git+https://github.com/oraios/serena serena-mcp-server --context ide-assistant --project $(pwd)\n```\n\n‚ÑπÔ∏è Once in Claude Code, you should ask Claude to \"Read the initial instructions\" as your first prompt, such that it will receive information\non how to use Serena's tools.\n\n\n### Claude Desktop\n\nFor [Claude Desktop](https://claude.ai/download) (available for Windows and macOS), go to File / Settings / Developer / MCP Servers / Edit Config,\nwhich will let you open the JSON file `claude_desktop_config.json`. \nAdd the `serena` MCP server configuration, using a [run command](#running-the-serena-mcp-server) depending on your setup.\n\n* local installation:\n   ```json\n   {\n       \"mcpServers\": {\n           \"serena\": {\n               \"command\": \"/abs/path/to/uv\",\n               \"args\": [\"run\", \"--directory\", \"/abs/path/to/serena\", \"serena-mcp-server\"]\n           }\n       }\n   }\n   ```\n* uvx:\n   ```json\n   {\n       \"mcpServers\": {\n           \"serena\": {\n               \"command\": \"/abs/path/to/uvx\",\n               \"args\": [\"--from\", \"git+https://github.com/oraios/serena\", \"serena-mcp-server\"]\n           }\n       }\n  }\n  ```\n* docker:\n  ```json\n   {\n       \"mcpServers\": {\n           \"serena\": {\n               \"command\": \"docker\",\n               \"args\": [\"run\", \"--rm\", \"-i\", \"--network\", \"host\", \"-v\", \"/path/to/your/projects:/workspaces/projects\", \"ghcr.io/oraios/serena:latest\", \"serena-mcp-server\", \"--transport\", \"stdio\"]\n           }\n       }\n   }\n   ```\n\nIf you are using paths containing backslashes for paths on Windows\n(note that you can also just use forward slashes), be sure to escape them correctly (`\\\\`).\n\nThat's it! Save the config and then restart Claude Desktop. You are ready for activating your first project.\n\n‚ÑπÔ∏è You can further customize the run command using additional arguments (see [above](#command-line-arguments)).\n\nNote: on Windows and macOS there are official Claude Desktop applications by Anthropic, for Linux there is an [open-source\ncommunity version](https://github.com/aaddrick/claude-desktop-debian).\n\n‚ö†Ô∏è Be sure to fully quit the Claude Desktop application, as closing Claude will just minimize it to the system tray ‚Äì at least on Windows.  \n\n‚ö†Ô∏è Some clients, currently including Claude Desktop, may leave behind zombie processes. You will have to find and terminate them manually then.\n    With Serena, you can activate the [dashboard](#serenas-logs-the-dashboard-and-gui-tool) to prevent unnoted processes and also use the dashboard\n    for shutting down Serena.\n\nAfter restarting, you should see Serena's tools in your chat interface (notice the small hammer icon).\n\nFor more information on MCP servers with Claude Desktop, see [the official quick start guide](https://modelcontextprotocol.io/quickstart/user).\n\n### Other MCP Clients (Cline, Roo-Code, Cursor, Windsurf, etc.)\n\nBeing an MCP Server, Serena can be included in any MCP Client. The same configuration as above,\nperhaps with small client-specific modifications, should work. Most of the popular\nexisting coding assistants (IDE extensions or VSCode-like IDEs) support connections\nto MCP Servers. It is ** recommended to use the `ide-assistant` context** for these integrations by adding `\"--context\", \"ide-assistant\"` to the `args` in your MCP client's configuration. Including Serena generally boosts their performance\nby providing them tools for symbolic operations.\n\nIn this case, the billing for the usage continues to be controlled by the client of your choice\n(unlike with the Claude Desktop client). But you may still want to use Serena through such an approach,\ne.g., for one of the following reasons:\n\n1. You are already using a coding assistant (say Cline or Cursor) and just want to make it more powerful.\n2. You are on Linux and don't want to use the [community-created Claude Desktop](https://github.com/aaddrick/claude-desktop-debian)\n3. You want tighter integration of Serena into your IDE and don't mind paying for that\n\n### Agno Agent\n\nAgno is a model-agnostic agent framework that allows you to turn Serena into an agent \n(independent of the MCP technology) with a large number of underlying LLMs. Agno is currently\nthe simplest way of running Serena in a chat GUI with an LLM of your choice \n(unless you are using a Mac, then you might prefer goose, which requires almost no setup).\n\nWhile Agno is not yet entirely stable, we chose it, because it comes with its own open-source UI, \nmaking it easy to directly use the agent using a chat interface.  With Agno, Serena is turned into an agent\n(so no longer an MCP Server), so it can be used in programmatic ways (for example for benchmarking or within \nyour application).\n\nHere's how it works (see also [Agno's documentation](https://docs.agno.com/introduction/playground)):\n\n1. Download the agent-ui code with npx\n   ```shell\n   npx create-agent-ui@latest\n   ```\n   or, alternatively, clone it manually:\n   ```shell\n   git clone https://github.com/agno-agi/agent-ui.git\n   cd agent-ui \n   pnpm install \n   pnpm dev\n   ```\n\n2. Install serena with the optional requirements:\n   ```shell\n   # You can also only select agno,google or agno,anthropic instead of all-extras\n   uv pip install --all-extras -r pyproject.toml -e .\n   ```\n   \n3. Copy `.env.example` to `.env` and fill in the API keys for the provider(s) you\n   intend to use.\n\n4. Start the agno agent app with\n   ```shell\n   uv run python scripts/agno_agent.py\n   ```\n   By default, the script uses Claude as the model, but you can choose any model\n   supported by Agno (which is essentially any existing model).\n\n5. In a new terminal, start the agno UI with\n   ```shell\n   cd agent-ui \n   pnpm dev\n   ```\n   Connect the UI to the agent you started above and start chatting. You will have\n   the same tools as in the MCP server version.\n\n\nHere is a short demo of Serena performing a small analysis task with the newest Gemini model:\n\nhttps://github.com/user-attachments/assets/ccfcb968-277d-4ca9-af7f-b84578858c62\n\n\n‚ö†Ô∏è IMPORTANT: In contrast to the MCP server approach, tool execution in the Agno UI does\nnot ask for the user's permission. The shell tool is particularly critical, as it can perform arbitrary code execution. \nWhile we have never encountered any issues with\nthis in our testing with Claude, allowing this may not be entirely safe. \nYou may choose to disable certain tools for your setup in your Serena project's\nconfiguration file (`.yml`).\n\n### Other Agent Frameworks\n\nIt should be straightforward to incorporate Serena into any\nagent framework (like [pydantic-ai](https://ai.pydantic.dev/), [langgraph](https://langchain-ai.github.io/langgraph/tutorials/introduction/) or others).\nTypically, you need only to write an adapter for Serena's tools to the tool representation in the framework of your choice, \nas was done by us for Agno with [SerenaAgnoToolkit](/src/serena/agno.py).\n\n\n## Detailed Usage and Recommendations\n\n### Tool Execution\n\nSerena combines tools for semantic code retrieval with editing capabilities and shell execution.\nSerena's behavior can be further customized through [Modes and Contexts](#modes-and-contexts).\nFind the complete list of tools [below](#full-list-of-tools).\n\nThe use of all tools is generally recommended, as this allows Serena to provide the most value:\nOnly by executing shell commands (in particular, tests) can Serena identify and correct mistakes\nautonomously.\n\n#### Shell Execution and Editing Tools\n\nHowever, it should be noted that the `execute_shell_command` tool allows for arbitrary code execution.\nWhen using Serena as an MCP Server, clients will typically ask the user for permission\nbefore executing a tool, so as long as the user inspects execution parameters beforehand,\nthis should not be a problem.\nHowever, if you have concerns, you can choose to disable certain commands in your project's\n.yml configuration file.\nIf you only want to use Serena purely for analyzing code and suggesting implementations\nwithout modifying the codebase, you can enable read-only mode by setting `read_only: true` in your project configuration file.\nThis will automatically disable all editing tools and prevent any modifications to your codebase while still\nallowing all analysis and exploration capabilities.\n\nIn general, be sure to back up your work and use a version control system in order to avoid\nlosing any work.\n\n\n### Modes and Contexts\n\nSerena's behavior and toolset can be adjusted using contexts and modes. \nThese allow for a high degree of customization to best suit your workflow and the environment Serena is operating in.\n\n#### Contexts\n\nA context defines the general environment in which Serena is operating. \nIt influences the initial system prompt and the set of available tools. \nA context is set at startup when launching Serena (e.g., via CLI options for an MCP server or in the agent script) and cannot be changed during an active session.\n\nSerena comes with pre-defined contexts:\n*   `desktop-app`: Tailored for use with desktop applications like Claude Desktop. This is the default.\n*   `agent`: Designed for scenarios where Serena acts as a more autonomous agent, for example, when used with Agno.\n*   `ide-assistant`: Optimized for integration into IDEs like VSCode, Cursor, or Cline, focusing on in-editor coding assistance.\nChoose the context that best matches the type of integration you are using.\n\nWhen launching Serena, specify the context using `--context <context-name>`.  \nNote that for cases where parameter lists are specified (e.g. Claude Desktop), you must add two parameters to the list.\n\n#### Modes\n\nModes further refine Serena's behavior for specific types of tasks or interaction styles. Multiple modes can be active simultaneously, allowing you to combine their effects. Modes influence the system prompt and can also alter the set of available tools by excluding certain ones.\n\nExamples of built-in modes include:\n*   `planning`: Focuses Serena on planning and analysis tasks.\n*   `editing`: Optimizes Serena for direct code modification tasks.\n*   `interactive`: Suitable for a conversational, back-and-forth interaction style.\n*   `one-shot`: Configures Serena for tasks that should be completed in a single response, often used with `planning` for generating reports or initial plans.\n*   `no-onboarding`: Skips the initial onboarding process if it's not needed for a particular session.\n*   `onboarding`: (Usually triggered automatically) Focuses on the project onboarding process.\n\nModes can be set at startup (similar to contexts) but can also be *switched dynamically* during a session. You can instruct the LLM to use the `switch_modes` tool to activate a different set of modes (e.g., \"switch to planning and one-shot modes\").\n\nWhen launching Serena, specify modes using `--mode <mode-name>`; multiple modes can be specified, e.g. `--mode planning --mode no-onboarding`.\n\n:warning: **Mode Compatibility**: While you can combine modes, some may be semantically incompatible (e.g., `interactive` and `one-shot`). Serena currently does not prevent incompatible combinations; it is up to the user to choose sensible mode configurations.\n\n#### Customization\n\nYou can create your own contexts and modes to precisely tailor Serena to your needs in two ways:\n*  **Adding to Serena's configuration directory**: Create new `.yml` files in the `config/contexts/` or `config/modes/` directories within your local Serena repository. These custom contexts/modes will be automatically registered and available for use by their name (filename without the `.yml` extension). They will also appear in listings of available contexts/modes.\n*  **Using external YAML files**: When starting Serena, you can provide an absolute path to a custom `.yml` file for a context or mode.\n\nA context or mode YAML file typically defines:\n*   `name`: (Optional if filename is used) The name of the context/mode.\n*   `prompt`: A string that will be incorporated into Serena's system prompt.\n*   `description`: (Optional) A brief description.\n*   `excluded_tools`: A list of tool names (strings) to disable when this context/mode is active.\n\nThis customization allows for deep integration and adaptation of Serena to specific project requirements or personal preferences.\n\n\n### Onboarding and Memories\n\nBy default, Serena will perform an **onboarding process** when\nit is started for the first time for a project.\nThe goal of the onboarding is for Serena to get familiar with the project\nand to store memories, which it can then draw upon in future interactions.\nIf an LLM should fail to complete the onboarding and does not actually write the\nrespective memories to disk, you may need to ask it to do so explicitly.\n\nThe onboarding will usually read a lot of content from the project, thus filling\nup the context. It can therefore be advisable to switch to another conversation\nonce the onboarding is complete.\nAfter the onboarding, we recommend that you have a quick look at the memories and,\nif necessary, edit them or add additional ones.\n\n**Memories** are files stored in `.serena/memories/` in the project directory,\nwhich the agent can choose to read in subsequent interactions.\nFeel free to read and adjust them as needed; you can also add new ones manually.\nEvery file in the `.serena/memories/` directory is a memory file.\nWhenever Serena starts working on a project, the list of memories is\nprovided, and the agent can decide to read them.\nWe found that memories can significantly improve the user experience with Serena.\n\n\n### Prepare Your Project\n\n#### Structure Your Codebase\n\nSerena uses the code structure for finding, reading and editing code. This means that it will\nwork well with well-structured code but may perform poorly on fully unstructured one (like a \"God class\"\nwith enormous, non-modular functions).  \nFurthermore, for languages that are not statically typed, type annotations are highly beneficial.\n\n#### Start from a Clean State\n\nIt is best to start a code generation task from a clean git state. Not only will\nthis make it easier for you to inspect the changes, but also the model itself will\nhave a chance of seeing what it has changed by calling `git diff` and thereby\ncorrect itself or continue working in a followup conversation if needed.\n\n:warning: **Important**: since Serena will write to files using the system-native line endings\nand it might want to look at the git diff, it is important to\nset `git config core.autocrlf` to `true` on Windows.\nWith `git config core.autocrlf` set to `false` on Windows, you may end up with huge diffs\nonly due to line endings. It is generally a good idea to globally enable this git setting on Windows:\n\n```shell\ngit config --global core.autocrlf true\n```\n\n#### Logging, Linting, and Automated Tests\n\nSerena can successfully complete tasks in an _agent loop_, where it iteratively\nacquires information, performs actions, and reflects on the results.\nHowever, Serena cannot use a debugger; it must rely on the results of program executions,\nlinting results, and test results to assess the correctness of its actions.\nTherefore, software that is designed to meaningful interpretable outputs (e.g. log messages)\nand that has a good test coverage is much easier to work with for Serena.\n\nWe generally recommend to start an editing task from a state where all linting checks and tests pass.\n\n### Prompting Strategies\n\nWe found that it is often a good idea to spend some time conceptualizing and planning a task\nbefore actually implementing it, especially for non-trivial task. This helps both in achieving\nbetter results and in increasing the feeling of control and staying in the loop. You can\nmake a detailed plan in one session, where Serena may read a lot of your code to build up the context,\nand then continue with the implementation in another (potentially after creating suitable memories).\n\n### Potential Issues in Code Editing\n\nIn our experience, LLMs are bad at counting, i.e. they have problems\ninserting blocks of code in the right place. Most editing operations can be performed\nat the symbolic level, allowing this problem is overcome. However, sometimes,\nline-level insertions are useful.\n\nSerena is instructed to double-check the line numbers and any code blocks that it will\nedit, but you may find it useful to explicitly tell it how to edit code if you run into\nproblems.  \nWe are working on making Serena's editing capabilities more robust.\n\n### Running Out of Context\n\nFor long and complicated tasks, or tasks where Serena has read a lot of content, you\nmay come close to the limits of context tokens. In that case, it is often a good idea to continue\nin a new conversation. Serena has a dedicated tool to create a summary of the current state\nof the progress and all relevant info for continuing it. You can request to create this summary and\nwrite it to a memory. Then, in a new conversation, you can just ask Serena to read the memory and\ncontinue with the task. In our experience, this worked really well. On the up-side, since in a \nsingle session there is no summarization involved, Serena does not usually get lost (unlike some\nother agents that summarize under the hood), and it is also instructed to occasionally check whether\nit's on the right track.\n\nMoreover, Serena is instructed to be frugal with context \n(e.g., to not read bodies of code symbols unnecessarily),\nbut we found that Claude is not always very good in being frugal (Gemini seemed better at it).\nYou can explicitly instruct it to not read the bodies if you know that it's not needed.\n\n### Combining Serena with Other MCP Servers\n\nWhen using Serena through an MCP Client, you can use it together with other MCP servers.\nHowever, beware of tool name collisions! See info on that above.\n\nCurrently, there is a collision with the popular Filesystem MCP Server. Since Serena also provides\nfilesystem operations, there is likely no need to ever enable these two simultaneously.\n\n### Serena's Logs: The Dashboard and GUI Tool\n\nSerena provides two convenient ways of accessing the logs of the current session:\n\n  * via the **web-based dashboard** (enabled by default)\n    \n    This is supported on all platforms.\n    By default, it will be accessible at `http://localhost:24282/dashboard/index.html`, \n    but a higher port may be used if the default port is unavailable/multiple instances are running.\n    \n  * via the **GUI tool** (disabled by default)\n\n    This is mainly supported on Windows, but it may also work on Linux; macOS is unsupported.\n\nBoth can be enabled or disabled in Serena's configuration file (`serena_config.yml`, see above).\nIf enabled, they will automatically be opened as soon as the Serena agent/MCP server is started.\n\nIn addition to viewing logs, both tools allow to shut down the Serena agent.\nThis function is provided, because clients like Claude Desktop may fail to terminate the MCP server subprocess \nwhen they themselves are closed.\n\n### Troubleshooting\n\nSupport for MCP Servers in Claude Desktop and the various MCP Server SDKs are relatively new developments and may display instabilities.\n\nThe working configuration of an MCP server may vary from platform to\nplatform and from client to client. We recommend always using absolute paths, as relative paths may be sources of\nerrors. The language server is running in a separate sub-process and is called with asyncio ‚Äì sometimes\na client may make it crash. If you have Serena's log window enabled, and it disappears, you'll know what happened.\n\nSome clients (like goose) may not properly terminate MCP servers,\nlook out for hanging python processes and terminate them\nmanually, if needed.\n\n## Comparison with Other Coding Agents\n\nTo our knowledge, Serena is the first fully-featured coding agent where the\nentire functionality\nis available through an MCP server, thus not requiring API keys or\nsubscriptions.\n\n### Subscription-Based Coding Agents\n\nThe most prominent subscription-based coding agents are parts of IDEs like\nWindsurf, Cursor and VSCode.\nSerena's functionality is similar to Cursor's Agent, Windsurf's Cascade or\nVSCode's\nupcoming [agent mode](https://code.visualstudio.com/blogs/2025/02/24/introducing-copilot-agent-mode).\n\nSerena has the advantage of not requiring a subscription.\nA potential disadvantage is that it\nis not directly integrated into an IDE, so the inspection of newly written code\nis not as seamless.\n\nMore technical differences are:\n* Serena is not bound to a specific IDE.\n  Serena's MCP server can be used with any MCP client (including some IDEs),\n  and the Agno-based agent provides additional ways of applying its functionality.\n* Serena is not bound to a specific large language model or API.\n* Serena navigates and edits code using a language server, so it has a symbolic\n  understanding of the code.\n  IDE-based tools often use a RAG-based or purely text-based approach, which is often\n  less powerful, especially for large codebases.\n* Serena is open-source and has a small codebase, so it can be easily extended\n  and modified.\n\n### API-Based Coding Agents\n\nAn alternative to subscription-based agents are API-based agents like Claude\nCode, Cline, Aider, Roo Code and others, where the usage costs map directly\nto the API costs of the underlying LLM.\nSome of them (like Cline) can even be included in IDEs as an extension.\nThey are often very powerful and their main downside are the (potentially very\nhigh) API costs.\n\nSerena itself can be used as an API-based agent (see the section on Agno above).\nWe have not yet written a CLI tool or a\ndedicated IDE extension for Serena (and there is probably no need for the latter, as\nSerena can already be used with any IDE that supports MCP servers).\nIf there is demand for a Serena as a CLI tool like Claude Code, we will\nconsider writing one.\n\nThe main difference between Serena and other API-based agents is that Serena can\nalso be used as an MCP server, thus not requiring\nan API key and bypassing the API costs. This is a unique feature of Serena.\n\n### Other MCP-Based Coding Agents\n\nThere are other MCP servers designed for coding, like [DesktopCommander](https://github.com/wonderwhy-er/DesktopCommanderMCP) and\n[codemcp](https://github.com/ezyang/codemcp).\nHowever, to the best of our knowledge, none of them provide semantic code\nretrieval and editing tools; they rely purely on text-based analysis.\nIt is the integration of language servers and the MCP that makes Serena unique\nand so powerful for challenging coding tasks, especially in the context of\nlarger codebases.\n\n\n## Acknowledgements\n\nWe built Serena on top of multiple existing open-source technologies, the most important ones being:\n\n1. [multilspy](https://github.com/microsoft/multilspy).\n   A beautifully designed wrapper around language servers following the LSP. It\n   was not easily extendable with the symbolic\n   logic that Serena required, so instead of incorporating it as dependency, we\n   copied the source code\n   and adapted it to our needs.\n2. [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)\n3. [Agno](https://github.com/agno-agi/agno) and\n   the associated [agent-ui](https://github.com/agno-agi/agent-ui),\n   which we use to allow Serena to work with any model, beyond the ones\n   supporting the MCP.\n4. All the language servers that we use through multilspy.\n\nWithout these projects, Serena would not have been possible (or would have been significantly more difficult to build).\n\n\n## Customizing and Extending Serena\n\nIt is straightforward to extend Serena's AI functionality with your own ideas. \nSimply implement a new tool by subclassing \n`serena.agent.Tool` and implement the `apply` method with a signature\nthat matches the tool's requirements. \nOnce implemented, `SerenaAgent` will automatically have access to the new tool.\n\nIt is also relatively straightforward to add [support for a new programming language](/CONTRIBUTING.md#adding-a-new-supported-language). \n\nWe look forward to seeing what the community will come up with! \nFor details on contributing, see [here](/CONTRIBUTING.md).\n\n## Full List of Tools\n\nHere is the full list of Serena's tools with a short description (output of `uv run serena-list-tools`):\n\n * `activate_project`: Activates a project by name.\n * `check_onboarding_performed`: Checks whether project onboarding was already performed.\n * `create_text_file`: Creates/overwrites a file in the project directory.\n * `delete_lines`: Deletes a range of lines within a file.\n * `delete_memory`: Deletes a memory from Serena's project-specific memory store.\n * `execute_shell_command`: Executes a shell command.\n * `find_referencing_code_snippets`: Finds code snippets in which the symbol at the given location is referenced.\n * `find_referencing_symbols`: Finds symbols that reference the symbol at the given location (optionally filtered by type).\n * `find_symbol`: Performs a global (or local) search for symbols with/containing a given name/substring (optionally filtered by type).\n * `get_active_project`: Gets the name of the currently active project (if any) and lists existing projects\n * `get_current_config`: Prints the current configuration of the agent, including the active modes, tools, and context.\n * `get_symbols_overview`: Gets an overview of the top-level symbols defined in a given file or directory.\n * `initial_instructions`: Gets the initial instructions for the current project.\n    Should only be used in settings where the system prompt cannot be set,\n    e.g. in clients you have no control over, like Claude Desktop.\n * `insert_after_symbol`: Inserts content after the end of the definition of a given symbol.\n * `insert_at_line`: Inserts content at a given line in a file.\n * `insert_before_symbol`: Inserts content before the beginning of the definition of a given symbol.\n * `list_dir`: Lists files and directories in the given directory (optionally with recursion).\n * `list_memories`: Lists memories in Serena's project-specific memory store.\n * `onboarding`: Performs onboarding (identifying the project structure and essential tasks, e.g. for testing or building).\n * `prepare_for_new_conversation`: Provides instructions for preparing for a new conversation (in order to continue with the necessary context).\n * `read_file`: Reads a file within the project directory.\n * `read_memory`: Reads the memory with the given name from Serena's project-specific memory store.\n * `replace_lines`: Replaces a range of lines within a file with new content.\n * `replace_symbol_body`: Replaces the full definition of a symbol.\n * `restart_language_server`: Restarts the language server, may be necessary when edits not through Serena happen.\n * `search_for_pattern`: Performs a search for a pattern in the project.\n * `summarize_changes`: Provides instructions for summarizing the changes made to the codebase.\n * `switch_modes`: Activates modes by providing a list of their names\n * `think_about_collected_information`: Thinking tool for pondering the completeness of collected information.\n * `think_about_task_adherence`: Thinking tool for determining whether the agent is still on track with the current task.\n * `think_about_whether_you_are_done`: Thinking tool for determining whether the task is truly completed.\n * `write_memory`: Writes a named memory (for future reference) to Serena's project-specific memory store.\n"
}