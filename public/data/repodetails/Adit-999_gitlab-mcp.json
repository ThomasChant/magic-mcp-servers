{
  "mcp_name": "Adit-999/gitlab-mcp",
  "mcp_description": "Facilitates AI-driven interactions with GitLab, enabling operations on repositories, issues, and merge requests with both synchronous and asynchronous execution.",
  "mcp_id": "Adit-999_gitlab-mcp",
  "fetch_timestamp": "2025-06-23T00:15:28.702996Z",
  "github_url": "https://github.com/Adit-999/gitlab-mcp",
  "repository": {
    "name": "gitlab-mcp",
    "full_name": "Adit-999/gitlab-mcp",
    "description": "A MCP (Model Context Protocol) server for interacting with GitLab API.",
    "html_url": "https://github.com/Adit-999/gitlab-mcp",
    "created_at": "2025-04-16T17:06:34Z",
    "updated_at": "2025-05-21T11:21:45Z",
    "pushed_at": "2025-05-21T11:21:41Z",
    "size": 173,
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks_count": 2,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "Adit-999",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/176208122?v=4",
      "html_url": "https://github.com/Adit-999"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 2,
    "subscribers_count": 1,
    "languages": {
      "Python": 111403,
      "Dockerfile": 358
    },
    "language_percentages": {
      "Python": 99.68,
      "Dockerfile": 0.32
    },
    "pull_requests_count": 3,
    "contributors_count": 3
  },
  "readme": "# GitLab MCP Server\n\nA MCP (Model Context Protocol) server for interacting with GitLab API. This server provides a set of tools that allow AI clients to perform operations on GitLab repositories, issues, merge requests, and more. All operations support both synchronous and asynchronous execution patterns.\n\n## Installation\n\n### Using uv (Recommended)\n\n```bash\n# Clone the repository\ngit clone https://github.com/Adit-999/gitlab-mcp.git\ncd gitlab-mcp\n\n# Install dependencies using uv\nuv sync\n```\n\n### Using pip\n\n```bash\n# Clone the repository\ngit clone https://github.com/Adit-999/gitlab-mcp.git\ncd gitlab-mcp\n\n# Create and activate a virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\npip install -e .\n```\n\n## Configuration\n\nThe GitLab MCP server requires two environment variables to function properly:\n\n1. `GITLAB_PERSONAL_ACCESS_TOKEN` - For authentication with GitLab API\n2. `GITLAB_API_URL` - The base URL for the GitLab API\n\n### Option 1: Environment Variables\n\nCreate a `.env` file in the project root directory with these variables:\n\n```\nGITLAB_PERSONAL_ACCESS_TOKEN=your_personal_access_token\nGITLAB_API_URL=https://gitlab.com\n```\n\n### Option 2: MCP Configuration\n\nYou can also configure the MCP server in your MCP JSON configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"gitlab-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"--with\", \"mcp[cli]\", \"mcp\", \"run\", \"/path/to/gitlab-mcp/server.py\"],\n      \"env\": {\n        \"GITLAB_PERSONAL_ACCESS_TOKEN\": \"your_personal_access_token\",\n        \"GITLAB_API_URL\": \"https://gitlab.com\"\n      }\n    }\n  }\n}\n```\n\n### Configure with uv for Claude Desktop\n\n```bash\nuv run mcp install server.py\n```\n## Project Structure\n\nThe project follows a modular, domain-driven architecture:\n\n```\ngitlab-mcp/\n├── src/                           # Source code\n│   ├── api/                       # API interaction layer\n│   │   ├── rest_client.py         # GitLab REST API client\n│   │   ├── exceptions.py          # API exception definitions\n│   ├── schemas/                   # Data models and validation\n│   │   ├── base.py                # Base schema classes\n│   │   ├── repositories.py        # Repository data models\n│   │   ├── branches.py            # Branch data models\n│   │   ├── issues.py              # Issue data models\n│   │   ├── merge_requests.py      # Merge request data models\n│   │   ├── groups.py              # Group data models\n│   │   └── search.py              # search data models\n│   ├── services/                  # Business logic layer\n│   │   ├── repositories.py        # Repository operations\n│   │   ├── branches.py            # Branch operations\n│   │   ├── issues.py              # Issue operations\n│   │   ├── merge_requests.py      # Merge request operations\n│   │   ├── groups.py              # Group operations\n│   │   └── search.py              # search operations\n│   └── tools/                     # MCP tool implementations\n│       ├── repositories.py        # Repository tools\n│       ├── branches.py            # Branch tools\n│       ├── issues.py              # Issue tools\n│       ├── merge_requests.py      # Merge request tools\n│       ├── groups.py              # Group tools\n│       └── search.py              # search tools\n├── server.py                      # Main MCP server entry point\n```\n\nThis architecture provides several benefits:\n\n- **Separation of concerns**: Each module has a clear responsibility\n- **Type safety**: Pydantic schemas ensure data validation\n- **Maintainability**: Domain-driven organization makes code easier to navigate\n- **Extensibility**: New features can be added by following the established patterns\n- **Async support**: All operations are available in both synchronous and asynchronous versions\n\n## Available Tools\n\nThe server provides the following tools for interacting with GitLab:\n\n### Repository Management\n\n- `create_repository`: Create a new GitLab repository\n- `list_repository_tree`: List the contents of a repository tree\n\n### Branch Operations\n\n- `create_branch`: Create a new branch in a GitLab repository\n- `list_branches`: List branches in a GitLab repository\n- `get_branch`: Get details for a specific GitLab branch\n- `delete_branch`: Delete a branch from a GitLab repository\n- `delete_merged_branches`: Delete all merged branches from a GitLab repository\n- `protect_branch`: Protect a branch in a GitLab repository\n- `unprotect_branch`: Remove protection from a branch in a GitLab repository\n- `get_default_branch_ref`: Get the default branch reference for a GitLab repository\n\n### File Operations\n\n- `create_file`: Create a new file in a GitLab repository\n- `get_file_contents`: Retrieve the contents of a file from a GitLab repository\n- `update_file`: Update an existing file in a GitLab repository\n- `delete_file`: Delete a file from a GitLab repository\n\n### Issue Management\n\n- `create_issue`: Create a new issue in a GitLab repository\n- `list_all_issues`: List all issues the authenticated user has access to\n- `get_issue`: Get details for a specific GitLab issue\n- `close_issue`: Close a GitLab issue\n- `delete_issue`: Delete an issue from a GitLab repository\n- `move_issue`: Move an issue to a different project\n- `comment_on_issue`: Add a comment to a GitLab issue\n- `list_issue_comments`: List comments for a GitLab issue\n\n### Merge Request Operations\n\n- `create_merge_request`: Create a new merge request in a GitLab repository\n- `list_merge_requests`: List merge requests for a GitLab project\n- `get_merge_request`: Get details for a specific GitLab merge request\n- `merge_merge_request`: Merge a GitLab merge request\n- `update_merge_request`: Update an existing merge request in a GitLab repository.\n- `delete_merge_request`: Delete a merge request from a GitLab repository.\n- `merge_request_changes`: Get the changes for a specific merge request.\n- `create_merge_request_comment`: Add a comment to a GitLab merge request.\n\n### Job Operations\n\n- `get_job_logs`: Get logs from a GitLab job\n\n### Group Operations\n\n- `list_groups`: List GitLab groups\n- `get_group`: Get a specific GitLab group\n- `get_group_by_project_namespace`: Get a GitLab group based on a project namespace\n\n### Search Tools\n\n- `search_globally`: Search across all GitLab resources (currently supports projects and files/blobs).\n- `search_project`: Search within a specific project (currently supports projects and files/blobs).\n- `search_group`: Search within a specific group (currently supports projects and files/blobs).\n\n## Troubleshooting\n\n### Common Issues\n\n- **GitLab API Authentication Errors**: Ensure your `GITLAB_PERSONAL_ACCESS_TOKEN` has the necessary permissions and is correctly set in your environment variables.\n- **NoneType errors**: Some functions may encounter issues when handling empty results. If you encounter these errors, please report them with detailed steps to reproduce.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n"
}