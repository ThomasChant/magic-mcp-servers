{
  "mcp_name": "alexbakers/mcp-ipfs",
  "mcp_description": "Facilitates seamless interaction with storacha.network via the w3 CLI, enabling language models and MCP clients to manage spaces, data, and delegations.",
  "mcp_id": "alexbakers_mcp-ipfs",
  "fetch_timestamp": "2025-06-23T03:11:39.588205Z",
  "github_url": "https://github.com/alexbakers/mcp-ipfs",
  "repository": {
    "name": "mcp-ipfs",
    "full_name": "alexbakers/mcp-ipfs",
    "description": "🪐 MCP IPFS Server ",
    "html_url": "https://github.com/alexbakers/mcp-ipfs",
    "created_at": "2025-04-03T00:22:31Z",
    "updated_at": "2025-06-09T12:18:49Z",
    "pushed_at": "2025-04-10T00:16:33Z",
    "size": 27870,
    "stargazers_count": 9,
    "watchers_count": 9,
    "forks_count": 8,
    "open_issues_count": 1,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [
      "ai",
      "decentralized",
      "ipfs",
      "mcp",
      "mcp-server",
      "model-context-protocol",
      "model-context-protocol-servers",
      "storage",
      "storage-service"
    ],
    "default_branch": "main",
    "owner": {
      "login": "alexbakers",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/98721968?v=4",
      "html_url": "https://github.com/alexbakers"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 8,
    "subscribers_count": 2,
    "languages": {
      "TypeScript": 43061,
      "JavaScript": 4708,
      "Dockerfile": 1220
    },
    "language_percentages": {
      "TypeScript": 87.9,
      "JavaScript": 9.61,
      "Dockerfile": 2.49
    },
    "pull_requests_count": 2,
    "contributors_count": 2,
    "package_json_version": "0.1.9"
  },
  "readme": "# 🪐 MCP IPFS Server (storacha.network) 🛰️\n\n![Screenshot](https://raw.githubusercontent.com/alexbakers/mcp-ipfs/refs/heads/main/mcp-ipfs.png?neon-game)\n\n[![Publish Docker](https://github.com/alexbakers/mcp-ipfs/actions/workflows/publish-docker.yml/badge.svg)](https://github.com/alexbakers/mcp-ipfs/actions/workflows/publish-docker.yml) [![Publish NPM](https://github.com/alexbakers/mcp-ipfs/actions/workflows/publish-npm.yml/badge.svg)](https://github.com/alexbakers/mcp-ipfs/actions/workflows/publish-npm.yml) [![npm version](https://badge.fury.io/js/mcp-ipfs.svg)](https://badge.fury.io/js/mcp-ipfs)\n[![smithery badge](https://smithery.ai/badge/@alexbakers/mcp-ipfs)](https://smithery.ai/server/@alexbakers/mcp-ipfs)\n\nA Node.js server implementing the [Model Context Protocol (MCP)](https://github.com/ModelContextProtocol/specification) for interacting with the [storacha.network](https://storacha.network/) platform via the `w3` command-line interface (`@web3-storage/w3cli`).\n\nThis server empowers language models 🤖 and other MCP clients to manage storacha.network spaces, upload/download data, manage delegations, and perform various other tasks by seamlessly wrapping `w3` commands.\n\n## ✨ Features\n\n- Wraps the `w3` CLI for native integration with storacha.network.\n- Provides MCP tools covering a wide range of `w3` functionality:\n  - 🔑 **Authentication & Agent:** `w3_login`, `w3_reset`, `w3_account_ls` (for checking authorization)\n  - 📦 **Space Management:** `w3_space_ls`, `w3_space_use`, `w3_space_info`, `w3_space_add`, `w3_space_provision` (Note: `w3_space_create` must be run manually due to interactive prompts)\n  - 💾 **Data Management:** `w3_up`, `w3_ls`, `w3_rm`\n  - 🔗 **Sharing:** `w3_open` (generates w3s.link URL)\n  - 🤝 **Delegations & Proofs:** `w3_delegation_create`, `w3_delegation_ls`, `w3_delegation_revoke`, `w3_proof_add`, `w3_proof_ls`\n  - 🔐 **Keys & Tokens:** `w3_key_create`, `w3_bridge_generate_tokens`\n  - ⚙️ **Advanced Storage (`w3 can ...`):** Blob, CAR, Upload, Index, Access Claim, Filecoin Info management\n  - 💳 **Account & Billing:** `w3_plan_get`, `w3_coupon_create`, `w3_usage_report`\n\n## 🛠️ Prerequisites\n\n- **Node.js:** Version 22.0.0 or higher (`node -v`).\n- **`w3` CLI:** The server executes `w3` commands directly. Ensure `@web3-storage/w3cli` is installed globally and configured:\n  ```bash\n  npm install -g @web3-storage/w3cli\n  w3 login <your-email@example.com>\n  # Follow email verification steps\n  ```\n- **Environment Variable:** The `w3_login` tool requires the `W3_LOGIN_EMAIL` environment variable to be set to the same email used for `w3 login`.\n\n## 🏗️ Project Structure\n\nThe codebase is organized as follows:\n\n```\nsrc/\n├── index.ts          # Main server entry point, MCP setup, request routing\n├── schemas.ts        # Zod schemas defining input arguments for each tool\n├── tool_handlers.ts  # Implementation logic for each MCP tool\n├── utils.ts          # Helper functions (e.g., running w3 commands, parsing JSON)\n└── utils/\n    └── logger.ts     # Basic logger configuration\n```\n\n## 🚀 Usage with MCP Clients\n\nThis server can be used with any MCP-compatible client. You need to configure your client to connect to this server.\n\n### Example: NPX (Recommended for simple local use)\n\nThis assumes `npm` and the prerequisites are met.\n\n```json\n{\n  \"mcpServers\": {\n    \"ipfs\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-ipfs\"],\n      \"env\": {\n        \"W3_LOGIN_EMAIL\": \"your-email@example.com\"\n      }\n    }\n  }\n}\n```\n\n### Example: Docker\n\nBuild the image first (see Build section) or use the pre-built image `alexbakers/mcp-ipfs`.\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-ipfs\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-v\",\n        \"/path/to/your/project:/path/to/your/project\",\n        \"-e\",\n        \"W3_LOGIN_EMAIL\",\n        \"alexbakers/mcp-ipfs\"\n      ],\n      \"env\": {\n        \"W3_LOGIN_EMAIL\": \"your-email@example.com\"\n      }\n    }\n  }\n}\n```\n\n#### 📝 Note on Paths:\n\nSeveral `w3` commands require **absolute filesystem paths** (e.g., `w3_up`, `w3_delegation_create --output`, `w3_proof_add`, `w3_can_blob_add`, `w3_can_store_add`).\n\n- **NPX:** Provide absolute paths from your host machine.\n- **Docker:** Provide absolute paths _inside the container_. If interacting with files from your host (e.g., uploading), you **must** mount the relevant host directory into the container using the `-v` flag (e.g., `-v /Users/me/project:/Users/me/project`) and then use the _container path_ (e.g., `/Users/me/project/my_file.txt`) in the tool arguments.\n\n## 📦 Build\n\nClone the repository and install dependencies:\n\n```bash\ngit clone https://github.com/alexbakers/mcp-ipfs.git\ncd mcp-ipfs\nnpm install\n```\n\nBuild the TypeScript code:\n\n```bash\nnpm run build\n```\n\nYou can then run the server directly:\n\n```bash\n# Ensure W3_LOGIN_EMAIL is set in your environment\nexport W3_LOGIN_EMAIL=\"your-email@example.com\"\nnode dist/index.js\n```\n\nOr publish it (if you have the rights):\n\n```bash\nnpm publish\n```\n\n### 🐳 Docker Build\n\nBuild the Docker image:\n\n```bash\n# Build locally (replace with your username/repo and desired tag)\ndocker build -t alexbakers/mcp-ipfs .\n```\n\n## 📜 License\n\nThis MCP server is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n"
}