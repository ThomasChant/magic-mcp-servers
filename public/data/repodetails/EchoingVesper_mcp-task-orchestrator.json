{
  "mcp_name": "Task Orchestrator",
  "mcp_description": "AI-powered task orchestration and workflow automation with specialized agent roles, intelligent task decomposition, and seamless integration across Claude Desktop, Cursor IDE, Windsurf, and VS Code.",
  "mcp_id": "EchoingVesper_mcp-task-orchestrator",
  "fetch_timestamp": "2025-06-23T08:48:02.853277Z",
  "github_url": "https://github.com/EchoingVesper/mcp-task-orchestrator",
  "repository": {
    "name": "mcp-task-orchestrator",
    "full_name": "EchoingVesper/mcp-task-orchestrator",
    "description": "A Model Context Protocol server that provides task orchestration capabilities for AI assistants",
    "html_url": "https://github.com/EchoingVesper/mcp-task-orchestrator",
    "created_at": "2025-05-27T03:42:16Z",
    "updated_at": "2025-06-16T14:15:25Z",
    "pushed_at": "2025-06-08T23:22:08Z",
    "size": 2369,
    "stargazers_count": 7,
    "watchers_count": 7,
    "forks_count": 2,
    "open_issues_count": 3,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "ai-agents",
      "ai-automation",
      "ai-framework",
      "ai-orchestration",
      "ai-tools",
      "anthropic",
      "claude",
      "claude-desktop",
      "cursor-ide",
      "developer-tools",
      "devtools",
      "llm",
      "mcp",
      "mcp-server",
      "model-context-protocol",
      "multi-agent",
      "project-management",
      "python",
      "task-orchestration",
      "workflow-orchestration"
    ],
    "default_branch": "main",
    "owner": {
      "login": "EchoingVesper",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/38582585?v=4",
      "html_url": "https://github.com/EchoingVesper"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 2,
    "subscribers_count": 1,
    "languages": {
      "Python": 2379688,
      "PowerShell": 9111,
      "Shell": 8148,
      "Batchfile": 2750
    },
    "language_percentages": {
      "Python": 99.17,
      "PowerShell": 0.38,
      "Shell": 0.34,
      "Batchfile": 0.11
    },
    "pull_requests_count": 31,
    "contributors_count": 1,
    "latest_release": {
      "tag_name": "v1.8.0",
      "name": "v1.8.0 - Workspace Paradigm Implementation",
      "published_at": "2025-06-08T23:15:22Z",
      "body": "# MCP Task Orchestrator v1.8.0 Release Notes\n\n## ðŸš€ Workspace Paradigm Implementation\n\nVersion 1.8.0 introduces a major architectural enhancement: the **Workspace Paradigm**. This transformative update automatically detects your project context and intelligently organizes task artifacts within your development workspace.\n\n### What's New\n\n#### Smart Workspace Detection\n- **Automatic Project Recognition**: Detects common project markers including:\n  - `package.json` (Node.js/JavaScript projects)\n  - `pyproject.toml`, `setup.py` (Python projects)\n  - `Cargo.toml` (Rust projects)\n  - `go.mod` (Go projects)\n  - `pom.xml` (Maven/Java projects)\n  - `.git` directories (Git repositories)\n  - And many more...\n\n- **Intelligent Artifact Organization**: Tasks and their outputs are now automatically saved to your project's root directory, keeping your work organized and accessible.\n\n#### Database Architecture Evolution\n- **Workspace-Aware Storage**: All database tables now include `workspace_id` columns for proper workspace isolation\n- **Automatic Migration**: Seamless upgrade from session-based to workspace-based storage\n- **Backward Compatibility**: Existing tasks and data are preserved during the upgrade\n\n### Critical Bug Fixes\n\n#### Database Migration System\n- âœ… **Fixed SQLAlchemy 2.0+ Compatibility**: Resolved `'RootTransaction' object has no attribute 'execute'` errors\n- âœ… **Enhanced Transaction Handling**: Proper connection management with `engine.connect()` patterns\n- âœ… **Raw SQL Wrapping**: All SQL executions now use `text()` wrapper for safety\n\n#### Server Architecture\n- âœ… **Import Conflict Resolution**: Eliminated server.py vs server/ package naming conflicts\n- âœ… **Package Restructuring**: Renamed conflicting directories for cleaner imports\n- âœ… **Enhanced Reliability**: Improved server startup and MCP client communication\n\n#### Logging System\n- âœ… **Claude Code Compatibility**: Fixed false error messages in debug logs\n- âœ… **Stream Separation**: INFO messages to stdout, warnings/errors to stderr\n- âœ… **Cleaner Output**: Eliminated confusing error labels on successful operations\n\n### Enhanced User Experience\n\n#### For Developers\n- **Zero Configuration**: Workspace detection works automatically\n- **Better Organization**: Artifacts appear in logical project locations\n- **Improved Debugging**: Cleaner log output with proper error classification\n\n#### For AI Assistants\n- **Context Awareness**: Better understanding of project structure\n- **Efficient Workflows**: Tasks naturally align with development workspace\n- **Enhanced Persistence**: Workspace-based task recovery and continuation\n\n### Migration Guide\n\n#### Automatic Upgrade\nThe upgrade to v1.8.0 is **fully automatic**:\n1. Database schema migrates seamlessly on first startup\n2. Existing tasks are preserved and accessible\n3. New workspace detection activates immediately\n4. No configuration changes required\n\n#### What Happens\n- **First Startup**: Database migration adds workspace support (~ 1 second)\n- **Task Recovery**: All existing tasks remain available\n- **New Behavior**: Future tasks use workspace-aware organization\n- **Compatibility**: Full backward compatibility maintained\n\n### Installation\n\n```bash\n# Update existing installation\npipx upgrade mcp-task-orchestrator\n\n# Or fresh installation\npipx install mcp-task-orchestrator\n```\n\n### Performance Improvements\n\n- **Migration System**: Enhanced reliability with comprehensive error handling\n- **Database Operations**: Optimized workspace-aware queries\n- **Memory Management**: Improved resource utilization during startup\n- **Error Recovery**: Better handling of edge cases and unexpected conditions\n\n### Testing & Quality\n\n- âœ… **Comprehensive Testing**: All workspace detection scenarios validated\n- âœ… **Migration Testing**: Database upgrade paths thoroughly tested  \n- âœ… **Integration Testing**: MCP client compatibility verified\n- âœ… **Backward Compatibility**: Legacy functionality preserved\n\n### Next Steps\n\nWith the workspace paradigm in place, future releases will focus on:\n- Enhanced workspace-aware features\n- Advanced project context understanding\n- Intelligent artifact management\n- Cross-workspace task coordination\n\n---\n\n## Support\n\n- **Documentation**: [Full documentation](https://github.com/EchoingVesper/mcp-task-orchestrator)\n- **Issues**: [GitHub Issues](https://github.com/EchoingVesper/mcp-task-orchestrator/issues)\n- **PyPI Package**: [mcp-task-orchestrator](https://pypi.org/project/mcp-task-orchestrator/)\n\nThank you for using MCP Task Orchestrator! The workspace paradigm represents a significant step forward in AI-assisted development workflows.",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v1.8.0",
        "commit_sha": "d215ad0998970c198e0e9b6ddf8e10ec0c01ca26"
      },
      {
        "name": "v1.7.0",
        "commit_sha": "bf7a498dfeaaab4991a267f69f480ed7673fe1d8"
      },
      {
        "name": "v1.6.1",
        "commit_sha": "d0a617d052adf2379f942a38a32cc02f8791807f"
      },
      {
        "name": "v1.6.0",
        "commit_sha": "5b153e46a61ba18151a2ad76bdc51e6befed6d89"
      },
      {
        "name": "v1.5.2",
        "commit_sha": "eb1a6192fe05fd4255c62f146c3345024a9d63e3"
      },
      {
        "name": "v1.5.1",
        "commit_sha": "fbba8d629b9b45d0116d13bbf2e4ab120cf51a49"
      },
      {
        "name": "v1.4.0",
        "commit_sha": "dd700445dfe25c80b88ad871b1a0c79b2a55b152"
      },
      {
        "name": "v1.3.1",
        "commit_sha": "8afc0c52759a722ca4dd0271b1df3cc008496893"
      },
      {
        "name": "v1.3.0",
        "commit_sha": "caa9e0b88778a67216e7b2ccf4dab7b5e17ecfc9"
      },
      {
        "name": "v1.2.0",
        "commit_sha": "40391bc9aa29926d574c720e29780864945ef32a"
      }
    ],
    "latest_version": "v1.8.0"
  },
  "readme": "# MCP Task Orchestrator\r\n\r\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\r\n[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)\r\n[![Version 1.8.0](https://img.shields.io/badge/version-1.8.0-green.svg)](https://github.com/EchoingVesper/mcp-task-orchestrator/releases/tag/v1.8.0)\r\n\r\nA Model Context Protocol server that breaks down complex tasks into structured workflows with specialized AI roles. Features workspace-aware task management that automatically detects your project context and saves artifacts in the right locations.\r\n\r\n## What it does - Input to Output Example\r\n\r\n**Instead of this:**\r\n```\r\nUser: \"Build a Python web scraper for news articles\"\r\nClaude: [Provides a single, monolithic response with basic code]\r\n```\r\n\r\n**You get this structured workflow:**\r\n```\r\nUser: \"Build a Python web scraper for news articles\"\r\n\r\nStep 1: Architect Role\r\nâ”œâ”€â”€ System design with rate limiting and error handling\r\nâ”œâ”€â”€ Technology selection (requests vs scrapy)  \r\nâ”œâ”€â”€ Data structure planning\r\nâ””â”€â”€ Scalability considerations\r\n\r\nStep 2: Implementer Role  \r\nâ”œâ”€â”€ Core scraping logic implementation\r\nâ”œâ”€â”€ Error handling and retries\r\nâ”œâ”€â”€ Data parsing and cleaning\r\nâ””â”€â”€ Configuration management\r\n\r\nStep 3: Tester Role\r\nâ”œâ”€â”€ Unit tests for core functions\r\nâ”œâ”€â”€ Integration tests with live sites\r\nâ”œâ”€â”€ Error condition testing\r\nâ””â”€â”€ Performance validation\r\n\r\nStep 4: Documenter Role\r\nâ”œâ”€â”€ Usage documentation\r\nâ”œâ”€â”€ API reference\r\nâ”œâ”€â”€ Configuration guide\r\nâ””â”€â”€ Troubleshooting guide\r\n\r\nExample Result: Structured web scraper implementation with:\r\nâœ“ Error handling patterns âœ“ Test coverage âœ“ Documentation âœ“ Development practices\r\n```\r\n\r\nEach step provides specialist context and expertise rather than generic responses.\r\n\r\n## Key Features\r\n\r\n- **LLM-powered task decomposition**: Automatically breaks complex projects into logical subtasks\r\n- **Specialist AI roles**: Architect, Implementer, Debugger, Documenter with domain-specific expertise\r\n- **Automated maintenance**: Built-in cleanup, optimization, and health monitoring\r\n- **Task persistence**: SQLite database with automatic recovery and archival\r\n- **Artifact management**: Prevents context limits with intelligent file storage\r\n- **Workspace intelligence**: Automatically detects Git repositories, project files (package.json, pyproject.toml), and saves artifacts in appropriate locations\r\n- **Customizable roles**: Edit `.task_orchestrator/roles/project_roles.yaml` to adapt roles for your project  \r\n- **Universal MCP compatibility**: Works across Claude Desktop, Cursor, Windsurf, VS Code + Cline\r\n- **Single-session completion**: Finish complex projects in one conversation\r\n- **Smart artifact placement**: Files are saved relative to your project root, not random locations\r\n\r\n## Quick Start\r\n\r\n### Prerequisites\r\n- Python 3.8+ \r\n- One or more MCP clients (Claude Desktop, Cursor IDE, Windsurf, or VS Code with Cline extension)\r\n\r\n### Installation\r\n\r\n#### Option 1: Install from PyPI (Recommended)\r\n```bash\r\npip install mcp-task-orchestrator\r\nmcp-task-orchestrator-cli setup\r\n# Restart your MCP client and look for 'task-orchestrator' in available tools\r\n```\r\n\r\n#### Option 2: Install from Source\r\n```bash\r\ngit clone https://github.com/EchoingVesper/mcp-task-orchestrator.git\r\ncd mcp-task-orchestrator\r\nmcp-task-orchestrator-cli check-deps  # Check and install dependencies\r\npython run_installer.py\r\n# Restart your MCP client and look for 'task-orchestrator' in available tools\r\n```\r\n\r\n#### Troubleshooting Dependencies\r\nIf you encounter import errors or missing modules:\r\n```bash\r\nmcp-task-orchestrator-cli check-deps\r\n# This will check for missing dependencies and offer to install them\r\n```\r\n\r\n### Verification\r\nTry this in your MCP client:\r\n```\r\n\"Initialize a new orchestration session and plan a Python script for processing CSV files\"\r\n```\r\n\r\n## How It Works\r\n\r\nThe orchestrator uses a five-step process:\r\n\r\n1. **Workspace Detection** - Automatically identifies your project type and root directory\r\n2. **Task Analysis** - LLM analyzes your request and creates structured subtasks  \r\n3. **Task Planning** - Organizes subtasks with dependencies and complexity assessment\r\n4. **Specialist Execution** - Each subtask runs with role-specific context and expertise\r\n5. **Result Synthesis** - Combines outputs into a comprehensive solution with workspace-aware artifact placement\r\n\r\n### Available Tools\r\n\r\n**NEW in v1.8.0**: Workspace paradigm automatically detects your project root and creates `.task_orchestrator` files in the appropriate location. No manual directory specification needed!\r\n\r\n| Tool | Purpose | Parameters |\r\n|------|---------|------------|\r\n| `orchestrator_initialize_session` | Start new workflow | `working_directory` (optional) |\r\n| `orchestrator_plan_task` | Create task breakdown | Required |\r\n| `orchestrator_execute_subtask` | Execute with specialist context | Required |\r\n| `orchestrator_complete_subtask` | Mark tasks complete with artifacts | Required |\r\n| `orchestrator_synthesize_results` | Combine results | Required |\r\n| `orchestrator_get_status` | Check progress | Optional |\r\n| `orchestrator_maintenance_coordinator` | **NEW**: Automated cleanup and optimization | Required |\r\n\r\n### Maintenance & Automation Features\r\n\r\nThe orchestrator includes intelligent maintenance capabilities:\r\n\r\n- **Automatic Cleanup**: Detects and archives stale tasks (>24 hours)\r\n- **Performance Optimization**: Prevents database bloat and maintains responsiveness  \r\n- **Structure Validation**: Ensures task hierarchies remain consistent\r\n- **Handover Preparation**: Streamlines context transitions and project handoffs\r\n- **Health Monitoring**: Provides system status and optimization recommendations\r\n\r\n**Quick maintenance**: `\"Use the maintenance coordinator to scan and cleanup the current session\"`\r\n\r\nFor detailed guidance, see the [Maintenance Coordinator Guide](docs/user-guide/maintenance-coordinator-guide.md).\r\n\r\n## Supported Environments\r\n\r\n| Client | Description | Status |\r\n|--------|-------------|---------|\r\n| **Claude Desktop** | Anthropic's desktop application | âœ… Supported |\r\n| **Cursor IDE** | AI-powered code editor | âœ… Supported |\r\n| **Windsurf** | Codeium's development environment | âœ… Supported |\r\n| **VS Code** | With Cline extension | âœ… Supported |\r\n\r\n## Configuration & Customization\r\n\r\nThe installer handles configuration automatically. For manual setup, see [`docs/MANUAL_INSTALLATION.md`](docs/MANUAL_INSTALLATION.md).\r\n\r\n### Custom Specialist Roles\r\n\r\nCreate project-specific specialists by editing `.task_orchestrator/roles/project_roles.yaml`:\r\n\r\n```yaml\r\nsecurity_auditor:\r\n  role_definition: \"You are a Security Analysis Specialist\"\r\n  expertise:\r\n    - \"OWASP security standards\"\r\n    - \"Penetration testing methodologies\"  \r\n    - \"Secure coding practices\"\r\n  approach:\r\n    - \"Focus on security implications\"\r\n    - \"Identify potential vulnerabilities\"\r\n    - \"Ensure compliance with security standards\"\r\n```\r\n\r\nThe file is automatically created when you start a new orchestration session in any directory.\r\n\r\n## Common Use Cases\r\n\r\n**Software Development**: Full-stack web applications, API development with testing, database schema design, DevOps pipeline setup\r\n\r\n**Data Science**: Machine learning pipelines, data analysis workflows, research project planning, model deployment strategies\r\n\r\n**Documentation & Content**: Technical documentation, code review and refactoring, testing strategy development, content creation workflows\r\n\r\n## Troubleshooting\r\n\r\n### Common Issues\r\n\r\n**\"No MCP clients detected\"** - Ensure at least one supported client is installed and run it once before installation\r\n\r\n**\"Configuration failed\"** - Check file permissions, try running installer as administrator/sudo\r\n\r\n**\"Module not found errors\"** - Delete `venv_mcp` folder and reinstall: `rm -rf venv_mcp && python run_installer.py`\r\n\r\n### Diagnostic Tools\r\n\r\n```bash\r\npython scripts/diagnostics/check_status.py        # System health check\r\npython scripts/diagnostics/diagnose_db.py         # Database optimization  \r\npython scripts/diagnostics/verify_tools.py        # Installation verification\r\n```\r\n\r\nFor comprehensive troubleshooting, see [`docs/troubleshooting/`](docs/troubleshooting/).\r\n\r\n## Testing & Development\r\n\r\n### Enhanced Testing Infrastructure\r\n\r\nThe MCP Task Orchestrator now includes robust testing improvements that eliminate common issues:\r\n\r\n- **âœ… No Output Truncation**: File-based output system prevents test output truncation\r\n- **âœ… No Resource Warnings**: Proper database connection management eliminates ResourceWarnings  \r\n- **âœ… No Test Hanging**: Comprehensive hang detection and timeout mechanisms\r\n- **âœ… Alternative Test Runners**: Bypass pytest limitations with specialized runners\r\n\r\n### Quick Test Commands\r\n\r\n```bash\r\n# Activate environment\r\nsource venv_mcp/bin/activate  # Linux/Mac\r\nvenv_mcp\\Scripts\\activate     # Windows\r\n\r\n# Run enhanced testing suite\r\npython tests/test_resource_cleanup.py     # Validate resource management\r\npython tests/test_hang_detection.py       # Test hang prevention systems\r\npython tests/enhanced_migration_test.py   # Run migration test with full output\r\n\r\n# Demonstrate improved testing features\r\npython tests/demo_file_output_system.py   # Show file-based output system\r\npython tests/demo_alternative_runners.py  # Show alternative test runners\r\n\r\n# Traditional pytest (still supported)\r\npython -m pytest tests/ -v\r\n```\r\n\r\n### Testing Best Practices\r\n\r\nFor reliable test execution, use the new testing infrastructure:\r\n\r\n```python\r\n# File-based output (prevents truncation)\r\nfrom mcp_task_orchestrator.testing import TestOutputWriter\r\nwriter = TestOutputWriter(output_dir)\r\nwith writer.write_test_output(\"my_test\", \"text\") as session:\r\n    session.write_line(\"Test output here...\")\r\n\r\n# Alternative test runners (more reliable than pytest)\r\nfrom mcp_task_orchestrator.testing import DirectFunctionRunner\r\nrunner = DirectFunctionRunner(output_dir=Path(\"outputs\"))\r\nresult = runner.execute_test(my_test_function, \"test_name\")\r\n\r\n# Database connections (prevents resource warnings)\r\nfrom tests.utils.db_test_utils import managed_sqlite_connection\r\nwith managed_sqlite_connection(\"test.db\") as conn:\r\n    # Database operations with guaranteed cleanup\r\n    pass\r\n```\r\n\r\nðŸ“– **Documentation**: \r\n- [Testing Best Practices](docs/TESTING_BEST_PRACTICES.md) - Quick reference guide\r\n- [Testing Improvements](docs/TESTING_IMPROVEMENTS.md) - Comprehensive documentation\r\n\r\nSee [`CONTRIBUTING.md`](CONTRIBUTING.md) for contribution guidelines and [`docs/`](docs/) for complete documentation.\r\n\r\n## Important Disclaimers\r\n\r\n**This software is provided \"as is\" without warranty of any kind.** It is intended for development and experimentation purposes. The authors make no claims about its suitability for production, critical systems, or any specific use case.\r\n\r\n**Use at your own risk.** The authors disclaim all liability for any damages or losses resulting from the use of this software, including but not limited to data loss, system failure, or business interruption.\r\n\r\n**Not production-ready without thorough testing.** This is a development tool that should be thoroughly tested and validated before any production use.\r\n\r\n## License & Resources\r\n\r\nThis project is licensed under the MIT License - see the [`LICENSE`](LICENSE) file for details.\r\n\r\n- **Repository**: [https://github.com/EchoingVesper/mcp-task-orchestrator](https://github.com/EchoingVesper/mcp-task-orchestrator)\r\n- **Issues**: [Report problems or request features](https://github.com/EchoingVesper/mcp-task-orchestrator/issues)\r\n- **Documentation**: [Complete docs](docs/)\r\n\r\n**Copyright (c) 2025 Echoing Vesper**\r\n"
}