{
  "mcp_name": "tumf/mcp-shell-server",
  "mcp_description": "A secure shell command execution server implementing the Model Context Protocol (MCP)",
  "mcp_id": "tumf_mcp-shell-server",
  "fetch_timestamp": "2025-06-23T09:07:39.248675Z",
  "github_url": "https://github.com/tumf/mcp-shell-server",
  "repository": {
    "name": "mcp-shell-server",
    "full_name": "tumf/mcp-shell-server",
    "description": null,
    "html_url": "https://github.com/tumf/mcp-shell-server",
    "created_at": "2024-12-10T13:09:04Z",
    "updated_at": "2025-06-15T03:53:33Z",
    "pushed_at": "2025-05-04T13:42:08Z",
    "size": 198,
    "stargazers_count": 102,
    "watchers_count": 102,
    "forks_count": 28,
    "open_issues_count": 2,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "tumf",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/69994?v=4",
      "html_url": "https://github.com/tumf"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 28,
    "subscribers_count": 3,
    "languages": {
      "Python": 129381,
      "Dockerfile": 537,
      "Makefile": 394
    },
    "language_percentages": {
      "Python": 99.29,
      "Dockerfile": 0.41,
      "Makefile": 0.3
    },
    "pull_requests_count": 8,
    "contributors_count": 6,
    "latest_release": {
      "tag_name": "v1.0.3",
      "name": "",
      "published_at": "2024-12-23T00:21:09Z",
      "body": "## [1.0.3] - 2024-12-23\r\n\r\n### Added\r\n- Interactive shell support for command execution\r\n\r\n### Changed\r\n- Improved login shell detection mechanism\r\n- Enhanced process cleanup on error\r\n\r\n### Fixed\r\n- Improved test reliability and coverage\r\n- Fixed pipeline timeout test cases\r\n- Improved redirection handling and tests",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v1.0.4b1",
        "commit_sha": "641bfc07a56c59db856c8e6511f722ce8960bdb6"
      },
      {
        "name": "v1.0.3",
        "commit_sha": "b070bc32ed7b7884c3f0f8221e6d0d28b7554d41"
      },
      {
        "name": "v1.0.2",
        "commit_sha": "9502b4602ad4a5a0e25ab02e64f55c37f2122524"
      },
      {
        "name": "v1.0.1",
        "commit_sha": "395d5adec32f92d30d3ea1ae52f89e395bda2828"
      },
      {
        "name": "v1.0.0",
        "commit_sha": "8387ce901ad277311e1fe372c8d7c5ce2f604505"
      }
    ],
    "latest_version": "v1.0.4b1"
  },
  "readme": "# MCP Shell Server\n\n[![codecov](https://codecov.io/gh/tumf/mcp-shell-server/branch/main/graph/badge.svg)](https://codecov.io/gh/tumf/mcp-shell-server)\n[![smithery badge](https://smithery.ai/badge/mcp-shell-server)](https://smithery.ai/server/mcp-shell-server)\n\nA secure shell command execution server implementing the Model Context Protocol (MCP). This server allows remote execution of whitelisted shell commands with support for stdin input.\n\n<a href=\"https://glama.ai/mcp/servers/rt2d4pbn22\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/rt2d4pbn22/badge\" alt=\"mcp-shell-server MCP server\" /></a>\n\n## Features\n\n* **Secure Command Execution**: Only whitelisted commands can be executed\n* **Standard Input Support**: Pass input to commands via stdin\n* **Comprehensive Output**: Returns stdout, stderr, exit status, and execution time\n* **Shell Operator Safety**: Validates commands after shell operators (; , &&, ||, |)\n* **Timeout Control**: Set maximum execution time for commands\n\n## MCP client setting in your Claude.app\n\n### Published version\n\n```shell\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n```json\n{\n  \"mcpServers\": {\n    \"shell\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-shell-server\"\n      ],\n      \"env\": {\n        \"ALLOW_COMMANDS\": \"ls,cat,pwd,grep,wc,touch,find\"\n      }\n    },\n  }\n}\n```\n\n### Local version\n\n#### Configuration\n\n```shell\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n```json\n{\n  \"mcpServers\": {\n    \"shell\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \".\",\n        \"run\",\n        \"mcp-shell-server\"\n      ],\n      \"env\": {\n        \"ALLOW_COMMANDS\": \"ls,cat,pwd,grep,wc,touch,find\"\n      }\n    },\n  }\n}\n```\n\n#### Installation\n\n### Installing via Smithery\n\nTo install Shell Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-shell-server):\n\n```bash\nnpx -y @smithery/cli install mcp-shell-server --client claude\n```\n\n### Manual Installation\n```bash\npip install mcp-shell-server\n```\n\n### Installing via Smithery\n\nTo install Shell Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-shell-server):\n\n```bash\nnpx -y @smithery/cli install mcp-shell-server --client claude\n```\n\n## Usage\n\n### Starting the Server\n\n```bash\nALLOW_COMMANDS=\"ls,cat,echo\" uvx mcp-shell-server\n# Or using the alias\nALLOWED_COMMANDS=\"ls,cat,echo\" uvx mcp-shell-server\n```\n\nThe `ALLOW_COMMANDS` (or its alias `ALLOWED_COMMANDS` ) environment variable specifies which commands are allowed to be executed. Commands can be separated by commas with optional spaces around them.\n\nValid formats for ALLOW_COMMANDS or ALLOWED_COMMANDS:\n\n```bash\nALLOW_COMMANDS=\"ls,cat,echo\"          # Basic format\nALLOWED_COMMANDS=\"ls ,echo, cat\"      # With spaces (using alias)\nALLOW_COMMANDS=\"ls,  cat  , echo\"     # Multiple spaces\n```\n\n### Request Format\n\n```python\n# Basic command execution\n{\n    \"command\": [\"ls\", \"-l\", \"/tmp\"]\n}\n\n# Command with stdin input\n{\n    \"command\": [\"cat\"],\n    \"stdin\": \"Hello, World!\"\n}\n\n# Command with timeout\n{\n    \"command\": [\"long-running-process\"],\n    \"timeout\": 30  # Maximum execution time in seconds\n}\n\n# Command with working directory and timeout\n{\n    \"command\": [\"grep\", \"-r\", \"pattern\"],\n    \"directory\": \"/path/to/search\",\n    \"timeout\": 60\n}\n```\n\n### Response Format\n\nSuccessful response:\n\n```json\n{\n    \"stdout\": \"command output\",\n    \"stderr\": \"\",\n    \"status\": 0,\n    \"execution_time\": 0.123\n}\n```\n\nError response:\n\n```json\n{\n    \"error\": \"Command not allowed: rm\",\n    \"status\": 1,\n    \"stdout\": \"\",\n    \"stderr\": \"Command not allowed: rm\",\n    \"execution_time\": 0\n}\n```\n\n## Security\n\nThe server implements several security measures:\n\n1. **Command Whitelisting**: Only explicitly allowed commands can be executed\n2. **Shell Operator Validation**: Commands after shell operators (;, &&, ||, |) are also validated against the whitelist\n3. **No Shell Injection**: Commands are executed directly without shell interpretation\n\n## Development\n\n### Setting up Development Environment\n\n1. Clone the repository\n\n```bash\ngit clone https://github.com/yourusername/mcp-shell-server.git\ncd mcp-shell-server\n```\n\n2. Install dependencies including test requirements\n\n```bash\npip install -e \".[test]\"\n```\n\n### Running Tests\n\n```bash\npytest\n```\n\n## API Reference\n\n### Request Arguments\n\n| Field     | Type       | Required | Description                                   |\n|-----------|------------|----------|-----------------------------------------------|\n| command   | string[]   | Yes      | Command and its arguments as array elements   |\n| stdin     | string     | No       | Input to be passed to the command            |\n| directory | string     | No       | Working directory for command execution       |\n| timeout   | integer    | No       | Maximum execution time in seconds             |\n\n### Response Fields\n\n| Field           | Type    | Description                                |\n|----------------|---------|---------------------------------------------|\n| stdout         | string  | Standard output from the command           |\n| stderr         | string  | Standard error output from the command     |\n| status         | integer | Exit status code                           |\n| execution_time | float   | Time taken to execute (in seconds)         |\n| error          | string  | Error message (only present if failed)     |\n\n## Requirements\n\n* Python 3.11 or higher\n* mcp>=1.1.0\n\n## License\n\nMIT License - See LICENSE file for details\n"
}