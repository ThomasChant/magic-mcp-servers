{
  "mcp_name": "AdLibML/mcpserver",
  "mcp_description": "Deploys math, weather, and Brave search services using FastAPI and Docker for remote access via MCP protocol.",
  "mcp_id": "AdLibML_mcpserver",
  "fetch_timestamp": "2025-06-23T00:15:43.805018Z",
  "github_url": "https://github.com/AdLibML/mcpserver",
  "repository": {
    "name": "mcpserver",
    "full_name": "AdLibML/mcpserver",
    "description": null,
    "html_url": "https://github.com/AdLibML/mcpserver",
    "created_at": "2025-04-18T15:06:00Z",
    "updated_at": "2025-05-22T12:22:51Z",
    "pushed_at": "2025-05-22T12:22:47Z",
    "size": 122,
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks_count": 0,
    "open_issues_count": 1,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "master",
    "owner": {
      "login": "AdLibML",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/72840737?v=4",
      "html_url": "https://github.com/AdLibML"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 22783
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# MCP Server\n\nA simple MCP (Model Context Protocol) server project implementing three services—**math**, **weather**, and **brave search**—using FastAPI, FastMCP, and Docker. This project deploys the MCP servers inside Docker containers, making them remotely accessible via a FastAPI app. Whether you are deploying infrastructure locally or in the cloud, these MCP servers can be called by any external application (for example, Claude) without exposing your host machine. For added security, dockerizing the MCP servers is a best practice.\n\nIn this example, an agent (`agent.py`) uses a local model Ollama deployed on port **11434** to process queries. It also demonstrates how to query all three services.\n\n## Features\n\n- **Math Server:** Provides simple mathematical operations such as addition and multiplication.\n- **Weather Server:** Offers a tool to fetch current weather information by coordinates using asynchronous HTTP calls.\n- **Brave Search Server:** Integrates with Brave Search’s API to perform web and local searches.\n- **FastAPI Integration:** MCP servers are embedded in a FastAPI application.  \n  - The app specifies the host and port via uvicorn.  \n  - Routing is managed using a custom `register_mcp_router` function.\n- **Remote Accessibility:** Deployed via Docker Compose, the MCP servers’ endpoints are accessible remotely by any client or external service.\n- **Centralized Logging:** A shared logger (located at `src/utils/setup_logger.py`) is used in all modules.\n- **Agent Example:** An example agent (`agent.py`) demonstrates querying these servers using both local (stdio) and production (SSE) modes.\n- **GUI Testing with MCP Inspector:** Use MCP Inspector to check and debug your MCP servers with a graphical interface.\n\n## Requirements\n\n- Python 3.13\n- [Poetry](https://python-poetry.org/)\n- Docker and Docker Compose\n\n## Installation\n\n1. **Clone the repository:**\n\n   ```sh\n   git clone https://github.com/yourusername/mcpserver.git\n   cd mcpserver\n   ```\n\n2. **Install dependencies using Poetry:**\n\n   ```sh\n   poetry install\n   ```\n\n3. **Create a `.env` file** at the root with the following example values:\n\n   ```properties\n   WEATHER_URL=http://localhost:5000/mcp/sse\n   MATH_URL=http://localhost:5001/mcp/sse\n   BRAVE_URL=http://localhost:5002/mcp/sse\n   MODE=prod\n   PORT_MATH_SERVER=5001\n   PORT_WEATHER_SERVER=5000\n   PORT_BRAVE_SERVER=5002\n   BRAVE_API_KEY=your-brave-api-key\n   ```\n\n## Docker Deployment\n\nThe MCP servers are deployed in Docker containers. Each server is built from its own Dockerfile and exposed on a dedicated port.\n\n### Dockerfiles\n\n- **Math Server:** (Example: `Dockerfile.math`)\n\n   ```dockerfile\n   FROM python:3.13-slim\n\n   WORKDIR /app\n   COPY pyproject.toml poetry.lock ./\n   RUN pip install uvicorn && pip install poetry && poetry install --no-dev --no-interaction\n   COPY src/ ./src/\n   ENV PYTHONPATH=/app\n   EXPOSE 5001\n   CMD [\"python\", \"src/servers/math_server.py\"]\n   ```\n\n- **Weather Server:** (Example: `Dockerfile.weather`)\n\n   ```dockerfile\n   FROM python:3.13-slim\n\n   WORKDIR /app\n   COPY pyproject.toml poetry.lock ./\n   RUN pip install uvicorn && pip install poetry && poetry install --no-dev --no-interaction\n   COPY src/ ./src/\n   ENV PYTHONPATH=/app\n   EXPOSE 5000\n   CMD [\"python\", \"src/servers/weather_server.py\"]\n   ```\n\n- **Brave Server:** (Example: `Dockerfile.brave`)\n\n   ```dockerfile\n   FROM python:3.13-slim\n\n   WORKDIR /app\n   COPY pyproject.toml poetry.lock ./\n   RUN pip install uvicorn && pip install poetry && poetry install --no-dev --no-interaction\n   COPY src/ ./src/\n   ENV PYTHONPATH=/app\n   EXPOSE 5002\n   CMD [\"python\", \"src/servers/brave_server.py\"]\n   ```\n\n### docker-compose.yml\n\nUpdate your `docker-compose.yml` to include all three services:\n\n```yaml\nversion: \"3.8\"\n\nservices:\n  math_server:\n    build:\n      context: .\n      dockerfile: Dockerfile.math\n    ports:\n      - \"5001:5001\"\n    env_file:\n      - .env\n    networks:\n      - mcpnetwork\n\n  weather_server:\n    build:\n      context: .\n      dockerfile: Dockerfile.weather\n    ports:\n      - \"5000:5000\"\n    env_file:\n      - .env\n    networks:\n      - mcpnetwork\n\n  brave_server:\n    build:\n      context: .\n      dockerfile: Dockerfile.brave\n    ports:\n      - \"5002:5002\"\n    env_file:\n      - .env\n    networks:\n      - mcpnetwork\n\nnetworks:\n  mcpnetwork:\n    driver: bridge\n```\n\nRebuild and launch the containers:\n\n```sh\ndocker-compose up --build\n```\n\n2. **Check the logs:**\n\n   - The Math server logs will show it listening on port `5001`.\n   - The Weather server logs will show it listening on port `5000`.\n   - The Brave server logs will show it listening on port `5002`.\n\n3. **Test the endpoints:**\n\n   - Weather SSE endpoint: [http://localhost:5000/mcp/sse](http://localhost:5000/mcp/sse)\n   - Math SSE endpoint: [http://localhost:5001/mcp/sse](http://localhost:5001/mcp/sse)\n   - Brave SSE endpoint: [http://localhost:5002/mcp/sse](http://localhost:5002/mcp/sse)\n\n   These endpoints will be accessible remotely if your network configuration permits.\n\n## Running the Agent\n\nAn example agent (`agent.py`) demonstrates how to query the MCP servers. In local mode, the agent launches the servers using their file paths with stdio transport; in production mode, it queries the servers via their URLs using SSE.\n\nTo run the agent:\n\n```sh\npython agent.py\n```\n\nThe agent will log its process, connect to the MCP servers, send a query, and display the response.\n\n## Testing with MCP Inspector (GUI)\n\nFor a GUI-based testing and debugging experience, you can use MCP Inspector to launch a graphical interface for your MCP servers. For example, you can launch MCP Inspector for the math server by running:\n\n```sh\nmcp dev ./src/servers/math_server.py\n```\nThen you can specify the transport type : sse and the url : http://localhost:5002/mcp/sse to check interactively your deployed servers. \n\n## Integration with Claude\n\nClaude can call your MCP servers using Docker. Below is an example Claude configuration that launches each service in stdio mode:\n\n```json\n{\n  \"mcpServers\": {\n    \"math\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"mcpserver-math_server\"\n      ],\n      \"transport\": \"stdio\"\n    },\n    \"weather\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"mcpserver-weather_server\"\n      ],\n      \"transport\": \"stdio\"\n    },\n    \"brave\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"-e\",\n        \"BRAVE_API_KEY= YOUR_API_KEY\",\n        \"mcpserver-brave_server\"\n      ],\n      \"transport\": \"stdio\"\n    }\n  }\n}\n```\n\nIn this configuration:  \n- **Math Server:** Claude runs the `mcpserver-math_server` container in interactive mode.\n- **Weather Server:** Claude runs the `mcpserver-weather_server` container in interactive mode.\n- **Brave Server:** Claude runs the `mcpserver-brave_server` container, setting `BRAVE_API_KEY` via an environment variable.  \nAdjust container names and your API key as needed.\n\n## Contributing\n\nContributions are welcome! Please open an issue or submit a pull request for any improvements.\n\n## License\n\nThis project is licensed under the [MIT License](LICENSE)."
}