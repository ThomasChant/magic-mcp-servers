{
  "mcp_name": "Website Snapshot",
  "mcp_description": "A MCP server that provides comprehensive website snapshot capabilities using Playwright. This server enables LLMs to capture and analyze web pages through structured accessibility snapshots, network monitoring, and console message collection.",
  "mcp_id": "gustavo-meilus_mcp-web-snapshot",
  "fetch_timestamp": "2025-06-23T09:24:18.787559Z",
  "github_url": "https://github.com/gustavo-meilus/mcp-web-snapshot",
  "repository": {
    "name": "mcp-web-snapshot",
    "full_name": "gustavo-meilus/mcp-web-snapshot",
    "description": "Take snapshot of websites and deliver it to LLM tools.",
    "html_url": "https://github.com/gustavo-meilus/mcp-web-snapshot",
    "created_at": "2025-05-29T18:41:52Z",
    "updated_at": "2025-06-02T05:35:53Z",
    "pushed_at": "2025-05-30T13:57:51Z",
    "size": 51,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "gustavo-meilus",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/180190993?v=4",
      "html_url": "https://github.com/gustavo-meilus"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 0,
    "languages": {
      "Python": 15732
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# MCP Web Snapshot\n\nA Model Context Protocol (MCP) server that provides comprehensive website snapshot capabilities using [Playwright](https://playwright.dev). This server enables LLMs to capture and analyze web pages through structured accessibility snapshots, network monitoring, and console message collection.\n\n## Key Features\n\n- **🚀 Fast and lightweight**: Uses Playwright's accessibility tree for efficient snapshots\n- **🎯 LLM-optimized**: Structured data output designed specifically for AI consumption\n- **📊 Comprehensive monitoring**: Captures network requests, responses, and console messages\n- **🔍 Element references**: Adds unique identifiers to interactive elements for precise targeting\n- **🛡️ Production-ready**: Built-in error handling, resource limits, and timeout management\n- **✅ Well-tested**: Comprehensive test suite with code coverage\n\n## Requirements\n\n- Python 3.11 or newer\n- VS Code, Cursor, Windsurf, Claude Desktop or any other MCP client\n\n## Getting Started\n\nFirst, install the MCP Web Snapshot server with your client. A typical configuration looks like this:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-web-snapshot\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/mcp-web-snapshot\",\n        \"run\",\n        \"python\",\n        \"src/server.py\"\n      ]\n    }\n  }\n}\n```\n\n### Install in VS Code\n\nYou can install the MCP Web Snapshot server using the VS Code CLI:\n\n```bash\n# For VS Code\ncode --add-mcp '{\"name\":\"mcp-web-snapshot\",\"command\":\"uv\",\"args\":[\"--directory\",\"/path/to/mcp-web-snapshot\",\"run\",\"python\",\"src/server.py\"]}'\n```\n\nAfter installation, the MCP Web Snapshot server will be available for use with your GitHub Copilot agent in VS Code.\n\n### Install in Cursor\n\nGo to `Cursor Settings` → `MCP` → `Add new MCP Server`. Name to your liking, use `command` type with the command `uv` and args `[\"--directory\", \"/path/to/mcp-web-snapshot\", \"run\", \"python\", \"src/server.py\"]`.\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-web-snapshot\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/mcp-web-snapshot\",\n        \"run\",\n        \"python\",\n        \"src/server.py\"\n      ]\n    }\n  }\n}\n```\n\n## Development Setup\n\n### Local Installation\n\n1. Clone this repository:\n\n```bash\ngit clone https://github.com/your-username/mcp-web-snapshot.git\ncd mcp-web-snapshot\n```\n\n2. Install dependencies using uv:\n\n```bash\nuv sync\n```\n\n3. Install Playwright browsers:\n\n```bash\nuv run playwright install\n```\n\n4. Run the server:\n\n```bash\nuv run python src/server.py\n```\n\n### Project Structure\n\n```\n├── src/\n│   ├── server.py               # Main MCP server entry point\n│   ├── registry.py             # Tool registration logic\n│   └── tools/\n│       ├── __init__.py\n│       └── snapshot_url.py     # Web snapshot implementation\n├── tests/                      # Test suite\n│   ├── __init__.py\n│   ├── test_snapshot_url.py    # Unit tests for website_snapshot\n│   └── README.md               # Test documentation\n├── pyproject.toml              # Project configuration\n├── pytest.ini                  # Pytest configuration\n├── uv.lock                     # Lock file for dependencies\n└── README.md                   # This file\n```\n\n### Testing\n\nThe project includes a comprehensive test suite using pytest:\n\n```bash\n# Run all tests\nuv run pytest\n\n# Run with verbose output\nuv run pytest -v\n\n# Run with coverage report\nPYTHONPATH=. uv run pytest --cov=src.tools.snapshot_url --cov-report=term-missing\n```\n\nTest coverage currently stands at 92%, covering:\n\n- Successful snapshot capture and formatting\n- Network request and console message monitoring\n- URL validation\n- Error handling and recovery\n\n## Available Tools\n\n### Website Snapshot\n\n**Tool**: `website_snapshot`\n\n**Description**: Take comprehensive snapshots of web pages with monitoring capabilities\n\n**Parameters**:\n\n- `target_url` (string): The URL to capture (must be a valid URL with protocol)\n\n**Features**:\n\n- 🎭 **Accessibility Snapshot**: Captures the complete accessibility tree structure\n- 🌐 **Network Monitoring**: Records all network requests and responses during page load\n- 🖥️ **Console Messages**: Captures client-side console output (logs, warnings, errors)\n- 🎯 **Element References**: Adds unique reference IDs to interactive elements\n- 📊 **Performance Metrics**: Provides summary of captured elements and network activity\n\n**Example Usage**:\n\n```python\n# Through MCP client\nresult = await website_snapshot(\"https://example.com\")\n```\n\n**Output Structure**:\n\n```\n✅ Captured snapshot with 25 elements, 12 requests, 0 console messages\n🔍 Example Website - Home Page\n📍 https://example.com\n\n🎭 Accessibility Snapshot:\n- navigation \"Main\":\n  - link \"Home\": [ref=1]\n  - link \"About\": [ref=2]\n  - button \"Contact\" [ref=3]\n- main:\n  - heading \"Welcome to Example\"\n  - link \"Get Started\": [ref=4]\n\n🌐 Network Requests:\n🌐 GET https://example.com\n   Status: 200\n   Response: <!DOCTYPE html><html>...\n\n🖥️ Console:\nNo console messages\n\n🎯 Element References:\n[ref=1]: link \"Home\"\n[ref=2]: link \"About\"\n[ref=3]: button \"Contact\"\n[ref=4]: link \"Get Started\"\n```\n\n## Configuration\n\nThe server can be configured through the `CONFIG` dictionary in `src/tools/snapshot_url.py`:\n\n```python\nCONFIG = {\n    \"viewport\": {\"width\": 1920, \"height\": 1080},\n    \"user_agent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36\",\n    \"timeout\": 15000,  # 15 seconds\n}\n```\n\n### Customization Options\n\n- **Viewport Size**: Adjust browser window dimensions\n- **User Agent**: Customize browser identification\n- **Timeout**: Control maximum wait time for page operations\n- **Content Filtering**: Modify response body size limits and content type filters\n\n## Use Cases\n\n### LLM-Guided Testing\n\nCapture comprehensive page state for automated test generation:\n\n```\n\"Please take a snapshot of https://myapp.com/login and help me create Page Object Model classes based on the discovered elements and structure.\"\n```\n\n### Web Content Analysis\n\nExtract structured data for content analysis and monitoring:\n\n```\n\"Take a snapshot of https://competitor.com/pricing and analyze any pricing changes or new features compared to what we discussed last week.\"\n```\n\n### Accessibility Auditing\n\nLeverage accessibility tree data for compliance checking:\n\n```\n\"Please capture a snapshot of https://myapp.com and identify any accessibility issues or areas for improvement based on WCAG guidelines.\"\n```\n\n### API Integration Analysis\n\nMonitor network activity to understand application behavior:\n\n```\n\"Take a snapshot of https://dashboard.example.com after I log in and show me what API calls are being made so I can understand the data flow.\"\n```\n\n### Cross-Browser Testing Setup\n\nGenerate test scenarios based on captured interactions:\n\n```\n\"Snapshot https://myapp.com/checkout and help me create comprehensive test cases that cover all the interactive elements and user workflows.\"\n```\n\n## Error Handling\n\nThe server includes comprehensive error handling:\n\n- **Invalid URLs**: Returns helpful error messages for malformed URLs\n- **Network Timeouts**: Configurable timeout limits with graceful fallbacks\n- **Browser Crashes**: Automatic cleanup and resource management\n- **Content Limits**: Smart filtering of large response bodies to prevent memory issues\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch: `git checkout -b feature-name`\n3. Make your changes and add tests\n4. Run tests: `uv run pytest`\n5. Check test coverage: `PYTHONPATH=. uv run pytest --cov=src.tools.snapshot_url --cov-report=term-missing`\n6. Ensure code style compliance: `uv run ruff check`\n7. Submit a pull request\n\nPlease ensure all tests pass and maintain or improve the current test coverage.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- Inspired by [MCP Server Website Snapshot](https://www.linkedin.com/pulse/mcp-server-website-snapshot-gustavo-meilus-oiigf/) article\n- Built on the foundation of [Microsoft's Playwright MCP](https://github.com/microsoft/playwright-mcp)\n- Powered by [Playwright](https://playwright.dev) for reliable browser automation\n- Uses [Model Context Protocol](https://modelcontextprotocol.io) for LLM integration\n\n## Related Projects\n\n- [Playwright MCP](https://github.com/microsoft/playwright-mcp) - Interactive browser automation MCP server\n- [MCP Python SDK](https://github.com/modelcontextprotocol/python-sdk/) - MCP server python framework\n"
}