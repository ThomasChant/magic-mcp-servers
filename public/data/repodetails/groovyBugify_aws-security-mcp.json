{
  "mcp_name": "groovyBugify/aws-security-mcp",
  "mcp_description": "Connects AI assistants to AWS security services for autonomous security analysis and threat modeling.",
  "mcp_id": "groovyBugify_aws-security-mcp",
  "fetch_timestamp": "2025-06-23T04:14:34.579284Z",
  "github_url": "https://github.com/groovyBugify/aws-security-mcp",
  "repository": {
    "name": "aws-security-mcp",
    "full_name": "groovyBugify/aws-security-mcp",
    "description": "A Model Context Protocol server that connects AI assistants like Claude to AWS security services, allowing them to autonomously query, inspect, and analyze AWS infrastructure for security issues and misconfigurations.",
    "html_url": "https://github.com/groovyBugify/aws-security-mcp",
    "created_at": "2025-04-23T09:28:14Z",
    "updated_at": "2025-06-21T10:29:10Z",
    "pushed_at": "2025-06-21T10:29:33Z",
    "size": 489,
    "stargazers_count": 61,
    "watchers_count": 61,
    "forks_count": 11,
    "open_issues_count": 0,
    "language": "Python",
    "license": "Apache License 2.0",
    "topics": [
      "aws",
      "cloud-security",
      "llm",
      "mcp-server"
    ],
    "default_branch": "main",
    "owner": {
      "login": "groovyBugify",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/73984159?v=4",
      "html_url": "https://github.com/groovyBugify"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 11,
    "subscribers_count": 3,
    "languages": {
      "Python": 1377728,
      "Shell": 2524,
      "Dockerfile": 1028
    },
    "language_percentages": {
      "Python": 99.74,
      "Shell": 0.18,
      "Dockerfile": 0.07
    },
    "pull_requests_count": 1,
    "contributors_count": 1
  },
  "readme": "# AWS Security MCP\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)\n\nA Model Context Protocol (MCP) server that enables AI assistants to perform comprehensive AWS security analysis through natural language queries.\n\n\n## Overview\n\nAWS Security MCP bridges AI assistants like Claude with AWS security services, enabling real-time infrastructure analysis through conversational queries. The system automatically discovers and analyzes resources across multiple AWS accounts, providing security insights without requiring deep AWS CLI knowledge.\n\n### Key Capabilities\n\n- **Cross-Account Discovery**: Automatic detection and access to AWS Organization accounts\n- **Natural Language Interface**: Query AWS resources using plain English\n- **Security Analysis**: Integrated findings from GuardDuty, SecurityHub, and Access Analyzer  \n- **Infrastructure Mapping**: Network topology, threat modelling, security review and blast radius analysis\n- **Log Analytics**: Athena-powered analysis of CloudTrail, VPC Flow Logs, and security events\n\n## Prerequisites\n\n- **Python**: 3.11 or higher\n- **Package Manager**: [uv](https://docs.astral.sh/uv/getting-started/installation/)\n- **AWS Account**: With appropriate IAM permissions\n- **MCP Client**: Claude Desktop, Cline, or compatible client\n\n### AWS Requirements\n\nMCP Server's AWS credentials must have the following permissions:\n\n#### Core MCP Permissions\n\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"CrossAccountAccess\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"sts:AssumeRole\"\n      ],\n      \"Resource\": \"arn:aws:iam::*:role/aws-security-mcp-cross-account-access\"\n    },\n    {\n      \"Sid\": \"OrganizationDiscovery\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"organizations:ListAccounts\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\n#### Athena Integration Permissions\n\nFor advanced log analysis capabilities, additional permissions are required:\n\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"AthenaQueryExecution\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"athena:BatchGetQueryExecution\",\n        \"athena:GetQueryExecution\",\n        \"athena:GetQueryResults\",\n        \"athena:GetWorkGroup\",\n        \"athena:ListQueryExecutions\",\n        \"athena:StartQueryExecution\",\n        \"athena:GetQueryResultsStream\",\n        \"athena:GetDataCatalog\",\n        \"athena:ListDataCatalogs\",\n        \"athena:ListDatabases\",\n        \"athena:ListTableMetadata\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"GlueCatalogAccess\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"glue:GetDatabase\",\n        \"glue:GetDatabases\",\n        \"glue:GetTable\",\n        \"glue:GetTables\",\n        \"glue:GetPartition\",\n        \"glue:GetPartitions\",\n        \"glue:BatchGetPartition\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"S3LogDataAccess\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:ListBucket\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::your-cloudtrail-bucket/*\",\n        \"arn:aws:s3:::your-cloudtrail-bucket\",\n        \"arn:aws:s3:::your-vpc-flow-logs-bucket/*\",\n        \"arn:aws:s3:::your-vpc-flow-logs-bucket\",\n        \"arn:aws:s3:::your-security-logs-bucket/*\",\n        \"arn:aws:s3:::your-security-logs-bucket\"\n      ]\n    },\n    {\n      \"Sid\": \"AthenaResultsAccess\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:ListBucket\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::your-athena-results-bucket/*\",\n        \"arn:aws:s3:::your-athena-results-bucket\"\n      ]\n    }\n  ]\n}\n```\n\n#### Required AWS Managed Policies\n\n**SecurityAudit Policy (Required)**\n\nAttach the AWS managed SecurityAudit policy to your MCP Server's IAM user or IAM role:\n\n```\nPolicy ARN: arn:aws:iam::aws:policy/SecurityAudit\n```\n\nThis policy provides comprehensive read-only access to AWS security services and is **essential** for AWS Security MCP functionality. It includes permissions for:\n\n- **IAM**: Users, roles, policies, access analysis\n- **EC2**: Security groups, instances, VPC configurations  \n- **S3**: Bucket policies, ACLs, public access settings\n- **GuardDuty**: Findings, detectors, threat intelligence\n- **SecurityHub**: Security standards, compliance findings\n- **Access Analyzer**: IAM access analysis and findings\n- **Lambda**: Function configurations and permissions\n- **CloudFront**: Distribution security settings\n- **Route53**: DNS configurations and health checks\n- **WAF**: Web ACL rules and configurations\n- **All other security-related AWS services**\n\n**Optional Managed Policies**\n\n- **AthenaFullAccess**: `arn:aws:iam::aws:policy/AmazonAthenaFullAccess` (for simplified Athena log analysis)\n\n#### Important Notes\n\n- Replace bucket names in the S3 permissions with your actual CloudTrail, VPC Flow Logs, and Athena results bucket names\n- The SecurityAudit policy is **mandatory** for basic AWS Security MCP functionality\n- Athena integration permissions are optional and only required for advanced log analysis features\n- All permissions follow the principle of least privilege with read-only access where possible\n\n## Quick Start\n\n1. **Install Dependencies**\n   ```bash\n   git clone https://github.com/groovyBugify/aws-security-mcp.git\n   cd aws-security-mcp\n   uv pip install -r requirements.txt\n   ```\n\n2. **Configure AWS Credentials**: This step is optional if you already have configured AWS Credentials on your env. For example if you are running this MCP server on EC2 or ECS Service, the MCP Server will automatically fetch relevant Credentials, based on the env the MCP Server is running on.\n\n\n3. **Start the Server**\n   ```bash\n   python3 aws_security_mcp/main.py sse\n   ```\n\n4. **Configure MCP Client**\n   ```bash\n   # Install mcp-proxy\n   uv tool install mcp-proxy\n   \n   # Check location of mcp-proxy\n   which mcp-proxy\n\n   # Add to Claude Desktop config\n   {\n     \"mcpServers\": {\n       \"aws-security\": {\n         \"command\": \"/path/to/mcp-proxy\",\n         \"args\": [\"http://localhost:8000/sse\"]\n       }\n     }\n   }\n   ```\n   \n## Configuration\n\n### YAML Configuration\n\nCreate or edit `config.yaml` in the project root:\n\n```yaml\naws:\n  region: \"us-east-1\"\n  profile: null\n\nserver:\n  log_level: \"info\"\n  startup_quiet: false\n  tool_quiet: false\n\ncross_account:\n  role_name: \"aws-security-mcp-cross-account-access\"\n  auto_setup_on_startup: true\n  max_concurrent_assumptions: 5\n```\n\n### Environment Variable Override\n\nEnvironment variables take precedence over YAML configuration:\n\n```bash\nexport MCP_LOG_LEVEL=debug\nexport MCP_STARTUP_QUIET=false\nexport AWS_DEFAULT_REGION=eu-west-1\n```\n\n## Usage Examples\n\n### Basic Infrastructure Queries\n\n```\nQuery: \"List all EC2 instances in production accounts and perform a threat modelling of all these running instances.\"\n\nQuery: \"Share all the secrets stored on env variables of Lambda functions, and share a list of functions for remediating this issue.\"\n\nQuery: \"Check my 'prod-ecs-cluster' and share more details about the 'user-login' service, is it deployed?\"\n```\n\n### Security Analysis\n\n```\nQuery: \"Show all GuardDuty findings from the last 7 days, and priortise based on the risk of exposure.\"\n\nQuery: \"Analyze IAM roles with administrative privileges\"\n\nQuery: \"Generate blast radius analysis for IP 172.16.1.10\"\n\nQuery: \"Fetch more details about the ip - 172.22.141.11, and share a network map for this resource.\n```\n\n### Cross-Account Operations\n\n```\nQuery: \"List all connected AWS accounts\"\nQuery: \"Refresh my AWS session\"\nQuery: \"Find resources tagged Team:Security across all accounts\"\nQuery: \"Show compliance status across organization\"\n```\n\n## Architecture\n\n### Cross-Account Access\n\nAWS Security MCP implements a hub-and-spoke model for multi-account access:\n\n1. **Discovery**: Uses `organizations:ListAccounts` to identify target accounts\n2. **Role Assumption**: Assumes `aws-security-mcp-cross-account-access` role in each account\n3. **Session Management**: Maintains temporary credentials with automatic refresh\n4. **Fallback**: Uses default credential chain for non-organization accounts\n\n### Required IAM Role Setup\n\nCreate this role in each target AWS account:\n\n**Role Name**: `aws-security-mcp-cross-account-access`\n\n**Trust Policy**:\n   ```json\n   {\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::YOUR-MASTER-ACCOUNT-ID:root\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n       }\n  ]\n   }\n   ```\n\n**Permissions**: Attach AWS managed policy `arn:aws:iam::aws:policy/SecurityAudit`\n\n## Athena Integration\n\n### Overview\n\nAWS Security MCP integrates with Amazon Athena to provide advanced log analysis capabilities. This feature requires pre-existing Athena tables containing your security-relevant logs.\n\n### Supported Log Types\n\nWhile the MCP server can analyze any log source through Athena, the following sources are recommended to provide comprehensive security metadata to your MCP client. For optimal security coverage, we recommend implementing at least CloudTrail and VPC Flow Logs:\n\n**Recommended Log Sources:**\n- **AWS CloudTrail**: API call auditing and user activity tracking\n- **VPC Flow Logs**: Network traffic pattern analysis  \n- **CloudFront Logs**: CDN request and response analysis\n- **ALB Access Logs**: Application load balancer traffic insights\n- **WAF Logs**: Web application firewall events and blocks(Cloudflare/AWS WAF/Akamai)\n- **AWS Shield Logs**: DDoS protection and mitigation events\n\n**Flexibility for Custom Log Sources**\n\nThe MCP server supports querying any log type stored in S3, giving you complete flexibility to analyze custom or additional log sources. To enable analysis of any log source, ensure:\n\n1. **S3 Storage**: Your logs are stored in an S3 bucket\n2. **Athena Table**: A properly configured Athena table exists for the log format\n3. **IAM Permissions**: The MCP server has `s3:GetObject` and `s3:ListBucket` permissions for the target bucket\n\nThis architecture allows you to extend security analysis beyond standard AWS logs to include application logs, custom security events, or third-party security tool outputs.\n\n### Query Capabilities\n\nOnce tables are configured, you can perform advanced queries:\n\n```\nQuery: \"Show all failed login attempts from external IPs in the last 24 hours\"\n\nQuery: \"Can you share what did 'saransh.rana@company.com' did in past 24 hours on my aws account? and share a timeline report?\"\n\nQuery: \"Can you check for all the 'Access Denied/Error/Forbidden' on my PCI(123456789012) aws account and share the username and userIP of the principal, and do a reverse IP checkup if this IP is coming from my own AWS Org or external party.\"\n\nQuery: \"Correlate GuardDuty findings with CloudTrail and VPC Flow logs events\"\n```\n\n### Setup Prerequisites\n\n1. **S3 Buckets**: CloudTrail and VPC Flow Logs must be stored in S3\n2. **Athena Workgroup**: Configure appropriate workgroup with result location\n3. **Partitioning**: Enable partition projection for performance\n4. **IAM Permissions**: Grant Athena query permissions to the MCP execution role\n\n## Supported AWS Services\n\n### Currently Available\n\n| Service | Capabilities |\n|---------|-------------|\n| **IAM** | Users, roles, policies, access keys, permission analysis |\n| **EC2** | Instances, security groups, VPCs, subnets, network interfaces |\n| **S3** | Buckets, permissions, public access analysis |\n| **GuardDuty** | Findings, detectors, threat intelligence |\n| **SecurityHub** | Findings, compliance standards, security scores |\n| **Lambda** | Functions, permissions, configurations, triggers |\n| **CloudFront** | Distributions, origins, behaviors, security policies |\n| **ELB/ALB/NLB** | Load balancers, target groups, listeners, health checks |\n| **Route53** | Hosted zones, DNS records, health checks |\n| **WAF** | Web ACLs, rules, rate limiting |\n| **Shield** | DDoS protection status and metrics |\n| **Access Analyzer** | IAM access analysis and findings |\n| **ECS/ECR** | Container services, repositories, image scanning |\n| **Organizations** | Account structure, SCPs, organizational units |\n| **Athena** | Log analysis, security event correlation |\n\n### Planned Additions\n\n- Oauth Authentication\n- AWS Config compliance analysis\n- AWS Security Hub CSPM integration\n- External CSPM integration\n\n## Advanced Configuration\n\n### Production Deployment\n\nFor production environments, use the following configuration:\n\n```yaml\nserver:\n  host: \"0.0.0.0\"\n  log_level: \"error\"\n  startup_quiet: true\n  tool_quiet: true\n  minimal_logging: true\n\ncross_account:\n  max_concurrent_assumptions: 10\n  session_duration_seconds: 7200\n```\n\n### Docker Deployment\n\n```dockerfile\nFROM python:3.11-slim\nWORKDIR /app\nCOPY . .\nRUN pip install -r requirements.txt\nEXPOSE 8000\nCMD [\"python\", \"aws_security_mcp/main.py\", \"sse\"]\n```\n\n   ```bash\n   docker build -t aws-security-mcp .\n   docker run -p 8000:8000 \\\n     -e AWS_ACCESS_KEY_ID=your_key \\\n     -e AWS_SECRET_ACCESS_KEY=your_secret \\\n     aws-security-mcp\n   ```\n\n### Load Balancer Configuration\n\n- **Health Check**: `GET /health`\n- **SSE Endpoint**: `/sse`\n- **Timeout**: 60 seconds minimum\n- **Sticky Sessions**: Not required\n\n## Troubleshooting\n\n### Common Issues\n\n**Tool Discovery Fails**\n```bash\n# Check AWS credentials\naws sts get-caller-identity\n\n# Verify cross-account role exists\naws iam get-role --role-name aws-security-mcp-cross-account-access\n```\n\n**Cross-Account Access Denied**\n```bash\n# Test role assumption manually\naws sts assume-role \\\n  --role-arn arn:aws:iam::TARGET-ACCOUNT:role/aws-security-mcp-cross-account-access \\\n  --role-session-name test-session\n```\n\n**Performance Issues**\n```yaml\n# Reduce concurrent operations\ncross_account:\n  max_concurrent_assumptions: 3\n  \n# Enable minimal logging\nserver:\n  minimal_logging: true\n```\n\n### Debug Mode\n\nEnable verbose logging for troubleshooting:\n\n```bash\nexport MCP_LOG_LEVEL=debug\nexport MCP_STARTUP_QUIET=false\npython3 aws_security_mcp/main.py sse\n```\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details. \n\n## Support\n\n- **Issues**: [GitHub Issues](https://github.com/groovyBugify/aws-security-mcp/issues)\n- **Documentation**: [Project Wiki](https://github.com/groovyBugify/aws-security-mcp/wiki)\n- **Security Issues**: Please report privately to the maintainers "
}