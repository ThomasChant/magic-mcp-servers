{
  "mcp_name": "diganto-deb/local_file_organizer",
  "mcp_description": "A Python-based system that organizes and manages files across directories using the Model Context Protocol framework.",
  "mcp_id": "diganto-deb_local_file_organizer",
  "fetch_timestamp": "2025-06-23T02:38:49.129658Z",
  "github_url": "https://github.com/diganto-deb/local_file_organizer",
  "repository": {
    "name": "local_file_organizer",
    "full_name": "diganto-deb/local_file_organizer",
    "description": "A Python-based file organization system that leverages the Model Context Protocol (MCP) to safely organize and manage files across directories.",
    "html_url": "https://github.com/diganto-deb/local_file_organizer",
    "created_at": "2025-03-20T21:14:35Z",
    "updated_at": "2025-06-22T18:12:07Z",
    "pushed_at": "2025-03-20T21:30:14Z",
    "size": 9,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "diganto-deb",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/47760313?v=4",
      "html_url": "https://github.com/diganto-deb"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 28602
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# Local File Organizer\n\nA Python-based file organization system that leverages the Model Context Protocol (MCP) to safely organize and manage files across directories.\n\n## Overview\n\nThis project implements a file organization system using the Model Context Protocol (MCP) framework to:\n\n1. Safely access user-specified directories through robust permission checking\n2. Automatically organize files by type into categorized directories\n3. Search for files across allowed directories\n4. Analyze directory contents and provide detailed file information\n\n## Key Features\n\n- **Directory Security**: Only operates on explicitly allowed directories\n- **Smart Categorization**: Organizes files by extension into categories:\n  - Documents (PDF, DOC, DOCX, TXT, RTF, MD, HTML, JSON, CSV, etc.)\n  - Images (JPG, PNG, GIF, SVG, WEBP, HEIC, etc.)\n  - Videos (MP4, MOV, AVI, MKV, etc.)\n  - Audio (MP3, WAV, OGG, FLAC, etc.)\n  - Archives (ZIP, RAR, 7Z, TAR, etc.)\n  - Code (PY, JS, HTML, CSS, Java, etc.)\n  - Applications (DMG, EXE, MSI, etc.)\n  - Others (uncategorized file types)\n- **Project Detection**: Identifies project directories to avoid disrupting code repositories\n- **Recursive Processing**: Can analyze and organize nested directory structures\n- **Resource-Efficient**: Optimized for performance with large directory structures\n- **Detailed Analytics**: Provides insights into file distribution by type\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/diganto-deb/local_file_organizer.git\ncd local_file_organizer\n\n# Install requirements\npip install -r requirements.txt\n```\n\n## Usage\n\n### 1. Configure Allowed Directories\n\nCreate or modify the `.cursor/mcp.json` file in your project directory:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-filesystem\",\n        \"/path/to/organize/dir1\",\n        \"/path/to/organize/dir2\"\n      ]\n    }\n  }\n}\n```\n\nReplace the paths with the directories you want to allow the MCP server to access.\n\n### 2. Enable the MCP Server\n\nAfter configuring the `.cursor/mcp.json` file:\n\n1. Restart Cursor\n2. Open Cursor Settings (⚙️)\n3. Navigate to `MCP`\n4. You should see the `filesystem` server in the list of MCP servers\n   - The server should appear with the name \"filesystem\" . \n5. Enable it by clicking the toggle switch next to the server name\n\n### 3. Use File Organization Commands\n\nOnce the MCP server is enabled, you can use the file organization commands directly in Cursor's Agent:\n\n```\n# List all available categories\nlist_categories\n\n# Analyze a directory without making changes\nanalyze_directory /path/to/directory\n\n# Create category folders in a target directory\ncreate_category_directories /path/to/target\n\n# Organize files by type\norganize_files /path/to/directory\n\n# Search for files\nsearch_files /path/to/directory \"*.jpg\"\n```\n\n## Technical Implementation\n\nThe system uses:\n\n- **MCP Python SDK**: For the core server implementation\n- **Filesystem MCP Server**: For secure file operations\n- **Pathlib**: For cross-platform path handling\n- **Type Annotations**: For improved code quality and IDE support\n\n## Planned Features\n\nThe following features are planned for upcoming releases:\n\n1. **File Write and Edit Functionality**: Add capabilities to:\n   - Modify file contents directly\n   - Create new files with templates\n   - Batch rename files using patterns\n   - Edit file metadata\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgments\n\n- Model Context Protocol (MCP) Team\n- Cursor IDE for MCP integration "
}