{
  "mcp_name": "pab1it0/tripadvisor-mcp",
  "mcp_description": "üìá üêç - A MCP server that enables LLMs to interact with Tripadvisor API, supporting location data, reviews, and photos through standardized MCP interfaces",
  "mcp_id": "pab1it0_tripadvisor-mcp",
  "fetch_timestamp": "2025-06-23T07:25:52.914535Z",
  "github_url": "https://github.com/pab1it0/tripadvisor-mcp",
  "repository": {
    "name": "tripadvisor-mcp",
    "full_name": "pab1it0/tripadvisor-mcp",
    "description": "A Model Context Protocol (MCP) server for Tripadvisor Content API.  This provides access to Tripadvisor location data, reviews, and photos through standardized MCP interfaces, allowing AI assistants to search for travel destinations and experiences.",
    "html_url": "https://github.com/pab1it0/tripadvisor-mcp",
    "created_at": "2025-03-27T15:32:22Z",
    "updated_at": "2025-06-16T16:21:58Z",
    "pushed_at": "2025-04-13T20:47:52Z",
    "size": 35,
    "stargazers_count": 30,
    "watchers_count": 30,
    "forks_count": 6,
    "open_issues_count": 3,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "pab1it0",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/11724759?v=4",
      "html_url": "https://github.com/pab1it0"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 6,
    "subscribers_count": 1,
    "languages": {
      "Python": 7378,
      "Dockerfile": 1404
    },
    "language_percentages": {
      "Python": 84.01,
      "Dockerfile": 15.99
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# Tripadvisor MCP Server\n\nA [Model Context Protocol][mcp] (MCP) server for Tripadvisor Content API.\n\nThis provides access to Tripadvisor location data, reviews, and photos through standardized MCP interfaces, allowing AI assistants to search for travel destinations and experiences.\n\n[mcp]: https://modelcontextprotocol.io\n\n## Features\n\n- [x] Search for locations (hotels, restaurants, attractions) on Tripadvisor\n- [x] Get detailed information about specific locations\n- [x] Retrieve reviews and photos for locations\n- [x] Search for nearby locations based on coordinates\n- [x] API Key authentication\n- [x] Docker containerization support\n\n- [x] Provide interactive tools for AI assistants\n\nThe list of tools is configurable, so you can choose which tools you want to make available to the MCP client.\n\n## Usage\n\n1. Get your Tripadvisor Content API key from the [Tripadvisor Developer Portal](https://developer.tripadvisor.com/).\n\n2. Configure the environment variables for your Tripadvisor Content API, either through a `.env` file or system environment variables:\n\n```env\n# Required: Tripadvisor Content API configuration\nTRIPADVISOR_API_KEY=your_api_key_here\n```\n\n3. Add the server configuration to your client configuration file. For example, for Claude Desktop:\n\n```json\n{\n  \"mcpServers\": {\n    \"tripadvisor\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<full path to tripadvisor-mcp directory>\",\n        \"run\",\n        \"src/tripadvisor_mcp/main.py\"\n      ],\n      \"env\": {\n        \"TRIPADVISOR_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n> Note: if you see `Error: spawn uv ENOENT` in Claude Desktop, you may need to specify the full path to `uv` or set the environment variable `NO_UV=1` in the configuration.\n\n## Docker Usage\n\nThis project includes Docker support for easy deployment and isolation.\n\n### Building the Docker Image\n\nBuild the Docker image using:\n\n```bash\ndocker build -t tripadvisor-mcp-server .\n```\n\n### Running with Docker\n\nYou can run the server using Docker in several ways:\n\n#### Using docker run directly:\n\n```bash\ndocker run -it --rm \\\n  -e TRIPADVISOR_API_KEY=your_api_key_here \\\n  tripadvisor-mcp-server\n```\n\n#### Using docker-compose:\n\nCreate a `.env` file with your Tripadvisor API key and then run:\n\n```bash\ndocker-compose up\n```\n\n### Running with Docker in Claude Desktop\n\nTo use the containerized server with Claude Desktop, update the configuration to use Docker with the environment variables:\n\n```json\n{\n  \"mcpServers\": {\n    \"tripadvisor\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"TRIPADVISOR_API_KEY\",\n        \"tripadvisor-mcp-server\"\n      ],\n      \"env\": {\n        \"TRIPADVISOR_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\nThis configuration passes the environment variables from Claude Desktop to the Docker container by using the `-e` flag with just the variable name, and providing the actual values in the `env` object.\n\n## Development\n\nContributions are welcome! Please open an issue or submit a pull request if you have any suggestions or improvements.\n\nThis project uses [`uv`](https://github.com/astral-sh/uv) to manage dependencies. Install `uv` following the instructions for your platform:\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\nYou can then create a virtual environment and install the dependencies with:\n\n```bash\nuv venv\nsource .venv/bin/activate  # On Unix/macOS\n.venv\\Scripts\\activate     # On Windows\nuv pip install -e .\n```\n\n## Project Structure\n\nThe project has been organized with a `src` directory structure:\n\n```\ntripadvisor-mcp/\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îî‚îÄ‚îÄ tripadvisor_mcp/\n‚îÇ       ‚îú‚îÄ‚îÄ __init__.py      # Package initialization\n‚îÇ       ‚îú‚îÄ‚îÄ server.py        # MCP server implementation\n‚îÇ       ‚îú‚îÄ‚îÄ main.py          # Main application logic\n‚îú‚îÄ‚îÄ Dockerfile               # Docker configuration\n‚îú‚îÄ‚îÄ docker-compose.yml       # Docker Compose configuration\n‚îú‚îÄ‚îÄ .dockerignore            # Docker ignore file\n‚îú‚îÄ‚îÄ pyproject.toml           # Project configuration\n‚îî‚îÄ‚îÄ README.md                # This file\n```\n\n### Testing\n\nThe project includes a test suite that ensures functionality and helps prevent regressions.\n\nRun the tests with pytest:\n\n```bash\n# Install development dependencies\nuv pip install -e \".[dev]\"\n\n# Run the tests\npytest\n\n# Run with coverage report\npytest --cov=src --cov-report=term-missing\n```\n\n### Tools\n\n| Tool | Category | Description |\n| --- | --- | --- |\n| `search_locations` | Search | Search for locations by query text, category, and other filters |\n| `search_nearby_locations` | Search | Find locations near specific coordinates |\n| `get_location_details` | Retrieval | Get detailed information about a location |\n| `get_location_reviews` | Retrieval | Retrieve reviews for a location |\n| `get_location_photos` | Retrieval | Get photos for a location |\n\n## License\n\nMIT\n\n---\n\n[mcp]: https://modelcontextprotocol.io\n"
}