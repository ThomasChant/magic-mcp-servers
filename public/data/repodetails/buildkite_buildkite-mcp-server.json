{
  "mcp_name": "Buildkite",
  "mcp_description": "Facilitates access to Buildkite pipeline, build, and job data for integration with tools like Claude Desktop and GitHub Copilot.",
  "mcp_id": "buildkite_buildkite-mcp-server",
  "fetch_timestamp": "2025-06-23T01:49:33.009196Z",
  "github_url": "https://github.com/buildkite/buildkite-mcp-server",
  "repository": {
    "name": "buildkite-mcp-server",
    "full_name": "buildkite/buildkite-mcp-server",
    "description": "Official MCP Server for Buildkite.",
    "html_url": "https://github.com/buildkite/buildkite-mcp-server",
    "created_at": "2025-04-08T21:28:47Z",
    "updated_at": "2025-06-23T00:56:40Z",
    "pushed_at": "2025-06-23T01:49:01Z",
    "size": 422,
    "stargazers_count": 13,
    "watchers_count": 13,
    "forks_count": 9,
    "open_issues_count": 9,
    "language": "Go",
    "license": "MIT License",
    "topics": [
      "buildkite",
      "mcp-server"
    ],
    "default_branch": "main",
    "owner": {
      "login": "buildkite",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/5055988?v=4",
      "html_url": "https://github.com/buildkite"
    },
    "has_issues": true,
    "has_projects": false,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 9,
    "subscribers_count": 5,
    "languages": {
      "Go": 157322,
      "Makefile": 1508,
      "Shell": 440
    },
    "language_percentages": {
      "Go": 98.78,
      "Makefile": 0.95,
      "Shell": 0.28
    },
    "pull_requests_count": 57,
    "contributors_count": 10,
    "latest_release": {
      "tag_name": "v0.4.1",
      "name": "v0.4.1",
      "published_at": "2025-06-10T22:27:51Z",
      "body": "## What's Changed\r\n* fix: adjust nil of Jobs for embedded struct to resolve lint issue by @wolfeidau in https://github.com/buildkite/buildkite-mcp-server/pull/51\r\n* Fix the Header Parsing with sending Custom Tokens by @eaugene in https://github.com/buildkite/buildkite-mcp-server/pull/50\r\n* chore: added agents.md file with project conventions by @wolfeidau in https://github.com/buildkite/buildkite-mcp-server/pull/52\r\n\r\n\r\n**Full Changelog**: https://github.com/buildkite/buildkite-mcp-server/compare/v0.4.0...v0.4.1",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.4.1",
        "commit_sha": "5c9694379e79500c6d3c674748f9ee0a24af285f"
      },
      {
        "name": "v0.4.0",
        "commit_sha": "84ea84e15d4370d6c67d36a1fe4702bd884f9c6a"
      },
      {
        "name": "v0.3.0",
        "commit_sha": "84d9b86c70a34e03db770c07f3a818280bca795b"
      },
      {
        "name": "v0.2.0",
        "commit_sha": "d2b5f46fb56e26e57bb82c2c538d14f452cea47c"
      },
      {
        "name": "v0.1.0",
        "commit_sha": "bab023a289ebb04e0b5f75ed4760221d262e5bfb"
      }
    ],
    "latest_version": "v0.4.1"
  },
  "readme": "# buildkite-mcp-server\n\n[![Build status](https://badge.buildkite.com/79fefd75bc7f1898fb35249f7ebd8541a99beef6776e7da1b4.svg?branch=main)](https://buildkite.com/buildkite/buildkite-mcp-server)\n\nThis is an [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) server for [Buildkite](https://buildkite.com). The goal is to provide access to information from buildkite about pipelines, builds and jobs to tools such as [Claude Desktop](https://claude.ai/download), [GitHub Copilot](https://github.com/features/copilot) and other tools, or editors.\n\n[![Add to Cursor](https://cursor.com/deeplink/mcp-install-dark.png)](https://cursor.com/install-mcp?name=buildkite&config=eyJjb21tYW5kIjoiZG9ja2VyIHJ1biAtaSAtLXJtIC1lIEJVSUxES0lURV9BUElfVE9LRU4gZ2hjci5pby9idWlsZGtpdGUvYnVpbGRraXRlLW1jcC1zZXJ2ZXIgc3RkaW8iLCJlbnYiOnsiQlVJTERLSVRFX0FQSV9UT0tFTiI6ImJrdWFfeHh4eHh4eHgifX0%3D)\n\n# Tools\n\n* `get_cluster` - Get detailed information about a specific cluster including its name, description, default queue, and configuration\n* `list_clusters` - List all clusters in an organization with their names, descriptions, default queues, and creation details\n* `get_cluster_queue` - Get detailed information about a specific queue including its key, description, dispatch status, and hosted agent configuration\n* `list_cluster_queues` - List all queues in a cluster with their keys, descriptions, dispatch status, and agent configuration\n* `get_pipeline` - Get detailed information about a specific pipeline including its configuration, steps, environment variables, and build statistics\n* `list_pipelines` - List all pipelines in an organization with their basic details, build counts, and current status\n* `list_builds` - List all builds for a pipeline with their status, commit information, and metadata\n* `get_build` - Get detailed information about a specific build including its jobs, timing, and execution details\n* `get_build_test_engine_runs` - Get test engine runs data for a specific build in Buildkite. This can be used to look up Test Runs.\n* `current_user` - Get details about the user account that owns the API token, including name, email, avatar, and account creation date\n* `user_token_organization` - Get the organization associated with the user token used for this request\n* `get_jobs` - Get all jobs for a specific build including their state, timing, commands, and execution details\n* `get_job_logs` - Get the log output and metadata for a specific job, including content, size, and header timestamps\n* `list_artifacts` - List all artifacts for a build across all jobs, including file details, paths, sizes, MIME types, and download URLs\n* `get_artifact` - Get detailed information about a specific artifact including its metadata, file size, SHA-1 hash, and download URL\n* `list_annotations` - List all annotations for a build, including their context, style (success/info/warning/error), rendered HTML content, and creation timestamps\n* `list_test_runs` - List all test runs for a test suite in Buildkite Test Engine\n* `get_test_run` - Get a specific test run in Buildkite Test Engine\n* `get_failed_executions` - Get failed test executions for a specific test run in Buildkite Test Engine. Optionally get the expanded failure details such as full error messages and stack traces.\n* `get_test` - Get a specific test in Buildkite Test Engine. This provides additional metadata for failed test executions\n* `access_token` - Get information about the current API access token including its scopes and UUID\n\nExample of the `get_pipeline` tool in action.\n\n![Get Pipeline Tool](docs/images/get_pipeline.png)\n\n### Production\n\nTo ensure the MCP server is run in a secure environment, we recommend running it in a container.\n\nPull the pre-built image (recommended):\n\n```bash\ndocker pull ghcr.io/buildkite/buildkite-mcp-server\n```\n\nOr build it yourself using GoReleaser and copy the binary into your path:\n\n```bash\ngoreleaser build --snapshot --clean\n```\n\n\n## API Token Scopes\n\nYour Buildkite API access token requires the following scopes for the MCP server to function properly:\n\n### Required Scopes\n\nFor full functionality with all available tools, your API token needs these scopes:\n\n- **read_clusters** - Access cluster and queue information\n- **read_pipelines** - Access pipeline details and configurations  \n- **read_builds** - Access builds, jobs, and annotations\n- **read_build_logs** - Access job log output\n- **read_user** - Access current user information\n- **read_organizations** - Access organization details\n- **read_artifacts** - Access build artifacts and metadata\n- **read_suites** - Access Test Engine data (if using Test Engine)\n\nCreate a buildkite API token with the required scopes at: [https://buildkite.com/user/api-access-tokens/new](https://buildkite.com/user/api-access-tokens/new?scopes[]=read_clusters&scopes[]=read_pipelines&scopes[]=read_builds&scopes[]=read_build_logs&scopes[]=read_user&scopes[]=read_organizations&scopes[]=read_artifacts&scopes[]=read_suites)\n\n### Minimum Recommended Scopes\n\nFor basic CI/CD monitoring and inspection, these core scopes provide the most commonly used functionality:\n\n- **read_builds** - Covers builds, jobs, and annotations\n- **read_pipelines** - Pipeline information\n- **read_user** - User identification\n\nCreate a buildkite API token with [Basic functionality (minimum scopes)](https://buildkite.com/user/api-access-tokens/new?scopes[]=read_builds&scopes[]=read_pipelines&scopes[]=read_user)\n\n# Configuration\n\nTo get started with various tools select one of the following.\n\n<details>\n\n<summary>Claude Desktop</summary>\n\n## Claude Desktop\n\nUse this configuration if you want to run the server `buildkite-mcp-server` Docker (recommended):\n\n```json\n{\n    \"mcpServers\": {\n        \"buildkite\": {\n            \"command\": \"docker\",\n            \"args\": [\n                \"run\",\n                \"-i\",\n                \"--rm\",\n                \"-e\",\n                \"BUILDKITE_API_TOKEN\",\n                \"ghcr.io/buildkite/buildkite-mcp-server\",\n                \"stdio\"\n            ],\n            \"env\": {\n                \"BUILDKITE_API_TOKEN\": \"bkua_xxxxxxxx\"\n            }\n        }\n    }\n}\n```\n\nConfiguration if you have `buildkite-mcp-server` installed locally.\n\n```json\n{\n    \"mcpServers\": {\n        \"buildkite\": {\n            \"command\": \"buildkite-mcp-server\",\n            \"args\": [\n                \"stdio\"\n            ],\n            \"env\": {\n                \"BUILDKITE_API_TOKEN\": \"bkua_xxxxxxxx\"\n            }\n        }\n    }\n}\n```\n</details>\n\n<details>\n\n<summary>Goose</summary>\n\n## Goose\n\nFor Docker with [Goose](https://block.github.io/goose/) (recommended):\n\n```yaml\nextensions:\n  fetch:\n    name: Buildkite\n    cmd: docker\n    args: [\"run\", \"-i\", \"--rm\", \"-e\", \"BUILDKITE_API_TOKEN\", \"ghcr.io/buildkite/buildkite-mcp-server\", \"stdio\"]\n    enabled: true\n    envs: { \"BUILDKITE_API_TOKEN\": \"bkua_xxxxxxxx\" }\n    type: stdio\n    timeout: 300\n```\n\nLocal configuration for Goose:\n\n```yaml\nextensions:\n  fetch:\n    name: Buildkite\n    cmd: buildkite-mcp-server\n    args: [stdio]\n    enabled: true\n    envs: { \"BUILDKITE_API_TOKEN\": \"bkua_xxxxxxxx\" }\n    type: stdio\n    timeout: 300\n```\n\n</details>\n\n<details>\n\n<summary>VSCode</summary>\n\n## VSCode\n\n[VSCode](https://code.visualstudio.com/) supports interactive inputs for variables. To get the API token interactively on MCP startup, put the following in `.vscode/mcp.json`\n\n```json\n{\n    \"inputs\": [\n        {\n            \"id\": \"BUILDKITE_API_TOKEN\",\n            \"type\": \"promptString\",\n            \"description\": \"Enter your BuildKite Access Token (https://buildkite.com/user/api-access-tokens)\",\n            \"password\": true\n        }\n    ],\n    \"servers\": {\n        \"buildkite\": {\n            \"command\": \"docker\",\n            \"args\": [\n                \"run\",\n                \"-i\",\n                \"--rm\",\n                \"-e\",\n                \"BUILDKITE_API_TOKEN\",\n                \"ghcr.io/buildkite/buildkite-mcp-server\",\n                \"stdio\"\n            ],\n            \"env\": {\n                \"BUILDKITE_API_TOKEN\": \"${input:BUILDKITE_API_TOKEN}\"\n            }\n        }\n    }\n}\n```\n\n</details>\n\n<details>\n\n<summary>Zed</summary>\n\n## Zed\n\nThere is a [Zed](https://zed.dev) editor [extension](https://github.com/mcncl/zed-mcp-server-buildkite) available in the [official extension gallery](https://zed.dev/extensions?query=buildkite). During installation it will ask for an API token which will be added to your settings. Or you can manually configure:\n\n```jsonc\n// ~/.config/zed/settings.json\n{\n  \"context_servers\": {\n    \"mcp-server-buildkite\": {\n      \"settings\": {\n        \"buildkite_api_token\": \"your-buildkite-token-here\",\n      }\n    }\n  }\n}\n```\n\n</details>\n\n---\n\n# Security\n\nThis container image is built using [cgr.dev/chainguard/static](https://images.chainguard.dev/directory/image/static/versions) base image and is configured to run the MCP server as a non-root user.\n\n# Contributing\n\nNotes on building this project are in the [DEVELOPMENT.md](DEVELOPMENT.md)\n\n## Disclaimer\n\nThis project is in the early stages of development and is not yet ready for use.\n\n## License\n\nThis project is released under MIT license.\n\n"
}