{
  "mcp_name": "curiousguyinhis30s/simple-task-master",
  "mcp_description": "A task management system that integrates with Desktop Commander MCP to organize and track tasks for Claude desktop code projects.",
  "mcp_id": "curiousguyinhis30s_simple-task-master",
  "fetch_timestamp": "2025-06-23T02:22:24.093279Z",
  "github_url": "https://github.com/curiousguyinhis30s/simple-task-master",
  "repository": {
    "name": "simple-task-master",
    "full_name": "curiousguyinhis30s/simple-task-master",
    "description": null,
    "html_url": "https://github.com/curiousguyinhis30s/simple-task-master",
    "created_at": "2025-04-14T18:03:02Z",
    "updated_at": "2025-04-14T18:04:40Z",
    "pushed_at": "2025-04-14T18:04:37Z",
    "size": 40,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "master",
    "owner": {
      "login": "curiousguyinhis30s",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/184421202?v=4",
      "html_url": "https://github.com/curiousguyinhis30s"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 48795
    },
    "language_percentages": {
      "JavaScript": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "0.1.0"
  },
  "readme": "# Simple Task Master (SimpleTM)\n\nA lightweight task management system for Claude desktop code projects that doesn't require API keys, designed to work with Desktop Commander MCP.\n\n## Features\n\n- Create and track tasks with titles, descriptions, and priorities\n- Break down tasks into subtasks\n- Set task dependencies to enforce order of work\n- Track task status (pending, in-progress, done)\n- Parse PRD documents to automatically extract tasks\n- Get the next task to work on based on dependencies and priorities\n- Works directly with Claude desktop code and Desktop Commander MCP\n- Organize tasks by project\n\n## Quick Start\n\n### Option 1: MCP (Recommended)\n\n1. **Install the package**\n\n```bash\n# Navigate to the simple-task-master directory\ncd simple-task-master\n\n# Install dependencies\nnpm install\n\n# Link the package for global use\nnpm link\n```\n\n2. **Add the MCP config to your editor**:\n\n```json\n{\n  \"mcpServers\": {\n    \"simple-tm\": {\n      \"command\": \"simple-tm-mcp\",\n      \"args\": [],\n      \"env\": {\n        \"DEBUG\": \"false\"\n      }\n    }\n  }\n}\n```\n\n3. **Enable the MCP** in your editor\n\n4. **Prompt Claude** to initialize SimpleTM:\n\n```\nCan you please initialize simple-tm into my project?\n```\n\n5. **Use common commands** directly through Claude:\n\n```\nCan you list all my tasks?\nWhat's the next task I should work on?\nCan you help me implement task 3?\nCan you help me break down this task into subtasks?\nCan you show me all tasks for the Frontend project?\n```\n\n### Option 2: Using Command Line\n\n#### Installation\n\n```bash\n# Navigate to the simple-task-master directory\ncd simple-task-master\n\n# Install dependencies\nnpm install\n\n# Link the package for global use\nnpm link\n```\n\n#### Initialize a new project\n\n```bash\n# Navigate to your project directory\ncd your-project-directory\n\n# Initialize SimpleTM\nsimple-tm init\n```\n\nThis will create a `.tasks.json` file in your project to store tasks.\n\n#### Common Commands\n\n```bash\n# List all tasks\nsimple-tm list\n\n# Add a new task\nsimple-tm add --title \"Implement login form\" --priority high\n\n# Add a task to a specific project\nsimple-tm add --title \"Create API endpoint\" --project \"Backend\"\n\n# Update a task\nsimple-tm update --id abc123 --status in-progress\n\n# Parse a PRD and generate tasks\nsimple-tm parse-prd --path your-prd.txt\n\n# Parse a PRD and assign tasks to a project\nsimple-tm parse-prd --path your-prd.txt --project \"Frontend\"\n\n# Get the next task to work on\nsimple-tm next\n\n# Get the next task for a specific project\nsimple-tm next --project \"Backend\"\n\n# Break down a task into subtasks\nsimple-tm expand --id abc123 --subtasks \"Design UI,Implement validation,Add error handling\"\n\n# List all projects\nsimple-tm projects\n\n# Switch to a project\nsimple-tm switch --project \"Frontend\"\n```\n\n## MCP Tools Reference\n\nWhen using Claude with Desktop Commander MCP, you can use these tools directly:\n\n- `list_tasks` - List all tasks, optionally filtered by status and project\n- `add_task` - Add a new task with optional project assignment\n- `update_task` - Update an existing task\n- `set_task_status` - Set the status of a task\n- `parse_prd` - Parse a PRD document and extract tasks with optional project assignment\n- `next_task` - Get the next task to work on, optionally filtered by project\n- `expand_task` - Break down a task into subtasks\n- `list_projects` - List all projects with task counts\n- `switch_project` - Switch to a different project or create a new one\n\n## Task Structure\n\nTasks in SimpleTM have the following structure:\n\n- `id`: Unique identifier for the task\n- `title`: Brief title of the task\n- `description`: Detailed description of what the task involves\n- `status`: Current state (pending, in-progress, done)\n- `priority`: Importance level (high, medium, low)\n- `projectName`: Name of the project this task belongs to\n- `dependencies`: IDs of tasks that must be completed before this task\n- `subtasks`: List of smaller, more specific tasks that make up the main task\n- `createdAt`: When the task was created\n- `updatedAt`: When the task was last updated\n\n## Project-Specific Tasks\n\nSimpleTM fully supports project-specific tasks, allowing you to:\n\n1. **Create projects**: Assign tasks to specific projects to organize your work.\n\n2. **Switch between projects**: Focus on one project at a time, or work across multiple projects.\n\n3. **Project-specific views**: Filter tasks by project to see only relevant work.\n\n4. **Project status tracking**: View task counts by project to track progress.\n\n### Working with Projects\n\n```bash\n# List all projects\nsimple-tm projects\n\n# Add a task to a specific project\nsimple-tm add --title \"New feature\" --project \"Frontend\"\n\n# List tasks for a specific project\nsimple-tm list --project \"Frontend\"\n\n# Get the next task for a specific project\nsimple-tm next --project \"Frontend\"\n\n# Switch to a specific project as your current focus\nsimple-tm switch --project \"Frontend\"\n\n# Extract tasks from a PRD and assign to a project\nsimple-tm parse-prd --path requirements.txt --project \"Backend\"\n```\n\nWhen using Claude with the MCP, you can work with projects naturally:\n\n```\nCan you show me all tasks for the Backend project?\nWhat's the next task I should work on for the Frontend project?\nCan you create a new task to implement user authentication for the Backend project?\nPlease switch to the Frontend project.\n```\n\n## Best Practices\n\n1. **Start with a PRD**: Use the `parse_prd` tool to quickly extract tasks from your requirements document.\n\n2. **Break down complex tasks**: Use the `expand_task` tool to break complex tasks into manageable subtasks.\n\n3. **Set dependencies**: Ensure task dependencies are properly set to maintain the correct workflow.\n\n4. **Track progress**: Regularly update task statuses to keep the project moving forward.\n\n5. **Use Claude efficiently**: Let Claude help you manage tasks by asking about the next task to work on or breaking down complex tasks.\n\n6. **Organize by project**: Use projects to keep different parts of your work separate and organized.\n\n## License\n\nMIT\n\n---\n\nMade for use with Claude and Desktop Commander MCP\n"
}