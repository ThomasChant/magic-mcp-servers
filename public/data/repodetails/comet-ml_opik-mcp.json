{
  "mcp_name": "Comet Opik",
  "mcp_description": "MCP server to talk to your [Opik](https://github.com/comet-ml/opik) cloud or open-source instance to query and analyze LLM traces, metrics and observability.",
  "mcp_id": "comet-ml_opik-mcp",
  "fetch_timestamp": "2025-06-23T02:14:51.933338Z",
  "github_url": "https://github.com/comet-ml/opik-mcp",
  "repository": {
    "name": "opik-mcp",
    "full_name": "comet-ml/opik-mcp",
    "description": "Model Context Protocol (MCP) implementation for Opik enabling seamless IDE integration and unified access to prompts, projects, traces, and metrics. ",
    "html_url": "https://github.com/comet-ml/opik-mcp",
    "created_at": "2025-03-11T16:31:03Z",
    "updated_at": "2025-06-21T20:46:38Z",
    "pushed_at": "2025-05-14T13:23:23Z",
    "size": 304,
    "stargazers_count": 92,
    "watchers_count": 92,
    "forks_count": 11,
    "open_issues_count": 1,
    "language": "TypeScript",
    "license": "Apache License 2.0",
    "topics": [
      "generative-ai",
      "mcp-server",
      "modelcontextprotocol",
      "typescript"
    ],
    "default_branch": "main",
    "owner": {
      "login": "comet-ml",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/31487821?v=4",
      "html_url": "https://github.com/comet-ml"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 11,
    "subscribers_count": 5,
    "languages": {
      "TypeScript": 199033,
      "HTML": 8687,
      "JavaScript": 3908,
      "Makefile": 1616,
      "Dockerfile": 507
    },
    "language_percentages": {
      "TypeScript": 93.11,
      "HTML": 4.06,
      "JavaScript": 1.83,
      "Makefile": 0.76,
      "Dockerfile": 0.24
    },
    "pull_requests_count": 4,
    "contributors_count": 5,
    "package_json_version": "0.0.1"
  },
  "readme": "<h1 align=\"center\" style=\"border-bottom: none\">\n    <div>\n        <a href=\"https://www.comet.com/site/products/opik/?from=llm&utm_source=opik&utm_medium=github&utm_content=header_img&utm_campaign=opik-mcp\">\n            <picture>\n                <source media=\"(prefers-color-scheme: dark)\" srcset=\"docs/assets/logo-dark-mode.svg\">\n                <source media=\"(prefers-color-scheme: light)\" srcset=\"docs/assets/logo-light-mode.svg\">\n                <img alt=\"Comet Opik logo\" src=\"docs/assets/logo-light-mode.svg\" width=\"200\" />\n            </picture>\n        </a>\n        <br>\n        Opik MCP Server\n    </div>\n    (Model Context Protocol)<br>\n</h1>\n\n<p align=\"center\">\nA Model Context Protocol (MCP) implementation for the <a href=\"https://github.com/comet-ml/opik/\">Opik platform</a> with support for multiple transport mechanisms, enabling seamless integration with IDEs and providing a unified interface for Opik's capabilities.\n</p>\n\n<div align=\"center\">\n\n[![License](https://img.shields.io/github/license/comet-ml/opik-mcp)](https://github.com/comet-ml/opik-mcp/blob/main/LICENSE)\n[![Node.js Version](https://img.shields.io/badge/node-%3E%3D20.11.0-brightgreen)](https://nodejs.org/)\n[![TypeScript](https://img.shields.io/badge/typescript-%5E5.8.2-blue)](https://www.typescriptlang.org/)\n<img src=\"https://badge.mcpx.dev?status=on\" title=\"MCP Enabled\"/>\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.15411156.svg)](https://doi.org/10.5281/zenodo.15411156)\n\n</div>\n\n<p align=\"center\">\n    <a href=\"https://www.comet.com/site/products/opik/?from=llm&utm_source=opik&utm_medium=github&utm_content=website_button&utm_campaign=opik\"><b>Website</b></a> ‚Ä¢\n    <a href=\"https://chat.comet.com\"><b>Slack community</b></a> ‚Ä¢\n    <a href=\"https://x.com/Cometml\"><b>Twitter</b></a> ‚Ä¢\n    <a href=\"https://www.comet.com/docs/opik/?from=llm&utm_source=opik&utm_medium=github&utm_content=docs_button&utm_campaign=opik\"><b>Documentation</b></a>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://glama.ai/mcp/servers/@comet-ml/opik-mcp\" rel=\"nofollow\" target=\"_blank\">\n      <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@comet-ml/opik-mcp/badge\" alt=\"Opik Server MCP server\" />\n    </a>\n</p>\n\n> **‚ö†Ô∏è Notice:** SSE (Server-Sent Events) transport support is currently experimental and untested. For production use, we recommend using the direct process execution approach shown in the IDE integration examples.\n\n## üöÄ What is Opik MCP Server?\n\nOpik MCP Server is an open-source implementation of the Model Context Protocol for the Opik platform. It provides a unified interface for interacting with Opik's capabilities, supporting multiple transport mechanisms for flexible integration into various environments.\n\n<br>\n\nYou can use Opik MCP Server for:\n* **IDE Integration:**\n  * Seamlessly integrate with Cursor and other compatible IDEs\n  * Provide direct access to Opik's capabilities from your development environment\n\n* **Unified API Access:**\n  * Access all Opik features through a standardized protocol\n  * Leverage multiple transport options (stdio, SSE) for different integration scenarios\n\n* **Platform Management:**\n  * Manage prompts, projects, traces, and metrics through a consistent interface\n  * Organize and monitor your LLM applications efficiently\n\n## Features\n\n- **Prompts Management**: Create, list, update, and delete prompts\n- **Projects/Workspaces Management**: Organize and manage projects\n- **Traces**: Track and analyze trace data\n- **Metrics**: Gather and query metrics data\n\n## Quick Start\n\n### Installation\n\n#### Manual Installation\n```bash\n# Clone the repository\ngit clone https://github.com/comet-ml/opik-mcp.git\ncd opik-mcp\n\n# Install dependencies and build\nnpm install\nnpm run build\n```\n\n### Configuration\n\nCreate a `.env` file based on the example:\n\n```bash\ncp .env.example .env\n# Edit .env with your specific configuration\n```\n\n### Starting the Server\n\n```bash\n# Start with stdio transport (default)\nnpm run start:stdio\n\n# Start with SSE transport for network access (experimental)\nnpm run start:sse\n```\n\n## IDE Integration\n\n### Cursor Integration\n\nTo integrate with Cursor IDE, create a `.cursor/mcp.json` file in your project directory with the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"opik\": {\n      \"command\": \"/path/to/node\",\n      \"args\": [\n        \"/path/to/opik-mcp/build/index.js\",\n        \"--apiUrl\",\n        \"https://www.comet.com/opik/api\",\n        \"--apiKey\",\n        \"YOUR_API_KEY\",\n        \"--workspace\",\n        \"default\",\n        \"--debug\",\n        \"true\"\n      ],\n      \"env\": {\n        \"OPIK_API_BASE_URL\": \"https://www.comet.com/opik/api\",\n        \"OPIK_API_KEY\": \"YOUR_API_KEY\",\n        \"OPIK_WORKSPACE_NAME\": \"default\",\n      }\n    }\n  }\n}\n```\n\nReplace `/path/to/node` with the path to your Node.js executable and `/path/to/opik-mcp` with the path to your opik-mcp installation. Also replace `YOUR_API_KEY` with your actual Opik API key.\n\n## Available Commands\n\nThe project includes a Makefile for common operations:\n\n```bash\n# Display all available commands\nmake help\n\n# Run tests\nmake test\n\n# Run transport-specific tests\nmake test-transport\n\n# Start the server with SSE transport (experimental)\nmake start-sse\n\n# Start the server with stdio transport\nmake start-stdio\n```\n\n## Transport Options\n\n### Standard Input/Output\n\nIdeal for local integration where the client and server run on the same machine.\n\n```bash\nmake start-stdio\n```\n\n### Server-Sent Events (SSE)\n\nEnables remote access and multiple simultaneous clients over HTTP. Note that this transport option is experimental.\n\n```bash\nmake start-sse\n```\n\nFor detailed information about the SSE transport, see [docs/sse-transport.md](docs/sse-transport.md).\n\n## Development\n\n### Testing\n\n```bash\n# Run all tests\nnpm test\n\n# Run specific test suite\nnpm test -- tests/transports/sse-transport.test.ts\n```\n\n### Pre-commit Hooks\n\nThis project uses pre-commit hooks to ensure code quality:\n\n```bash\n# Run pre-commit checks manually\nmake precommit\n```\n\n## Documentation\n\n- [SSE Transport](docs/sse-transport.md) - Details on using the SSE transport\n- [API Reference](docs/api-reference.md) - Complete API documentation\n- [Configuration](docs/configuration.md) - Advanced configuration options\n- [IDE Integration](docs/ide-integration.md) - Integration with Cursor IDE\n\n## Citation\n\nIf you use this project in your research, please cite it as follows:\n\n```\nComet ML, Inc, Koc, V., & Boiko, Y. (2025). Opik MCP Server. Github. https://doi.org/10.5281/zenodo.15411156\n```\n\nOr use the following BibTeX entry:\n\n```bibtex\n@software{CometML_Opik_MCP_Server_2025,\n  author = {{Comet ML, Inc} and Koc, V. and Boiko, Y.},\n  title = {{Opik MCP Server}},\n  year = {2025},\n  publisher = {GitHub},\n  url = {https://doi.org/10.5281/zenodo.15411156},\n  doi = {10.5281/zenodo.15411156}\n}\n```\n\nYou can also find citation information in the `CITATION.cff` file in this repository.\n\n## License\n\nApache 2.0\n"
}