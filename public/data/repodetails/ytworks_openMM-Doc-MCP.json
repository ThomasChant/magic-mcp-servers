{
  "mcp_name": "ytworks/openMM-Doc-MCP",
  "mcp_description": "Facilitates semantic search through OpenMM molecular dynamics documentation using vector embeddings and FAISS for efficient retrieval, optimized for LLM integration.",
  "mcp_id": "ytworks_openMM-Doc-MCP",
  "fetch_timestamp": "2025-06-23T09:42:46.577776Z",
  "github_url": "https://github.com/ytworks/openMM-Doc-MCP",
  "repository": {
    "name": "openMM-Doc-MCP",
    "full_name": "ytworks/openMM-Doc-MCP",
    "description": null,
    "html_url": "https://github.com/ytworks/openMM-Doc-MCP",
    "created_at": "2025-04-13T05:57:08Z",
    "updated_at": "2025-04-14T09:20:00Z",
    "pushed_at": "2025-04-14T09:19:56Z",
    "size": 5920,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "ytworks",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/663446?v=4",
      "html_url": "https://github.com/ytworks"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 43504
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 4,
    "contributors_count": 1
  },
  "readme": "# OpenMM Documentation MCP Server\n\nA Model Context Protocol (MCP) server for searching OpenMM molecular dynamics simulation documentation. This server vectorizes documentation and provides semantic search capabilities optimized for integration with large language models (LLMs).\n\n> üåê **Language/Ë®ÄË™û**: [English](README.md) | [Êó•Êú¨Ë™û](README_ja.md)\n\n## Overview\n\nThis MCP server allows natural language search through OpenMM documentation. It encodes documentation content into vector embeddings using modern language models and stores them in a FAISS vector database for efficient retrieval. When a query is received, the server finds the most semantically relevant documentation sections and returns them, making it particularly useful for:\n\n- Finding relevant documentation on molecular dynamics methods\n- Searching for usage instructions of OpenMM functions and classes\n- Retrieving information about simulation parameters and settings\n- Getting code examples and implementation details\n\n## Features\n\n- **Semantic Search**: Find documentation based on meaning, not just keywords\n- **MCP Integration**: Fully compatible with Claude Desktop and other MCP-enabled applications\n- **Multi-language Support**: Process queries in both English and Japanese\n- **Efficient Retrieval**: Uses FAISS for high-performance vector similarity search\n- **Customizable**: Configurable embedding models and search parameters\n\n## Setup\n\n### Prerequisites\n\n- Python 3.9 or higher\n- `uv` package manager (recommended) or `pip`\n- Minimum 8GB RAM (16GB+ recommended for index creation)\n\n### Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/openMM-Doc-MCP.git\ncd openMM-Doc-MCP\n\n# Create and activate virtual environment using uv\nuv venv\n\n# Install dependencies with uv (recommended)\nuv pip install -r requirements.txt\n\n# Or, if using pip\n# python -m venv .venv\n# source .venv/bin/activate  # For Linux/macOS\n# .venv\\Scripts\\activate     # For Windows\n# pip install -r requirements.txt\n```\n\n### Creating the Index\n\nBefore using the server, you need to create a vector index of the OpenMM documentation:\n\n```bash\nuv run python create_faiss_index.py\n```\n\nOptional parameters:\n\n```bash\n# Specify a custom document directory\nuv run python create_faiss_index.py --docs_dir \"/path/to/docs\"\n\n# Specify a custom output directory\nuv run python create_faiss_index.py --output_dir \"/path/to/output\"\n\n# Specify a custom embedding model\nuv run python create_faiss_index.py --embedding_model \"intfloat/multilingual-e5-large\"\n```\n\nIndex creation may take some time and requires significant memory. By default, index files are created in the `data/indices/docs/` directory.\n\n### Configuration\n\nYou can configure the server using environment variables:\n\n```bash\n# Set server port (default is 8080)\nexport MCP_SERVER_PORT=8888\n\n# Set index directory (optional)\nexport MCP_INDEX_DIR=\"/path/to/custom/index\"\n```\n\nFor Windows:\n\n```\nset MCP_SERVER_PORT=8888\nset MCP_INDEX_DIR=C:\\path\\to\\custom\\index\n```\n\n## Usage\n\n### Starting the Server\n\n```bash\nuv run python server.py\n```\n\nBy default, the server listens at http://localhost:8080.\n\n### Command-line Search\n\nYou can directly search from the command line:\n\n```bash\nuv run python search_molecular_simulation.py \"how to set up a water box simulation\"\n```\n\n### HTTP Requests\n\nYou can also send HTTP requests to the server:\n\n```\nPOST http://localhost:8080/query\nContent-Type: application/json\n\n{\n  \"query\": \"how to set up a water box simulation\",\n  \"top_k\": 5\n}\n```\n\n## Claude Desktop Integration\n\n### Setting up with Claude Desktop\n\nEdit the Claude Desktop configuration file to add this MCP server. The configuration file path is:\n\n- **macOS**:\n  `~/Library/Application Support/Claude/claude_desktop_config.json`\n- **Windows**:\n  `%APPDATA%\\Claude\\claude_desktop_config.json`\n\nAdd the following JSON configuration (within the existing `mcpServers` object):\n\n```json\n{\n  \"mcpServers\": {\n    \"OpenMM Documentation\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--with\",\n        \"mcp[cli]\",\n        \"--with\",\n        \"faiss-cpu\",\n        \"--with\",\n        \"langchain\",\n        \"--with\",\n        \"sentence-transformers\",\n        \"mcp\",\n        \"run\",\n        \"/path/to/openMM-Doc-MCP/server.py\"\n      ]\n    }\n  }\n}\n```\n\nNotes:\n- If the `uv` command is not in your environment path, use an absolute path (e.g.: `/path/to/uv`).\n- Replace `/path/to/openMM-Doc-MCP/server.py` with the absolute path to this script.\n- Always use absolute paths, not relative paths.\n\n### Troubleshooting Claude Desktop Connection\n\nIf Claude Desktop cannot connect to the MCP server:\n\n1. Verify that the path to `server.py` in the configuration file is correct (absolute path)\n2. Make sure `uv` is properly installed and accessible\n3. Check system logs for any errors\n4. Try restarting Claude Desktop after making changes to the configuration\n\n## API Reference\n\nThis server implements the Model Context Protocol (MCP) and provides the following tools:\n\n1. **search_documents**\n   - Searches for similar documents based on a query string\n   - Parameters:\n     - `query`: The search query text (required)\n     - `top_k`: Number of results to return (default 5)\n     - `index_path`: Optional custom path to FAISS index\n   - Returns: Dictionary containing search results with relevant document sections\n\n2. **get_index_info**\n   - Gets information about the currently loaded vector database index\n   - Parameters:\n     - `index_path`: Optional custom path to FAISS index\n   - Returns: Dictionary containing index information\n\nFor detailed API specifications, see:\n- [specs/apispec_en.md](specs/apispec_en.md)\n- [specs/apispec_ja.md](specs/apispec_ja.md)\n\n## Testing\n\nThis project includes tests for the vector database and MCP server.\n\n### Running Tests\n\n```bash\n# Run all tests\nuv run -m pytest\n\n# Run specific tests\nuv run -m pytest tests/test_server.py\nuv run -m pytest src/vector_db/tests/\n\n# Verbose output\nuv run -m pytest tests/test_server.py -v\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Server Won't Start**\n   - Check that dependencies are correctly installed\n   - Verify that the port is not already in use\n   - Check logs for specific error messages\n\n2. **No Search Results Returned**\n   - Verify that index files have been created correctly\n   - Ensure that the query is not empty\n   - Check that the index path is correct\n\n3. **Memory Errors**\n   - Index creation requires sufficient memory (16GB+ recommended)\n   - If using large models, try switching to smaller ones\n\n### Debugging\n\nTo enable detailed logging:\n\n```bash\nexport DEBUG=true\nuv run python server.py\n```\n\n### Test Execution Issues\n\n1. **NumPy Errors**\n   - If you encounter errors with `libgfortran.5.dylib`, running tests with `uv run` can resolve this\n   - In some environments, you may need to install the library with `conda install -c conda-forge libgfortran`\n\n2. **Tests Timeout**\n   - Increase test timeout: `uv run -m pytest --timeout=30`\n\n## Performance Tuning\n\n### Latency Optimization\n\n- Use smaller embedding models for faster inference\n- Enable GPU acceleration with `faiss-gpu` (if you have compatible GPUs)\n- Adjust chunk size and overlap parameters during indexing\n\n### Memory Usage Optimization\n\nFor processing large document collections:\n\n```bash\n# Adjust chunk size in create_faiss_index.py\nuv run python create_faiss_index.py --chunk_size 256 --chunk_overlap 20\n```\n\n## Directory Structure\n\n```\nopenMM-Doc-MCP/\n‚îú‚îÄ‚îÄ create_faiss_index.py   # Index creation script\n‚îú‚îÄ‚îÄ search_molecular_simulation.py # CLI search utility\n‚îú‚îÄ‚îÄ server.py               # MCP server implementation\n‚îú‚îÄ‚îÄ data/\n‚îÇ   ‚îî‚îÄ‚îÄ indices/\n‚îÇ       ‚îî‚îÄ‚îÄ docs/           # Default location for index files\n‚îÇ           ‚îú‚îÄ‚îÄ index.faiss # FAISS index file\n‚îÇ           ‚îî‚îÄ‚îÄ index.pkl   # Metadata pickle file\n‚îú‚îÄ‚îÄ specs/\n‚îÇ   ‚îú‚îÄ‚îÄ apispec_en.md       # API specification (English)\n‚îÇ   ‚îî‚îÄ‚îÄ apispec_ja.md       # API specification (Japanese)\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îî‚îÄ‚îÄ vector_db/          # Vector database related modules\n‚îÇ       ‚îú‚îÄ‚îÄ indexer.py      # Indexer implementation\n‚îÇ       ‚îú‚îÄ‚îÄ retriever.py    # Retriever implementation\n‚îÇ       ‚îî‚îÄ‚îÄ tests/          # Vector DB tests\n‚îî‚îÄ‚îÄ tests/\n    ‚îî‚îÄ‚îÄ test_server.py      # Server tests\n```\n\n## License\n\nThis project is provided under the [LICENSE](LICENSE)."
}