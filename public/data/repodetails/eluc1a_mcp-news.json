{
  "mcp_name": "eluc1a/mcp-news",
  "mcp_description": "Facilitates access to categorized news articles from a database, enabling clients to retrieve and summarize the latest content.",
  "mcp_id": "eluc1a_mcp-news",
  "fetch_timestamp": "2025-06-23T02:51:06.139927Z",
  "github_url": "https://github.com/eluc1a/mcp-news",
  "repository": {
    "name": "mcp-news",
    "full_name": "eluc1a/mcp-news",
    "description": null,
    "html_url": "https://github.com/eluc1a/mcp-news",
    "created_at": "2025-04-27T02:38:43Z",
    "updated_at": "2025-05-12T21:23:09Z",
    "pushed_at": "2025-05-16T14:55:47Z",
    "size": 59,
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks_count": 1,
    "open_issues_count": 1,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "eluc1a",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/200440376?v=4",
      "html_url": "https://github.com/eluc1a"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "Python": 71246
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 1,
    "contributors_count": 1
  },
  "readme": "# news-mcp MCP server\n\nmcp news server\n\n## Components\n\n### Resources\n\nThe server exposes news articles stored in a database via a resource URI:\n- `news://{category}/{limit}`: Retrieves a list of the latest articles for a given category.\n  - `{category}`: Filters articles by category (e.g., `tech`, `data_science`, `news`). See tool description for full list.\n  - `{limit}` (optional, default 10): Specifies the maximum number of articles to return.\n- Each returned article includes title, link, published date, and source.\n\n### Prompts\n\nThe server currently does not expose any prompts. (The summarization logic exists internally but is not available via an MCP prompt).\n\n### Tools\n\nThe server implements one tool:\n- `summarize_news`: Retrieves raw news articles from the database, allowing the client (LLM) to summarize them.\n  - Takes optional `category` (string) and `limit` (integer, default 20) arguments.\n  - Returns a list of article dictionaries, each containing `id`, `title`, `link`, `published`, `source`, and `content`.\n  - Available categories: `tech`, `data_science`, `llm_tools`, `cybersecurity`, `linux`, `audio_dsp`, `startups`, `news`, `science`, `research`, `policy`.\n\n## Configuration\n\nThe server relies on a PostgreSQL database configured via the `DATABASE_URL` environment variable (defaults to `postgresql://localhost/mcp_news`).\n\nThe `news_gatherer.py` script (intended to be run separately/scheduled) populates the database from various RSS feeds.\n\nSummarization logic (internal, not exposed via MCP) uses the OpenAI API, configured via the `OPENAI_API_KEY` environment variable.\n\nOther configurations (via environment variables or defaults):\n- `LOOKBACK_HOURS`: How far back `news_gatherer.py` looks for new articles (default: 6).\n- `SUMMARY_WORD_TARGET`: Target word count for internal summarization (default: 500).\n- `MAX_ARTICLES_PER_SUMMARY`: Maximum articles included in one summary batch (default: 25).\n- `KEYWORD_FILTER`: Keywords used by internal summarization logic.\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"news-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"~/dev/news-mcp\",\n        \"run\",\n        \"news-mcp\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"news-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"news-mcp\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory ~/dev/news-mcp run news-mcp \n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging."
}