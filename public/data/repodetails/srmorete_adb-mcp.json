{
  "mcp_name": "srmorete/adb-mcp",
  "mcp_description": "Facilitates interaction between AI models and Android devices using ADB through a TypeScript-based MCP server.",
  "mcp_id": "srmorete_adb-mcp",
  "fetch_timestamp": "2025-06-23T08:36:19.868919Z",
  "github_url": "https://github.com/srmorete/adb-mcp",
  "repository": {
    "name": "adb-mcp",
    "full_name": "srmorete/adb-mcp",
    "description": "An MCP (Model Context Protocol) server for interacting with Android devices through ADB in TypeScript.",
    "html_url": "https://github.com/srmorete/adb-mcp",
    "created_at": "2025-04-12T08:41:03Z",
    "updated_at": "2025-05-29T14:23:25Z",
    "pushed_at": "2025-05-16T03:28:30Z",
    "size": 32,
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": "MIT License",
    "topics": [
      "adb",
      "android",
      "claude",
      "cursor",
      "cursor-ai",
      "mcp",
      "mcp-server",
      "ui-testing",
      "uiautomator"
    ],
    "default_branch": "master",
    "owner": {
      "login": "srmorete",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/26512907?v=4",
      "html_url": "https://github.com/srmorete"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 21727,
      "TypeScript": 11272,
      "Dockerfile": 638
    },
    "language_percentages": {
      "JavaScript": 64.59,
      "TypeScript": 33.51,
      "Dockerfile": 1.9
    },
    "pull_requests_count": 3,
    "contributors_count": 2,
    "package_json_version": "0.1.0"
  },
  "readme": "# ADB MCP Server\n[![smithery badge](https://smithery.ai/badge/@srmorete/adb-mcp)](https://smithery.ai/server/@srmorete/adb-mcp)\n\nAn MCP (Model Context Protocol) server for interacting with Android devices through ADB. This TypeScript-based tool provides a bridge between AI models and Android device functionality.\n\n## Features\n\n- üì± Device Management - List and interact with connected Android devices\n- üì¶ App Installation - Deploy APK files to connected devices\n- üìã Logging - Access device logs through logcat\n- üîÑ File Transfer - Push and pull files between device and host\n- üì∏ UI Interaction - Capture screenshots and analyze UI hierarchy\n- üîß Shell Command Execution - Run custom commands on the device\n\n## Prerequisites\n\n- Node.js (v16 or higher recommended, tested with Node.js v16, v18, and v20)\n- ADB (Android Debug Bridge) installed and in your PATH\n- An Android device or emulator connected via USB or network with USB debugging enabled\n- Permission to access the device (accepted debugging authorization on device)\n\n## Installation\n\n### Installing via Smithery\n\nTo install ADB Android Device Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@srmorete/adb-mcp):\n\n```bash\nnpx -y @smithery/cli install @srmorete/adb-mcp --client claude\n```\n\n### Manual Installation\n```bash\n# Clone the repository\ngit clone https://github.com/srmorete/adb-mcp.git\ncd adb-mcp\n\n# Install dependencies\nnpm install\n\n# Build the TypeScript code\nnpm run build\n\n# Run the server\nnpx adb-mcp\n```\n\n## Configuration\n\n### ADB Path Configuration\n\nThe server uses default ADB paths. For custom ADB location:\n\n```bash\nexport ADB_PATH=/path/to/adb\nnpx adb-mcp\n```\n\n### MCP Configuration\n\nAdd the ADB MCP server configuration:\n   ```json\n   {\n     \"mcpServers\": {\n       \"adb\": {\n         \"command\": \"npx\",\n         \"args\": [\n           \"adb-mcp\"\n         ]\n       }\n     }\n   }\n   ```\n\n## Usage\n\n### Starting the Server\n\n**IMPORTANT: The server must be running before using any ADB tools.**\n\nStart the server using:\n\n```bash\nnpx adb-mcp\n```\n\nYou should see:\n```\n[INFO] ADB MCP Server connected and ready\n```\n\nKeep this terminal window open while using the ADB tools.\n\n### Available Tools\n\nAll tools are available with the following naming convention:\n\n#### üì± Device Management\n\n- `adb_devices` - List connected devices\n- `adb_shell` - Execute shell commands on a device\n\n#### üì¶ App Management\n\n- `adb_install` - Install an APK file using a local file path\n\n#### üìã Logging\n\n- `adb_logcat` - View device logs with optional filtering\n\n#### üîÑ File Transfer\n\n- `adb_pull` - Pull files from a device\n- `adb_push` - Push files to a device\n\n#### üîç UI Interaction\n\n- `dump_image` - Take a screenshot of the current screen\n- `inspect_ui` - Get UI hierarchy in XML format (most useful for AI interaction)\n\n## Troubleshooting\n\nIf tools aren't working:\n\n- **Server Issues:**\n  - Ensure the server is running (`npx adb-mcp`)\n  - Check server output for error messages\n  - Try detailed logs: `LOG_LEVEL=3 npx adb-mcp`\n  - Kill hanging processes:\n    - `ps aux | grep \"adb-mcp\" | grep -v grep`\n    - then `kill -9 [PID]`\n\n- **Device Connection:**\n  - Verify connection with `adb_devices`\n  - If \"unauthorized\", accept debugging authorization on device\n  - Check USB/network connections\n  - Try restarting ADB: `adb kill-server && adb start-server`\n\n- **ADB Issues:**\n  - Verify ADB installation: `adb version`\n\n- **Device Setup:**\n  - Use an emulator (it was built using one), for real devices maybe try this:\n    - Ensure USB debugging is enabled\n    - For newer Android versions, enable \"USB debugging (Security settings)\"\n    - Try different USB port or cable\n    - or let me know in an issue\n\n## Compatibility\n\n- Android 8.0 and higher\n- MCP clients including Claude in Cursor IDE\n- Was built on macOS but **should** run on any POSIX compatible (Linux etc).\n- Did not try on Windows but **maybe** it works.\n\n## Contributing\n\n- Contributions are welcome! Submit a Pull Request.\n- For major changes, open an issue to discuss first.\n- You can, of course, also fork it\n- **Note:** this project was `vibe-coded` so if you spot some weird stuff... well now you know üôÇ\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- Built with [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction)\n"
}