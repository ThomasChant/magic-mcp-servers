{
  "mcp_name": "nwiizo/tfmcp",
  "mcp_description": "ü¶Ä üè† - A Terraform MCP server allowing AI assistants to manage and operate Terraform environments, enabling reading configurations, analyzing plans, applying configurations, and managing Terraform state.",
  "mcp_id": "nwiizo_tfmcp",
  "fetch_timestamp": "2025-06-23T07:13:21.945781Z",
  "github_url": "https://github.com/nwiizo/tfmcp",
  "repository": {
    "name": "tfmcp",
    "full_name": "nwiizo/tfmcp",
    "description": "üåç Terraform Model Context Protocol (MCP) Tool - An experimental CLI tool that enables AI assistants to manage and operate Terraform environments. Supports reading Terraform configurations, analyzing plans, applying configurations, and managing state with Claude Desktop integration. ‚ö°Ô∏è",
    "html_url": "https://github.com/nwiizo/tfmcp",
    "created_at": "2025-03-08T14:10:29Z",
    "updated_at": "2025-06-20T05:26:39Z",
    "pushed_at": "2025-06-14T02:38:30Z",
    "size": 2022,
    "stargazers_count": 309,
    "watchers_count": 309,
    "forks_count": 14,
    "open_issues_count": 1,
    "language": "Rust",
    "license": "MIT License",
    "topics": [
      "mcp",
      "mcp-server",
      "terraform"
    ],
    "default_branch": "main",
    "owner": {
      "login": "nwiizo",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/12461120?v=4",
      "html_url": "https://github.com/nwiizo"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 14,
    "subscribers_count": 7,
    "languages": {
      "Rust": 267917,
      "HCL": 7037,
      "Shell": 5548,
      "Dockerfile": 2233
    },
    "language_percentages": {
      "Rust": 94.76,
      "HCL": 2.49,
      "Shell": 1.96,
      "Dockerfile": 0.79
    },
    "pull_requests_count": 3,
    "contributors_count": 2,
    "latest_release": {
      "tag_name": "v0.1.5",
      "name": "v0.1.5 - CI/CD Improvements and Security Enhancements",
      "published_at": "2025-06-14T02:38:59Z",
      "body": "# Release Notes - v0.1.5\n\n## üéØ Overview\n\nThis release focuses on CI/CD reliability improvements, security enhancements, and documentation updates. All CI pipelines are now fully functional with comprehensive testing across multiple platforms.\n\n## ‚ú® Key Improvements\n\n### CI/CD Enhancements\n- **Fixed CI test failures** by installing Terraform in GitHub Actions check job\n- **Enhanced environment detection** for MCP integration tests with multiple fallback mechanisms\n- **Improved CI reliability** with environment-specific test strategies\n- **Documented CI/CD best practices** including troubleshooting guides\n\n### Security & Code Quality\n- **Removed all mock code** and mock frameworks for enhanced security\n- **Enforced strict quality standards** with no dead code allowed\n- **Added comprehensive security rules** documented in CLAUDE.md\n- **Temporarily disabled cargo-audit** due to toolchain compatibility (requires Rust 1.85+)\n\n### Documentation Updates\n- **Completely reorganized CLAUDE.md** for better readability and maintenance\n- **Added CI/CD troubleshooting section** with detailed problem-solution pairs\n- **Documented known issues** and their resolutions with timestamps\n- **Removed obsolete files** including rules/, package.json, and unused scripts\n\n## üîß Technical Details\n\n### Files Modified\n- `.github/workflows/rust.yml` - Added Terraform installation and security audit workaround\n- `tests/mcp_integration.rs` - Enhanced CI environment detection\n- `CLAUDE.md` - Comprehensive reorganization and CI/CD documentation\n- Removed multiple unused Rust modules and dependencies\n\n### Testing\n- ‚úÖ All tests passing locally and in CI\n- ‚úÖ Cross-platform testing (Ubuntu, Windows, macOS)\n- ‚úÖ Code formatting and linting checks\n- ‚úÖ Code coverage reporting\n\n## üìù Breaking Changes\n\nNone - This release maintains full backward compatibility.\n\n## üöÄ Upgrading\n\n```bash\n# Using cargo\ncargo install tfmcp --version 0.1.5\n\n# From source\ngit clone https://github.com/nwiizo/tfmcp\ncd tfmcp\ncargo install --path .\n```\n\n## üîç Known Issues\n\n- Security audit temporarily disabled in CI due to cargo-audit requiring Rust 1.85+ (edition2024)\n- Manual security review required until toolchain compatibility is resolved\n\n## üôè Acknowledgments\n\nThanks to all contributors for helping improve the reliability and security of tfmcp!",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.1.5",
        "commit_sha": "d8017c93caccb7bf3492de0546e65d2e3c1e3f38"
      },
      {
        "name": "v0.1.4",
        "commit_sha": "cf9d9f6df23e89d9f45bc7e8899c8de159d965e0"
      },
      {
        "name": "v0.1.3",
        "commit_sha": "1f010c3677237e0175bd342f67d3c6dbdbf8105b"
      },
      {
        "name": "v0.1.2",
        "commit_sha": "2524574d8f76a75693a05b7c305b6db8bb3a1710"
      },
      {
        "name": "v0.1.1",
        "commit_sha": "7b0db5cd882ab119697ccd84639703c9eb7ac43e"
      },
      {
        "name": "v0.1.0",
        "commit_sha": "c983e644057a273cb3e6b76ec1a63fb933398187"
      }
    ],
    "latest_version": "v0.1.5"
  },
  "readme": "# tfmcp: Terraform Model Context Protocol Tool\n\n*‚ö†Ô∏è  This project includes production-ready security features but is still under active development. While the security system provides robust protection, please review all operations carefully in production environments. ‚ö†Ô∏è*\n\ntfmcp is a command-line tool that helps you interact with Terraform via the Model Context Protocol (MCP). It allows LLMs to manage and operate your Terraform environments, including:\n\n## üéÆ Demo\n\nSee tfmcp in action with Claude Desktop:\n\n![tfmcp Demo with Claude Desktop](.github/images/tfmcp-demo.gif)\n\n- Reading Terraform configuration files\n- Analyzing Terraform plan outputs\n- Applying Terraform configurations\n- Managing Terraform state\n- Creating and modifying Terraform configurations\n\n## üéâ Latest Release\n\nThe latest version of tfmcp (v0.1.3) is now available on Crates.io! You can easily install it using Cargo:\n\n```bash\ncargo install tfmcp\n```\n\n### üÜï What's New in v0.1.3\n- **üîê Comprehensive Security System**: Production-ready security controls with audit logging\n- **üìä Enhanced Terraform Analysis**: Detailed validation and best practice recommendations  \n- **üõ°Ô∏è Access Controls**: File pattern-based restrictions and resource limits\n- **üìù Audit Logging**: Complete operation tracking for compliance and monitoring\n\n## Features\n\n- üöÄ **Terraform Integration**  \n  Deeply integrates with the Terraform CLI to analyze and execute operations.\n\n- üìÑ **MCP Server Capabilities**  \n  Runs as a Model Context Protocol server, allowing AI assistants to access and manage Terraform.\n\n- üîê **Enterprise Security**  \n  Production-ready security controls with configurable policies, audit logging, and access restrictions.\n\n- üìä **Advanced Analysis**  \n  Detailed Terraform configuration analysis with best practice recommendations and security checks.\n\n- ‚ö°Ô∏è **Blazing Fast**  \n  High-speed processing powered by the Rust ecosystem with optimized parsing and caching.\n\n- üõ†Ô∏è **Automatic Setup**  \n  Automatically creates sample Terraform projects when needed, ensuring smooth operation even for new users.\n\n- üê≥ **Docker Support**  \n  Run tfmcp in a containerized environment with all dependencies pre-installed.\n\n## Installation\n\n### From Source\n```bash\n# Clone the repository\ngit clone https://github.com/nwiizo/tfmcp\ncd tfmcp\n\n# Build and install\ncargo install --path .\n```\n\n### From Crates.io\n```bash\ncargo install tfmcp\n```\n\n### Using Docker\n```bash\n# Clone the repository\ngit clone https://github.com/nwiizo/tfmcp\ncd tfmcp\n\n# Build the Docker image\ndocker build -t tfmcp .\n\n# Run the container\ndocker run -it tfmcp\n```\n\n## Requirements\n\n- Rust (edition 2021)\n- Terraform CLI installed and available in PATH\n- Claude Desktop (for AI assistant integration)\n- Docker (optional, for containerized deployment)\n\n## Usage\n\n```bash\n$ tfmcp --help\n‚ú® A CLI tool to manage Terraform configurations and operate Terraform through the Model Context Protocol (MCP).\n\nUsage: tfmcp [OPTIONS] [COMMAND]\n\nCommands:\n  mcp       Launch tfmcp as an MCP server\n  analyze   Analyze Terraform configurations\n  help      Print this message or the help of the given subcommand(s)\n\nOptions:\n  -c, --config <PATH>    Path to the configuration file\n  -d, --dir <PATH>       Terraform project directory\n  -V, --version          Print version\n  -h, --help             Print help\n```\n\n### Using Docker\n\nWhen using Docker, you can run tfmcp commands like this:\n\n```bash\n# Run as MCP server (default)\ndocker run -it tfmcp\n\n# Run with specific command and options\ndocker run -it tfmcp analyze --dir /app/example\n\n# Mount your Terraform project directory\ndocker run -it -v /path/to/your/terraform:/app/terraform tfmcp --dir /app/terraform\n\n# Set environment variables\ndocker run -it -e TFMCP_LOG_LEVEL=debug tfmcp\n```\n\n### Integrating with Claude Desktop\n\nTo use tfmcp with Claude Desktop:\n\n1. If you haven't already, install tfmcp:\n   ```bash\n   cargo install tfmcp\n   ```\n\n   Alternatively, you can use Docker:\n   ```bash\n   docker build -t tfmcp .\n   ```\n\n2. Find the path to your installed tfmcp executable:\n   ```bash\n   which tfmcp\n   ```\n\n3. Add the following configuration to `~/Library/Application\\ Support/Claude/claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"tfmcp\": {\n      \"command\": \"/path/to/your/tfmcp\",  // Replace with the actual path from step 2\n      \"args\": [\"mcp\"],\n      \"env\": {\n        \"HOME\": \"/Users/yourusername\",  // Replace with your username\n        \"PATH\": \"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\",\n        \"TERRAFORM_DIR\": \"/path/to/your/terraform/project\"  // Optional: specify your Terraform project\n      }\n    }\n  }\n}\n```\n\nIf you're using Docker with Claude Desktop, you can set up the configuration like this:\n\n```json\n{\n  \"mcpServers\": {\n    \"tfmcp\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"--rm\", \"-v\", \"/path/to/your/terraform:/app/terraform\", \"tfmcp\", \"mcp\"],\n      \"env\": {\n        \"TERRAFORM_DIR\": \"/app/terraform\"\n      }\n    }\n  }\n}\n```\n\n4. Restart Claude Desktop and enable the tfmcp tool.\n\n5. tfmcp will automatically create a sample Terraform project in `~/terraform` if one doesn't exist, ensuring Claude can start working with Terraform right away. The sample project is based on the examples included in the `example/demo` directory of this repository.\n\n## Logs and Troubleshooting\n\nThe tfmcp server logs are available at:\n```\n~/Library/Logs/Claude/mcp-server-tfmcp.log\n```\n\nCommon issues and solutions:\n\n- **Claude can't connect to the server**: Make sure the path to the tfmcp executable is correct in your configuration\n- **Terraform project issues**: tfmcp automatically creates a sample Terraform project if none is found\n- **Method not found errors**: MCP protocol support includes resources/list and prompts/list methods\n- **Docker issues**: If using Docker, ensure your container has proper volume mounts and permissions\n\n## Environment Variables\n\n### Core Configuration\n- `TERRAFORM_DIR`: Set this to specify a custom Terraform project directory. If not set, tfmcp will use the directory provided by command line arguments, configuration files, or fall back to `~/terraform`. You can also change the project directory at runtime using the `set_terraform_directory` tool.\n- `TFMCP_LOG_LEVEL`: Set to `debug`, `info`, `warn`, or `error` to control logging verbosity.\n- `TFMCP_DEMO_MODE`: Set to `true` to enable demo mode with additional safety features.\n\n### Security Configuration\n- `TFMCP_ALLOW_DANGEROUS_OPS`: Set to `true` to enable apply/destroy operations (default: `false`)\n- `TFMCP_ALLOW_AUTO_APPROVE`: Set to `true` to enable auto-approve for dangerous operations (default: `false`)\n- `TFMCP_MAX_RESOURCES`: Set maximum number of resources that can be managed (default: 50)\n- `TFMCP_AUDIT_ENABLED`: Set to `false` to disable audit logging (default: `true`)\n- `TFMCP_AUDIT_LOG_FILE`: Custom path for audit log file (default: `~/.tfmcp/audit.log`)\n- `TFMCP_AUDIT_LOG_SENSITIVE`: Set to `true` to include sensitive information in audit logs (default: `false`)\n\n## Security Considerations\n\ntfmcp includes comprehensive security features designed for production use:\n\n### üîí Built-in Security Features\n- **Access Controls**: Automatic blocking of production/sensitive file patterns\n- **Operation Restrictions**: Dangerous operations (apply/destroy) disabled by default\n- **Resource Limits**: Configurable maximum resource count protection\n- **Audit Logging**: Complete operation tracking with timestamps and user identification\n- **Directory Validation**: Security policy enforcement for project directories\n\n### üõ°Ô∏è Security Best Practices\n- **Default Safety**: Apply/destroy operations are disabled by default - explicitly enable only when needed\n- **Review Plans**: Always review Terraform plans before applying, especially AI-generated ones\n- **IAM Boundaries**: Use appropriate IAM permissions and role boundaries in cloud environments\n- **Audit Monitoring**: Regularly review audit logs at `~/.tfmcp/audit.log`\n- **File Patterns**: Built-in protection against accessing `prod*`, `production*`, and `secret*` patterns\n- **Docker Security**: When using containers, carefully consider volume mounts and exposed data\n\n### ‚öôÔ∏è Production Configuration\n```bash\n# Recommended production settings\nexport TFMCP_ALLOW_DANGEROUS_OPS=false    # Keep disabled for safety\nexport TFMCP_ALLOW_AUTO_APPROVE=false     # Require manual approval\nexport TFMCP_MAX_RESOURCES=10             # Limit resource scope\nexport TFMCP_AUDIT_ENABLED=true           # Enable audit logging\nexport TFMCP_AUDIT_LOG_SENSITIVE=false    # Don't log sensitive data\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## Roadmap\n\nHere are some planned improvements and future features for tfmcp:\n\n### Completed\n- [x] **Basic Terraform Integration**  \n  Core integration with Terraform CLI for analyzing and executing operations.\n\n- [x] **MCP Server Implementation**  \n  Initial implementation of the Model Context Protocol server for AI assistants.\n\n- [x] **Automatic Project Creation**  \n  Added functionality to automatically create sample Terraform projects when needed.\n\n- [x] **Claude Desktop Integration**  \n  Support for seamless integration with Claude Desktop.\n\n- [x] **Core MCP Methods**  \n  Implementation of essential MCP methods including resources/list and prompts/list.\n\n- [x] **Error Handling Improvements**  \n  Better error handling and recovery mechanisms for robust operation.\n\n- [x] **Dynamic Project Directory Switching**  \n  Added ability to change the active Terraform project directory without restarting the service.\n\n- [x] **Crates.io Publication**  \n  Published the package to Crates.io for easy installation via Cargo.\n  \n- [x] **Docker Support**  \n  Added containerization support for easier deployment and cross-platform compatibility.\n\n- [x] **Security Enhancements**  \n  Comprehensive security system with configurable policies, audit logging, access controls, and production-ready safety features.\n\n### In Progress\n- [ ] **Enhanced Terraform Analysis**  \n  Implement deeper parsing and analysis of Terraform configurations, plans, and state files.\n\n- [ ] **Comprehensive Testing Framework**  \n  Expand test coverage including integration tests with real Terraform configurations.\n\n### Planned\n- [ ] **Multi-Environment Support**  \n  Add support for managing multiple Terraform environments, workspaces, and modules.\n\n- [ ] **Expanded MCP Protocol Support**  \n  Implement additional MCP methods and capabilities for richer integration with AI assistants.\n\n- [ ] **Performance Optimization**  \n  Optimize resource usage and response times for large Terraform projects.\n\n- [ ] **Cost Estimation**  \n  Integrate with cloud provider pricing APIs to provide cost estimates for Terraform plans.\n\n- [ ] **Interactive TUI**  \n  Develop a terminal-based user interface for easier local usage and debugging.\n\n- [ ] **Integration with Other AI Platforms**  \n  Extend beyond Claude to support other AI assistants and platforms.\n\n- [ ] **Plugin System**  \n  Develop a plugin architecture to allow extensions of core functionality.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n"
}