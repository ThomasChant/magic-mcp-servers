{
  "mcp_name": "yeonupark/mcp-soccer-data",
  "mcp_description": "Delivers real-time football match data through natural language interactions using the SoccerDataAPI.",
  "mcp_id": "yeonupark_mcp-soccer-data",
  "fetch_timestamp": "2025-06-23T09:38:39.222453Z",
  "github_url": "https://github.com/yeonupark/mcp-soccer-data",
  "repository": {
    "name": "mcp-soccer-data",
    "full_name": "yeonupark/mcp-soccer-data",
    "description": "An MCP server that provides real-time football data based on the SoccerDataAPI.",
    "html_url": "https://github.com/yeonupark/mcp-soccer-data",
    "created_at": "2025-04-15T10:23:30Z",
    "updated_at": "2025-06-12T21:53:43Z",
    "pushed_at": "2025-05-14T07:40:38Z",
    "size": 19,
    "stargazers_count": 15,
    "watchers_count": 15,
    "forks_count": 5,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "yeonupark",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/130972950?v=4",
      "html_url": "https://github.com/yeonupark"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 5,
    "subscribers_count": 1,
    "languages": {
      "Python": 811,
      "Dockerfile": 464
    },
    "language_percentages": {
      "Python": 63.61,
      "Dockerfile": 36.39
    },
    "pull_requests_count": 2,
    "contributors_count": 2
  },
  "readme": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/yeonupark-mcp-soccer-data-badge.png)](https://mseep.ai/app/yeonupark-mcp-soccer-data)\n\n# ‚öΩÔ∏è Soccerdata MCP Server\n[![smithery badge](https://smithery.ai/badge/@yeonupark/mcp-soccer-data)](https://smithery.ai/server/@yeonupark/mcp-soccer-data)\n- **MCP-Soccerdata** is an open-source [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) server that connects to the **SoccerDataAPI to deliver up-to-date football match information via natural language interactions**. \n\n- Designed for use with MCP-enabled clients such as Claude Desktop, it allows users to retrieve football data by leveraging large language models (LLMs).\n\n---\n\n## ‚ú® Features\n\n### üèüÔ∏è Live Football Match Insights\nMCP-Soccerdata focuses on delivering **real-time information about ongoing football matches around the world.**\n\n> \"What football matches are being played right now?\"      \n> \"What are the predicted lineups for PSG vs Aston Villa today?\"       \n> \"Please tell me the scores and number of goals from recent football matches.\"\n\n‚Üí Provides relevant football data in a structured format, including the detailed categories described below.\n\n### - Match Listings & Basic Info\n- Global list of all currently active matches\n- Home and away team names\n- Kickoff time and match date\n- Stadium details\n- Current score\n\n\n### - Match Details\n- Match status: scheduled, in progress, or finished\n- Goal breakdown: first half, second half, extra time, penalty shootout\n- Final result: win, draw, or loss\n\n\n### - Key Match Events\n- Goal events (who scored, when, how)\n- Substitutions\n- Yellow and red cards\n- Penalties\n\n\n### - Team Lineups\n- Starting XI\n- Bench players\n- Injury status\n- Team formation\n\n\n### - Odds & Betting Information\n- Win / Draw / Lose odds\n- Over / Under odds\n- Handicap betting odds\n\n\n### - League Metadata\n- League name\n- Country\n- Competition format (e.g., regular season, knockout stage)\n\n\n> ‚ö†Ô∏è Focused exclusively on **live**, **upcoming**, and **recently finished** matches\n\n---\n## üé• Demo\n\n![mcp (3) (1)](https://github.com/user-attachments/assets/03f63020-e467-48d3-8bbc-e97f9bd26e5b)\n\n---\n\n## üöÄ Quick Start\n\n### Installing via Smithery\n\nTo install Amadeus MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@yeonupark/mcp-soccer-data):\n\n```bash\nnpx -y @smithery/cli install @yeonupark/mcp-soccer-data --client claude\n```\n\n### Prerequisites\n- Python 3.12+\n- `uv` package manager\n- Soccerdata API account\n- MCP-compatible client (e.g., Claude for Desktop)\n\n\n### 1. Clone and Setup\n\n- Clone the repository\n```bash\ngit clone https://github.com/yeonupark/mcp-soccer-data.git\ncd mcp-soccer-data\n```\n- Install dependencies\n```\nuv sync\n```\n\n### 2. Get Your API Key and Set Environment\n\n- Create a .env file with your credentials:\n```\nAUTH_KEY=your_auth_key\n```\n> Sign up on https://soccerdataapi.com/ and get your own Auth keys.\n\n### 3. Configure MCP Client\n- Register this server in your MCP client (e.g., Claude for Desktop).\n\nEdit `~/Library/Application Support/Claude/claude_desktop_config.json:`\n```\n{\n  \"mcpServers\": {\n      \"mcp-soccer-data\": {\n          \"command\": \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/uv\",\n          \"args\": [\n              \"--directory\",\n              \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/src/\",\n              \"run\",\n              \"--env-file\",\n              \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/.env\",\n              \"server.py\"\n          ]\n      }\n  }\n}\n```\n\n---\n## üõ†Ô∏è Tools\nThe follwing tool is exposed to MCP clients:  \n### `get_livescores()`\n-> Returns real-time information about ongoing football matches around the world.\n\n\n---\n## üìù License\n- This project is licensed under the [MIT License](LICENSE). See the LICENSE file for details.\n- Built with [Model Context Protocol](https://modelcontextprotocol.io/introduction)"
}