{
  "mcp_name": "Squad‚ÄØAI",
  "mcp_description": "",
  "mcp_id": "the-basilisk-ai_squad-mcp",
  "fetch_timestamp": "2025-06-23T08:35:16.662223Z",
  "github_url": "https://github.com/the-basilisk-ai/squad-mcp",
  "repository": {
    "name": "squad-mcp",
    "full_name": "the-basilisk-ai/squad-mcp",
    "description": null,
    "html_url": "https://github.com/the-basilisk-ai/squad-mcp",
    "created_at": "2025-04-06T12:19:42Z",
    "updated_at": "2025-05-15T21:27:17Z",
    "pushed_at": "2025-05-15T21:27:17Z",
    "size": 476,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "the-basilisk-ai",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/130838959?v=4",
      "html_url": "https://github.com/the-basilisk-ai"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 992004,
      "Dockerfile": 515
    },
    "language_percentages": {
      "TypeScript": 99.95,
      "Dockerfile": 0.05
    },
    "pull_requests_count": 2,
    "contributors_count": 3,
    "latest_release": {
      "tag_name": "v1.2.2",
      "name": "v1.2.2",
      "published_at": "2025-05-15T21:27:44Z",
      "body": "",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v1.2.2",
        "commit_sha": "9eaa31fee3d7a9c52e095caee3238f628ebef02d"
      },
      {
        "name": "v1.2.1",
        "commit_sha": "b3e1ed7c7b40ff003530377410bdef31b06e9d56"
      },
      {
        "name": "v1.2.0",
        "commit_sha": "2d03efdb9d7a992ebbef84de2fc62bb0f96a4e62"
      },
      {
        "name": "v1.1.0",
        "commit_sha": "c68214ac0be0266af6b9fe79343f3920540978bb"
      },
      {
        "name": "v1.0.8",
        "commit_sha": "73383cd3ab83ca597c921a1264e638f4ffdb2cc6"
      },
      {
        "name": "v1.0.7",
        "commit_sha": "790df692add75ff64dd2f259ac5dc54d757146d1"
      },
      {
        "name": "v1.0.6",
        "commit_sha": "0b84f600747df7c37a20366af4089a6fecb3f421"
      },
      {
        "name": "v1.0.5",
        "commit_sha": "58a5884c4f988cd5e3554e4b80c1f9f5d4318600"
      },
      {
        "name": "v1.0.4",
        "commit_sha": "ca3b8a6507f58a221e12407eeb5bd97b632dedd5"
      },
      {
        "name": "v1.0.3",
        "commit_sha": "5fc05b89790fb197e49f4f2494827a65c4392333"
      }
    ],
    "latest_version": "v1.2.2",
    "package_json_version": "1.2.2"
  },
  "readme": "Squad MCP Server\n================================\n\nA **Model Context Protocol (MCP) server** that connects *Squad* ‚Äî the AI‚Äëpowered product‚Äëdiscovery and strategy platform ‚Äî to any MCP‚Äëaware large‚Äëlanguage‚Äëmodel (LLM) application. It exposes a rich tool‚Äëkit for creating, querying and updating product‚Äëstrategy artefacts (opportunities, solutions, outcomes, requirements, knowledge, workspaces and feedback) directly from your favourite AI co‚Äëpilot.\n\nThis repository also contains the source code for the `@squadai/tools` NPM package, which provides the client-side tools for interacting with the Squad API.\n\nWhy?\n----\n\nWith the Squad MCP Server you can research, ideate and plan products in one conversational flow, without ever leaving your editor or chat window.\n\n‚ú® Tools\n--------\n\n| Tool prefix     | Purpose                                        | Typical actions  |\n|-----------------|------------------------------------------------|------------------|\n| opportunity_*   | Discover and refine product opportunities      | create, list, update |\n| solution_*      | Generate and iterate on solutions              | create, list, update |\n| outcome_*       | Track desired business or user outcomes        | create, list |\n| requirement_*   | Capture detailed requirements                  | create, list |\n| knowledge_*     | Store useful references‚ÄØ/‚ÄØresearch             | create, list |\n| workspace_*     | Manage Squad workspaces                        | get, update |\n| feedback_*      | Send customer or analytics feedback into Squad | create |\n\nEach tool conforms to the MCP JSON‚Äëschema format so agents can introspect inputs and outputs automatically.\n\nüöÄ Quick start\n--------------\n\n### 1 ¬∑ Obtain a Squad API key\n\n1. Sign up‚ÄØ/‚ÄØsign in at <https://meetsquad.ai>.\n2. Open **Settings ‚Üí Developer ‚Üí API Keys**.\n3. Create a key and copy the value.\n\n### 2 ¬∑ Run the server\n\nPick whichever installation method suits your environment.\n\n#### Option¬†A ‚Äì Stand‚Äëalone executable‚ÄØ*(recommended for local usage)*\n\nDownload the latest binary for your operating system from the project‚Äôs [GitHub releases](https://github.com/the-basilisk-ai/squad-mcp/releases) page and run it directly:\n\n```bash\n# Windows\nsquad-mcp.exe\n\n# macOS‚ÄØ/‚ÄØLinux ‚Äî make the file executable first\nchmod +x squad-mcp\n./squad-mcp\n```\n\nPass environment variables in the usual way:\n\n```bash\nSQUAD_API_KEY=<your‚Äëkey> SQUAD_ENV=production ./squad-mcp\n```\n\n#### Option¬†B ‚Äì Docker‚ÄØ*(recommended for production)*\n\n```bash\n# Build the image (once)\ndocker build -t mcp/meet-squad -f Dockerfile .\n\n# Run the server on stdio\ndocker run --rm -i \\\n  -e SQUAD_API_KEY=<your‚Äëkey> \\\n  mcp/meet-squad\n```\n\n#### Option¬†C ‚Äì From source\n\n```bash\ngit clone https://github.com/the-basilisk-ai/squad-mcp.git\ncd squad-mcp\nnpm install\nnpm run build           # transpiles to ./dist\nnode dist/index.js\n```\n\n----\n\nüì¶ NPM Package (@squadai/tools)\n-----------------------------\n\nThis repository also includes an NPM package, `@squadai/tools`, which provides a set of functions for interacting with the Squad API programmatically from your own Node.js applications or scripts.\n\nTo install the package:\n\n```bash\nnpm install @squadai/tools\n# or\nyarn add @squadai/tools\n# or\npnpm add @squadai/tools\n```\n\nYou can then import and use the tools in your code. You will still need a Squad API key or JWT for authentication (see Quick start section above).\n\nExample usage (Vercel AI):\n\n```typescript\nimport { generateText, tool } from 'ai';\nimport { tools as squadTools } from \"@squadai/tools\"\n\nconst result = await generateText({\n  model: yourModel,\n  tools: squadTools({\n    jwt: \"JWT\",\n    orgId: \"orgId\",\n    workspaceId: \"workspaceId\"\n  }),\n  prompt: 'What is the weather in San Francisco?',\n});\n```\n\n‚öôÔ∏è Integrating with an MCP client\n--------------------------------\n\nAdd a *mcpServers* entry to your client‚Äôs configuration (e.g. **claude_desktop_config.json** or **Cursor**). Adjust **command** to match the installation method.\n\n### Using the stand‚Äëalone executable\n\n```jsonc\n{\n  \"mcpServers\": {\n    \"meet-squad\": {\n      \"command\": \"C:/path/to/squad-mcp.exe\",\n      \"env\": {\n        \"SQUAD_API_KEY\": \"YOUR_API_KEY_HERE\",\n      }\n    }\n  }\n}\n```\n\n### Using Docker\n\n```jsonc\n{\n  \"mcpServers\": {\n    \"meet-squad\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\", \"SQUAD_API_KEY\",\n        \"mcp/meet-squad\"\n      ],\n      \"env\": {\n        \"SQUAD_API_KEY\": \"YOUR_API_KEY_HERE\",\n      }\n    }\n  }\n}\n```\n\nPrefer `\"command\": \"npx\"` if you installed via NPX.\n\nOnce your client restarts you should see the Squad tools (hammer¬†üî® icon) listed and ready for use.\n\nüõ†Ô∏è Environment variables\n------------------------\n\n| Variable         | Required | Default      | Description                                                     |\n|------------------|----------|--------------|-----------------------------------------------------------------|\n| `SQUAD_API_KEY`  | Yes      | ‚Äì            | Personal access token generated in Squad                        |\n| `SQUAD_ENV`      | No       | `production` | Override the Squad API base URL (`staging`, `development`, ‚Ä¶)   |\n\nüßë‚Äçüíª Development\n----------------\n\n```bash\nnpm install\nnpm run format      \nnpm run openapi:squad   # re‚Äëgenerate typed client from openapi/squad.json\nnpm run build       \nnode dist/index.js\n```\n\nThe test suite is work‚Äëin‚Äëprogress; contributions welcome.\n"
}