{
  "mcp_name": "MCP-Reasoner/MCP-Reasoner",
  "mcp_description": "Integrates Google's OR-Tools with Large Language Models for constraint solving and optimization through the Model Context Protocol.",
  "mcp_id": "MCP-Reasoner_MCP-Reasoner",
  "fetch_timestamp": "2025-06-23T06:35:39.690672Z",
  "github_url": "https://github.com/MCP-Reasoner/MCP-Reasoner",
  "repository": {
    "name": "MCP-Reasoner",
    "full_name": "MCP-Reasoner/MCP-Reasoner",
    "description": "Model Context Protocol (MCP) server implementation using Google OR-Tools for constraint solving",
    "html_url": "https://github.com/MCP-Reasoner/MCP-Reasoner",
    "created_at": "2025-04-28T05:31:54Z",
    "updated_at": "2025-04-28T05:38:32Z",
    "pushed_at": "2025-04-28T05:35:33Z",
    "size": 139,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "MCP-Reasoner",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/209426631?v=4",
      "html_url": "https://github.com/MCP-Reasoner"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 49985,
      "JavaScript": 41806,
      "Python": 20254
    },
    "language_percentages": {
      "TypeScript": 44.61,
      "JavaScript": 37.31,
      "Python": 18.08
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "2.0.0"
  },
  "readme": "# MCP-ORTools\n\nA Model Context Protocol (MCP) server implementation using Google OR-Tools for constraint solving. Designed for use with Large Language Models through standardized constraint model specification.\n\n## Overview\n\nMCP-ORTools integrates Google's OR-Tools constraint programming solver with Large Language Models through the Model Context Protocol, enabling AI models to:\n- Submit and validate constraint models\n- Set model parameters\n- Solve constraint satisfaction and optimization problems\n- Retrieve and analyze solutions\n\n## Installation\n\n1. Install the package:\n```bash\npip install git+https://github.com/Jacck/mcp-ortools.git\n```\n\n2. Configure Claude Desktop\nCreate the configuration file at `%APPDATA%\\Claude\\claude_desktop_config.json` (Windows) or `~/Library/Application Support/Claude/claude_desktop_config.json` (macOS):\n```json\n{\n  \"mcpServers\": {\n    \"ortools\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"mcp_ortools.server\"]\n    }\n  }\n}\n```\n\n## Model Specification\n\nModels are specified in JSON format with three main sections:\n- `variables`: Define variables and their domains\n- `constraints`: List of constraints using OR-Tools methods\n- `objective`: Optional optimization objective\n\n### Constraint Syntax\n\nConstraints must use OR-Tools method syntax:\n- `.__le__()` for less than or equal (<=)\n- `.__ge__()` for greater than or equal (>=)\n- `.__eq__()` for equality (==)\n- `.__ne__()` for not equal (!=)\n\n## Usage Examples\n\n### Simple Optimization Model\n```json\n{\n    \"variables\": [\n        {\"name\": \"x\", \"domain\": [0, 10]},\n        {\"name\": \"y\", \"domain\": [0, 10]}\n    ],\n    \"constraints\": [\n        \"(x + y).__le__(15)\",\n        \"x.__ge__(2 * y)\"\n    ],\n    \"objective\": {\n        \"expression\": \"40 * x + 100 * y\",\n        \"maximize\": true\n    }\n}\n```\n\n### Knapsack Problem\nExample: Select items with values [3,1,2,1] and weights [2,2,1,1] with total weight limit of 2.\n\n```json\n{\n    \"variables\": [\n        {\"name\": \"p0\", \"domain\": [0, 1]},\n        {\"name\": \"p1\", \"domain\": [0, 1]},\n        {\"name\": \"p2\", \"domain\": [0, 1]},\n        {\"name\": \"p3\", \"domain\": [0, 1]}\n    ],\n    \"constraints\": [\n        \"(2*p0 + 2*p1 + p2 + p3).__le__(2)\"\n    ],\n    \"objective\": {\n        \"expression\": \"3*p0 + p1 + 2*p2 + p3\",\n        \"maximize\": true\n    }\n}\n```\n\nAdditional constraints example:\n```json\n{\n    \"constraints\": [\n        \"p0.__eq__(1)\",         // Item p0 must be selected\n        \"p1.__ne__(p2)\",        // Can't select both p1 and p2\n        \"(p2 + p3).__ge__(1)\"   // Must select at least one of p2 or p3\n    ]\n}\n```\n\n## Features\n\n- Full OR-Tools CP-SAT solver support\n- JSON-based model specification\n- Support for:\n  - Integer and boolean variables (domain: [min, max])\n  - Linear constraints using OR-Tools method syntax\n  - Linear optimization objectives\n  - Timeouts and solver parameters\n  - Binary constraints and relationships\n  - Portfolio selection problems\n  - Knapsack problems\n\n### Supported Operations in Constraints\n- Basic arithmetic: +, -, *\n- Comparisons: .__le__(), .__ge__(), .__eq__(), .__ne__()\n- Linear combinations of variables\n- Binary logic through combinations of constraints\n\n## Development\n\nTo setup for development:\n```bash\ngit clone https://github.com/Jacck/mcp-ortools.git\ncd mcp-ortools\npip install -e .\n```\n\n## Model Response Format\n\nThe solver returns solutions in JSON format:\n```json\n{\n    \"status\": \"OPTIMAL\",\n    \"solve_time\": 0.045,\n    \"variables\": {\n        \"p0\": 0,\n        \"p1\": 0,\n        \"p2\": 1,\n        \"p3\": 1\n    },\n    \"objective_value\": 3.0\n}\n```\n\nStatus values:\n- OPTIMAL: Found optimal solution\n- FEASIBLE: Found feasible solution\n- INFEASIBLE: No solution exists\n- UNKNOWN: Could not determine solution\n\n## License\n\nMIT License - see LICENSE file for details\n"
}