{
  "mcp_name": "mabeldata/pocketbase-mcp",
  "mcp_description": "Facilitates interaction with PocketBase instances for managing records, files, and migrations.",
  "mcp_id": "mabeldata_pocketbase-mcp",
  "fetch_timestamp": "2025-06-23T06:19:27.494680Z",
  "github_url": "https://github.com/mabeldata/pocketbase-mcp",
  "repository": {
    "name": "pocketbase-mcp",
    "full_name": "mabeldata/pocketbase-mcp",
    "description": "This is an MCP server that interacts with a PocketBase instance. It allows you to fetch, list, create, update, and manage records and files in your PocketBase collections.",
    "html_url": "https://github.com/mabeldata/pocketbase-mcp",
    "created_at": "2025-04-07T22:04:58Z",
    "updated_at": "2025-06-17T23:54:50Z",
    "pushed_at": "2025-04-22T17:01:37Z",
    "size": 87,
    "stargazers_count": 14,
    "watchers_count": 14,
    "forks_count": 2,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [
      "backend",
      "cline",
      "pocketbase"
    ],
    "default_branch": "main",
    "owner": {
      "login": "mabeldata",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/143381298?v=4",
      "html_url": "https://github.com/mabeldata"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 2,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 68731,
      "Dockerfile": 379,
      "JavaScript": 287
    },
    "language_percentages": {
      "TypeScript": 99.04,
      "Dockerfile": 0.55,
      "JavaScript": 0.41
    },
    "pull_requests_count": 6,
    "contributors_count": 2,
    "latest_release": {
      "tag_name": "v1.1.3",
      "name": "PocketBase MCP: Add Cron Job Management Tools",
      "published_at": "2025-04-22T17:01:37Z",
      "body": "## Overview\r\n\r\nThis PR adds support for PocketBase's cron job management capabilities to the PocketBase MCP server. Users can now list all registered app-level cron jobs and trigger specific cron jobs programmatically through the MCP interface.\r\n\r\n## Features Added\r\n\r\n* **`list_cron_jobs`**: Returns a list of all registered app-level cron jobs\r\n    * Optional `fields` parameter to specify which fields to return\r\n* **`run_cron_job`**: Triggers a single cron job by its ID\r\n    * Requires a `jobId` parameter\r\n\r\n## Implementation Details\r\n\r\n* Added new tool type definitions in `src/types/tool-types.ts`\r\n* Created cron job tool implementations in `src/tools/cron-tools.ts`\r\n* Registered the new tools in `src/tools/index.ts`\r\n* Exported the necessary types in `src/types/index.ts`\r\n* Added the new tools to the `autoApprove` list in MCP settings\r\n\r\n## Testing\r\n\r\nBoth tools have been thoroughly tested:\r\n\r\n* **`list_cron_jobs`**:\r\n    * Successfully returns a list of all registered cron jobs\r\n    * Properly handles the optional `fields` parameter\r\n    * Returns empty objects when non-existent fields are requested\r\n* **`run_cron_job`**:\r\n    * Successfully triggers cron jobs\r\n    * Returns `true` when a job is successfully triggered\r\n    * Returns appropriate error messages for non-existent jobs\r\n    * Properly validates required parameters\r\n\r\n## Documentation\r\n\r\n* Added a new \"**Cron Job Management**\" section to the `README.md`\r\n* Included detailed descriptions and input schemas for both tools\r\n* Updated the suggested `autoApprove` settings in the installation instructions\r\n\r\n## Breaking Changes\r\n\r\nNone. This PR only adds new functionality without modifying existing behavior.\r\n\r\n## Future Considerations\r\n\r\n* Add support for creating and managing custom cron jobs\r\n* Implement a way to monitor cron job execution history\r\n* Add ability to schedule one-time jobs\r\n\r\nThis release enhances the PocketBase MCP server's capabilities by providing access to PocketBase's cron job system, allowing for better automation and scheduled task management.",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v1.1.3",
        "commit_sha": "4edb89627c53b15c7b4dabcc7fb775289fb18f93"
      },
      {
        "name": "v1.1.2",
        "commit_sha": "a1043a09ff94bbddd43f7cf1209ae2ad58eec9ca"
      },
      {
        "name": "v1.1.0",
        "commit_sha": "026925fcada58a3854e27e1ce2f0078e3626b8f6"
      },
      {
        "name": "v1.0.0",
        "commit_sha": "a81e387772235cf1a4b1e410d682c69f64aa17b9"
      }
    ],
    "latest_version": "v1.1.3",
    "package_json_version": "1.0.0"
  },
  "readme": "# PocketBase MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@mabeldata/pocketbase-mcp)](https://smithery.ai/server/@mabeldata/pocketbase-mcp)\n[![Maintained_By Mabel Data](https://img.shields.io/badge/Maintained_By-MabelData-purple)](https://github.com/mabeldata/pocketbase-mcp/blob/main/LICENSE)\n\nThis is an MCP server that interacts with a PocketBase instance. It allows you to fetch, list, create, update, and manage records and files in your PocketBase collections.\n\n## Installation\n\n### Installing via Smithery\n\nTo install PocketBase MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@mabeldata/pocketbase-mcp):\n\n```bash\nnpx -y @smithery/cli install @mabeldata/pocketbase-mcp --client claude\n```\n\n1.  **Clone the repository (if you haven't already):**\n    ```bash\n    git clone <repository_url>\n    cd pocketbase-mcp\n    ```\n2.  **Install dependencies:**\n    ```bash\n    npm install\n    ```\n3.  **Build the server:**\n    ```bash\n    npm run build\n    ```\n    This compiles the TypeScript code to JavaScript in the `build/` directory and makes the entry point executable.\n\n## Configuration\n\nThis server requires the following environment variables to be set:\n\n-   `POCKETBASE_API_URL`: The URL of your PocketBase instance (e.g., `http://127.0.0.1:8090`). Defaults to `http://127.0.0.1:8090` if not set.\n-   `POCKETBASE_ADMIN_TOKEN`: An admin authentication token for your PocketBase instance. **This is required.** You can generate this from your PocketBase admin UI, see [API KEYS](https://pocketbase.io/docs/authentication/#api-keys).\n\nThese variables need to be configured when adding the server to Cline (see Cline Installation section).\n\n## Available Tools\n\nThe server provides the following tools, organized by category:\n\n### Record Management\n\n-   **fetch_record**: Fetch a single record from a PocketBase collection by ID.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"collection\": {\n              \"type\": \"string\",\n              \"description\": \"The name of the PocketBase collection.\"\n            },\n            \"id\": {\n              \"type\": \"string\",\n              \"description\": \"The ID of the record to fetch.\"\n            }\n          },\n          \"required\": [\n            \"collection\",\n            \"id\"\n          ]\n        }\n        ```\n\n-   **list_records**: List records from a PocketBase collection. Supports pagination, filtering, sorting, and expanding relations.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"collection\": {\n              \"type\": \"string\",\n              \"description\": \"The name of the PocketBase collection.\"\n            },\n            \"page\": {\n              \"type\": \"number\",\n              \"description\": \"Page number (defaults to 1).\",\n              \"minimum\": 1\n            },\n            \"perPage\": {\n              \"type\": \"number\",\n              \"description\": \"Items per page (defaults to 25).\",\n              \"minimum\": 1,\n              \"maximum\": 100\n            },\n            \"filter\": {\n              \"type\": \"string\",\n              \"description\": \"Filter string for the PocketBase query.\"\n            },\n            \"sort\": {\n              \"type\": \"string\",\n              \"description\": \"Sort string for the PocketBase query (e.g., \\\\\"fieldName,-otherFieldName\\\\\").\"\n            },\n            \"expand\": {\n              \"type\": \"string\",\n              \"description\": \"Expand string for the PocketBase query (e.g., \\\\\"relation1,relation2.subRelation\\\\\").\"\n            }\n          },\n          \"required\": [\n            \"collection\"\n          ]\n        }\n        ```\n\n-   **create_record**: Create a new record in a PocketBase collection.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"collection\": {\n              \"type\": \"string\",\n              \"description\": \"The name of the PocketBase collection.\"\n            },\n            \"data\": {\n              \"type\": \"object\",\n              \"description\": \"The data for the new record.\",\n              \"additionalProperties\": true\n            }\n          },\n          \"required\": [\n            \"collection\",\n            \"data\"\n          ]\n        }\n        ```\n\n-   **update_record**: Update an existing record in a PocketBase collection.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"collection\": {\n              \"type\": \"string\",\n              \"description\": \"The name of the PocketBase collection.\"\n            },\n            \"id\": {\n              \"type\": \"string\",\n              \"description\": \"The ID of the record to update.\"\n            },\n            \"data\": {\n              \"type\": \"object\",\n              \"description\": \"The data to update.\",\n              \"additionalProperties\": true\n            }\n          },\n          \"required\": [\n            \"collection\",\n            \"id\",\n            \"data\"\n          ]\n        }\n        ```\n\n-   **get_collection_schema**: Get the schema of a PocketBase collection.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"collection\": {\n              \"type\": \"string\",\n              \"description\": \"The name of the PocketBase collection.\"\n            }\n          },\n          \"required\": [\n            \"collection\"\n          ]\n        }\n        ```\n\n-   **upload_file**: Upload a file to a specific field in a PocketBase collection record.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"collection\": {\n              \"type\": \"string\",\n              \"description\": \"The name of the PocketBase collection.\"\n            },\n            \"recordId\": {\n              \"type\": \"string\",\n              \"description\": \"The ID of the record to upload the file to.\"\n            },\n            \"fileField\": {\n              \"type\": \"string\",\n              \"description\": \"The name of the file field in the PocketBase collection.\"\n            },\n            \"fileContent\": {\n              \"type\": \"string\",\n              \"description\": \"The content of the file to upload.\"\n            },\n            \"fileName\": {\n              \"type\": \"string\",\n              \"description\": \"The name of the file.\"\n            }\n          },\n          \"required\": [\n            \"collection\",\n            \"recordId\",\n            \"fileField\",\n            \"fileContent\",\n            \"fileName\"\n          ]\n        }\n        ```\n\n-   **list_collections**: List all collections in the PocketBase instance.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {},\n          \"additionalProperties\": false\n        }\n        ```\n\n-   **download_file**: Get the download URL for a file stored in a PocketBase collection record.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"collection\": {\n              \"type\": \"string\",\n              \"description\": \"The name of the PocketBase collection.\"\n            },\n            \"recordId\": {\n              \"type\": \"string\",\n              \"description\": \"The ID of the record to download the file from.\"\n            },\n            \"fileField\": {\n              \"type\": \"string\",\n              \"description\": \"The name of the file field in the PocketBase collection.\"\n            },\n            \"downloadPath\": {\n              \"type\": \"string\",\n              \"description\": \"The path where the downloaded file should be saved (Note: This tool currently returns the URL, download must be handled separately).\"\n            }\n          },\n          \"required\": [\n            \"collection\",\n            \"recordId\",\n            \"fileField\",\n            \"downloadPath\"\n          ]\n        }\n        ```\n        *Note: This tool returns the file URL. The actual download needs to be performed by the client using this URL.*\n\n### Collection Management\n\n-   **list_collections**: List all collections in the PocketBase instance.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {},\n          \"additionalProperties\": false\n        }\n        ```\n\n-   **get_collection_schema**: Get the schema of a PocketBase collection.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"collection\": {\n              \"type\": \"string\",\n              \"description\": \"The name of the PocketBase collection.\"\n            }\n          },\n          \"required\": [\n            \"collection\"\n          ]\n        }\n        ```\n\n### Log Management\n\n> **Note:** The Logs API requires admin authentication and may not be available in all PocketBase instances or configurations. These tools interact with the PocketBase Logs API as documented at https://pocketbase.io/docs/api-logs/.\n\n-   **list_logs**: List API request logs from PocketBase with filtering, sorting, and pagination.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"page\": {\n              \"type\": \"number\",\n              \"description\": \"Page number (defaults to 1).\",\n              \"minimum\": 1\n            },\n            \"perPage\": {\n              \"type\": \"number\",\n              \"description\": \"Items per page (defaults to 30, max 500).\",\n              \"minimum\": 1,\n              \"maximum\": 500\n            },\n            \"filter\": {\n              \"type\": \"string\",\n              \"description\": \"PocketBase filter string (e.g., \\\"method='GET'\\\").\"\n            }\n          },\n          \"required\": []\n        }\n        ```\n\n-   **get_log**: Get a single API request log by ID.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"string\",\n              \"description\": \"The ID of the log to fetch.\"\n            }\n          },\n          \"required\": [\n            \"id\"\n          ]\n        }\n        ```\n\n-   **get_logs_stats**: Get API request logs statistics with optional filtering.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"filter\": {\n              \"type\": \"string\",\n              \"description\": \"PocketBase filter string (e.g., \\\"method='GET'\\\").\"\n            }\n          },\n          \"required\": []\n        }\n        ```\n\n### Cron Job Management\n\n> **Note:** The Cron Jobs API requires admin authentication and may not be available in all PocketBase instances or configurations. These tools interact with the PocketBase Cron Jobs API.\n\n-   **list_cron_jobs**: Returns list with all registered app level cron jobs.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"fields\": {\n              \"type\": \"string\",\n              \"description\": \"Comma separated string of the fields to return in the JSON response (by default returns all fields). Ex.:?fields=*,expand.relField.name\"\n            }\n          }\n        }\n        ```\n\n-   **run_cron_job**: Triggers a single cron job by its id.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"jobId\": {\n              \"type\": \"string\",\n              \"description\": \"The identifier of the cron job to run.\"\n            }\n          },\n          \"required\": [\n            \"jobId\"\n          ]\n        }\n        ```\n\n### Migration Management\n\n-   **set_migrations_directory**: Set the directory where migration files will be created and read from.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"customPath\": { \n              \"type\": \"string\", \n              \"description\": \"Custom path for migrations. If not provided, defaults to 'pb_migrations' in the current working directory.\" \n            }\n          }\n        }\n        ```\n\n-   **create_migration**: Create a new, empty PocketBase migration file with a timestamped name.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"description\": { \n              \"type\": \"string\", \n              \"description\": \"A brief description for the migration filename (e.g., 'add_user_email_index').\" \n            }\n          },\n          \"required\": [\"description\"]\n        }\n        ```\n\n-   **create_collection_migration**: Create a migration file specifically for creating a new PocketBase collection.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"description\": { \n              \"type\": \"string\", \n              \"description\": \"Optional description override for the filename.\" \n            },\n            \"collectionDefinition\": {\n              \"type\": \"object\",\n              \"description\": \"The full schema definition for the new collection (including name, id, fields, rules, etc.).\",\n              \"additionalProperties\": true\n            }\n          },\n          \"required\": [\"collectionDefinition\"]\n        }\n        ```\n\n-   **add_field_migration**: Create a migration file for adding a field to an existing collection.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"collectionNameOrId\": { \n              \"type\": \"string\", \n              \"description\": \"The name or ID of the collection to update.\" \n            },\n            \"fieldDefinition\": {\n              \"type\": \"object\",\n              \"description\": \"The schema definition for the new field.\",\n              \"additionalProperties\": true\n            },\n            \"description\": { \n              \"type\": \"string\", \n              \"description\": \"Optional description override for the filename.\" \n            }\n          },\n          \"required\": [\"collectionNameOrId\", \"fieldDefinition\"]\n        }\n        ```\n\n-   **list_migrations**: List all migration files found in the PocketBase migrations directory.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {},\n          \"additionalProperties\": false\n        }\n        ```\n\n-   **apply_migration**: Apply a specific migration file.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"migrationFile\": { \n              \"type\": \"string\", \n              \"description\": \"Name of the migration file to apply.\" \n            }\n          },\n          \"required\": [\"migrationFile\"]\n        }\n        ```\n\n-   **revert_migration**: Revert a specific migration file.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"migrationFile\": { \n              \"type\": \"string\", \n              \"description\": \"Name of the migration file to revert.\" \n            }\n          },\n          \"required\": [\"migrationFile\"]\n        }\n        ```\n\n-   **apply_all_migrations**: Apply all pending migrations.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"appliedMigrations\": { \n              \"type\": \"array\", \n              \"items\": { \"type\": \"string\" },\n              \"description\": \"Array of already applied migration filenames.\" \n            }\n          }\n        }\n        ```\n\n-   **revert_to_migration**: Revert migrations up to a specific target.\n    -   *Input Schema*:\n        ```json\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"targetMigration\": { \n              \"type\": \"string\", \n              \"description\": \"Name of the migration to revert to (exclusive). Use empty string to revert all.\" \n            },\n            \"appliedMigrations\": { \n              \"type\": \"array\", \n              \"items\": { \"type\": \"string\" },\n              \"description\": \"Array of already applied migration filenames.\" \n            }\n          },\n          \"required\": [\"targetMigration\"]\n        }\n        ```\n\n## Migration System\n\nThe PocketBase MCP Server includes a comprehensive migration system for managing database schema changes. This system allows you to:\n\n1. Create migration files with timestamped names\n2. Generate migrations for common operations (creating collections, adding fields)\n3. Apply and revert migrations individually or in batches\n4. Track which migrations have been applied\n\n### Migration File Format\n\nMigration files are JavaScript files with a timestamp prefix and descriptive name:\n\n```javascript\n// 1744005374_update_transactions_add_debt_link.js\n/// <reference path=\"../pb_data/types.d.ts\" />\nmigrate((app) => {\n  // Up migration code here\n  return app.save();\n}, (app) => {\n  // Down migration code here\n  return app.save();\n});\n```\n\nEach migration has an \"up\" function for applying changes and a \"down\" function for reverting them.\n\n### Usage Examples\n\n**Setting a custom migrations directory:**\n```javascript\nawait setMigrationsDirectory(\"./my_migrations\");\n```\n\n**Creating a basic migration:**\n```javascript\nawait createNewMigration(\"add_user_email_index\");\n```\n\n**Creating a collection migration:**\n```javascript\nawait createCollectionMigration({\n  id: \"users\",\n  name: \"users\",\n  fields: [\n    { name: \"email\", type: \"email\", required: true }\n  ]\n});\n```\n\n**Adding a field to a collection:**\n```javascript\nawait createAddFieldMigration(\"users\", {\n  name: \"address\",\n  type: \"text\"\n});\n```\n\n**Applying migrations:**\n```javascript\n// Apply a specific migration\nawait applyMigration(\"1744005374_update_transactions_add_debt_link.js\", pocketbaseInstance);\n\n// Apply all pending migrations\nawait applyAllMigrations(pocketbaseInstance);\n```\n\n**Reverting migrations:**\n```javascript\n// Revert a specific migration\nawait revertMigration(\"1744005374_update_transactions_add_debt_link.js\", pocketbaseInstance);\n\n// Revert to a specific point (exclusive)\nawait revertToMigration(\"1743958155_update_transactions_add_relation_to_itself.js\", pocketbaseInstance);\n\n// Revert all migrations\nawait revertToMigration(\"\", pocketbaseInstance);\n```\n\n## Cline Installation\n\nTo use this server with Cline, you need to add it to your MCP settings file (`cline_mcp_settings.json`).\n\n1.  **Locate your Cline MCP settings file:**\n    *   Typically found at `~/.config/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json` on Linux/macOS.\n    *   Or `~/Library/Application Support/Claude/claude_desktop_config.json` if using the Claude desktop app on macOS.\n\n2.  **Edit the file and add the following configuration under the `mcpServers` key.** Replace `/path/to/pocketbase-mcp` with the actual absolute path to this project directory on your system. Also, replace `<YOUR_POCKETBASE_API_URL>` and `<YOUR_POCKETBASE_ADMIN_TOKEN>` with your actual PocketBase URL and admin token.\n\n    ```json\n    {\n      \"mcpServers\": {\n        // ... other servers might be listed here ...\n\n        \"pocketbase-mcp\": {\n          \"command\": \"node\",\n          \"args\": [\"/path/to/pocketbase-mcp/build/index.js\"],\n          \"env\": {\n            \"POCKETBASE_API_URL\": \"<YOUR_POCKETBASE_API_URL>\", // e.g., \"http://127.0.0.1:8090\"\n            \"POCKETBASE_ADMIN_TOKEN\": \"<YOUR_POCKETBASE_ADMIN_TOKEN>\"\n          },\n          \"disabled\": false, // Ensure it's enabled\n          \"autoApprove\": [\n            \"fetch_record\",\n            \"list_collections\",\n            \"get_collection_schema\",\n            \"list_logs\",\n            \"get_log\",\n            \"get_logs_stats\",\n            \"list_cron_jobs\",\n            \"run_cron_job\"\n          ] // Suggested auto-approve settings\n        }\n\n        // ... other servers might be listed here ...\n      }\n    }\n    ```\n\n3.  **Save the settings file.** Cline should automatically detect the changes and connect to the server. You can then use the tools listed above.\n\n## Dependencies\n\n-   `@modelcontextprotocol/sdk`\n-   `pocketbase`\n-   `typescript`\n-   `ts-node` (dev dependency)\n-   `@types/node` (dev dependency)\n"
}