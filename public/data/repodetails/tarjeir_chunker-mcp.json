{
  "mcp_name": "tarjeir/chunker-mcp",
  "mcp_description": "Facilitates code chunking and vectorization using LangChain, storing results in ChromaDB for advanced querying.",
  "mcp_id": "tarjeir_chunker-mcp",
  "fetch_timestamp": "2025-06-23T08:47:47.919224Z",
  "github_url": "https://github.com/tarjeir/chunker-mcp",
  "repository": {
    "name": "chunker-mcp",
    "full_name": "tarjeir/chunker-mcp",
    "description": "This cli tool/Model Context Protocol (MCP) server  chunks source code files using LangChain's RecursiveCharacterTextSplitter and stores the resulting chunks in a ChromaDB vector database, including line range metadata for each chunk.",
    "html_url": "https://github.com/tarjeir/chunker-mcp",
    "created_at": "2025-04-18T15:43:20Z",
    "updated_at": "2025-05-20T11:27:33Z",
    "pushed_at": "2025-04-21T19:19:08Z",
    "size": 476,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "indexing",
      "indexing-engine",
      "langchain",
      "mcp",
      "mcp-server",
      "parsing",
      "python",
      "rage",
      "semantic-search"
    ],
    "default_branch": "main",
    "owner": {
      "login": "tarjeir",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/8700195?v=4",
      "html_url": "https://github.com/tarjeir"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 47597,
      "Shell": 1104,
      "Dockerfile": 954
    },
    "language_percentages": {
      "Python": 95.86,
      "Shell": 2.22,
      "Dockerfile": 1.92
    },
    "pull_requests_count": 1,
    "contributors_count": 3
  },
  "readme": "# Chunker\n\n## Table of Contents\n\n- [Chunker](#chunker)\n- [Features](#features)\n- [Installation](#installation)\n  - [Using uv](#using-uv)\n  - [Using pipx](#using-pipx)\n- [Setting up ChromaDB with Docker](#setting-up-chromadb-with-docker)\n- [Usage](#usage)\n- [Usage (Installed CLI)](#usage-installed-cli)\n- [Using Chunker MCP with Claude for Desktop](#using-chunker-mcp-with-claude-for-desktop)\n- [Querying Chunks from the CLI](#querying-chunks-from-the-cli)\n- [Querying](#querying)\n- [Output](#output)\n- [License](#license)\n\nThis tool chunks source code files using [LangChain's RecursiveCharacterTextSplitter](https://python.langchain.com/docs/modules/data_connection/document_transformers/recursive_text_splitter) and stores the resulting chunks in a [ChromaDB](https://www.trychroma.com/) vector database, including line range metadata for each chunk.\n\n## Features\n\n- Supports chunking of code files in any language supported by LangChain.\n- Stores chunks with path and line range metadata for advanced querying.\n- Asynchronous, batched insertion into ChromaDB for performance.\n- Command-line interface using [Typer](https://typer.tiangolo.com/).\n- Progress and status logging.\n\n## Installation\n\n### Using [uv](https://github.com/astral-sh/uv)\n\n1. Install [uv](https://github.com/astral-sh/uv) if you don't have it:\n\n   ```sh\n   curl -LsSf https://astral.sh/uv/install.sh | sh\n   ```\n\n2. Create a virtual environment and install dependencies:\n\n   ```sh\n   uv venv .venv\n   source .venv/bin/activate\n   uv sync\n   ```\n\n### Using [pipx](https://pypa.github.io/pipx/)\n\n1. Install [pipx](https://pypa.github.io/pipx/):\n\n   ```sh\n   python -m pip install --user pipx\n   ```\n\n2. Install this project (from a local directory):\n\n   ```sh\n   pipx install --editable .\n   ```\n\n## Setting up ChromaDB with Docker\n\nYou can run a ChromaDB server using Docker. The following command will start ChromaDB listening on port 8000:\n\n```sh\ndocker run -d --name chromadb -p 8000:8000 chromadb/chroma\n```\n\n- This will pull the latest ChromaDB image and run it in detached mode.\n- The server will be accessible at `http://localhost:8000`.\n\nIf you want to persist data between restarts, you can mount a local directory:\n\n```sh\ndocker run -d --name chromadb -p 8000:8000 -v $(pwd)/chroma-data:/chroma/.chroma chromadb/chroma\n```\n\n- This will store ChromaDB data in the `chroma-data` directory in your current folder.\n\n**Stopping and removing the container:**\n\n```sh\ndocker stop chromadb\ndocker rm chromadb\n```\n\nFor more information, see the [ChromaDB Docker documentation](https://docs.trychroma.com/deployment/docker).\n\n## Usage\n\n```sh\npython chunker.py chunk-and-vectorise <project_dir> \"<pattern>\" --language <language>\n```\n\n- `<project_dir>`: Root directory of the project to search for files (e.g., `.` or `src`)\n- `<pattern>`: Glob pattern for files to process (e.g., `\"*.py\"`, `\"src/**/*.js\"`)\n- `--language <language>`: Programming language for splitting (default: `python`). Must be supported by LangChain's `Language` enum.\n\nExample for JavaScript files:\n\n```sh\npython chunker.py chunk-and-vectorise src \"src/**/*.js\" --language javascript\n```\n\n## Usage (Installed CLI)\n\nIf you have installed this project using `pipx` or `pip install`, the `chunker` command will be available on your PATH.\n\nYou can use it as follows:\n\n```sh\nchunker chunk-and-vectorise <project_dir> \"<pattern>\" --language <language>\n```\n\n- `<project_dir>`: Root directory of the project to search for files (e.g., `.` or `src`)\n- `<pattern>`: Glob pattern for files to process (e.g., `\"*.py\"`, `\"src/**/*.js\"`)\n- `--language <language>`: Programming language for splitting (default: `python`). Must be supported by LangChain's `Language` enum.\n\n**Examples:**\n\nChunk all Python files in the current directory:\n```sh\nchunker chunk-and-vectorise . \"*.py\"\n```\n\nChunk all JavaScript files in a subdirectory:\n```sh\nchunker chunk-and-vectorise src \"src/**/*.js\" --language javascript\n```\nIf installed with pipx, you can run the CLI directly:\n\n```sh\nchunker chunk-and-vectorise \"*.py\" --language python\n```\n\n## Using Chunker MCP with Claude for Desktop\n\nYou can integrate the Chunker MCP with [Claude for Desktop](https://www.anthropic.com/claude) to enable code chunking and vectorisation directly from Claude's interface. The recommended way is to install the tool globally using `pipx` and configure Claude for Desktop to use the MCP protocol.\n\n### 1. Install Chunker Globally with pipx\n\nFirst, ensure you have [pipx](https://pypa.github.io/pipx/) installed:\n\n```sh\npython -m pip install --user pipx\npipx ensurepath\n```\n\nThen, install your chunker project globally (from your project directory):\n\n```sh\npipx install --editable .\n```\n\nThis will make the `chunker` command available globally.\n\n### 2. Configure Claude for Desktop to Use the MCP Server\n\nClaude for Desktop supports the `{\"mcpServers\":{}}` protocol for tool integration.  \nAdd the following to your Claude for Desktop configuration (or use the UI to add a new MCP server):\n\n```json\n{\n  \"mcpServers\": {\n    \"chunker\": {\n      \"command\": \"/<home DIR>/.local/bin/chunker\",\n      \"args\": [\n        \"chunk-and-vectorise-mcp\",\n        \"--project_dir\",\n        \"/path/to/your/project\",\n        \"--chroma_host\",\n        \"localhost\",\n        \"--chroma_port\",\n        \"8000\",\n        \"--chroma_collection_name\",\n        \"default\"\n      ]\n    }\n  }\n}\n```\n\n- Replace `/<home DIR>` with your actual home directory (e.g., `/home/username` or `/Users/username`).\n- Replace `/path/to/your/project` with the absolute path to your codebase.\n- The `command` field should point to the full path of the installed `chunker` CLI, which is typically located at `~/.local/bin/chunker` when installed with pipx or pip.\n- The `args` array specifies the subcommand and required arguments.\n\n> **Note:** If `~/.local/bin` is in your system PATH, you can use `\"chunker\"` as the command instead of the full path.\n\n- Replace `/path/to/your/project` with the absolute path to your codebase.\n- The `chunker` command is provided globally by `pipx`.\n- The `args` array specifies the subcommand and required arguments.\n\n> **Note:** All four arguments (`--project_dir`, `--chroma_host`, `--chroma_port`, `--chroma_collection_name`) are now required for the MCP server to start.\n\n### 3. Use the Tool in Claude\n\nOnce configured, you can invoke the chunker MCP tool from Claude for Desktop.  \nUse the prompts and commands as described in the \"Using the Chunker MCP\" section above.\n\n---\n\n\n## Querying Chunks from the CLI\n\nYou can query your ChromaDB collection for relevant code chunks using the `query-chunks` command:\n\n```sh\nchunker query-chunks \"your search query\" --chroma-host <host> --chroma-port <port> --collection-name <name> --n-results <N>\n```\n\n- `\"your search query\"`: The text or code you want to search for.\n- `--chroma-host`: ChromaDB host (default: 'localhost').\n- `--chroma-port`: ChromaDB port (default: 8000).\n- `--collection-name`: ChromaDB collection name (default: 'default').\n- `--n-results`: Number of results to return (default: 10).\n\nExample:\n\n```sh\nchunker query-chunks \"def my_function\" --n-results 5\n```\n\n---\n\n## Querying\n\nAfter vectorising your files, you can query your ChromaDB collection for relevant code chunks using the `chunker` CLI.\n\nTo search for code chunks matching an expression and include chunk metadata (such as file path and line range), use:\n\n```sh\nchunker query-chunks \"some expression\"\n```\n\n- `\"some expression\"`: The text or code you want to search for.\n\n**Example:**\n\n```sh\nchunker query-chunks \"def my_function\"\n```\n\nThis will return all code chunks containing `def my_function`, along with their file path and line range.\n\n## Output\n\nChunks are stored in your configured ChromaDB collection, with metadata including:\n- `path`: Full path to the source file\n- `start`: Start line number (0-based)\n- `end`: End line number (0-based)\n\n## License\n\nSee [LICENSE](LICENSE).\n"
}