{
  "mcp_name": "nguyenvanduocit/jira-mcp",
  "mcp_description": "üèéÔ∏è ‚òÅÔ∏è - A Go-based MCP connector for Jira that enables AI assistants like Claude to interact with Atlassian Jira. This tool provides a seamless interface for AI models to perform common Jira operations including issue management, sprint planning, and workflow transitions.",
  "mcp_id": "nguyenvanduocit_jira-mcp",
  "fetch_timestamp": "2025-06-23T07:05:43.519461Z",
  "github_url": "https://github.com/nguyenvanduocit/jira-mcp",
  "repository": {
    "name": "jira-mcp",
    "full_name": "nguyenvanduocit/jira-mcp",
    "description": "A Go-based MCP (Model Control Protocol) connector for Jira that enables AI assistants like Claude to interact with Atlassian Jira. This tool provides a seamless interface for AI models to perform common Jira operations including issue management, sprint planning, and workflow transitions.",
    "html_url": "https://github.com/nguyenvanduocit/jira-mcp",
    "created_at": "2025-03-25T13:35:58Z",
    "updated_at": "2025-06-21T18:16:44Z",
    "pushed_at": "2025-06-12T03:34:47Z",
    "size": 147,
    "stargazers_count": 33,
    "watchers_count": 33,
    "forks_count": 8,
    "open_issues_count": 0,
    "language": "Go",
    "license": "MIT License",
    "topics": [
      "ai",
      "golang-mcp",
      "jira",
      "jira-mcp",
      "mcp"
    ],
    "default_branch": "main",
    "owner": {
      "login": "nguyenvanduocit",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/1256953?v=4",
      "html_url": "https://github.com/nguyenvanduocit"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 8,
    "subscribers_count": 1,
    "languages": {
      "Go": 53749,
      "Dockerfile": 317,
      "Just": 156
    },
    "language_percentages": {
      "Go": 99.13,
      "Dockerfile": 0.58,
      "Just": 0.29
    },
    "pull_requests_count": 23,
    "contributors_count": 5,
    "latest_release": {
      "tag_name": "v1.11.0",
      "name": "v1.11.0",
      "published_at": "2025-06-12T03:34:47Z",
      "body": "## [1.11.0](https://github.com/nguyenvanduocit/jira-mcp/compare/v1.10.0...v1.11.0) (2025-06-11)\n\n\n### Features\n\n* support streamable http ([a67657a](https://github.com/nguyenvanduocit/jira-mcp/commit/a67657a9649b53ec02a5b2a4eb0789810bc7b372))",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v1.11.0",
        "commit_sha": "986d4906b17fccd56e50d0f6532994c954d70cd4"
      },
      {
        "name": "v1.10.0",
        "commit_sha": "f36bb2e27b592324d12722df35fea39a10dd206f"
      },
      {
        "name": "v1.9.0",
        "commit_sha": "41eea114dfdeb8b5a940a582c32c4f495d8fd97f"
      },
      {
        "name": "v1.8.0",
        "commit_sha": "649760f54411daffc6556e5f8b6391bf866f7511"
      },
      {
        "name": "v1.7.0",
        "commit_sha": "d110801a211879d9125db76824a84f613bd4623a"
      },
      {
        "name": "v1.6.0",
        "commit_sha": "870f1f0cb9c5b6140f18c43f015cf041b2cadd29"
      },
      {
        "name": "v1.5.0",
        "commit_sha": "c5b8e60dd2469cc62a8564ab48c74d946246e5bc"
      },
      {
        "name": "v1.4.0",
        "commit_sha": "faf7d0546222b4577fe56b602cfb36d186c5b986"
      },
      {
        "name": "v1.3.0",
        "commit_sha": "da88b141bdfea28a469a7e8c92462ccacdc05c4d"
      },
      {
        "name": "v1.2.0",
        "commit_sha": "17f6631321f602ac7b97521ea5e5bbd555d2a650"
      }
    ],
    "latest_version": "v1.11.0"
  },
  "readme": "# Jira MCP\n\nA Go-based MCP (Model Control Protocol) connector for Jira that enables AI assistants like Claude to interact with Atlassian Jira. This tool provides a seamless interface for AI models to perform common Jira operations.\n\n## WHY\n\nWhile Atlassian provides an official MCP connector, our implementation offers **superior flexibility and real-world problem-solving capabilities**. We've built this connector to address the daily challenges developers and project managers actually face, not just basic API operations.\n\n**Key Advantages:**\n- **More Comprehensive Tools**: We provide 20+ specialized tools covering every aspect of Jira workflow management\n- **Real-World Focus**: Built to solve actual daily problems like sprint management, issue relationships, and workflow transitions\n- **Enhanced Flexibility**: Support for complex operations like moving issues between sprints, creating child issues, and managing issue relationships\n- **Better Integration**: Seamless integration with AI assistants for natural language Jira operations\n- **Practical Design**: Tools designed for actual development workflows, not just basic CRUD operations\n\n## Features\n\n### Issue Management\n- **Get detailed issue information** with customizable fields and expansions\n- **Create new issues** with full field support\n- **Create child issues (subtasks)** with automatic parent linking\n- **Update existing issues** with partial field updates\n- **Search issues** using powerful JQL (Jira Query Language)\n- **List available issue types** for any project\n- **Transition issues** through workflow states\n- **Move issues to sprints** (up to 50 issues at once)\n\n### Comments & Time Tracking\n- **Add comments** to issues\n- **Retrieve all comments** from issues\n- **Add worklogs** with time tracking and custom start times\n- **Flexible time format support** (3h, 30m, 1h 30m, etc.)\n\n### Issue Relationships & History\n- **Link issues** with relationship types (blocks, duplicates, relates to)\n- **Get related issues** and their relationships\n- **Retrieve complete issue history** and change logs\n- **Track issue transitions** and workflow changes\n\n### Sprint & Project Management\n- **List all sprints** for boards or projects\n- **Get active sprint** information\n- **Get detailed sprint information** by ID\n- **List project statuses** and available transitions\n- **Board and project integration** with automatic discovery\n\n### Advanced Features\n- **Bulk operations** support (move multiple issues to sprint)\n- **Flexible parameter handling** (board_id or project_key)\n- **Rich formatting** of responses for AI consumption\n- **Error handling** with detailed debugging information\n\n## üöÄ Quick Start Guide\n\n### Prerequisites\n\nBefore you begin, you'll need:\n1. **Atlassian Account** with access to a Jira instance\n2. **API Token** from Atlassian (we'll help you get this)\n3. **Cursor IDE** with Claude integration\n\n### Step 1: Get Your Atlassian API Token\n\n1. Go to [Atlassian API Tokens](https://id.atlassian.com/manage-profile/security/api-tokens)\n2. Click **\"Create API token\"**\n3. Give it a name like \"Jira MCP Connector\"\n4. **Copy the token** (you won't see it again!)\n\n### Step 2: Choose Your Installation Method\n\nWe recommend **Docker** for the easiest setup:\n\n#### üê≥ Option A: Docker (Recommended)\n\n```bash\n# Pull the latest image\ndocker pull ghcr.io/nguyenvanduocit/jira-mcp:latest\n\n# Test it works (replace with your details)\ndocker run --rm \\\n  -e ATLASSIAN_HOST=your-company.atlassian.net \\\n  -e ATLASSIAN_EMAIL=your-email@company.com \\\n  -e ATLASSIAN_TOKEN=your-api-token \\\n  ghcr.io/nguyenvanduocit/jira-mcp:latest \\\n  --http_port 3000\n```\n\n#### üì¶ Option B: Download Binary\n\n1. Go to [GitHub Releases](https://github.com/nguyenvanduocit/jira-mcp/releases)\n2. Download for your platform:\n   - **macOS**: `jira-mcp_darwin_amd64`\n   - **Linux**: `jira-mcp_linux_amd64`  \n   - **Windows**: `jira-mcp_windows_amd64.exe`\n3. Make it executable (macOS/Linux):\n   ```bash\n   chmod +x jira-mcp_*\n   sudo mv jira-mcp_* /usr/local/bin/jira-mcp\n   ```\n\n#### üõ†Ô∏è Option C: Build from Source\n\n```bash\ngo install github.com/nguyenvanduocit/jira-mcp@latest\n```\n\n### Step 3: Configure Cursor\n\n1. **Open Cursor**\n2. **Go to Settings** ‚Üí **Features** ‚Üí **Model Context Protocol**\n3. **Add a new MCP server** with this configuration:\n\n#### For Docker Users:\n```json\n{\n  \"mcpServers\": {\n    \"jira\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"--rm\", \"-i\",\n        \"-e\", \"ATLASSIAN_HOST=your-company.atlassian.net\",\n        \"-e\", \"ATLASSIAN_EMAIL=your-email@company.com\", \n        \"-e\", \"ATLASSIAN_TOKEN=your-api-token\",\n        \"ghcr.io/nguyenvanduocit/jira-mcp:latest\"\n      ]\n    }\n  }\n}\n```\n\n#### For Binary Users:\n```json\n{\n  \"mcpServers\": {\n    \"jira\": {\n      \"command\": \"/usr/local/bin/jira-mcp\",\n      \"env\": {\n        \"ATLASSIAN_HOST\": \"your-company.atlassian.net\",\n        \"ATLASSIAN_EMAIL\": \"your-email@company.com\",\n        \"ATLASSIAN_TOKEN\": \"your-api-token\"\n      }\n    }\n  }\n}\n```\n\n### Step 4: Test Your Setup\n\n1. **Restart Cursor** completely\n2. **Open a new chat** with Claude\n3. **Try these test commands**:\n\n```\nList my Jira projects\n```\n\n```\nShow me issues assigned to me\n```\n\n```\nWhat's in the current sprint?\n```\n\nIf you see Jira data, **congratulations! üéâ** You're all set up.\n\n## üîß Advanced Configuration\n\n### Using Environment Files\n\nCreate a `.env` file for easier management:\n\n```bash\n# .env file\nATLASSIAN_HOST=your-company.atlassian.net\nATLASSIAN_EMAIL=your-email@company.com\nATLASSIAN_TOKEN=your-api-token\n```\n\nThen use it:\n```bash\n# With binary\njira-mcp -env .env\n\n# With Docker\ndocker run --rm -i --env-file .env ghcr.io/nguyenvanduocit/jira-mcp:latest\n```\n\n### HTTP Mode for Development\n\nFor development and testing, you can run in HTTP mode:\n\n```bash\n# Start HTTP server on port 3000\njira-mcp -env .env -http_port 3000\n```\n\nThen configure Cursor with:\n```json\n{\n  \"mcpServers\": {\n    \"jira\": {\n      \"url\": \"http://localhost:3000/mcp\"\n    }\n  }\n}\n```\n\n## üéØ Usage Examples\n\nOnce configured, you can ask Claude to help with Jira tasks using natural language:\n\n### Issue Management\n- *\"Create a new bug ticket for the login issue\"*\n- *\"Show me details for ticket PROJ-123\"*\n- *\"Move ticket PROJ-456 to In Progress\"*\n- *\"Add a comment to PROJ-789 saying the fix is ready\"*\n\n### Sprint Management  \n- *\"What's in our current sprint?\"*\n- *\"Move these 3 tickets to the next sprint: PROJ-1, PROJ-2, PROJ-3\"*\n- *\"Show me all tickets assigned to John in the current sprint\"*\n\n### Reporting & Analysis\n- *\"Show me all bugs created this week\"*\n- *\"List all tickets that are blocked\"*\n- *\"What tickets are ready for testing?\"*\n\n## üõ†Ô∏è Troubleshooting\n\n### Common Issues\n\n**‚ùå \"Connection failed\" or \"Authentication error\"**\n- Double-check your `ATLASSIAN_HOST` (should be like `company.atlassian.net`)\n- Verify your API token is correct\n- Make sure your email matches your Atlassian account\n\n**‚ùå \"No MCP servers found\"**\n- Restart Cursor completely after adding the configuration\n- Check the MCP configuration syntax in Cursor settings\n- Verify the binary path is correct (for binary installations)\n\n**‚ùå \"Permission denied\" errors**\n- Make sure your Atlassian account has access to the Jira projects\n- Check if your API token has the necessary permissions\n\n### Getting Help\n\n1. **Check the logs**: Run with `-http_port` to see detailed error messages\n2. **Test your credentials**: Try the Docker test command from Step 2\n3. **Verify Cursor config**: The app will show you the exact configuration to use\n\n## üìö Development\n\nFor local development and contributing:\n\n```bash\n# Clone the repository\ngit clone https://github.com/nguyenvanduocit/jira-mcp.git\ncd jira-mcp\n\n# Create .env file with your credentials\ncp .env.example .env\n# Edit .env with your details\n\n# Run in development mode\njust dev\n# or\ngo run main.go -env .env -http_port 3002\n\n# Test with MCP inspector\nnpx @modelcontextprotocol/inspector http://localhost:3002/mcp\n```\n\n## ü§ù Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'feat: add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## üìÑ License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n---\n\n**Need help?** Check our [CHANGELOG.md](./CHANGELOG.md) for recent updates or open an issue on GitHub."
}