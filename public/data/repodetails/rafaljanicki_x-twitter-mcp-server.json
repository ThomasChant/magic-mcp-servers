{
  "mcp_name": "rafaljanicki/x-twitter-mcp-server",
  "mcp_description": "Facilitates AI-driven interactions with Twitter, enabling tweet management and user engagement through natural language commands.",
  "mcp_id": "rafaljanicki_x-twitter-mcp-server",
  "fetch_timestamp": "2025-06-23T07:48:45.199184Z",
  "github_url": "https://github.com/rafaljanicki/x-twitter-mcp-server",
  "repository": {
    "name": "x-twitter-mcp-server",
    "full_name": "rafaljanicki/x-twitter-mcp-server",
    "description": "X/Twitter MCP server",
    "html_url": "https://github.com/rafaljanicki/x-twitter-mcp-server",
    "created_at": "2025-04-24T12:48:34Z",
    "updated_at": "2025-06-10T18:48:01Z",
    "pushed_at": "2025-05-17T14:30:14Z",
    "size": 18,
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks_count": 3,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "fastmcp",
      "mcp",
      "twitter",
      "twitter-api",
      "vibecoding"
    ],
    "default_branch": "main",
    "owner": {
      "login": "rafaljanicki",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/7746477?v=4",
      "html_url": "https://github.com/rafaljanicki"
    },
    "has_issues": true,
    "has_projects": false,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 3,
    "subscribers_count": 1,
    "languages": {
      "Python": 21513,
      "Dockerfile": 459
    },
    "language_percentages": {
      "Python": 97.91,
      "Dockerfile": 2.09
    },
    "pull_requests_count": 2,
    "contributors_count": 4,
    "tags": [
      {
        "name": "v0.1.11",
        "commit_sha": "556197aeed10e663d29bf89852baaa4727b5b9da"
      },
      {
        "name": "v0.1.9",
        "commit_sha": "73c1ea2cff831e9f48cd640b9b60446bbd05abe3"
      },
      {
        "name": "v0.1.8",
        "commit_sha": "e6956c6a2ab51fc2befec8913423ceb10c927c26"
      },
      {
        "name": "v0.1.7",
        "commit_sha": "f3e3499631fc7a7cb19f9e433d5fd50e2d7661b3"
      },
      {
        "name": "v0.1.6",
        "commit_sha": "84c5750f3075f19dfbdca3cd00a0cc550f98d523"
      },
      {
        "name": "v0.1.5",
        "commit_sha": "36529b1aa3504817d4b78bd791e690ad06a6ec68"
      }
    ],
    "latest_version": "v0.1.11"
  },
  "readme": "# X (Twitter) MCP server\n\n[![smithery badge](https://smithery.ai/badge/@rafaljanicki/x-twitter-mcp-server)](https://smithery.ai/server/@rafaljanicki/x-twitter-mcp-server)\n[![PyPI version](https://badge.fury.io/py/x-twitter-mcp.svg)](https://badge.fury.io/py/x-twitter-mcp)\n\nA Model Context Protocol (MCP) server for interacting with Twitter (X) via AI tools. This server allows you to fetch tweets, post tweets, search Twitter, manage followers, and more, all through natural language commands in AI Tools.\n\n<a href=\"https://glama.ai/mcp/servers/@rafaljanicki/x-twitter-mcp-server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@rafaljanicki/x-twitter-mcp-server/badge\" alt=\"X (Twitter) server MCP server\" />\n</a>\n\n## Features\n\n- Fetch user profiles, followers, and following lists.\n- Post, delete, and favorite tweets.\n- Search Twitter for tweets and trends.\n- Manage bookmarks and timelines.\n- Built-in rate limit handling for the Twitter API.\n- Uses Twitter API v2 with proper authentication (API keys and tokens), avoiding the username/password hack to minimize the risk of account suspensions.\n- Provides a complete implementation of Twitter API v2 endpoints for user management, tweet management, timelines, and search functionality.\n\n## Prerequisites\n\n- **Python 3.10 or higher**: Ensure Python is installed on your system.\n- **Twitter Developer Account**: You need API credentials (API Key, API Secret, Access Token, Access Token Secret, and Bearer Token) from the [Twitter Developer Portal](https://developer.twitter.com/).\n- Optional: **Claude Desktop**: Download and install the Claude Desktop app from the [Anthropic website](https://www.anthropic.com/).\n- Optional: **Node.js** (for MCP integration): Required for running MCP servers in Claude Desktop.\n- A package manager like `uv` or `pip` for Python dependencies.\n\n## Installation\n\n### Option 1: Installing via Smithery (Recommended)\n\nTo install X (Twitter) MCP server for Claude Desktop automatically via [Smithery](https://smithery.ai/server//x-twitter-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @rafaljanicki/x-twitter-mcp-server --client claude\n```\n\n### Option 2: Install from PyPI\nThe easiest way to install `x-twitter-mcp` is via PyPI:\n\n```bash\npip install x-twitter-mcp\n```\n\n### Option 3: Install from Source\nIf you prefer to install from the source repository:\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/rafaljanicki/x-twitter-mcp-server.git\n   cd x-twitter-mcp-server\n   ```\n\n2. **Set Up a Virtual Environment** (optional but recommended):\n   ```bash\n   python -m venv .venv\n   source .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n   ```\n\n3. **Install Dependencies**:\n   Using `uv` (recommended, as the project uses `uv.lock`):\n   ```bash\n   uv sync\n   ```\n   Alternatively, using `pip`:\n   ```bash\n   pip install .\n   ```\n\n4. **Configure Environment Variables**:\n    - Create a `.env` file in the project root (you can copy `.env.example` if provided).\n    - Add your Twitter API credentials:\n      ```\n      TWITTER_API_KEY=your_api_key\n      TWITTER_API_SECRET=your_api_secret\n      TWITTER_ACCESS_TOKEN=your_access_token\n      TWITTER_ACCESS_TOKEN_SECRET=your_access_token_secret\n      TWITTER_BEARER_TOKEN=your_bearer_token\n      ```\n\n## Running the Server\n\nYou can run the server in two ways:\n\n### Option 1: Using the CLI Script\nThe project defines a CLI script `x-twitter-mcp-server`.\n\nIf installed from PyPI:\n```bash\nx-twitter-mcp-server\n```\n\nIf installed from source with `uv`:\n```bash\nuv run x-twitter-mcp-server\n```\n\n### Option 2: Using FastMCP Directly (Source Only)\nIf you installed from source and prefer to run the server using FastMCP’s development mode:\n\n```bash\nfastmcp dev src/x_twitter_mcp/server.py\n```\n\nThe server will start and listen for MCP connections. You should see output like:\n```\nStarting TwitterMCPServer...\n```\n\n## Using with Claude Desktop\n\nTo use this MCP server with Claude Desktop, you need to configure Claude to connect to the server. Follow these steps:\n\n### Step 1: Install Node.js\nClaude Desktop uses Node.js to run MCP servers. If you don’t have Node.js installed:\n- Download and install Node.js from [nodejs.org](https://nodejs.org/).\n- Verify installation:\n  ```bash\n  node --version\n  ```\n\n### Step 2: Locate Claude Desktop Configuration\nClaude Desktop uses a `claude_desktop_config.json` file to configure MCP servers.\n\n- **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n- **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\nIf the file doesn’t exist, create it.\n\n### Step 3: Configure the MCP Server\nEdit `claude_desktop_config.json` to include the `x-twitter-mcp` server. Replace `/path/to/x-twitter-mcp-server` with the actual path to your project directory (if installed from source) or the path to your Python executable (if installed from PyPI).\n\nIf installed from PyPI:\n```json\n{\n  \"mcpServers\": {\n    \"x-twitter-mcp\": {\n      \"command\": \"x-twitter-mcp-server\",\n      \"args\": [],\n      \"env\": {\n        \"PYTHONUNBUFFERED\": \"1\",\n        \"TWITTER_API_KEY\": \"your_api_key\",\n        \"TWITTER_API_SECRET\": \"your_api_secret\",\n        \"TWITTER_ACCESS_TOKEN\": \"your_access_token\",\n        \"TWITTER_ACCESS_TOKEN_SECRET\": \"your_access_token_secret\",\n        \"TWITTER_BEARER_TOKEN\": \"your_bearer_token\"\n      }\n    }\n  }\n}\n```\n\nIf installed from source with `uv`:\n```json\n{\n  \"mcpServers\": {\n    \"x-twitter-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/x-twitter-mcp-server\",\n        \"run\",\n        \"x-twitter-mcp-server\"\n      ],\n      \"env\": {\n        \"PYTHONUNBUFFERED\": \"1\"\n      }\n    }\n  }\n}\n```\n\n- `\"command\": \"x-twitter-mcp-server\"`: Uses the CLI script directly if installed from PyPI.\n- `\"env\"`: If installed from PyPI, you may need to provide environment variables directly in the config (since there’s no `.env` file). If installed from source, the `.env` file will be used.\n- `\"env\": {\"PYTHONUNBUFFERED\": \"1\"}`: Ensures output is unbuffered for better logging in Claude.\n\n### Step 4: Restart Claude Desktop\n- Quit Claude Desktop completely.\n- Reopen Claude Desktop to load the new configuration.\n\n### Step 5: Verify Connection\n- Open Claude Desktop.\n- Look for a hammer or connector icon in the input area (bottom right corner). This indicates MCP tools are available.\n- Click the icon to see the available tools from `x-twitter-mcp`, such as `post_tweet`, `search_twitter`, `get_user_profile`, etc.\n\n### Step 6: Test with Claude\nYou can now interact with Twitter using natural language in Claude Desktop. Here are some example prompts:\n\n- **Fetch a User Profile**:\n  ```\n  Get the Twitter profile for user ID 123456.\n  ```\n  Claude will call the `get_user_profile` tool and return the user’s details.\n\n- **Post a Tweet**:\n  ```\n  Post a tweet saying \"Hello from Claude Desktop! #MCP\"\n  ```\n  Claude will use the `post_tweet` tool to post the tweet and confirm the action.\n\n- **Search Twitter**:\n  ```\n  Search Twitter for recent tweets about AI.\n  ```\n  Claude will invoke the `search_twitter` tool and return relevant tweets.\n\n- **Get Trends**:\n  ```\n  What are the current trending topics on Twitter?\n  ```\n  Claude will use the `get_trends` tool to fetch trending topics.\n\nWhen prompted, grant Claude permission to use the MCP tools for the chat session.\n\n## Available Tools\n\nBelow is a list of all tools provided by the `x-twitter-mcp` server, along with example executions in Claude Desktop using natural language prompts.\n\n### User Management Tools\n\n#### `get_user_profile`\n- **Description**: Get detailed profile information for a user.\n- **Claude Desktop Example**:\n  ```\n  Get the Twitter profile for user ID 123456789.\n  ```\n  Claude will return the user’s profile details, including ID, name, username, profile image URL, and description.\n\n#### `get_user_by_screen_name`\n- **Description**: Fetches a user by screen name.\n- **Claude Desktop Example**:\n  ```\n  Get the Twitter user with screen name \"example_user\".\n  ```\n  Claude will return the user’s profile details.\n\n#### `get_user_by_id`\n- **Description**: Fetches a user by ID.\n- **Claude Desktop Example**:\n  ```\n  Fetch the Twitter user with ID 987654321.\n  ```\n  Claude will return the user’s profile details.\n\n#### `get_user_followers`\n- **Description**: Retrieves a list of followers for a given user.\n- **Claude Desktop Example**:\n  ```\n  Get the followers of user ID 123456789, limit to 50.\n  ```\n  Claude will return a list of up to 50 followers.\n\n#### `get_user_following`\n- **Description**: Retrieves users the given user is following.\n- **Claude Desktop Example**:\n  ```\n  Who is user ID 123456789 following? Limit to 50 users.\n  ```\n  Claude will return a list of up to 50 users.\n\n#### `get_user_followers_you_know`\n- **Description**: Retrieves a list of common followers.\n- **Claude Desktop Example**:\n  ```\n  Get common followers for user ID 123456789, limit to 50.\n  ```\n  Claude will return a list of up to 50 common followers (simulated by filtering followers).\n\n#### `get_user_subscriptions`\n- **Description**: Retrieves a list of users to which the specified user is subscribed.\n- **Claude Desktop Example**:\n  ```\n  Get the subscriptions for user ID 123456789, limit to 50.\n  ```\n  Claude will return a list of up to 50 users (using following as a proxy for subscriptions).\n\n### Tweet Management Tools\n\n#### `post_tweet`\n- **Description**: Post a tweet with optional media, reply, and tags.\n- **Claude Desktop Example**:\n  ```\n  Post a tweet saying \"Hello from Claude Desktop! #MCP\"\n  ```\n  Claude will post the tweet and return the tweet details.\n\n#### `delete_tweet`\n- **Description**: Delete a tweet by its ID.\n- **Claude Desktop Example**:\n  ```\n  Delete the tweet with ID 123456789012345678.\n  ```\n  Claude will delete the tweet and confirm the action.\n\n#### `get_tweet_details`\n- **Description**: Get detailed information about a specific tweet.\n- **Claude Desktop Example**:\n  ```\n  Get details for tweet ID 123456789012345678.\n  ```\n  Claude will return the tweet’s details, including ID, text, creation date, and author ID.\n\n#### `create_poll_tweet`\n- **Description**: Create a tweet with a poll.\n- **Claude Desktop Example**:\n  ```\n  Create a poll tweet with the question \"What's your favorite color?\" and options \"Red\", \"Blue\", \"Green\" for 60 minutes.\n  ```\n  Claude will create the poll tweet and return the tweet details.\n\n#### `vote_on_poll`\n- **Description**: Vote on a poll.\n- **Claude Desktop Example**:\n  ```\n  Vote \"Blue\" on the poll in tweet ID 123456789012345678.\n  ```\n  Claude will return a mock response (since Twitter API v2 doesn’t support poll voting).\n\n#### `favorite_tweet`\n- **Description**: Favorites a tweet.\n- **Claude Desktop Example**:\n  ```\n  Like the tweet with ID 123456789012345678.\n  ```\n  Claude will favorite the tweet and confirm the action.\n\n#### `unfavorite_tweet`\n- **Description**: Unfavorites a tweet.\n- **Claude Desktop Example**:\n  ```\n  Unlike the tweet with ID 123456789012345678.\n  ```\n  Claude will unfavorite the tweet and confirm the action.\n\n#### `bookmark_tweet`\n- **Description**: Adds the tweet to bookmarks.\n- **Claude Desktop Example**:\n  ```\n  Bookmark the tweet with ID 123456789012345678.\n  ```\n  Claude will bookmark the tweet and confirm the action.\n\n#### `delete_bookmark`\n- **Description**: Removes the tweet from bookmarks.\n- **Claude Desktop Example**:\n  ```\n  Remove the bookmark for tweet ID 123456789012345678.\n  ```\n  Claude will remove the bookmark and confirm the action.\n\n#### `delete_all_bookmarks`\n- **Description**: Deletes all bookmarks.\n- **Claude Desktop Example**:\n  ```\n  Delete all my Twitter bookmarks.\n  ```\n  Claude will delete all bookmarks and confirm the action.\n\n### Timeline & Search Tools\n\n#### `get_timeline`\n- **Description**: Get tweets from your home timeline (For You).\n- **Claude Desktop Example**:\n  ```\n  Show my Twitter For You timeline, limit to 20 tweets.\n  ```\n  Claude will return up to 20 tweets from your For You timeline.\n\n#### `get_latest_timeline`\n- **Description**: Get tweets from your home timeline (Following).\n- **Claude Desktop Example**:\n  ```\n  Show my Twitter Following timeline, limit to 20 tweets.\n  ```\n  Claude will return up to 20 tweets from your Following timeline.\n\n#### `search_twitter`\n- **Description**: Search Twitter with a query.\n- **Claude Desktop Example**:\n  ```\n  Search Twitter for recent tweets about AI, limit to 10.\n  ```\n  Claude will return up to 10 recent tweets about AI.\n\n#### `get_trends`\n- **Description**: Retrieves trending topics on Twitter.\n- **Claude Desktop Example**:\n  ```\n  What are the current trending topics on Twitter? Limit to 10.\n  ```\n  Claude will return up to 10 trending topics.\n\n#### `get_highlights_tweets`\n- **Description**: Retrieves highlighted tweets from a user’s timeline.\n- **Claude Desktop Example**:\n  ```\n  Get highlighted tweets from user ID 123456789, limit to 20.\n  ```\n  Claude will return up to 20 tweets from the user’s timeline (simulated as highlights).\n\n#### `get_user_mentions`\n- **Description**: Get tweets mentioning a specific user.\n- **Claude Desktop Example**:\n  ```\n  Get tweets mentioning user ID 123456789, limit to 20.\n  ```\n  Claude will return up to 20 tweets mentioning the user.\n\n## Troubleshooting\n\n- **Server Not Starting**:\n    - Ensure your `.env` file has all required Twitter API credentials (if installed from source).\n    - If installed from PyPI, ensure environment variables are set in `claude_desktop_config.json` or your shell.\n    - Check the terminal output for errors when running `x-twitter-mcp-server`.\n    - Verify that `uv` or your Python executable is correctly installed and accessible.\n\n- **Claude Not Detecting the Server**:\n    - Confirm the path in `claude_desktop_config.json` is correct.\n    - Ensure the `command` and `args` point to the correct executable and script.\n    - Restart Claude Desktop after updating the config file.\n    - Check Claude’s Developer Mode logs (Help → Enable Developer Mode → Open MCP Log File) for errors.\n\n- **Rate Limit Errors**:\n    - The server includes rate limit handling, but if you hit Twitter API limits, you may need to wait for the reset window (e.g., 15 minutes for tweet actions).\n\n- **Syntax Warnings**:\n    - If you see `SyntaxWarning` messages from Tweepy, they are due to docstring issues in Tweepy with Python 3.13. The server includes a warning suppression to handle this.\n\n## Contributing\n\nContributions are welcome! Please open an issue or submit a pull request on the [GitHub repository](https://github.com/rafaljanicki/x-twitter-mcp-server).\n\n## License\n\nThis project is licensed under the MIT License. See the `LICENSE` file for details.\n\n## Author\n\n- **Rafal Janicki** - [rafal@kult.io](mailto:rafal@kult.io)"
}