{
  "mcp_name": "gulihua10010/mcp-server-article",
  "mcp_description": "Automates article generation and publication to platforms like CSDN, Juejin, and Cnblogs using AI and MCP protocol integration.",
  "mcp_id": "gulihua10010_mcp-server-article",
  "fetch_timestamp": "2025-06-23T04:16:31.085143Z",
  "github_url": "https://github.com/gulihua10010/mcp-server-article",
  "repository": {
    "name": "mcp-server-article",
    "full_name": "gulihua10010/mcp-server-article",
    "description": "MCP自动发文服务",
    "html_url": "https://github.com/gulihua10010/mcp-server-article",
    "created_at": "2025-04-10T12:33:28Z",
    "updated_at": "2025-04-15T08:26:35Z",
    "pushed_at": "2025-04-15T08:26:31Z",
    "size": 1030,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Java",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "gulihua10010",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/38686919?v=4",
      "html_url": "https://github.com/gulihua10010"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Java": 63068
    },
    "language_percentages": {
      "Java": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# 自动发文 MCP Server\n\n## 简介\n\n本项目实现通过AI生成一篇文章，然后自动发文到CSDN、掘金、博客园。关于MCP协议，详见MCP官方[文档](https://modelcontextprotocol.io/)。\n\n依赖`MCP Java SDK`开发，任意支持MCP协议的智能体助手（如`Claude`、`Cursor`以及`千帆AppBuilder`等）都可以快速接入。\n\n以下会给更出详细的适配说明。\n\n## 工具列表\n\n#### 搜索面经 `searchExperienceQuestion`\n\n- 从牛客搜索用户发表的面经\n- 输出: `面经内容`\n\n#### 查询资讯 `searchNews`\n\n- 从网上查询最新的科技资讯话题内容\n- 输出: `资讯标题、资讯内容`\n\n#### 发布文章到CSDN `publishArticle2Csdn`\n\n- \n- 输入: `文章标题、内容、描述`\n- 输出: `文章id、文章链接`\n\n#### 发布文章到掘金 `publishArticle2Juejin`\n\n-\n- 输入: `文章标题、内容、描述`\n- 输出: `文章id、文章链接`\n\n#### 发布文章到博客园 `publishArticle2Cnblog`\n\n-\n- 输入: `文章标题、内容、描述`\n- 输出: `文章id、文章链接`\n\n## 环境参数\n### JUEJIN_COOKIE\n掘金账号的Cookie，主要的请求头Cookie的sessionid字段\n\n\n### CSDN_COOKIE\nCSDN账号的Cookie，主要是请求头Cookie的SESSION字段、UserName字段，UserInfo字段、UserToken字段\n请求头签名：x-ca-key、x-ca-nonce、x-ca-signature、x-ca-signature-headers、accept、content-type 写死就行了\n\n\n### CNBLOG_COOKIE\n博客园账号的Cookie，主要是请求头Cookie的.CNBlogsCookie字段、AspNetCore.Antiforgery.xxxxxxxx字段，.Cnblogs.AspNetCore.Cookies字段\n\n### CNBLOG_TOKEN\n博客园请求头x-xsrf-token字段\n\n\n## 快速开始\n\n使用发文 MCP Server主要通过`Java SDK` 的形式\n\n### Java 接入\n\n> 前提需要Java 17 运行时环境\n\n#### 安装\n\n``` bash\ngit clone https://github.com/yuyuanweb/mcp--server-article\n```\n\n#### 构建\n\n``` bash\ncd mcp--server-article\nmvn clean package\n```\n\n#### 使用\n\n1) 打开`Cherry Studio`的`设置`，点击`MCP 服务器`。\n   ![cherry1.png](img/cherry1.png)\n\n\n2) 点击`编辑 JSON`,将以下配置添加到配置文件中。\n\n``` json\n{\n  \"mcpServers\": {\n    \"articleServer\": {\n      \"command\": \"java\",\n      \"args\": [\n        \"-Dspring.ai.mcp.server.stdio=true\",\n        \"-Dspring.main.web-application-type=none\",\n        \"-Dlogging.pattern.console=\",\n        \"-jar\",\n        \"/Users/gulihua/IdeaProjects/mcp-server-article/target/mcp-server-0.0.1-SNAPSHOT.jar\"\n      ],\n      \"env\": {\n        \"JUEJIN_COOKIE\": \"掘金的cookie\",\n        \"CNBLOG_COOKIE\": \"博客园的cookie\",\n        \"CNBLOG_TOKEN\": \"博客园的x-xsrf-token\",\n        \"CSDN_COOKIE\": \"CSDN的cookie\"\n      }\n    }\n  }\n}\n```\n\n![cherry2.png](img/cherry2.png)\n\n3) 在设置-模型服务里选择一个模型，输入API密钥，选择模型设置，勾选下工具函数调用功能。\n   ![cherry3.png](img/cherry3.png)\n4) 在输入框下面勾选开启MCP服务。\n   ![cherry4.png](img/cherry4.png)\n5) 配置完成，然后查询牛客的用户真实面经，AI生成文章，然后发布到CSDN、掘金、博客园。\n   ![cherry5.png](img/cherry5.png)\n\n#### 代码调用\n\n1) 引入依赖\n\n``` java\n        <dependency>\n            <groupId>com.alibaba.cloud.ai</groupId>\n            <artifactId>spring-ai-alibaba-starter</artifactId>\n            <version>1.0.0-M6.1</version>\n        </dependency>\n    <dependency>\n      <groupId>org.springframework.ai</groupId>\n      <artifactId>spring-ai-mcp-client-spring-boot-starter</artifactId>\n      <version>1.0.0-M6</version>\n    </dependency>\n```\n\n2) 配置MCP服务器\n   需要在application.yml中配置MCP服务器的一些参数：\n\n``` yaml\nspring:\n  ai:\n    mcp:\n      client:\n        stdio:\n          # 指定MCP服务器配置文件\n          servers-configuration: classpath:/mcp-servers-config.json\n  mandatory-file-encoding: UTF-8\n```\n\n其中mcp-servers-config.json的配置如下：\n\n``` json\n{\n  \"mcpServers\": {\n    \"articleServer\": {\n      \"command\": \"java\",\n      \"args\": [\n        \"-Dspring.ai.mcp.server.stdio=true\",\n        \"-Dspring.main.web-application-type=none\",\n        \"-Dlogging.pattern.console=\",\n        \"-jar\",\n        \"/Users/gulihua/IdeaProjects/mcp-server-article/target/mcp-server-0.0.1-SNAPSHOT.jar\"\n      ],\n      \"env\": {\n        \"JUEJIN_COOKIE\": \"掘金的cookie\",\n        \"CNBLOG_COOKIE\": \"博客园的cookie\",\n        \"CNBLOG_TOKEN\": \"博客园的x-xsrf-token\",\n        \"CSDN_COOKIE\": \"CSDN的cookie\"\n      }\n    }\n  }\n}\n```\n客户端我们使用阿里巴巴的通义千问模型，所以引入spring-ai-alibaba-starter依赖，如果你使用的是其他的模型，也可以使用对应的依赖项，比如openAI引入`spring-ai-openai-spring-boot-starter` 这个依赖就行了。\n配置大模型的密钥等信息：\n``` yaml\nspring:\n  ai:\n    dashscope:\n      api-key: ${通义千问的key}\n      chat:\n        options:\n          model: qwen-max\n```\n通义千问的key可以直接去[官网](https://help.aliyun.com/zh/model-studio/developer-reference/get-api-key?spm=a2c4g.11186623.0.0.7399482394LUBH) 去申请，模型我们用的是通义千问-Max。\n3) 初始化聊天客户端\n``` java\n@Bean\npublic ChatClient initChatClient(ChatClient.Builder chatClientBuilder,\n                                 ToolCallbackProvider mcpTools) {\n    return chatClientBuilder\n    .defaultTools(mcpTools)\n    .build();\n}\n```\n4) 接口调用\n``` java\n    @PostMapping(value = \"/ai/answer/sse\", produces = MediaType.TEXT_EVENT_STREAM_VALUE)\n    public Flux<String> generateStreamAsString(@RequestBody AskRequest request) {\n\n        Flux<String> content = chatClient.prompt()\n                .user(request.getContent())\n                .stream()\n                .content();\n        return content\n                .concatWith(Flux.just(\"[complete]\"));\n\n    }\n```"
}