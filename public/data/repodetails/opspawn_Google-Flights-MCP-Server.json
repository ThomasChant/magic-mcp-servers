{
  "mcp_name": "opspawn/Google-Flights-MCP-Server",
  "mcp_description": "Interact with Google Flights data using the fast_flights library to fetch and analyze flight information.",
  "mcp_id": "opspawn_Google-Flights-MCP-Server",
  "fetch_timestamp": "2025-06-23T07:22:12.138376Z",
  "github_url": "https://github.com/opspawn/Google-Flights-MCP-Server",
  "repository": {
    "name": "Google-Flights-MCP-Server",
    "full_name": "opspawn/Google-Flights-MCP-Server",
    "description": "This MCP server provides tools to interact with Google Flights data using the bundled fast_flights library.",
    "html_url": "https://github.com/opspawn/Google-Flights-MCP-Server",
    "created_at": "2025-04-07T01:43:14Z",
    "updated_at": "2025-06-14T05:59:18Z",
    "pushed_at": "2025-04-07T01:43:18Z",
    "size": 50,
    "stargazers_count": 7,
    "watchers_count": 7,
    "forks_count": 3,
    "open_issues_count": 1,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "opspawn",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/206377040?v=4",
      "html_url": "https://github.com/opspawn"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 3,
    "subscribers_count": 2,
    "languages": {
      "Python": 157984
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 1,
    "contributors_count": 1
  },
  "readme": "# Google Flights MCP Server\n\nThis MCP server provides tools to interact with Google Flights data using the bundled `fast_flights` library.\n\n## Features\n\nProvides the following MCP tools:\n\n*   **`get_flights_on_date`**: Fetches available one-way flights for a specific date between two airports.\n    *   Args: `origin` (str), `destination` (str), `date` (str, YYYY-MM-DD), `adults` (int, optional), `seat_type` (str, optional), `return_cheapest_only` (bool, optional, default `False`).\n*   **`get_round_trip_flights`**: Fetches available round-trip flights for specific departure and return dates.\n    *   Args: `origin` (str), `destination` (str), `departure_date` (str, YYYY-MM-DD), `return_date` (str, YYYY-MM-DD), `adults` (int, optional), `seat_type` (str, optional), `return_cheapest_only` (bool, optional, default `False`).\n*   **`find_all_flights_in_range`**: Finds available round-trip flights within a specified date range. Can optionally return only the cheapest flight found for each date pair.\n    *   Args: `origin` (str), `destination` (str), `start_date_str` (str, YYYY-MM-DD), `end_date_str` (str, YYYY-MM-DD), `min_stay_days` (int, optional), `max_stay_days` (int, optional), `adults` (int, optional), `seat_type` (str, optional), `return_cheapest_only` (bool, optional, default `False`).\n\n## Setup\n\n1.  **Clone the repository:**\n    ```bash\n    git clone https://github.com/opspawn/Google-Flights-MCP-Server.git\n    cd Google-Flights-MCP-Server\n    ```\n2.  **Create a virtual environment (recommended):**\n    ```bash\n    python -m venv .venv\n    source .venv/bin/activate  # On Windows use `.venv\\Scripts\\activate`\n    ```\n3.  **Install dependencies:**\n    ```bash\n    pip install -r requirements.txt\n    ```\n4.  **Install Playwright browsers (needed by `fast_flights`):**\n    ```bash\n    playwright install\n    ```\n\n## Running the Server\n\nYou can run the server directly using Python:\n\n```bash\npython server.py\n```\n\nThe server uses STDIO transport by default.\n\n## Integrating with MCP Clients (e.g., Cline, Claude Desktop)\n\nAdd the server to your MCP client's configuration file. Example for `cline_mcp_settings.json` or `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"google-flights\": {\n      \"command\": \"/path/to/your/.venv/bin/python\", // Use absolute path to venv python\n      \"args\": [\n        \"/absolute/path/to/flight_mcp_server/server.py\" // Use absolute path to server script\n      ],\n      \"env\": {},\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n    // ... other servers\n  }\n}\n```\n\n**Important:** Replace the paths in `command` and `args` with the absolute paths to your virtual environment's Python executable and the `server.py` script on your system.\n\n## Notes\n\n*   This server bundles the `fast_flights` library (originally from [https://github.com/AWeirdDev/flights](https://github.com/AWeirdDev/flights)) for its core flight scraping functionality. Please refer to the included `LICENSE` file for its terms.\n*   Flight scraping can sometimes be unreliable or slow depending on Google Flights changes and network conditions. The tools include basic error handling.\n*   The `find_all_flights_in_range` tool can be resource-intensive as it checks many date combinations.\n"
}