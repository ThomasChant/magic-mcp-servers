{
  "mcp_name": "xctools",
  "mcp_description": "üçé MCP server for Xcode's xctrace, xcrun, xcodebuild.",
  "mcp_id": "nzrsky_xctools-mcp-server",
  "fetch_timestamp": "2025-06-23T09:30:42.164323Z",
  "github_url": "https://github.com/nzrsky/xctools-mcp-server",
  "repository": {
    "name": "xctools-mcp-server",
    "full_name": "nzrsky/xctools-mcp-server",
    "description": "A Model Context Protocol server for different Xcode related tools",
    "html_url": "https://github.com/nzrsky/xctools-mcp-server",
    "created_at": "2025-05-27T11:57:35Z",
    "updated_at": "2025-05-27T12:25:36Z",
    "pushed_at": "2025-05-27T12:25:32Z",
    "size": 10,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 1,
    "open_issues_count": 1,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "nzrsky",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/1218163?v=4",
      "html_url": "https://github.com/nzrsky"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 0,
    "languages": {
      "Python": 13854
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 1,
    "contributors_count": 1
  },
  "readme": "# XCTools MCP Server\n\nA Model Context Protocol (MCP) server that provides structured access to Xcode development tools including `xcrun`, `xcodebuild`, and `xctrace`.\n\n## Installation\n\n### Method 1: Using uvx\n\n1. **Prerequisites**:\n   - Python 3.13+\n   - Xcode with Command Line Tools installed\n   - [uvx](https://github.com/astral-sh/uv): `curl -LsSf https://astral.sh/uv/install.sh | sh`\n\n2. **Run directly with uvx**:\n   ```bash\n   uvx xctools-mcp-server\n   ```\n\n### Method 2: Local Development Installation\n\n1. **Prerequisites**:\n   - Python 3.13+\n   - Xcode with Command Line Tools installed\n\n2. **Clone and install**:\n   ```bash\n   git clone https://github.com/nzrsky/xctools-mcp-server\n   cd xctools-mcp-server\n   pip install .\n   ```\n\n3. **Run the server**:\n   ```bash\n   xctools-mcp-server\n   ```\n\n### Method 3: Build from Source\n\n1. **Build the wheel**:\n   ```bash\n   python -m build --wheel\n   pip install dist/xctools_mcp_server-0.1.0-py3-none-any.whl\n   ```\n\n## Configuration\n\n### For Claude Desktop\n\nAdd to your `~/Library/Application Support/Claude/claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"xctools\": {\n      \"command\": \"xctools-mcp-server\",\n      \"args\": [],\n      \"env\": {}\n    }\n  }\n}\n```\n\nOr if using uvx:\n\n```json\n{\n  \"mcpServers\": {\n    \"xctools\": {\n      \"command\": \"uvx\",\n      \"args\": [\"xctools-mcp-server\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\n### For VS Code with MCP Extension\n\n1. **Install the MCP Extension** from the VS Code marketplace\n2. **Add server configuration** to your VS Code settings (`settings.json`):\n\n```json\n{\n  \"mcp.servers\": {\n    \"xctools\": {\n      \"command\": \"xctools-mcp-server\",\n      \"args\": [],\n      \"env\": {}\n    }\n  }\n}\n```\n\nOr if using uvx:\n\n```json\n{\n  \"mcp.servers\": {\n    \"xctools\": {\n      \"command\": \"uvx\",\n      \"args\": [\"xctools-mcp-server\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\n3. **Restart VS Code** to load the MCP server\n4. **Use the Command Palette** (`Cmd+Shift+P`) and search for \"MCP\" commands to interact with the Xcode development tools\n\n### For Other MCP Clients\n\nThe server runs on stdio, so you can invoke it directly:\n\n**With installed package:**\n```bash\nxctools-mcp-server\n```\n\n**With uvx:**\n```bash\nuvx xctools-mcp-server\n```\n\n## Features\n\n- **Complete Xcode toolchain access** through `xcrun`\n- **Project building and testing** with `xcodebuild`\n- **Performance analysis** using `xctrace` (Instruments)\n- **SDK and destination management**\n- **Comprehensive error handling** with detailed messages\n- **Cross-platform compatibility** (macOS with Xcode installed)\n\n## Available Tools\n\n### XCRUN Tools\n- **`xcrun_find_tool`** - Find the path to development tools (clang, swift, etc.)\n- **`xcrun_show_sdk_path`** - Show the path to SDKs\n- **`xcrun_show_sdk_version`** - Show SDK versions\n- **`xcrun_run_tool`** - Run any development tool via xcrun\n\n### XCODEBUILD Tools\n- **`xcodebuild_build`** - Build Xcode projects or workspaces\n- **`xcodebuild_test`** - Run tests for projects/workspaces\n- **`xcodebuild_archive`** - Archive projects for distribution\n- **`xcodebuild_list`** - List targets, schemes, and configurations\n- **`xcodebuild_show_sdks`** - List all available SDKs\n- **`xcodebuild_show_destinations`** - Show valid build destinations\n\n### XCTRACE Tools (Instruments)\n- **`xctrace_record`** - Record new Instruments traces\n- **`xctrace_import`** - Import supported files into trace format\n- **`xctrace_export`** - Export data from trace files\n- **`xctrace_list`** - List available devices, templates, or instruments\n- **`xctrace_symbolicate`** - Symbolicate traces with debug symbols\n\n## Usage Examples\n\n### Finding Development Tools\n\n```\n# Find the path to a specific tool\n\"Find the path to clang compiler\"\n\n# Show SDK path for iOS\n\"Show the path to the iOS SDK\"\n\n# Get SDK version information\n\"Show the version of the iOS SDK\"\n```\n\n### Building Projects\n\n```\n# Build an Xcode project\n\"Build the project MyApp.xcodeproj for iOS simulator\"\n\n# Run tests for a workspace\n\"Run tests for MyApp.xcworkspace on iPhone 15 Pro simulator\"\n\n# Archive for distribution\n\"Archive MyApp.xcworkspace for release\"\n\n# List project information\n\"List all schemes and targets in MyApp.xcodeproj\"\n```\n\n### Performance Analysis with Instruments\n\n```\n# Record a trace for Time Profiler\n\"Record a Time Profiler trace for MyApp on iPhone 15 Pro for 30 seconds\"\n\n# List available instruments\n\"List all available Instruments templates\"\n\n# Export trace data\n\"Export data from trace file to XML format\"\n\n# Import a file for analysis\n\"Import a .dtps file into Instruments trace format\"\n```\n\n### SDK and Destination Management\n\n```\n# List all available SDKs\n\"Show all available SDKs for building\"\n\n# Show build destinations\n\"List all available destinations for iOS builds\"\n\n# Run a tool via xcrun\n\"Run swift command with version flag via xcrun\"\n```\n\n## Error Handling\n\nThe server includes comprehensive error handling:\n\n- **Command failures**: Returns detailed error messages from xcrun, xcodebuild, and xctrace\n- **Missing Xcode**: Detects when Xcode Command Line Tools are not available\n- **Invalid parameters**: Validates tool arguments and provides helpful error messages\n- **Tool availability**: Checks for required tools before execution\n\n## Troubleshooting\n\n### Common Issues\n\n1. **\"xcrun: error: unable to find utility\"**\n   - Ensure Xcode Command Line Tools are installed: `xcode-select --install`\n   - Verify Xcode is properly configured: `xcode-select -p`\n\n2. **\"No developer directory found\"**\n   - Install Xcode from the Mac App Store\n   - Accept Xcode license: `sudo xcodebuild -license accept`\n\n3. **Permission errors**\n   - Ensure the user has necessary permissions to access Xcode tools\n   - Try running with proper macOS development permissions\n\n4. **Tool not found errors**\n   - Verify the specific tool is available in your Xcode installation\n   - Some tools may require specific Xcode versions or additional components\n\n## Requirements\n\n- **macOS**: Required (Xcode development tools are macOS-only)\n- **Xcode**: Xcode Command Line Tools or full Xcode installation\n- **Python**: 3.13 or higher\n- **MCP Client**: Claude Desktop, VS Code with MCP extension, or any MCP-compatible client\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n- **Invalid parameters**: Validates input parameters before execution\n- **File operations**: Handles temporary files for push notifications safely\n\n## Security Considerations\n\n- The server only exposes read and simulator management operations\n- No access to host file system beyond specified app paths\n- Push notification payloads are validated for structure\n- Privacy permission changes are explicit and logged\n\n## Development Notes\n\n- Built specifically for iOS development workflows\n- Optimized for common simulator management tasks\n- Structured output parsing for JSON responses\n- Support for both individual and batch operations\n- Compatible with Xcode 15+ simulator features\n"
}