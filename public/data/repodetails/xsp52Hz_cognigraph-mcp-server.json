{
  "mcp_name": "xsp52Hz/cognigraph-mcp-server",
  "mcp_description": "CogniGraph MCP Server generates mind maps, relationship graphs, and knowledge graphs using CLI tools and AI analysis, compatible with various local MCP clients.",
  "mcp_id": "xsp52Hz_cognigraph-mcp-server",
  "fetch_timestamp": "2025-06-23T09:34:24.531013Z",
  "github_url": "https://github.com/xsp52Hz/cognigraph-mcp-server",
  "repository": {
    "name": "cognigraph-mcp-server",
    "full_name": "xsp52Hz/cognigraph-mcp-server",
    "description": "use markmap-cli,mermaid-cli to create cognigraph",
    "html_url": "https://github.com/xsp52Hz/cognigraph-mcp-server",
    "created_at": "2025-04-28T17:21:06Z",
    "updated_at": "2025-04-30T19:12:45Z",
    "pushed_at": "2025-04-30T19:12:41Z",
    "size": 230,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "xsp52Hz",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/156112592?v=4",
      "html_url": "https://github.com/xsp52Hz"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 34468
    },
    "language_percentages": {
      "JavaScript": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "0.1.7"
  },
  "readme": "# CogniGraph MCP 服务器\n\n## 更新说明\n*   **v0.1.6:** 修复了通过 npx 启动时外部工具路径和依赖项的问题，提升了 npx 使用的稳定性。\n这是一个模型上下文协议 (MCP) 服务器，旨在使用外部命令行工具 (`markmap-cli` 和 `@mermaid-js/mermaid-cli`) 以及通过兼容 OpenAI 的 API 进行 AI 分析来生成思维导图、关系图谱和知识图谱。\n\n此服务器设计为与各种本地 MCP 客户端兼容，包括 Claude Desktop、Cherry Studio、DeepChat 和 HyperChat。\n\n## 功能\n\n提供可通过 MCP `use_mcp_tool` 命令访问的多个工具：\n\n1.  **`generate_mindmap`**:\n    *   从 Markdown 文本生成思维导图。\n    *   直接返回生成的 HTML 或 SVG 内容。\n    *   输入: `markdown` (字符串, 必需), `outputFormat` (枚举: \"html\" | \"svg\", 可选, 默认: \"html\")。\n\n2.  **`generate_and_save_mindmap`**:\n    *   从 Markdown 文本生成思维导图。\n    *   将结果 (HTML 或 SVG) 保存到文件。\n    *   输入: `markdown` (字符串, 必需), `outputFormat` (枚举: \"html\" | \"svg\", 可选, 默认: \"html\"), `outputDir` (字符串, 可选), `outputFilename` (字符串, 可选)。\n    *   默认保存位置由 `MINDMAP_DEFAULT_SAVE_DIR` 环境变量确定，如果未设置则回退到用户的主目录。\n\n3.  **`generate_relationship_graph`**:\n    *   从 Mermaid 语法的文本生成关系图谱。\n    *   将结果 (SVG 或 PNG) 保存到文件。\n    *   输入: `mermaid_text` (字符串, 必需), `outputFormat` (枚举: \"svg\" | \"png\", 可选, 默认: \"svg\"), `outputDir` (字符串, 可选), `outputFilename` (字符串, 可选)。\n    *   默认保存位置由 `MINDMAP_DEFAULT_SAVE_DIR` 环境变量确定，如果未设置则回退到用户的主目录。\n\n4.  **`generate_knowledge_graph`**:\n    *   使用 AI 模型（通过兼容 OpenAI 的 API）分析 Markdown 文本。\n    *   生成表示知识图谱的 Mermaid 代码。\n    *   将 Mermaid 代码渲染成图像 (SVG 或 PNG) 并保存到文件。\n    *   输入: `markdown` (字符串, 必需), `outputFormat` (枚举: \"svg\" | \"png\", 可选, 默认: \"svg\"), `outputDir` (字符串, 可选), `outputFilename` (字符串, 可选), `prompt` (字符串, 可选), `model` (字符串, 可选), `apiKey` (字符串, 可选), `baseURL` (字符串, 可选)。\n    *   需要配置 API 访问权限（见下文）。默认保存位置遵循与其他保存工具相同的逻辑。\n\n## 配置 (通过 MCP 设置 `env`)\n\n服务器依赖 MCP 客户端设置文件（例如 `mcp_settings.json`）中设置的环境变量来实现某些功能：\n\n*   **`MINDMAP_DEFAULT_SAVE_DIR`**: (可选) 为保存文件的工具（`generate_and_save_mindmap`, `generate_relationship_graph`, `generate_knowledge_graph`）设置默认输出目录（如果参数中未提供 `outputDir`）。\n    *   **如果未设置此变量：** 这些工具将默认保存文件到用户的主目录。`generate_mindmap` 工具（直接返回内容）不受影响。\n*   **`OPENAI_API_KEY`**: (运行 `generate_knowledge_graph` 时必需) 用于 OpenAI 或兼容服务的 API 密钥。\n    *   **如果未设置此变量（且未通过 `apiKey` 参数提供）：** `generate_knowledge_graph` 工具将失败。其他工具不受影响。\n*   **`OPENAI_BASE_URL`**: (可选) 兼容 OpenAI 的 API 端点的基础 URL。如果未设置，则默认为 OpenAI 官方 API。仅与 `generate_knowledge_graph` 相关。\n*   **`OPENAI_DEFAULT_MODEL`**: (可选) `generate_knowledge_graph` 使用的默认 AI 模型名称。如果未设置，则默认为 `gpt-3.5-turbo`。仅与 `generate_knowledge_graph` 相关。\n\n**重要配置说明：**\n*   `generate_mindmap` 工具（工具 1）不依赖任何这些环境变量。\n*   工具 2 和 3（`generate_and_save_mindmap`, `generate_relationship_graph`）仅依赖 `MINDMAP_DEFAULT_SAVE_DIR` 来确定*默认*保存位置。如果未设置，它们仍可工作（保存到主目录）。\n*   工具 4（`generate_knowledge_graph`）**必需** `OPENAI_API_KEY`（通过环境变量或参数）才能运行。它也会使用其他的 `OPENAI_*` 变量和 `MINDMAP_DEFAULT_SAVE_DIR`。\n\n`mcp_settings.json` 配置示例：\n\n```json\n{\n  \"mcpServers\": {\n    \"cognigraph-mcp-server\": { // 确保服务器名称匹配\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/cognigraph-mcp-server/build/index.js\" // 根据实际情况调整路径\n      ],\n      \"env\": {\n        \"MINDMAP_DEFAULT_SAVE_DIR\": \"C:\\\\Users\\\\YourUser\\\\Desktop\",\n        \"OPENAI_API_KEY\": \"sk-...\",\n        \"OPENAI_BASE_URL\": \"http://localhost:11434/v1\", // 本地 Ollama 示例\n        \"OPENAI_DEFAULT_MODEL\": \"llama3\"\n      },\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    }\n    // ... 其他服务器\n  }\n}\n```\n\n## 安装设置\n\n1.  克隆此仓库。\n2.  进入 `cognigraph-mcp-server` 目录。\n3.  如上所示，在你的 MCP 客户端设置文件中配置服务器，确保服务器名称（`cognigraph-mcp-server`）和 `args` 中的路径正确。提供必要的环境变量。\n4.  重启你的 MCP 客户端以加载服务器。\n\n## 使用方法\n\n通过你的 MCP 客户端的 `use_mcp_tool` 功能来使用这些工具。有关参数，请参阅上面的工具描述。\n\n以下是 Cherry Studio 的配置截图示例：\n\n![Cherry Studio 配置截图示例](images/Snipaste_2025-04-29_01-34-31.png)\n## 通过 npx 快速使用\n\n通过 npm 发布后，您可以使用 `npx` 命令快速启动此 MCP 服务器，无需手动克隆、安装依赖和构建。\n\n1.  **确保 Node.js 和 npm 已安装。**\n2.  **更新您的 MCP 客户端设置文件 (`mcp_settings.json` 或类似文件):**\n\n    将服务器配置中的 `command` 设置为 `npx`，并将 `args` 设置为 `[\"cognigraph-mcp-server\"]`。移除之前指向本地 `build/index.js` 的路径。\n\n    **配置示例:**\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"cognigraph-mcp-server\": { // 服务器名称保持不变\n          \"command\": \"npx\", // 使用 npx\n          \"args\": [\n            \"cognigraph-mcp-server\" // 包名\n          ],\n          \"env\": { // 环境变量保持不变\n            \"MINDMAP_DEFAULT_SAVE_DIR\": \"C:\\\\Users\\\\YourUser\\\\Desktop\",\n            \"OPENAI_API_KEY\": \"sk-...\",\n            \"OPENAI_BASE_URL\": \"http://localhost:11434/v1\",\n            \"OPENAI_DEFAULT_MODEL\": \"llama3\"\n          },\n          \"disabled\": false,\n          \"alwaysAllow\": []\n        }\n        // ... 其他服务器\n      }\n    }\n    ```\n3.  **重启您的 MCP 客户端。** 客户端现在将使用 npx 来下载（如果需要）并运行最新发布的 `cognigraph-mcp-server`。\n\n**注意:**\n*   使用 npx 时，服务器的环境变量（如 `OPENAI_API_KEY`）仍然需要通过 MCP 客户端的 `env` 设置来传递。\n*   如果遇到 `markmap` 或 `mmdc` 命令找不到的问题，您可能需要手动全局安装它们：`npm install -g markmap-cli @mermaid-js/mermaid-cli`。"
}