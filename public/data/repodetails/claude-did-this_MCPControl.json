{
  "mcp_name": "Windows Control",
  "mcp_description": "Windows automation MCP server providing mouse, keyboard, screen capture, clipboard, and window management capabilities using NutJS.",
  "mcp_id": "claude-did-this_MCPControl",
  "fetch_timestamp": "2025-06-23T09:28:15.893910Z",
  "github_url": "https://github.com/Cheffromspace/nutjs-windows-control",
  "repository": {
    "name": "MCPControl",
    "full_name": "claude-did-this/MCPControl",
    "description": "MCP server for Windows OS automation",
    "html_url": "https://github.com/claude-did-this/MCPControl",
    "created_at": "2024-12-03T17:40:27Z",
    "updated_at": "2025-06-23T05:25:48Z",
    "pushed_at": "2025-06-16T15:14:05Z",
    "size": 1319,
    "stargazers_count": 131,
    "watchers_count": 131,
    "forks_count": 21,
    "open_issues_count": 29,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [
      "ai",
      "claude",
      "computer-control",
      "computer-vision",
      "mcp",
      "os-automation",
      "windows"
    ],
    "default_branch": "main",
    "owner": {
      "login": "claude-did-this",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/212635186?v=4",
      "html_url": "https://github.com/claude-did-this"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": true,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 21,
    "subscribers_count": 3,
    "languages": {
      "TypeScript": 219635,
      "JavaScript": 34474,
      "HTML": 19488,
      "Shell": 9987
    },
    "language_percentages": {
      "TypeScript": 77.45,
      "JavaScript": 12.16,
      "HTML": 6.87,
      "Shell": 3.52
    },
    "pull_requests_count": 182,
    "contributors_count": 8,
    "latest_release": {
      "tag_name": "v0.2.0",
      "name": "v0.2.0 - SSE Officially Supported",
      "published_at": "2025-05-18T01:51:32Z",
      "body": "# Release Notes v0.2.0\n\n## üéâ Major Features\n\n### SSE Transport Now Officially Supported\n- Full implementation of Server-Sent Events (SSE) transport for network access\n- Built using the MCP SDK transport layer for improved reliability\n- HTTP/HTTPS server integration for secure connections\n- Configurable port settings (default: 3232)\n\n### HTTPS/TLS Support\n- Added secure TLS/SSL support for production deployments\n- New CLI flags: `--https`, `--cert`, and `--key`\n- Certificate validation for enhanced security\n- Meets MCP specification requirements for secure remote access\n\n### Improved Documentation\n- Added comprehensive Quick Start guide with build tools setup\n- Enhanced installation instructions for Windows users\n- Clear prerequisites including VC++ workload requirements\n- Better guidance for Python and Node.js installation\n\n## üöÄ Enhancements\n\n### Infrastructure Improvements\n- Optimized build process with npm ci and caching\n- Standardized default port (3232) across entire codebase\n- Removed unused dependencies (express, jimp, mcp-control)\n- Improved GitHub Actions with better error handling\n\n### Testing Framework\n- Added end-to-end testing suite for integration testing\n- Better test coverage for SSE transport features\n- Enhanced CI/CD pipeline reliability\n\n### Developer Experience\n- Simplified SSE implementation using SDK transport\n- Better error handling for client connections\n- Buffer management improvements\n- Platform-specific path fixes\n\n## üîß CLI Updates\n\nNew command line options:\n```bash\n# Run with SSE transport\nmcp-control --sse\n\n# Run with HTTPS/TLS\nmcp-control --sse --https --cert /path/to/cert.pem --key /path/to/key.pem\n\n# Custom port\nmcp-control --sse --port 3000\n```\n\n## üì¶ Dependency Updates\n\n- Updated `@modelcontextprotocol/sdk` to latest version\n- Bumped TypeScript ESLint packages to v8.32.0+\n- Updated `zod` to v3.24.4\n- Various dev dependency updates for security\n\n## üìö Documentation\n\n- Added SSE transport documentation\n- Updated README with release badges\n- Improved branch structure documentation\n- Added build tools setup instructions\n- Enhanced security guidelines\n\n## üêõ Bug Fixes\n\n- Fixed TypeScript errors related to HTTP server usage\n- Resolved client error handling in SSE transport\n- Corrected platform-specific path issues\n- Fixed npm ci error handling in build scripts\n\n## ‚ö†Ô∏è Breaking Changes\n\n- SSE is now the recommended transport method\n- HTTPS is required for production deployments per MCP spec\n- Some internal API changes for transport handling\n\n## üîê Security\n\n- Added proper TLS certificate validation\n- Implemented security options for HTTPS connections\n- Updated dependencies to address known vulnerabilities\n\n## üìà Migration Guide\n\nTo upgrade from v0.1.x to v0.2.0:\n\n1. Update your Claude client configuration to use SSE transport:\n```json\n{\n  \"mcpServers\": {\n    \"MCPControl\": {\n      \"command\": \"mcp-control\",\n      \"args\": [\"--transport\", \"sse\"]\n    }\n  }\n}\n```\n\n2. For production deployments, use HTTPS:\n```bash\nmcp-control --sse --https --cert cert.pem --key key.pem\n```\n\n3. Ensure you have the latest build tools installed as per the Quick Start guide\n\n## üë• Contributors\n\nSpecial thanks to all contributors who made this release possible, including:\n- @Cheffromspace for SSE transport and HTTPS implementation\n- @lwsinclair for adding the MseeP.ai security badge\n- All the community members who reported issues and provided feedback\n\n## üîÆ What's Next\n\n- Multi-monitor support improvements\n- Enhanced click accuracy at different resolutions\n- Additional transport options\n- Performance optimizations\n\n---\n\nThank you for using MCPControl! We're excited to bring you these improvements and look forward to your feedback.",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.2.0",
        "commit_sha": "df5f714f3cac13a7a1e3d8b3b24a31208637c116"
      },
      {
        "name": "v0.1.22",
        "commit_sha": "547a3f9406d2454a7c954da4f69e15aec7f4f241"
      },
      {
        "name": "v0.1.21",
        "commit_sha": "ab62aa1fb1215fb0d6b1a25e40d2cbb81c816523"
      },
      {
        "name": "v0.1.20",
        "commit_sha": "89c848e380788f4344cc6a27417992d42228027b"
      },
      {
        "name": "v0.1.19",
        "commit_sha": "28f56e16a20da83381a477d91ed2f206830d664f"
      },
      {
        "name": "v0.1.18",
        "commit_sha": "8787ed5e99eb41dbffbe8b6c2df8f996ae1d8309"
      },
      {
        "name": "last_commit_before_dependency_injection",
        "commit_sha": "1f910e60229c7d7241200a19ec164f7d07630b5c"
      }
    ],
    "latest_version": "v0.2.0",
    "package_json_version": "0.2.0"
  },
  "readme": "# MCPControl\n\n<p align=\"center\">\n  <img src=\"https://github.com/user-attachments/assets/1c577e56-7b8d-49e9-aaf5-b8550cc6cfc0\" alt=\"MCPControl Logo\" width=\"250\">\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/Cheffromspace/MCPControl/releases/tag/v0.2.0\">\n    <img src=\"https://img.shields.io/badge/release-v0.2.0-blue.svg\" alt=\"Latest Release\">\n  </a>\n</p>\n\nWindows control server for the [Model Context Protocol](https://modelcontextprotocol.io/), providing programmatic control over system operations including mouse, keyboard, window management, and screen capture functionality.\n\n> **Note**: This project currently supports Windows only.\n\n## üî• Why MCPControl?\n\nMCPControl bridges the gap between AI models and your desktop, enabling secure, programmatic control of:\n\n- üñ±Ô∏è **Mouse movements and clicks**\n- ‚å®Ô∏è **Keyboard input and shortcuts**\n- ü™ü **Window management**\n- üì∏ **Screen capture and analysis**\n- üìã **Clipboard operations**\n\n## üîå Quick Start\n\n### Prerequisites\n\n1. **Install Build Tools (including VC++ workload)**\n   ```powershell\n   # Run as Administrator - may take a few minutes to complete\n   winget install Microsoft.VisualStudio.2022.BuildTools --override \"--wait --passive --add Microsoft.VisualStudio.Workload.VCTools --includeRecommended\"\n   ```\n\n2. **Install Python** (if not already installed)\n   ```powershell\n   # Install Python (required for node-gyp)\n   winget install Python.Python.3.12\n   ```\n\n3. **Install Node.js**\n   ```powershell\n   # Install latest LTS version\n   winget install OpenJS.NodeJS\n   ```\n\n### Installation\n\n1. **Install MCPControl Package**\n   ```powershell\n   npm install -g mcp-control\n   ```\n\n### Configuration\n\nMCPControl works best in a **virtual machine at 1280x720 resolution** for optimal click accuracy.\n\nConfigure your Claude client to connect to MCPControl via SSE transport:\n\n#### Option 1: Direct SSE Connection\n\nFor connecting to an MCPControl server running on a VM or remote machine:\n\n```json\n{\n  \"mcpServers\": {\n    \"MCPControl\": {\n      \"transport\": \"sse\",\n      \"url\": \"http://192.168.1.100:3232/mcp\"\n    }\n  }\n}\n```\n\nReplace `192.168.1.100:3232` with your server's IP address and port.\n\n#### Option 2: Local Launch with SSE\n\nTo launch MCPControl locally with SSE transport:\n\n```json\n{\n  \"mcpServers\": {\n    \"MCPControl\": {\n      \"command\": \"mcp-control\",\n      \"args\": [\"--sse\"]\n    }\n  }\n}\n```\n\n### Starting the Server\n\nFirst, start the MCPControl server on your VM or local machine:\n\n```bash\nmcp-control --sse\n```\n\nThe server will display:\n- Available network interfaces and their IP addresses\n- The port number (default: 3232)\n- Connection status messages\n\n### VM Setup Example\n\n1. **Start your Windows VM** with 1280x720 resolution\n2. **Install MCPControl** on the VM:\n   ```bash\n   npm install -g mcp-control\n   ```\n3. **Run the server** with SSE transport:\n   ```bash\n   mcp-control --sse\n   ```\n4. **Note the VM's IP address** (e.g., `192.168.1.100`)\n5. **Configure Claude** with the SSE URL:\n   ```json\n   {\n     \"mcpServers\": {\n       \"MCPControl\": {\n         \"transport\": \"sse\",\n         \"url\": \"http://192.168.1.100:3232/mcp\"\n       }\n     }\n   }\n   ```\n6. **Restart Claude** and MCPControl will appear in your MCP menu!\n\n## üîß CLI Options\n\nMCPControl supports several command-line flags for advanced configurations:\n\n```bash\n# Run with SSE transport on default port (3232)\nmcp-control --sse\n\n# Run with SSE on custom port\nmcp-control --sse --port 3000\n\n# Run with HTTPS/TLS (required for production deployments)\nmcp-control --sse --https --cert /path/to/cert.pem --key /path/to/key.pem\n\n# Run with HTTPS on custom port\nmcp-control --sse --https --port 8443 --cert /path/to/cert.pem --key /path/to/key.pem\n```\n\n### Command Line Arguments\n\n- `--sse` - Enable SSE (Server-Sent Events) transport for network access\n- `--port [number]` - Specify custom port (default: 3232)\n- `--https` - Enable HTTPS/TLS (required for remote deployments per MCP spec)\n- `--cert [path]` - Path to TLS certificate file (required with --https)\n- `--key [path]` - Path to TLS private key file (required with --https)\n\n### Security Note\n\nAccording to the MCP specification, HTTPS is **mandatory** for all HTTP-based transports in production environments. When deploying MCPControl for remote access, always use the `--https` flag with valid TLS certificates.\n\n## üöÄ Popular Use Cases\n\n### Assisted Automation\n\n- **Application Testing**: Delegate repetitive UI testing to Claude, allowing AI to navigate through applications and report issues\n- **Workflow Automation**: Have Claude operate applications on your behalf, handling repetitive tasks while you focus on creative work\n- **Form Filling**: Let Claude handle data entry tasks with your supervision\n\n### AI Experimentation\n\n- **AI Gaming**: Watch Claude learn to play simple games through visual feedback\n- **Visual Reasoning**: Test Claude's ability to navigate visual interfaces and solve visual puzzles\n- **Human-AI Collaboration**: Explore new interaction paradigms where Claude can see your screen and help with complex tasks\n\n### Development and Testing\n\n- **Cross-Application Integration**: Bridge applications that don't normally communicate\n- **UI Testing Framework**: Create robust testing scenarios with visual validation\n- **Demo Creation**: Automate the creation of product demonstrations\n\n## ‚ö†Ô∏è IMPORTANT DISCLAIMER\n\n**THIS SOFTWARE IS EXPERIMENTAL AND POTENTIALLY DANGEROUS**\n\nBy using this software, you acknowledge and accept that:\n\n- Giving AI models direct control over your computer through this tool is inherently risky\n- This software can control your mouse, keyboard, and other system functions which could potentially cause unintended consequences\n- You are using this software entirely at your own risk\n- The creators and contributors of this project accept NO responsibility for any damage, data loss, or other consequences that may arise from using this software\n- This tool should only be used in controlled environments with appropriate safety measures in place\n\n**USE AT YOUR OWN RISK**\n\n## üåü Features\n\n<table>\n  <tr>\n    <td>\n      <h3>ü™ü Window Management</h3>\n      <ul>\n        <li>List all windows</li>\n        <li>Get active window info</li>\n        <li>Focus, resize & reposition</li>\n      </ul>\n    </td>\n    <td>\n      <h3>üñ±Ô∏è Mouse Control</h3>\n      <ul>\n        <li>Precision movement</li>\n        <li>Click & drag operations</li>\n        <li>Scrolling & position tracking</li>\n      </ul>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <h3>‚å®Ô∏è Keyboard Control</h3>\n      <ul>\n        <li>Text input & key combos</li>\n        <li>Key press/release control</li>\n        <li>Hold key functionality</li>\n      </ul>\n    </td>\n    <td>\n      <h3>üì∏ Screen Operations</h3>\n      <ul>\n        <li>High-quality screenshots</li>\n        <li>Screen size detection</li>\n        <li>Active window capture</li>\n      </ul>\n    </td>\n  </tr>\n</table>\n\n## üîß Automation Providers\n\nMCPControl supports multiple automation providers for different use cases:\n\n- **keysender** (default) - Native Windows automation with high reliability\n- **powershell** - Windows PowerShell-based automation for simpler operations\n- **autohotkey** - AutoHotkey v2 scripting for advanced automation needs\n\n### Provider Configuration\n\nYou can configure the automation provider using environment variables:\n\n```bash\n# Use a specific provider for all operations\nexport AUTOMATION_PROVIDER=autohotkey\n\n# Configure AutoHotkey executable path (if not in PATH)\nexport AUTOHOTKEY_PATH=\"C:\\Program Files\\AutoHotkey\\v2\\AutoHotkey.exe\"\n```\n\nOr use modular configuration for specific operations:\n\n```bash\n# Mix and match providers for different operations\nexport AUTOMATION_KEYBOARD_PROVIDER=autohotkey\nexport AUTOMATION_MOUSE_PROVIDER=keysender\nexport AUTOMATION_SCREEN_PROVIDER=keysender  \nexport AUTOMATION_CLIPBOARD_PROVIDER=powershell\n```\n\nSee provider-specific documentation:\n- [AutoHotkey Provider](src/providers/autohotkey/README.md)\n\n## üõ†Ô∏è Development Setup\n\nIf you're interested in contributing or building from source, please see [CONTRIBUTING.md](CONTRIBUTING.md) for detailed instructions.\n\n### Development Requirements\n\nTo build this project for development, you'll need:\n\n1. Windows operating system (required for the keysender dependency)\n2. Node.js 18 or later (install using the official Windows installer which includes build tools)\n3. npm package manager\n4. Native build tools:\n   - node-gyp: `npm install -g node-gyp`\n   - cmake-js: `npm install -g cmake-js`\n\nThe keysender dependency relies on Windows-specific native modules that require these build tools.\n\n## üìã Project Structure\n\n- `/src`\n  - `/handlers` - Request handlers and tool management\n  - `/tools` - Core functionality implementations\n  - `/types` - TypeScript type definitions\n  - `index.ts` - Main application entry point\n\n## üîñ Repository Branches\n\n- **`main`** - Main development branch with the latest features and changes\n- **`release`** - Stable release branch that mirrors the latest stable tag (currently v0.2.0)\n\n### Version Installation\n\nYou can install specific versions of MCPControl using npm:\n\n```bash\n# Install the latest stable release (from release branch)\nnpm install mcp-control\n\n# Install a specific version\nnpm install mcp-control@0.1.22\n```\n\n## üìö Dependencies\n\n- [@modelcontextprotocol/sdk](https://www.npmjs.com/package/@modelcontextprotocol/sdk) - MCP SDK for protocol implementation\n- [keysender](https://www.npmjs.com/package/keysender) - Windows-only UI automation library\n- [clipboardy](https://www.npmjs.com/package/clipboardy) - Clipboard handling\n- [sharp](https://www.npmjs.com/package/sharp) - Image processing\n- [uuid](https://www.npmjs.com/package/uuid) - UUID generation\n\n## üöß Known Limitations\n\n- Window minimize/restore operations are currently unsupported\n- Multiple screen functions may not work as expected, depending on setup\n- The get_screenshot utility does not work with the VS Code Extension Cline. See [GitHub issue #1865](https://github.com/cline/cline/issues/1865)\n- Some operations may require elevated permissions depending on the target application\n- Only Windows is supported\n- MCPControl works best at 1280x720 resolution, single screen. Click accuracy is optimized for this resolution. We're working on an offset/scaling bug and looking for testers or help creating testing tools\n\n## üë• Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## ‚öñÔ∏è License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## üìñ References\n\n- [Model Context Protocol Documentation](https://modelcontextprotocol.github.io/)\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/cheffromspace-mcpcontrol-badge.png)](https://mseep.ai/app/cheffromspace-mcpcontrol)\n\n"
}