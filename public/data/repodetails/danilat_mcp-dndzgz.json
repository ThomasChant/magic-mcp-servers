{
  "mcp_name": "danilat/mcp-dndzgz",
  "mcp_description": "Provides real-time information on Zaragoza's public transport systems, including trams, buses, and Bizi bike services.",
  "mcp_id": "danilat_mcp-dndzgz",
  "fetch_timestamp": "2025-06-23T02:27:09.521162Z",
  "github_url": "https://github.com/danilat/mcp-dndzgz",
  "repository": {
    "name": "mcp-dndzgz",
    "full_name": "danilat/mcp-dndzgz",
    "description": "A MCP Server to know about Zaragoza bus, tram and bizi services in realtime",
    "html_url": "https://github.com/danilat/mcp-dndzgz",
    "created_at": "2025-04-16T14:57:41Z",
    "updated_at": "2025-06-08T15:30:55Z",
    "pushed_at": "2025-06-08T15:30:51Z",
    "size": 163,
    "stargazers_count": 9,
    "watchers_count": 9,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "danilat",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/22763?v=4",
      "html_url": "https://github.com/danilat"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 10425
    },
    "language_percentages": {
      "JavaScript": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "1.1.0"
  },
  "readme": "# DNDzgz MCP Server\n\nThis is an MCP (Model Context Protocol) server that provides information about the Zaragoza tram system, including real-time tram arrival estimations and station information using the [DNDzgz](https://www.dndzgz.com/) API.\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/danilat/mcp-dndzgz.git\ncd mcp-dndzgz\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n## Running the Application\n\nAdd a the environment variable with a valid google maps api key and run it with the http transport\n```bash\nGOOGLE_MAPS_API_KEY=your-api-key npm start:http\n```\nThe server will start you should configure yout MCP client to connect.\n\nOr start the server using stdio trasport:\nConfigure in your MCP client using `npx`, for example:\n```json\n{\n    \"mcpServers\": {\n      \"dndzgz\": {\n        \"command\": \"npx @dndzgz/mcp\",\n        \"env\": {\n          \"GOOGLE_MAPS_API_KEY\": \"your-api-key\"\n        }\n      }\n    }\n}\n```\nThe server will start and connect to the MCP server.\n\n## Available Tools\n\nThe server provides the following tools:\n\n1. `zaragoza-tram-estimations`: Get real-time arrival estimations for a specific tram station\n   - Parameters: \n     - `station` (number): ID of the tram station\n   - Returns: JSON with estimated arrival times for both directions\n\n2. `zaragoza-tram-stations`: Get a list of all tram stations in Zaragoza\n   - Parameters: \n     - `latitude` (number): Latitude to sort stations by proximity\n     - `longitude` (number): Longitude to sort stations by proximity\n   - Returns: JSON with station information including location, name, and ID\n\n3. `zaragoza-bus-stops`: Get all bus stops in Zaragoza\n   - Parameters: \n     - `latitude` (number): Latitude to sort stops by proximity\n     - `longitude` (number): Longitude to sort stops by proximity\n   - Returns: JSON with bus stop locations, names, IDs, and lines\n\n4. `zaragoza-bus-estimations`: Get real-time arrival estimations for a specific bus stop\n   - Parameters: \n     - `stop` (number): ID of the bus stop\n   - Returns: JSON with estimated arrival times for each line serving that stop\n\n5. `zaragoza-bizi-stations`: Get all Bizi stations in Zaragoza (public bicycle rental service)\n   - Parameters: \n     - `latitude` (number): Latitude to sort stations by proximity\n     - `longitude` (number): Longitude to sort stations by proximity\n   - Returns: JSON with Bizi station locations, names, and IDs\n\n6. `zaragoza-bizi-estimations`: Get real-time availability of bikes and free slots in a Bizi station\n   - Parameters: \n     - `station` (number): ID of the Bizi station\n   - Returns: JSON with bikes and parking slot availability\n\n7. `google-maps-link`: Get a Google Maps link for a specific location\n   - Parameters: \n     - `latitude` (number): Latitude of the location\n     - `longitude` (number): Longitude of the location\n   - Returns: Google Maps URL showing the specified location\n\n8. `geolocation-from-address`: Get the geolocation (latitude and longitude) from an address and the formatted address that was found\n   - Parameters:\n     - `address` (string): The address to geolocate (e.g., \"Plaza de San Francisco, Zaragoza, Spain\")\n   - Returns: JSON with latitude, longitude, confidence level, and formatted address\n\n## Dependencies\n\n- @modelcontextprotocol/sdk: ^1.9.0\n\n\n## Example\n\nThere is an screenshot with example using Claude Desktop\n\n![Screenshot of an example using Claude Desktop, asking in spanish to get the tram estimations for Romareda station](./docs/sample.png)"
}