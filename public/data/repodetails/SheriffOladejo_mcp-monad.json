{
  "mcp_name": "SheriffOladejo/mcp-monad",
  "mcp_description": "Facilitates querying MON token balances on the Monad testnet via an MCP server.",
  "mcp_id": "SheriffOladejo_mcp-monad",
  "fetch_timestamp": "2025-06-23T08:23:20.909228Z",
  "github_url": "https://github.com/SheriffOladejo/mcp-monad",
  "repository": {
    "name": "mcp-monad",
    "full_name": "SheriffOladejo/mcp-monad",
    "description": null,
    "html_url": "https://github.com/SheriffOladejo/mcp-monad",
    "created_at": "2025-04-28T07:05:54Z",
    "updated_at": "2025-04-28T07:29:47Z",
    "pushed_at": "2025-04-28T07:29:37Z",
    "size": 45433,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "SheriffOladejo",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/50199482?v=4",
      "html_url": "https://github.com/SheriffOladejo"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 4983
    },
    "language_percentages": {
      "TypeScript": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 4,
    "package_json_version": "1.0.0"
  },
  "readme": "# Monad MCP Tutorial\r\n\r\nThis project demonstrates how to create a MCP server that interacts with the Monad testnet. The MCP server provides a tool for checking MON token balances on the Monad testnet.\r\n\r\n## What is MCP?\r\n\r\nThe Model Context Protocol (MCP) is a standard that allows AI models to interact with external tools and services. \r\n\r\nIn this tutorial, we're creating an MCP server that allows MCP Client (Claude Desktop) to query Monad testnet to check MON balance of an account.\r\n\r\n## Prerequisites\r\n\r\n- Node.js (v16 or later)\r\n- `npm` or `yarn`\r\n- Claude Desktop\r\n\r\n## Getting Started\r\n\r\n1. Clone this repository\r\n\r\n```shell\r\ngit clone https://github.com/monad-developers/monad-mcp-tutorial.git\r\n```\r\n\r\n2. Install dependencies:\r\n\r\n```\r\nnpm install\r\n```\r\n\r\n## Building the MCP server\r\n\r\nMonad Testnet related configuration is already added to `index.ts` in the `src` folder.\r\n\r\n### Define the server instance\r\n\r\n```ts\r\n// Create a new MCP server instance\r\nconst server = new McpServer({\r\n  name: \"monad-testnet\",\r\n  version: \"0.0.1\",\r\n  // Array of supported tool names that clients can call\r\n  capabilities: [\"get-mon-balance\"]\r\n});\r\n```\r\n\r\n### Defining the MON balance tool\r\n\r\nBelow is the scaffold of the `get-mon-balance` tool:\r\n\r\n```ts\r\nserver.tool(\r\n    // Tool ID \r\n    \"get-mon-balance\",\r\n    // Description of what the tool does\r\n    \"Get MON balance for an address on Monad testnet\",\r\n    // Input schema\r\n    {\r\n        address: z.string().describe(\"Monad testnet address to check balance for\"),\r\n    },\r\n    // Tool implementation\r\n    async ({ address }) => {\r\n        // code to check MON balance\r\n    }\r\n);\r\n```\r\n\r\nLet's add the MON balance check implementation to the tool:\r\n\r\n```ts\r\nserver.tool(\r\n    // Tool ID \r\n    \"get-mon-balance\",\r\n    // Description of what the tool does\r\n    \"Get MON balance for an address on Monad testnet\",\r\n    // Input schema\r\n    {\r\n        address: z.string().describe(\"Monad testnet address to check balance for\"),\r\n    },\r\n    // Tool implementation\r\n    async ({ address }) => {\r\n        try {\r\n            // Check MON balance for the input address\r\n            const balance = await publicClient.getBalance({\r\n                address: address as `0x${string}`,\r\n            });\r\n\r\n            // Return a human friendly message indicating the balance.\r\n            return {\r\n                content: [\r\n                    {\r\n                        type: \"text\",\r\n                        text: `Balance for ${address}: ${formatUnits(balance, 18)} MON`,\r\n                    },\r\n                ],\r\n            };\r\n        } catch (error) {\r\n            // If the balance check process fails, return a graceful message back to the MCP client indicating a failure.\r\n            return {\r\n                content: [\r\n                    {\r\n                        type: \"text\",\r\n                        text: `Failed to retrieve balance for address: ${address}. Error: ${\r\n                        error instanceof Error ? error.message : String(error)\r\n                        }`,\r\n                    },\r\n                ],\r\n            };\r\n        }\r\n    }\r\n);\r\n```\r\n\r\n### Initialize the transport and server from the `main` function\r\n\r\n```ts\r\nasync function main() {\r\n    // Create a transport layer using standard input/output\r\n    const transport = new StdioServerTransport();\r\n    \r\n    // Connect the server to the transport\r\n    await server.connect(transport);\r\n    \r\n    console.error(\"Monad testnet MCP Server running on stdio\");\r\n}\r\n```\r\n\r\n### Build the project\r\n\r\n```shell\r\nnpm run build\r\n```\r\n\r\nThe server is now ready to use!\r\n\r\n### Adding the MCP server to Claude Desktop\r\n\r\n1. Open \"Claude Desktop\"\r\n\r\n![claude desktop](/static/1.png)\r\n\r\n2. Open Settings\r\n\r\nClaude > Settings > Developer\r\n\r\n![claude settings](/static/claude_settings.gif)\r\n\r\n3. Open `claude_desktop_config.json` \r\n\r\n![claude config](/static/config.gif)\r\n\r\n4. Add details about the MCP server and save the file.\r\n\r\n```json\r\n{\r\n  \"mcpServers\": {\r\n    ...\r\n    \"monad-mcp\": {\r\n      \"command\": \"node\",\r\n      \"args\": [\r\n        \"/<path-to-project>/build/index.js\"\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n5. Restart \"Claude Desktop\"\r\n\r\n### Using the MCP server\r\n\r\nHere's the final result\r\n\r\n![final result](/static/final_result.gif)\r\n\r\n## Further Resources\r\n\r\n- [Model Context Protocol Documentation](https://modelcontextprotocol.io/introduction)\r\n- [Monad Documentation](https://docs.monad.xyz/)\r\n- [Viem Documentation](https://viem.sh/)\r\n\r\n#\u0000 \u0000m\u0000c\u0000p\u0000-\u0000m\u0000o\u0000n\u0000a\u0000d\u0000\r\u0000\n\u0000#\u0000 \u0000m\u0000c\u0000p\u0000-\u0000m\u0000o\u0000n\u0000a\u0000d\u0000\r\u0000\n\u0000#\u0000 \u0000m\u0000c\u0000p\u0000-\u0000m\u0000o\u0000n\u0000a\u0000d\u0000\r\u0000\n\u0000"
}