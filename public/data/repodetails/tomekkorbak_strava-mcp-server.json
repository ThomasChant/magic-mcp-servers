{
  "mcp_name": "tomekkorbak/strava-mcp-server",
  "mcp_description": "Access Strava athlete activities data via a Model Context Protocol server, enabling language models to query recent and historical activity details.",
  "mcp_id": "tomekkorbak_strava-mcp-server",
  "fetch_timestamp": "2025-06-23T09:00:40.443231Z",
  "github_url": "https://github.com/tomekkorbak/strava-mcp-server",
  "repository": {
    "name": "strava-mcp-server",
    "full_name": "tomekkorbak/strava-mcp-server",
    "description": null,
    "html_url": "https://github.com/tomekkorbak/strava-mcp-server",
    "created_at": "2025-02-28T15:47:47Z",
    "updated_at": "2025-06-05T15:38:41Z",
    "pushed_at": "2025-06-05T15:38:38Z",
    "size": 40,
    "stargazers_count": 13,
    "watchers_count": 13,
    "forks_count": 7,
    "open_issues_count": 4,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "tomekkorbak",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/9259131?v=4",
      "html_url": "https://github.com/tomekkorbak"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 7,
    "subscribers_count": 1,
    "languages": {
      "Python": 15671
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 5,
    "contributors_count": 1
  },
  "readme": "# Strava MCP Server\n\n![Python Package](https://github.com/tomekkorbak/strava-mcp-server/workflows/Python%20Package/badge.svg)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Python 3.10](https://img.shields.io/badge/python-3.10-blue.svg)](https://www.python.org/downloads/release/python-3100/)\n[![Install MCP Server](https://cursor.com/deeplink/mcp-install-dark.svg)](https://cursor.com/install-mcp?name=strava&config=eyJjb21tYW5kIjoidXZ4IHN0cmF2YS1tY3Atc2VydmVyIiwiZW52Ijp7IlNUUkFWQV9DTElFTlRfSUQiOiJZT1VSX0NMSUVOVF9JRCIsIlNUUkFWQV9DTElFTlRfU0VDUkVUIjoiWU9VUl9DTElFTlRfU0VDUkVUIiwiU1RSQVZBX1JFRlJFU0hfVE9LRU4iOiJZT1VSX1JFRlJFU0hfVE9LRU4ifX0%3D)\n\nA [Model Context Protocol](https://modelcontextprotocol.io/introduction) (MCP) server that provides access to the Strava API. It allows language models to query athlete activities data from the Strava API.\n\n## Available Tools\n\nThe server exposes the following tools:\n\n### Activities Queries\n\n- `get_activities(limit: int = 10)`: Get the authenticated athlete's recent activities\n- `get_activities_by_date_range(start_date: str, end_date: str, limit: int = 30)`: Get activities within a specific date range\n- `get_activity_by_id(activity_id: int)`: Get detailed information about a specific activity\n- `get_recent_activities(days: int = 7, limit: int = 10)`: Get activities from the past X days\n\nDates should be provided in ISO format (`YYYY-MM-DD`).\n\n## Activity Data Format\n\nThe server returns activity data with consistent field names and units:\n\n| Field | Description | Unit |\n|-------|-------------|------|\n| `name` | Activity name | - |\n| `sport_type` | Type of sport | - |\n| `start_date` | Start date and time | ISO 8601 |\n| `distance_metres` | Distance | meters |\n| `elapsed_time_seconds` | Total elapsed time | seconds |\n| `moving_time_seconds` | Moving time | seconds |\n| `average_speed_mps` | Average speed | meters per second |\n| `max_speed_mps` | Maximum speed | meters per second |\n| `total_elevation_gain_metres` | Total elevation gain | meters |\n| `elev_high_metres` | Highest elevation | meters |\n| `elev_low_metres` | Lowest elevation | meters |\n| `calories` | Calories burned | kcal |\n| `start_latlng` | Start coordinates | [lat, lng] |\n| `end_latlng` | End coordinates | [lat, lng] |\n\n## Authentication\n\nTo use this server, you'll need to authenticate with the Strava API. Follow these steps:\n\n1. Create a Strava API application:\n   - Go to [Strava API Settings](https://www.strava.com/settings/api)\n   - Create an application to get your Client ID and Client Secret\n   - Set the Authorization Callback Domain to `localhost`\n\n2. Get your refresh token:\n   - Use the included `get_strava_token.py` script:\n   ```bash\n   python get_strava_token.py\n   ```\n   - Follow the prompts to authorize your application\n   - The script will save your tokens to a `.env` file\n\n3. Set environment variables:\n   The server requires the following environment variables:\n   - `STRAVA_CLIENT_ID`: Your Strava API Client ID\n   - `STRAVA_CLIENT_SECRET`: Your Strava API Client Secret\n   - `STRAVA_REFRESH_TOKEN`: Your Strava API Refresh Token\n\n## Usage\n\n### Claude for Desktop\n\nUpdate your `claude_desktop_config.json` (located in `~/Library/Application\\ Support/Claude/claude_desktop_config.json` on macOS and `%APPDATA%/Claude/claude_desktop_config.json` on Windows) to include the following:\n\n```json\n{\n    \"mcpServers\": {\n        \"strava\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"strava-mcp-server\"\n            ],\n            \"env\": {\n                \"STRAVA_CLIENT_ID\": \"YOUR_CLIENT_ID\",\n                \"STRAVA_CLIENT_SECRET\": \"YOUR_CLIENT_SECRET\",\n                \"STRAVA_REFRESH_TOKEN\": \"YOUR_REFRESH_TOKEN\"\n            }\n        }\n    }\n}\n```\n\n### Claude Web\n\nFor Claude Web, you can run the server locally and connect it using the MCP extension.\n\n## Example Queries\n\nOnce connected, you can ask Claude questions like:\n\n- \"What are my recent activities?\"\n- \"Show me my activities from last week\"\n- \"What was my longest run in the past month?\"\n- \"Get details about my latest cycling activity\"\n\n## Error Handling\n\nThe server provides human-readable error messages for common issues:\n\n- Invalid date formats\n- API authentication errors\n- Network connectivity problems\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n"
}