{
  "mcp_name": "joaomj/deep-search-mcp",
  "mcp_description": "Facilitates deep web searches using the LinkUp API, offering structured results and customizable search parameters.",
  "mcp_id": "joaomj_deep-search-mcp",
  "fetch_timestamp": "2025-06-23T05:29:12.025332Z",
  "github_url": "https://github.com/joaomj/deep-search-mcp",
  "repository": {
    "name": "deep-search-mcp",
    "full_name": "joaomj/deep-search-mcp",
    "description": "A deep web search MCP using LinkUp API.",
    "html_url": "https://github.com/joaomj/deep-search-mcp",
    "created_at": "2025-04-25T17:01:12Z",
    "updated_at": "2025-04-28T03:20:17Z",
    "pushed_at": "2025-04-25T20:36:56Z",
    "size": 10,
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": null,
    "topics": [
      "cline",
      "deep-search",
      "mcp-server",
      "perplexity-ai",
      "typescript"
    ],
    "default_branch": "master",
    "owner": {
      "login": "joaomj",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/87662918?v=4",
      "html_url": "https://github.com/joaomj"
    },
    "has_issues": true,
    "has_projects": false,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 2863
    },
    "language_percentages": {
      "JavaScript": 100
    },
    "pull_requests_count": 2,
    "contributors_count": 2,
    "package_json_version": "0.1.0"
  },
  "readme": "# Deep Search MCP Server\n\nA deep web search MCP server using LinkUp API.\n\nThis is a TypeScript-based MCP server that implements deep web search capabilities. It demonstrates core MCP concepts by providing:\n\n- Tools for performing deep web searches\n- Structured results from LinkUp API\n\n## Features\n\n### Tools\n- `deep_search` - Perform deep web searches\n  - Takes query string as required parameter\n  - Optional max_results parameter (default: 5)\n  - Returns structured search results\n\n## Setup\n\n1. Install dependencies:\n```bash\nnpm install\n```\n\n2. Build the server:\n```bash\nnpm run build\n```\n\n3. Configure the MCP server in your settings:\n```json\n{\n  \"mcpServers\": {\n    \"deep-search-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\"/home/joao/Cline/MCP/linkup-mcp-server/build/index.js\"],\n      \"env\": {\n        \"LINKUP_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n```\n\nThe API key can be obtained from LinkUp API service.\n\n## Running\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\nFor production:\n```bash\nnpm start\n```\n\n## Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector):\n\n```bash\nnpm run inspector\n```\n\n## NEXT STEPS\n\nFuture improvements to consider:\n\n1. Add caching for search results to improve performance\n2. Implement pagination for large result sets\n3. Add filtering options for search results\n4. Support different output formats (markdown, HTML)\n5. Add rate limiting and request throttling\n6. Implement authentication for API access\n7. Add more search parameters (date ranges, domains, etc.)\n8. Improve error handling and user feedback\n9. Add logging for debugging and monitoring\n10. Implement health check endpoints\n"
}