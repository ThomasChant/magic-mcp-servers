{
  "mcp_name": "SDGLBL/mcp-claude-code",
  "mcp_description": "üêç üè† - An implementation of Claude Code capabilities using MCP, enabling AI code understanding, modification, and project analysis with comprehensive tool support.",
  "mcp_id": "SDGLBL_mcp-claude-code",
  "fetch_timestamp": "2025-06-23T08:14:39.533935Z",
  "github_url": "https://github.com/SDGLBL/mcp-claude-code",
  "repository": {
    "name": "mcp-claude-code",
    "full_name": "SDGLBL/mcp-claude-code",
    "description": "MCP implementation of Claude Code capabilities and more",
    "html_url": "https://github.com/SDGLBL/mcp-claude-code",
    "created_at": "2025-03-18T10:55:31Z",
    "updated_at": "2025-06-21T19:25:40Z",
    "pushed_at": "2025-06-11T01:41:16Z",
    "size": 15347,
    "stargazers_count": 191,
    "watchers_count": 191,
    "forks_count": 17,
    "open_issues_count": 6,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "claude",
      "claude-code",
      "mcp",
      "mcp-server"
    ],
    "default_branch": "master",
    "owner": {
      "login": "SDGLBL",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/41188874?v=4",
      "html_url": "https://github.com/SDGLBL"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 17,
    "subscribers_count": 1,
    "languages": {
      "Python": 790415,
      "Makefile": 2344
    },
    "language_percentages": {
      "Python": 99.7,
      "Makefile": 0.3
    },
    "pull_requests_count": 6,
    "contributors_count": 4,
    "latest_release": {
      "tag_name": "v0.4.0",
      "name": "MCP Claude Code v0.4.0",
      "published_at": "2025-06-06T16:25:45Z",
      "body": "\n### Added\n- **Persistent Shell Session Support** (32769b5)\n  - New BashSession class for managing persistent shell environments with tmux\n  - SessionManager and SessionStorage for comprehensive session lifecycle management\n  - Session-based execution mode with environment persistence and working directory tracking\n  - Support for interactive commands with `is_input` and `blocking` parameters\n  - Command history tracking and session isolation\n- **Resource Management and Cleanup** (4c4a59d)\n  - Background cleanup thread for periodic session expiration checks every 2 minutes\n  - Signal handlers for graceful shutdown (SIGTERM, SIGINT)\n  - Atexit handler for cleanup during normal termination\n  - Reduced default session TTL from 30 to 5 minutes for aggressive cleanup\n  - Session storage metrics and logging for cleanup operations\n- **Enhanced Cross-Platform Support** (184c2f7)\n  - New CommandExecutor class for Windows-compatible shell command execution\n  - Automatic platform detection with tmux availability checking\n  - Support for multiple shell types (cmd, powershell, wsl) on Windows\n  - Platform-specific command formatting and execution logic\n- **Project System Prompt Enhancements** (363f06f)\n  - Factory function `create_project_system_prompt` for generating project-specific prompts\n  - Manual project system prompt registration for on-demand access\n  - Improved code organization and flexibility in prompt generation\n\n### Changed\n- **BREAKING CHANGE: Shell Execution Architecture** (bf3233a)\n  - Replaced CommandExecutor with BashSessionExecutor for all shell operations\n  - All shell tools now use persistent sessions by default\n  - Updated run_command tool interface with new session parameters\n  - CommandResult now includes additional execution metadata\n- **BREAKING CHANGE: Tool Parameter Handling** (bc52019)\n  - Migrated all tool parameters to TypedDict and Unpack for improved type safety\n  - Consolidated parameter type definitions at module level\n  - Enhanced IDE support and runtime type checking\n  - Removed redundant parameter validation in favor of Pydantic handling\n- **Session ID Handling Improvements** (4263df1, 154a817)\n  - Changed default session_id from None to empty string for consistency\n  - Simplified session_id validation logic\n  - Removed PROMPT_TEST echo command from session initialization\n  - More predictable session handling behavior\n\n### Removed\n- **Metadata System Simplification** (2cae74e)\n  - Removed complex PS1 metadata system for command tracking\n  - Eliminated CmdOutputMetadata class and PS1 prompt generation/parsing\n  - Simplified CommandResult class to focus on core output\n  - Improved reliability across different shell environments\n- **DocumentContext Removal** (db23971)\n  - Removed DocumentContext class and all related functionality\n  - Simplified codebase by removing redundant path tracking\n  - Permission management now handled solely by PermissionManager\n- **Legacy Command Executor** (bf3233a)\n  - Removed old CommandExecutor in favor of unified BashSessionExecutor\n  - Consolidated shell execution logic into session-based approach\n\n### Enhanced\n- **Command Output Isolation** (46c6c42)\n  - Prevented command output accumulation in persistent sessions\n  - Added automatic screen clearing and history management\n  - Ensured clean execution context for sequential commands\n- **Platform-Specific Tool Registration** (184c2f7)\n  - Automatic selection of appropriate run_command implementation\n  - Seamless fallback between tmux-based and Windows-compatible execution\n  - Maintained consistent tool interface across platforms\n\n### Refactoring\n- **Improved Shell Execution Mode** (f862a6f)\n  - Added subprocess execution mode to BashSessionExecutor\n  - Enhanced flexibility in execution strategy selection\n- **Code Quality and Type Safety** (bc52019)\n  - Comprehensive migration to modern Python type annotations\n  - Improved developer experience with better IDE support\n  - Reduced boilerplate validation code\n",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.4.0",
        "commit_sha": "98a95f9efd77ccdd5fd8b7bc56cb7cf666a50504"
      },
      {
        "name": "v0.3.4",
        "commit_sha": "1f7f3ca4ddadb70b8a3f0a4831600715227dc7f3"
      },
      {
        "name": "v0.3.3",
        "commit_sha": "b1f5bda71ce2a026114d4cf8d66ec5f29e3b6421"
      },
      {
        "name": "v0.3.2",
        "commit_sha": "bbe40d53e010c8eaaccf737bf958562c355aa2ec"
      },
      {
        "name": "v0.3.1",
        "commit_sha": "a5e7b69780a823942e91307cf11dff22de7a5f90"
      },
      {
        "name": "v0.3.0",
        "commit_sha": "6ad720f1ea7ebdf52411c529b325c199292c933c"
      },
      {
        "name": "v0.2.2",
        "commit_sha": "9dcce86cf057662534c5eb7c7d6353f3fd68e872"
      },
      {
        "name": "v0.2.1",
        "commit_sha": "49a7d9914cd9735cb59c229c24470d4e473e33e0"
      },
      {
        "name": "v0.2.0",
        "commit_sha": "a25bf36d35185f146d733f35e77b23b032d301a0"
      },
      {
        "name": "v0.1.31",
        "commit_sha": "ff39416f0c19b2ae883aeb2aa11a90d4ee4f4b99"
      }
    ],
    "latest_version": "v0.4.0"
  },
  "readme": "# MCP Claude Code\n\nAn implementation of Claude Code capabilities using the Model Context Protocol (MCP).\n\n## Overview\n\nThis project provides an MCP server that implements Claude Code-like functionality, allowing Claude to directly execute instructions for modifying and improving project files. By leveraging the Model Context Protocol, this implementation enables seamless integration with various MCP clients including Claude Desktop.\n\n![example](./doc/example2.gif)\n\n## Features\n\n- **Code Understanding**: Analyze and understand codebases through file access and pattern searching\n- **Code Modification**: Make targeted edits to files with proper permission handling\n- **Enhanced Command Execution**: Run commands and scripts in various languages with improved error handling and shell support\n- **File Operations**: Manage files with proper security controls through shell commands\n- **Code Discovery**: Find relevant files and code patterns across your project with high-performance searching\n- **Agent Delegation**: Delegate complex tasks to specialized sub-agents that can work concurrently\n- **Multiple LLM Provider Support**: Configure any LiteLLM-compatible model for agent operations\n- **Jupyter Notebook Support**: Read and edit Jupyter notebooks with full cell and output handling\n\n## Tools Implemented\n\n| Tool              | Description                                                                                                                       |\n| ----------------- | --------------------------------------------------------------------------------------------------------------------------------- |\n| `read`            | Read file contents with line numbers, offset, and limit capabilities                                                              |\n| `write`           | Create or overwrite files                                                                                                         |\n| `edit`            | Make line-based edits to text files                                                                                               |\n| `multi_edit`      | Make multiple precise text replacements in a single file operation with atomic transactions                                       |\n| `directory_tree`  | Get a recursive tree view of directories                                                                                          |\n| `grep`            | Fast pattern search in files with ripgrep integration for best performance ([docs](./doc/migration_SearchContentTool_to_Grep.md)) |\n| `content_replace` | Replace patterns in file contents                                                                                                 |\n| `grep_ast`        | Search code with AST context showing matches within functions, classes, and other structures                                      |\n| `run_command`     | Execute shell commands (also used for directory creation, file moving, and directory listing)                                     |\n| `notebook_read`   | Extract and read source code from all cells in a Jupyter notebook with outputs                                                    |\n| `notebook_edit`   | Edit, insert, or delete cells in a Jupyter notebook                                                                               |\n| `think`           | Structured space for complex reasoning and analysis without making changes                                                        |\n| `dispatch_agent`  | Launch one or more agents that can perform tasks using read-only tools concurrently                                               |\n| `batch`           | Execute multiple tool invocations in parallel or serially in a single request                                                     |\n| `todo_write`      | Create and manage a structured task list                                                                                          |\n| `todo_read`       | Read a structured task list                                                                                                       |\n\n## Getting Started\n\nFor detailed installation and configuration instructions, please refer to [INSTALL.md](./doc/INSTALL.md).\n\nFor detailed tutorial of 0.3 version, please refer to [TUTORIAL.md](./doc/TUTORIAL.md)\n\n## Security\n\nThis implementation follows best practices for securing access to your filesystem:\n\n- Permission prompts for file modifications and command execution\n- Restricted access to specified directories only\n- Input validation and sanitization\n- Proper error handling and reporting\n\n## Development\n\nTo contribute to this project:\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n"
}