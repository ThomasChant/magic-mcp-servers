{
  "mcp_name": "stephenlb/pubnub-mcp-server",
  "mcp_description": "Facilitates access to PubNub SDK and Functions documentation within Cursor IDE using a CLI-based MCP server.",
  "mcp_id": "pubnub_pubnub-mcp-server",
  "fetch_timestamp": "2025-06-23T08:39:50.680932Z",
  "github_url": "https://github.com/stephenlb/pubnub-mcp-server",
  "repository": {
    "name": "pubnub-mcp-server",
    "full_name": "pubnub/pubnub-mcp-server",
    "description": "PubNub MCP Model Context Protocol Server for use in Cursor, Windsurf, Claude Desktop, Claude Code and OpenAI Codex and more!",
    "html_url": "https://github.com/pubnub/pubnub-mcp-server",
    "created_at": "2025-04-28T21:03:49Z",
    "updated_at": "2025-06-18T22:01:36Z",
    "pushed_at": "2025-06-18T22:01:32Z",
    "size": 1328,
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks_count": 3,
    "open_issues_count": 3,
    "language": "JavaScript",
    "license": null,
    "topics": [
      "claude-code",
      "curosr",
      "llm",
      "mcp",
      "mcp-server",
      "openai-codex",
      "windsurf"
    ],
    "default_branch": "main",
    "owner": {
      "login": "pubnub",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/297109?v=4",
      "html_url": "https://github.com/pubnub"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 3,
    "subscribers_count": 3,
    "languages": {
      "JavaScript": 95919,
      "Shell": 23146,
      "Python": 3486,
      "Dockerfile": 363
    },
    "language_percentages": {
      "JavaScript": 78.04,
      "Shell": 18.83,
      "Python": 2.84,
      "Dockerfile": 0.3
    },
    "pull_requests_count": 3,
    "contributors_count": 2,
    "package_json_version": "1.0.83"
  },
  "readme": "![MCP Server Logo](https://github.com/pubnub/pubnub-mcp-server/raw/main/context/pubnub-mcp-server-model-context-protocol.jpg)\n\n# PubNub Model Context Protocol (MCP) Server for Cursor IDE\n\nThis repository provides a CLI-based Model Context Protocol (MCP) server that exposes PubNub SDK documentation and PubNub API resources to LLM-powered tools.\nThis improves the LLM AI Agent's ability to understand and interact with PubNub's SDKs and APIs.\n\n![With PubNub MCP vs Without](https://github.com/pubnub/pubnub-mcp-server/raw/main/context/pubnub-mcp-vs-no-mcp.jpg)\n\n## Features\n\n- MCP server exposing tools for interacting with PubNub via JSON-RPC over STDIN/STDOUT.\n- MCP server supports SSE Mode by supplying `HTTP_PORT` environment variable.\n- Retrieve official PubNub SDK documentation (HTML → Markdown) for:\n  - Languages: JavaScript, Python, Java, Go, Ruby, Swift, Objective-C, C#, PHP, Rust, Unity, Kotlin, Unreal.\n  - API reference sections: configuration, publish-and-subscribe, presence, access-manager, channel-groups, storage-and-playback, mobile-push, objects, files, message-actions, misc, functions.\n- Retrieve official PubNub Chat SDK documentation (HTML → Markdown) for:\n  - Chat SDK languages: JavaScript, Kotlin, Swift, Unity, Unreal.\n  - Chat SDK topics: configuration, chat, channel, user, message, membership, thread-channel, thread-message, message-draft, event, access-control, glossary.\n- Fetch PubNub conceptual guides and how-to documentation from local markdown files in the `resources` directory (e.g., `pubnub_concepts`, `pubnub_features`, `pubnub_security`, `how_to_send_receive_json`, `how_to_encrypt_messages_files`, etc.).\n- Publish messages to PubNub channels with `publish_pubnub_message`, returning a timetoken.\n- Subscribe to channels and receive real-time messages with `pubnub_subscribe_and_receive_messages`, supporting single or multiple message collection with optional timeout.\n- Fetch historical messages from one or more channels with `get_pubnub_messages`, returning message content and metadata in JSON.\n- Retrieve real-time presence information (occupancy counts, subscriber UUIDs) for channels and channel groups with `get_pubnub_presence`.\n- Generate step-by-step instructions for creating a PubNub application, including code snippets for initializing the PubNub SDK in multiple languages using `write_pubnub_app`.\n- Manage PubNub account apps and API keys with `manage_pubnub_account`, supporting create, list, and delete operations for both apps and API keys.\n- Environment variable configuration: supports `PUBNUB_PUBLISH_KEY` and `PUBNUB_SUBSCRIBE_KEY` for authenticating SDK operations.\n- Converts remote HTML articles to Markdown using `jsdom` and `turndown` for consistent documentation formatting.\n- Input validation via Zod schemas for all tool parameters, ensuring robust error handling.\n- Extensible tool definitions leveraging the Model Context Protocol SDK (`@modelcontextprotocol/sdk`) with `McpServer` and `StdioServerTransport`.\n\n## Example Prompts\n\n- \"Write a PubNub app that lets the user watch streaming videos with built-in multi-user chat with PubNub.\"\n- \"Write a PubNub app for on-demand delivery of groceries with a map.\"\n- \"Write a PubNub app that tracks the location of a package in real-time.\"\n- \"Write a PubNub app that shows the weather forecast in real-time.\"\n- \"Write a PubNub app that lets users play multiplayer games with friends.\"\n- \"Write a PubNub app that shows live stock prices and news updates.\"\n- \"Write a PubNub app that lets users create and share playlists with friends.\"\n- \"Build a PubNub JavaScript app that subscribes to the `my_channel` channel and logs messages to the console.\"\n- \"Publish a message to the `my_channel` channel with the message `Hello, PubNub!`.\"\n- \"Subscribe to the `my_channel` channel and wait for one message.\"\n- \"Subscribe to the `notifications` channel and collect 5 messages with a 30-second timeout.\"\n- \"Listen for messages on the `alerts` channel for 10 seconds.\"\n- \"Show me the PubNub JavaScript SDK documentation for `subscribe()`.\"\n- \"List all available PubNub Functions.\"\n- \"Fetch the Python SDK docs for the `publish()` method.\"\n- \"Fetch the message history for the `test` channel.\"\n- \"Retrieve presence information (occupancy and UUIDs) for the `test` channel and the `default` channel group.\"\n- \"List all my PubNub apps.\"\n- \"List all API keys across my PubNub account.\"\n- \"Create a new PubNub app.\"\n- \"Create a new API key in my PubNub account.\"\n- \"Delete test apps from my PubNub account.\"\n- \"Delete test API keys from my PubNub account.\"\n\nThis requires Node.js (>= 18) and npm (https://nodejs.org/).\n`npx` will automatically fetch and run the latest MCP server.\n\n## Prerequisites\n\n- Node.js (>= 18) and npm\n- Cursor IDE with MCP support\n- (Optional) PubNub account and API keys for live examples\n\n## Installation\n\nThe preferred way to run the PubNub MCP server locally or add it to Cursor IDE via npx:\n\n```bash\nnpx -y @pubnub/mcp\n```\n\n## Configuration\n\n> *Cursor must be in AGENT MODE to use MCP servers.*\n\nCursor IDE discovers MCP servers via a JSON config file.\nConfigure the PubNub MCP server globally or per project.\n\n### Global Configuration\n\nEdit or create `~/.cursor/mcp.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"pubnub\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@pubnub/mcp\"],\n      \"env\": {\n        \"PUBNUB_PUBLISH_KEY\": \"YOUR_PUBLISH_KEY\",\n        \"PUBNUB_SUBSCRIBE_KEY\": \"YOUR_SUBSCRIBE_KEY\"\n      }\n    }\n  }\n}\n```\n\n### Project Configuration\n\nIn your project directory, create `.cursor/mcp.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"pubnub\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@pubnub/mcp\"],\n      \"env\": {\n        \"PUBNUB_PUBLISH_KEY\": \"YOUR_PUBLISH_KEY\",\n        \"PUBNUB_SUBSCRIBE_KEY\": \"YOUR_SUBSCRIBE_KEY\"\n      }\n    }\n  }\n}\n```\n\n### Environment Variables\n\nThe PubNub MCP server supports the following environment variables:\n\n- `PUBNUB_PUBLISH_KEY`: Your PubNub publish key (required for publishing messages)\n- `PUBNUB_SUBSCRIBE_KEY`: Your PubNub subscribe key (required for subscribing and message history)\n\n### Docker-Based Configuration\n\nIf you prefer to run the MCP server via Docker, set your PubNub keys as environment variables:\n\n```bash\nexport PUBNUB_PUBLISH_KEY=YOUR_PUBLISH_KEY\nexport PUBNUB_SUBSCRIBE_KEY=YOUR_SUBSCRIBE_KEY\n```\n\nThen configure your `~/.cursor/mcp.json` (or `.cursor/mcp.json` in your project):\n\n```json\n{\n  \"mcpServers\": {\n    \"pubnub\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"-e\",\n        \"PUBNUB_PUBLISH_KEY\",\n        \"-e\",\n        \"PUBNUB_SUBSCRIBE_KEY\",\n        \"pubnub/pubnub-mcp-server\"\n      ]\n    }\n  }\n}\n```\n\n- `command` specifies the executable to launch the MCP server.\n- `args` specifies the arguments to pass to the command.\n- `env` sets environment variables for the server process.\n\n## SSE Mode\n\nTo enable Server-Sent Events (SSE) HTTP transport, export the HTTP_PORT environment variable and start the MCP server. Ensure your PubNub API keys are set in the environment:\n\n```bash\nexport PUBNUB_PUBLISH_KEY=YOUR_PUBLISH_KEY\nexport PUBNUB_SUBSCRIBE_KEY=YOUR_SUBSCRIBE_KEY\nexport HTTP_PORT=3000\n```\n\n### Using NPX\n\n```bash\n# Start the MCP server in SSE mode on port 3000 with NPX\nnpx -y @pubnub/mcp\n```\n\n### Using Docker\n\n```bash\n# Start the MCP server in SSE mode on port 3000 with Docker\ndocker run -i \\\n  -e PUBNUB_PUBLISH_KEY=$PUBNUB_PUBLISH_KEY \\\n  -e PUBNUB_SUBSCRIBE_KEY=$PUBNUB_SUBSCRIBE_KEY \\\n  -e HTTP_PORT=$HTTP_PORT \\\n  pubnub/pubnub-mcp-server\n```\n\n## Using in Cursor IDE\n\n1. Restart Cursor IDE or open a new session.\n2. Open the MCP settings pane and verify the **pubnub** server is listed under **Available Tools & Resources**.\n3. In chat, invoke available resources:\n   - `pubnub://docs/javascript` — Fetch PubNub JavaScript SDK documentation\n   - `pubnub://docs/python` — Fetch PubNub Python SDK documentation\n   - `pubnub://docs/java` — Fetch PubNub Java SDK documentation\n   - `pubnub://functions` — List PubNub Functions (static content from `resources/pubnub_functions.md`)\n4. Approve resource execution when prompted, or enable **auto-run** in settings for trusted resources.\n\n## Real-Time Message Subscription\n\nThe `pubnub_subscribe_and_receive_messages` tool provides real-time message listening capabilities, allowing you to subscribe to PubNub channels and receive messages as they're published. This tool automatically handles subscription lifecycle, message collection, and cleanup.\n\n### Key Features\n\n- **Flexible Message Collection**: Wait for a single message (default) or specify how many messages to collect\n- **Timeout Support**: Set optional timeouts to prevent indefinite waiting\n- **Automatic Cleanup**: Automatically unsubscribes and cleans up listeners after receiving the specified number of messages or timeout\n- **Structured Response**: Returns detailed message information including channel, content, publisher, and timetoken\n\n### Usage Examples\n\n```bash\n# Subscribe and wait for one message (default behavior)\n\"Subscribe to the 'my_channel' channel and wait for one message\"\n\n# Collect multiple messages with timeout\n\"Subscribe to the 'notifications' channel and collect 5 messages with a 30-second timeout\"\n\n# Listen with timeout only\n\"Listen for messages on the 'alerts' channel for 10 seconds\"\n```\n\n### Parameters\n\n- `channel` (required): Name of the PubNub channel to subscribe to\n- `messageCount` (optional, default: 1): Number of messages to wait for before unsubscribing\n- `timeout` (optional): Timeout in milliseconds to avoid waiting indefinitely\n\n### Response Format\n\nThe tool returns a JSON object containing:\n- `channel`: The subscribed channel name\n- `messageCount`: Number of messages actually received\n- `messages`: Array of message objects with channel, message content, publisher, timetoken, and subscription info\n\n## Claude Code\n\n```shell\n## Install the MCP server if you have node >= 18\nclaude mcp add --scope user pubnub -e PUBNUB_PUBLISH_KEY=your_publish_key -e PUBNUB_SUBSCRIBE_KEY=your_subscribe_key -- npx -y @pubnub/mcp\n\n## Install the MCP server if you have node < 18 and need to point to the full path of node\nclaude mcp add --scope user pubnub -e PUBNUB_PUBLISH_KEY=your_publish_key -e PUBNUB_SUBSCRIBE_KEY=your_subscribe_key -- /Users/stephen/.nvm/versions/node/v22.14.0/bin/node /Users/stephen/Projects/mcp-pubnub/index.js\n\n## Install the MCP server using Docker\n# Ensure your PubNub keys are set as environment variables:\nexport PUBNUB_PUBLISH_KEY=your_publish_key\nexport PUBNUB_SUBSCRIBE_KEY=your_subscribe_key\n\n# Depending on your machine’s CPU architecture, you may need to specify the target platform.\n# For example:\n#   docker run --platform linux/arm64 -i pubnub/pubnub-mcp-server\n#   docker run --platform linux/amd64 -i pubnub/pubnub-mcp-server\n\nclaude mcp add --scope user pubnub -- docker run -i \\\n  -e PUBNUB_PUBLISH_KEY=$PUBNUB_PUBLISH_KEY \\\n  -e PUBNUB_SUBSCRIBE_KEY=$PUBNUB_SUBSCRIBE_KEY \\\n  pubnub/pubnub-mcp-server\n```\n\nAnd the output will be:\n```shell\nAdded stdio MCP server pubnub with command: npx -y @pubnub/mcp to local config\n```\n\n### Example prompt\n```shell\nclaude \"publish a message 'hi' to the 'my_channel' pubnub channel.\"\n```\n\n```shell\nclaude \"publish a message 'hi' to the 'my_channel' pubnub channel.\"\n\n╭───────────────────────────────────────────────────╮\n│ ✻ Welcome to Claude Code research preview!        │\n│                                                   │\n│   /help for help, /status for your current setup  │\n│                                                   │\n│   cwd: /Users/stephen/Projects/mcp-pubnub         │\n╰───────────────────────────────────────────────────╯\n\n ※ Tip: Press Option+Enter to send a multi-line message\n\n> publish a message 'hi' to the 'my_channel' pubnub channel.\n\n⏺ I'll publish a message to the PubNub channel for you.\n\n⏺ pubnub:publish_pubnub_message (MCP)(channel: \"my_channel\", message: \"hi\")…\n  ⎿  Message published successfully. Timetoken: 17467422499409217\n\n⏺ Message published successfully to \"my_channel\".\n```\n\nRemove the MCP server with:\n\n```shell\nclaude mcp remove pubnub\n```\n\n## Using Claude Desktop\n\nIf you prefer the Docker-based MCP server in Claude Desktop:\n\n1. Ensure your PubNub keys are exported in your shell:\n   ```bash\n   export PUBNUB_PUBLISH_KEY=your_publish_key\n   export PUBNUB_SUBSCRIBE_KEY=your_subscribe_key\n   ```\n2. In the **Tools** section of Claude Desktop, add a new tool named **pubnub**.\n3. Set the **Command** to `docker`.\n4. Set **Arguments** to:\n   ```json\n   [\n     \"run\",\n     \"-i\",\n     \"-e\",\n     \"PUBNUB_PUBLISH_KEY\",\n     \"-e\",\n     \"PUBNUB_SUBSCRIBE_KEY\",\n     \"pubnub/pubnub-mcp-server\"\n   ]\n   ```\n\n> **Note:** On some machines (e.g., Apple Silicon), you may need to specify the Docker platform.\n> Insert `--platform linux/arm64` (or `--platform linux/amd64`) immediately after `\"run\"` in the Arguments array. For example:\n>\n> ```json\n> [\n>   \"run\",\n>   \"--platform\", \"linux/arm64\",\n>   \"-i\",\n>   \"-e\", \"PUBNUB_PUBLISH_KEY\",\n>   \"-e\", \"PUBNUB_SUBSCRIBE_KEY\",\n>   \"pubnub/pubnub-mcp-server\"\n> ]\n> ```\n5. Save the configuration.\n\nClaude Desktop will invoke the PubNub MCP server container via Docker.\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n## Troubleshooting\n\n- Must be in agent mode to use MCP servers.\n- Verify Node.js and npm installation.\n- Ensure `index.js` has execute permission.\n- Check that the `command`, `args`, and `env` settings are correct.\n- Review Cursor IDE logs for MCP startup errors.\n\n## Direct JSON-RPC Command-Line Usage\n\nYou can invoke the MCP server directly over STDIN/STDOUT using JSON-RPC v2.0.\nEnsure your PubNub keys are set in the environment, for example:\n```bash\nPUBNUB_PUBLISH_KEY=YOUR_PUBLISH_KEY \\\nPUBNUB_SUBSCRIBE_KEY=YOUR_SUBSCRIBE_KEY \\\n  node index.js\n```\n\nOnce the server is running (or using a one-off invocation), send requests by piping JSON into `node index.js`. Examples:\n```bash\n# 1) List available tools\necho '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"tools/list\",\"params\":{}}' \\\n  | node index.js\n\n# 2) Read PubNub JavaScript SDK documentation\necho '{\"jsonrpc\":\"2.0\",\"id\":2,\"method\":\"tools/call\",\"params\":\n  {\"name\":\"read_pubnub_sdk_docs\",\"arguments\":{\"language\":\"javascript\"}}}' \\\n  | node index.js\n\n# 3) Read PubNub Functions Resource docs (static Markdown)\necho '{\"jsonrpc\":\"2.0\",\"id\":3,\"method\":\"tools/call\",\"params\":{\"name\":\"read_pubnub_resources\",\"arguments\":{\"document\":\"pubnub_functions\"}}}' \\\n  | node index.js\n\n```\n\n## Quick JSON-RPC Examples\n\nBelow are simplified JSON-RPC v2.0 command-line examples using STDIN/STDOUT to fetch PubNub SDK documentation and publish messages.\n\n### 1) Fetch PubNub JavaScript SDK documentation\n```bash\necho '{\"jsonrpc\":\"2.0\",\"id\":2,\"method\":\"tools/call\",\"params\":{\"name\":\"read_pubnub_sdk_docs\",\"arguments\":{\"language\":\"javascript\"}}}' | node index.js\n```\n\n### 2) Publish a message to a PubNub channel\n```bash\nPUBNUB_PUBLISH_KEY=demo \\\nPUBNUB_SUBSCRIBE_KEY=demo \\\necho '{\"jsonrpc\":\"2.0\",\"id\":2,\"method\":\"tools/call\",\"params\":{\"name\":\"publish_pubnub_message\",\"arguments\":{\"channel\":\"my_channel\",\"message\":\"Hello, PubNub MCP JSON-RPC!\"}}}' \\\n  | node index.js\n```\n\n## Disabling PubNub Analytics Subscription\n\nTo disable the PubNub server analytics subscription, set the following environment variable:\n\n```bash\nexport MCP_SUBSCRIBE_ANALYTICS_DISABLED=true\n```\n\n## Running All Tests\n\nYou can run the complete test suite (unit tests, SSE tests, model tooling tests, and benchmarks) with:\n\n```bash\nnode test_all.js\n```\n\nOr via npm:\n\n```bash\nnpm run test-all\n```\n\n"
}