{
  "mcp_name": "Sentry",
  "mcp_description": "Official MCP server for [Sentry](https://sentry.io).",
  "mcp_id": "getsentry_sentry-mcp",
  "fetch_timestamp": "2025-06-23T08:19:09.256469Z",
  "github_url": "https://github.com/getsentry/sentry-mcp",
  "repository": {
    "name": "sentry-mcp",
    "full_name": "getsentry/sentry-mcp",
    "description": "An MCP server for interacting with Sentry via LLMs.",
    "html_url": "https://github.com/getsentry/sentry-mcp",
    "created_at": "2025-03-29T22:23:13Z",
    "updated_at": "2025-06-23T07:23:29Z",
    "pushed_at": "2025-06-23T07:36:21Z",
    "size": 13064,
    "stargazers_count": 207,
    "watchers_count": 207,
    "forks_count": 21,
    "open_issues_count": 27,
    "language": "TypeScript",
    "license": "Other",
    "topics": [
      "mcp-server",
      "tag-production"
    ],
    "default_branch": "main",
    "owner": {
      "login": "getsentry",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/1396951?v=4",
      "html_url": "https://github.com/getsentry"
    },
    "has_issues": true,
    "has_projects": false,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 21,
    "subscribers_count": 31,
    "languages": {
      "TypeScript": 494305,
      "JavaScript": 13203,
      "CSS": 3140,
      "HTML": 1954,
      "Dockerfile": 639,
      "Shell": 294
    },
    "language_percentages": {
      "TypeScript": 96.26,
      "JavaScript": 2.57,
      "CSS": 0.61,
      "HTML": 0.38,
      "Dockerfile": 0.12,
      "Shell": 0.06
    },
    "pull_requests_count": 231,
    "contributors_count": 18,
    "latest_release": {
      "tag_name": "0.12.0",
      "name": "0.12.0",
      "published_at": "2025-06-13T17:30:16Z",
      "body": null,
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "0.12.0",
        "commit_sha": "33df575af3b055acbff54d598c6fbeb36f5d1c86"
      },
      {
        "name": "0.11.0",
        "commit_sha": "e617c8655a36b5160865d27c06a06da0244ded3c"
      },
      {
        "name": "0.10.0",
        "commit_sha": "d4fd0b1171a213746188be959182c60c294792cb"
      },
      {
        "name": "0.9.0",
        "commit_sha": "f497e9bcbbf0cb00f692343bb29f8892a440d20a"
      },
      {
        "name": "0.8.0",
        "commit_sha": "c71363a6e12d03987912fb052e2e13fdf45524be"
      },
      {
        "name": "0.7.1",
        "commit_sha": "e03edd9422f11aaa5c6ba680013af75ad0911fc0"
      },
      {
        "name": "0.7.0",
        "commit_sha": "efd5fe6a703446cca60bd68e827becc97439285f"
      },
      {
        "name": "0.6.0",
        "commit_sha": "056b4c07f779f7902220c78e0b9a4e821e639040"
      },
      {
        "name": "0.5.0",
        "commit_sha": "c2d5ad34f515ad90a5c513b190d00a395c3ca36b"
      },
      {
        "name": "0.4.0",
        "commit_sha": "f9d594c4dd62fcae576859ff94886b6b16f42336"
      }
    ],
    "latest_version": "0.12.0",
    "package_json_version": "0.0.1"
  },
  "readme": "# sentry-mcp\n\n[![codecov](https://codecov.io/gh/getsentry/sentry-mcp/graph/badge.svg?token=khVKvJP5Ig)](https://codecov.io/gh/getsentry/sentry-mcp)\n[![smithery badge](https://smithery.ai/badge/@getsentry/sentry-mcp)](https://smithery.ai/server/@getsentry/sentry-mcp)\n\nThis is a prototype of a remote MCP sever, acting as a middleware to the upstream Sentry API provider.\n\nIt is based on [Cloudflare's work towards remote MCPs](https://blog.cloudflare.com/remote-model-context-protocol-servers-mcp/).\n\n## Getting Started\n\nYou'll find everything you need to know by visiting the deployed service in production:\n\n<https://mcp.sentry.dev>\n\nIf you're looking to contribute, learn how it works, or to run this for self-hosted Sentry, continue below..\n\n### Stdio vs Remote\n\nWhile this repository is focused on acting as an MCP service, we also support a `stdio` transport. This is still a work in progress, but is the easiest way to adapt run the MCP against a self-hosted Sentry install.\n\nTo utilize the `stdio` transport, you'll need to create an User Auth Token in Sentry with the necessary scopes. As of writing this is:\n\n```\norg:read\nproject:read\nproject:write\nteam:read\nteam:write\nevent:write\n```\n\nLaunch the transport:\n\n```shell\nnpx @sentry/mcp-server@latest --access-token=sentry-user-token --host=sentry.example.com\n```\n\nNote: You can also use environment variables:\n\n```shell\nSENTRY_ACCESS_TOKEN=\nSENTRY_HOST=\n```\n\n### MCP Inspector\n\nMCP includes an [Inspector](https://modelcontextprotocol.io/docs/tools/inspector), to easily test the service:\n\n```shell\npnpm inspector\n```\n\nEnter the MCP server URL (<http://localhost:5173>) and hit connect. This should trigger the authentication flow for you.\n\nNote: If you have issues with your OAuth flow when accessing the inspector on `127.0.0.1`, try using `localhost` instead by visiting `http://localhost:6274`.\n\n## Local Development\n\nTo contribute changes against the server, you'll need to set things up in in local development. This will require you to create another OAuth App in Sentry (Settings => API => [Applications](https://sentry.io/settings/account/api/applications/)):\n\n- For the Homepage URL, specify `http://localhost:5173`\n- For the Authorized Redirect URIs, specify `http://localhost:5173/callback`\n- Note your Client ID and generate a Client secret.\n- Create a `.dev.vars` file in `packages/mcp-cloudflare/` root with:\n\n```shell\n# packages/mcp-cloudflare/.dev.vars\nSENTRY_CLIENT_ID=your_development_sentry_client_id\nSENTRY_CLIENT_SECRET=your_development_sentry_client_secret\nCOOKIE_SECRET=my-super-secret-cookie\n```\n\n### Verify\n\nRun the server locally to make it available at `http://localhost:5173`\n\n```shell\npnpm dev\n```\n\nTo test the local server, enter `http://localhost:5173/mcp` into Inspector and hit connect. Once you follow the prompts, you'll be able to \"List Tools\".\n\n### Tests\n\nThere are two test suites included: basic unit tests, and some evaluations.\n\nUnit tests can be run using:\n\n```shell\npnpm test\n```\n\nEvals will require a `.env` file with some config:\n\n```shell\nOPENAI_API_KEY=\n```\n\nOnce that's done you can run them using:\n\n```shell\npnpm eval\n```\n"
}