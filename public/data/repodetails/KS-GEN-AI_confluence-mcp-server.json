{
  "mcp_name": "KS-GEN-AI/confluence-mcp-server",
  "mcp_description": "üìá ‚òÅÔ∏è üçé ü™ü - Get Confluence data via CQL and read pages.",
  "mcp_id": "KS-GEN-AI_confluence-mcp-server",
  "fetch_timestamp": "2025-06-23T05:53:47.147338Z",
  "github_url": "https://github.com/KS-GEN-AI/confluence-mcp-server",
  "repository": {
    "name": "confluence-mcp-server",
    "full_name": "KS-GEN-AI/confluence-mcp-server",
    "description": "A test of confluence mcp server",
    "html_url": "https://github.com/KS-GEN-AI/confluence-mcp-server",
    "created_at": "2024-12-16T10:14:08Z",
    "updated_at": "2025-06-10T03:50:42Z",
    "pushed_at": "2025-05-12T14:29:19Z",
    "size": 21,
    "stargazers_count": 11,
    "watchers_count": 11,
    "forks_count": 4,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "KS-GEN-AI",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/188491431?v=4",
      "html_url": "https://github.com/KS-GEN-AI"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 4,
    "subscribers_count": 0,
    "languages": {
      "JavaScript": 7542,
      "Dockerfile": 620
    },
    "language_percentages": {
      "JavaScript": 92.4,
      "Dockerfile": 7.6
    },
    "pull_requests_count": 2,
    "contributors_count": 4,
    "package_json_version": "0.2.0"
  },
  "readme": "# Confluence Communication Server MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@KS-GEN-AI/confluence-mcp-server)](https://smithery.ai/server/@KS-GEN-AI/confluence-mcp-server)\n\nInteract with Confluence\n\nThis is a TypeScript-based MCP server that provides tools to interact with Confluence. It demonstrates core MCP concepts by providing:\n\n- Tools for executing CQL queries to search pages\n- Tools for retrieving the content of Confluence pages\n- Tools for updating content on Confluence pages\n\n<a href=\"https://glama.ai/mcp/servers/850t5hxya0\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/850t5hxya0/badge\" alt=\"Confluence Communication Server MCP server\" />\n</a>\n\n## Features\n\n## Confluence Tools\n\n### `execute_cql_search`\n\n- **Purpose**: Run a CQL query to search for Confluence pages.\n- **Parameters**: `cql`, `limit` (default: 10).\n\n### `get_page_content`\n\n- **Purpose**: Fetch the content of a Confluence page.\n- **Parameters**: `pageId`.\n\n### `update_page_content`\n\n- **Purpose**: Update the content of a Confluence page.\n- **Parameters**: `pageId`, `content`, `title` (optional, if you want to change it).\n\n## Development\n\nInstall dependencies:\n\n```bash\nnpm install\n```\n\nBuild the server:\n\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n\n```bash\nnpm run watch\n```\n\n## Installation\n\n### Installing via Smithery\n\nTo install Confluence Communication Server MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@KS-GEN-AI/confluence-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @KS-GEN-AI/confluence-mcp-server --client claude\n```\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`  \nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"Confluence communication server\": {\n      \"command\": \"node\",\n      \"args\": [\"/PATH_TO_THE_PROJECT/build/index.js\"],\n      \"env\": {\n        \"CONFLUENCE_URL\": \"https://XXXXXXXX.atlassian.net/wiki\",\n        \"CONFLUENCE_API_MAIL\": \"Your email\",\n        \"CONFLUENCE_API_KEY\": \"KEY_FROM: https://id.atlassian.com/manage-profile/security/api-tokens\"\n      }\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser."
}