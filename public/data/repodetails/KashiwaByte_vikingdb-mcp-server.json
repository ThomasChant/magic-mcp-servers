{
  "mcp_name": "KashiwaByte/vikingdb-mcp-server",
  "mcp_description": "üêç ‚òÅÔ∏è - VikingDB integration with collection and index introduction, vector store and search capabilities.",
  "mcp_id": "KashiwaByte_vikingdb-mcp-server",
  "fetch_timestamp": "2025-06-23T05:41:25.640025Z",
  "github_url": "https://github.com/KashiwaByte/vikingdb-mcp-server",
  "repository": {
    "name": "vikingdb-mcp-server",
    "full_name": "KashiwaByte/vikingdb-mcp-server",
    "description": "a mcp server for vikingdb store and search",
    "html_url": "https://github.com/KashiwaByte/vikingdb-mcp-server",
    "created_at": "2024-12-06T10:40:00Z",
    "updated_at": "2025-06-01T08:15:32Z",
    "pushed_at": "2025-02-03T09:39:19Z",
    "size": 82,
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks_count": 3,
    "open_issues_count": 4,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "KashiwaByte",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/106975133?v=4",
      "html_url": "https://github.com/KashiwaByte"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 3,
    "subscribers_count": 1,
    "languages": {
      "Python": 11107,
      "Dockerfile": 850
    },
    "language_percentages": {
      "Python": 92.89,
      "Dockerfile": 7.11
    },
    "pull_requests_count": 3,
    "contributors_count": 2,
    "latest_release": {
      "tag_name": "0.1.2",
      "name": "vikingdb-mcp-server-0.1.2",
      "published_at": "2024-12-07T03:56:35Z",
      "body": "add collection intro and index intro tools",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "0.1.2",
        "commit_sha": "24fd5768e4c70855387efd52445bd41d91e56ef7"
      }
    ],
    "latest_version": "0.1.2"
  },
  "readme": "# VikingDB MCP server\n\n[![smithery badge](https://smithery.ai/badge/mcp-server-vikingdb)](https://smithery.ai/server/mcp-server-vikingdb)\nan mcp server for vikingdb store and search\n\n## What is VikingDB\nVikingDB is a high-performance vector database developed by ByteDance. \n\nYou can easily use it following the doc bellow:\nhttps://www.volcengine.com/docs/84313/1254444\n\n\n\n### Tools\n\nThe server implements the following tools:\n\n- vikingdb-colleciton-intro: introduce the collection of vikingdb\n\n- vikingdb-index-intro: introduce the index of vikingdb\n\n- vikingdb-upsert-information: upsert information to vikingdb for later use\n\n- vikingdb-search-information: searche for information in the VikingDB\n  \n  \n## Configuration\n\n- vikingdb_host: The host to use for the VikingDB server.\n\n- vikingdb_region: The region to use for the VikingDB server.\n \n - vikingdb_ak: The Access Key to use for the VikingDB server.\n\n - vikingdb_sk: The Secret Key to use for the VikingDB server.\n \n- collection_name: The name of the collection to use.\n\n- index_name: The name of the index to use.\n\n\n## Quickstart\n\n### Install\n\n### Installing via Smithery\n\nTo install VikingDB MCP server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-server-vikingdb):\n\n```bash\nnpx -y @smithery/cli install mcp-server-vikingdb --client claude\n```\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n\nDevelopment/Unpublished Servers Configuration\n```\n{\n  \"mcpServers\": {\n    \"mcp-server-vikingdb\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"dir to mcp-server-vikingdb\",\n        \"run\",\n        \"mcp-server-vikingdb\",\n        \"--vikingdb-host\", \n        \"your host\",\n        \"--vikingdb-region\", \n        \"your region\",\n        \"--vikingdb-ak\", \n        \"your access key\",\n        \"--vikingdb-sk\", \n        \"your secret key\",\n        \"--collection-name\",\n        \"your collection name\",\n        \"--index-name\",\n        \"your index name\"\n      ]\n    }\n  }\n}\n\n  ```\n\nPublished Servers Configuration\n  ```\n{\n    \"mcpServers\": {\n      \"mcp-server-vikingdb\": {\n        \"command\": \"uvx\",\n        \"args\": [\n          \"mcp-server-vikingdb\",\n          \"--vikingdb-host\", \n          \"your host\",\n          \"--vikingdb-region\", \n          \"your region\",\n          \"--vikingdb-ak\", \n          \"your access key\",\n          \"--vikingdb-sk\", \n          \"your secret key\",\n          \"--collection-name\",\n          \"your collection name\",\n          \"--index-name\",\n          \"your index name\"\n      ]\n     }\n    }\n  } \n  ```\n\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory dir_to_mcp_server_vikingdb run mcp-server-vikingdb --vikingdb-host your_host --vikingdb-region your_region --vikingdb-ak your_access_key --vikingdb-sk your_secret_key --collection-name your_collection_name --index-name your_index_name\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n"
}