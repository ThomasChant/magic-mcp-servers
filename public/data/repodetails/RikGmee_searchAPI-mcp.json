{
  "mcp_name": "RikGmee/searchAPI-mcp",
  "mcp_description": "Facilitates complex travel planning by integrating flight, hotel, and map services through a multi-context protocol server.",
  "mcp_id": "RikGmee_searchAPI-mcp",
  "fetch_timestamp": "2025-06-23T07:59:05.271822Z",
  "github_url": "https://github.com/RikGmee/searchAPI-mcp",
  "repository": {
    "name": "searchAPI-mcp",
    "full_name": "RikGmee/searchAPI-mcp",
    "description": null,
    "html_url": "https://github.com/RikGmee/searchAPI-mcp",
    "created_at": "2025-04-22T18:10:45Z",
    "updated_at": "2025-04-22T18:50:16Z",
    "pushed_at": "2025-04-22T18:13:14Z",
    "size": 7021,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": null,
    "topics": [],
    "default_branch": "master",
    "owner": {
      "login": "RikGmee",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/177268848?v=4",
      "html_url": "https://github.com/RikGmee"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 15697,
      "TypeScript": 6367,
      "Dockerfile": 496
    },
    "language_percentages": {
      "JavaScript": 69.58,
      "TypeScript": 28.22,
      "Dockerfile": 2.2
    },
    "pull_requests_count": 0,
    "contributors_count": 2,
    "package_json_version": "1.0.3"
  },
  "readme": "# ‚úàÔ∏è Multi Context Protocol (MCP) Server\n\n## üåü Overview\n\nThis is a generalized travel mcp server that allows you to ask complex travel planning questions. Try the following\n\n- I need to be at the Google office tomorrow by 4pm. What is the latest flight I need to take?\n- I would like to stay at a reasonably priced hotel 15 minutes walk from the Eiffel tower, recommend some options.\n\n## üîß Supported Functions\n\n### üõ´ `search-flights`\n\nSearches for available flights between two airports via Booking.com's API.\n\n### üìÖ `today`\n\nProvides the current date to the LLM, ensuring it has up-to-date temporal context.\n\n## üè® `search-hotels`\n\nSearch for available hotels and accommodations.\n\n## üîÆ Features to Come\n\n### üöó `search-car-rentals`\n\nFind car rental options at your destination.\n\n### ‚≠ê `hotel-reviews`\n\nAccess reviews for hotels and accommodations.\n\n### üöï `search-taxis`\n\nFind taxi and transfer services at your destination.\n\n## üì¶ Installation\n\nThis MCP server can be used with either Claude Desktop or your own client.\n\n### Pre-requisites\n\n1. Go to RapidAPI, and look for the booking.com API. Issue yourself a key\n2. Go to google cloud and issue yourself a Google Maps API key.\n\n### Use with Claude Desktop\n\nIn order to work with Claude Desktop, use the below `claude_desktop_config.json`\n\n```\n{\n  \"mcpServers\": {\n    \"travel\": {\n      \"command\": \"npx\",\n      \"args\": [\"travel-mcp-server\"],\n      \"env\": {\n        \"BOOKING_COM_API_KEY\": \"<YOUR_BOOKING_DOT_COM_API_KEY>\"\n      }\n    },\n    \"google-maps\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GOOGLE_MAPS_API_KEY\",\n        \"mcp/google-maps\"\n      ],\n      \"env\": {\n        \"GOOGLE_MAPS_API_KEY\": \"<YOUR_GOOGLE_MAPS_API_KEY>\"\n      }\n    }\n  }\n}\n```\n\nYou will need to go get a google maps API key in order to use this.\n\n### Programmatic Use\n\nIf you want to use this programmatically, here is a code snippet.\n\n```\nclass TravelClient {\n  private flightsClient: Client;\n  private mapsClient: Client;\n  private toolDefinitions: any[] = [];\n\n  constructor() {\n    this.flightsClient = new Client(\n      { name: \"FlightsApp\", version: \"1.0.0\" },\n      { capabilities: { tools: {}, resources: {}, prompts: {} } }\n    );\n    this.mapsClient = new Client(\n      { name: \"MapsApp\", version: \"1.0.0\" },\n      { capabilities: { tools: {}, resources: {}, prompts: {} } }\n    );\n  }\n\n  async initialize() {\n    console.log(\"Initializing MCP clients...\");\n    try {\n      const flightsTransport = new StdioClientTransport({\n        command: \"node\",\n        args: [\"../../node_modules/travel-mcp-server/build/index.js\"],\n      });\n\n      console.log(\"GOOGLE MAPS API KEY\", process.env.GOOGLE_MAPS_API_KEY);\n      const mapsTransport = new StdioClientTransport({\n        command: process.execPath,\n        args: [\n          \"../../node_modules/@modelcontextprotocol/server-google-maps/dist/index.js\",\n        ],\n        env: {\n          GOOGLE_MAPS_API_KEY: process.env.GOOGLE_MAPS_API_KEY || \"\",\n        },\n      });\n\n      await Promise.all([\n        this.flightsClient.connect(flightsTransport),\n        this.mapsClient.connect(mapsTransport),\n      ]);\n\n      // Discover tools from both servers\n      console.log(\"Discovering tools...\");\n      const [flightsTools, mapsTools] = await Promise.all([\n        this.flightsClient.listTools(),\n        this.mapsClient.listTools(),\n      ]);\n\n      // Combine tools from both servers\n      this.toolDefinitions = [\n        ...flightsTools.tools.map((tool) => ({\n          name: tool.name,\n          description: tool.description || `Tool: ${tool.name}`,\n          input_schema: tool.inputSchema,\n        })),\n        ...mapsTools.tools.map((tool) => ({\n          name: tool.name,\n          description: tool.description || `Tool: ${tool.name}`,\n          input_schema: tool.inputSchema,\n        })),\n      ];\n\n      console.log(`Discovered ${this.toolDefinitions.length} tools`);\n      return this;\n    } catch (error) {\n      console.error(\"Error initializing MCP clients:\", error);\n      throw error;\n    }\n  }\n\n  async callTool(toolName: string, parameters: any) {\n    const tool = this.toolDefinitions.find((t) => t.name === toolName);\n    if (!tool) {\n      throw new Error(`Tool ${toolName} not found`);\n    }\n\n    // Determine which client to use based on the tool name\n    const client = toolName.includes(\"maps\")\n      ? this.mapsClient\n      : this.flightsClient;\n\n    const toolRequest = {\n      name: toolName,\n      arguments: parameters,\n    };\n\n    const result = await client.callTool(toolRequest);\n    return result;\n  }\n\n  async getToolDefinitions() {\n    return this.toolDefinitions;\n  }\n}\n\nexport default TravelClient;\n```\n"
}