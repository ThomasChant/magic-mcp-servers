{
  "mcp_name": "blurrah/mcp-graphql",
  "mcp_description": "üìá ‚òÅÔ∏è - Allows the AI to query GraphQL servers",
  "mcp_id": "blurrah_mcp-graphql",
  "fetch_timestamp": "2025-06-23T01:43:29.208357Z",
  "github_url": "https://github.com/blurrah/mcp-graphql",
  "repository": {
    "name": "mcp-graphql",
    "full_name": "blurrah/mcp-graphql",
    "description": "Model Context Protocol server for GraphQL",
    "html_url": "https://github.com/blurrah/mcp-graphql",
    "created_at": "2024-12-21T14:05:45Z",
    "updated_at": "2025-06-19T19:35:25Z",
    "pushed_at": "2025-05-27T19:57:32Z",
    "size": 257,
    "stargazers_count": 201,
    "watchers_count": 201,
    "forks_count": 37,
    "open_issues_count": 8,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [
      "ai",
      "llm",
      "mcp",
      "mcp-server",
      "modelcontextprotocol"
    ],
    "default_branch": "main",
    "owner": {
      "login": "blurrah",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/2852507?v=4",
      "html_url": "https://github.com/blurrah"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 37,
    "subscribers_count": 3,
    "languages": {
      "TypeScript": 19828,
      "Dockerfile": 862
    },
    "language_percentages": {
      "TypeScript": 95.83,
      "Dockerfile": 4.17
    },
    "pull_requests_count": 14,
    "contributors_count": 6,
    "latest_release": {
      "tag_name": "v2.0.4",
      "name": "v2.0.4",
      "published_at": "2025-05-27T19:57:47Z",
      "body": "fix: add ignorable input boolean for introspect schema\n\nAnother workaround for clients that send undefined as an argument when inputArguments is an empty object\n\nAlso added two debug clients to fool around with this a bit\n\n**Full Changelog**: https://github.com/blurrah/mcp-graphql/compare/v2.0.3...v2.0.4",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v2.0.4",
        "commit_sha": "d9cbcf3363625765f222f25e034e7efc65c45e22"
      },
      {
        "name": "v2.0.3",
        "commit_sha": "dfbee45c81db427ceab0ba312a6d4c2400264c1c"
      },
      {
        "name": "v2.0.2",
        "commit_sha": "b47644a0e7e89c0a3f50eff68497fb441fbda8f7"
      },
      {
        "name": "v2.0.1",
        "commit_sha": "6e3884510da3eb3cee0753acc30e85cecff42f32"
      },
      {
        "name": "v2.0.0",
        "commit_sha": "007ff9ac4bbbcecd097201fead3c4f3041aa8e5d"
      },
      {
        "name": "v1.0.1",
        "commit_sha": "363a645b10b732377b2cd2e30fe2c68e8b277d37"
      },
      {
        "name": "v1.0.0",
        "commit_sha": "58a759e61e39a3420a20348b26f23d0cc17c45e9"
      },
      {
        "name": "v0.3.3",
        "commit_sha": "9c65977ca53b59c1fa9c7fc0cf48ad7ca52200b7"
      },
      {
        "name": "v0.3.2",
        "commit_sha": "6e3ff6f78750a5c9e4424a7e2c9b7dbd5081b012"
      },
      {
        "name": "v0.2.2",
        "commit_sha": "8cdb048242325233118a76c5221b501de61b2f7e"
      }
    ],
    "latest_version": "v2.0.4",
    "package_json_version": "2.0.4"
  },
  "readme": "# mcp-graphql\n\n[![smithery badge](https://smithery.ai/badge/mcp-graphql)](https://smithery.ai/server/mcp-graphql)\n\nA Model Context Protocol server that enables LLMs to interact with GraphQL APIs. This implementation provides schema introspection and query execution capabilities, allowing models to discover and use GraphQL APIs dynamically.\n\n<a href=\"https://glama.ai/mcp/servers/4zwa4l8utf\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/4zwa4l8utf/badge\" alt=\"mcp-graphql MCP server\" /></a>\n\n## Usage\n\nRun `mcp-graphql` with the correct endpoint, it will automatically try to introspect your queries.\n\n### Environment Variables (Breaking change in 1.0.0)\n\n> **Note:** As of version 1.0.0, command line arguments have been replaced with environment variables.\n\n| Environment Variable | Description | Default |\n|----------|-------------|---------|\n| `ENDPOINT` | GraphQL endpoint URL | `http://localhost:4000/graphql` |\n| `HEADERS` | JSON string containing headers for requests | `{}` |\n| `ALLOW_MUTATIONS` | Enable mutation operations (disabled by default) | `false` |\n| `NAME` | Name of the MCP server | `mcp-graphql` |\n| `SCHEMA` | Path to a local GraphQL schema file (optional) | - |\n\n### Examples\n\n```bash\n# Basic usage with a local GraphQL server\nENDPOINT=http://localhost:3000/graphql npx mcp-graphql\n\n# Using with custom headers\nENDPOINT=https://api.example.com/graphql HEADERS='{\"Authorization\":\"Bearer token123\"}' npx mcp-graphql\n\n# Enable mutation operations\nENDPOINT=http://localhost:3000/graphql ALLOW_MUTATIONS=true npx mcp-graphql\n\n# Using a local schema file instead of introspection\nENDPOINT=http://localhost:3000/graphql SCHEMA=./schema.graphql npx mcp-graphql\n```\n\n## Resources\n\n- **graphql-schema**: The server exposes the GraphQL schema as a resource that clients can access. This is either the local schema file or based on an introspection query.\n\n## Available Tools\n\nThe server provides two main tools:\n\n1. **introspect-schema**: This tool retrieves the GraphQL schema. Use this first if you don't have access to the schema as a resource.\nThis uses either the local schema file or an introspection query.\n\n2. **query-graphql**: Execute GraphQL queries against the endpoint. By default, mutations are disabled unless `ALLOW_MUTATIONS` is set to `true`.\n\n## Installation\n\n### Installing via Smithery\n\nTo install GraphQL MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-graphql):\n\n```bash\nnpx -y @smithery/cli install mcp-graphql --client claude\n```\n\n### Installing Manually\n\nIt can be manually installed to Claude:\n```json\n{\n    \"mcpServers\": {\n        \"mcp-graphql\": {\n            \"command\": \"npx\",\n            \"args\": [\"mcp-graphql\"],\n            \"env\": {\n                \"ENDPOINT\": \"http://localhost:3000/graphql\"\n            }\n        }\n    }\n}\n```\n\n## Security Considerations\n\nMutations are disabled by default as a security measure to prevent an LLM from modifying your database or service data. Consider carefully before enabling mutations in production environments.\n\n## Customize for your own server\n\nThis is a very generic implementation where it allows for complete introspection and for your users to do whatever (including mutations). If you need a more specific implementation I'd suggest to just create your own MCP and lock down tool calling for clients to only input specific query fields and/or variables. You can use this as a reference.\n"
}