{
  "mcp_name": "Globalping",
  "mcp_description": "üéñÔ∏è üìá ‚òÅÔ∏è - The Globalping MCP server provides users and LLMs access to run network tools like ping, traceroute, mtr, HTTP and DNS resolve from thousands of locations around the world.",
  "mcp_id": "jsdelivr_globalping-mcp-server",
  "fetch_timestamp": "2025-06-23T03:50:56.375584Z",
  "github_url": "https://github.com/jsdelivr/globalping-mcp-server",
  "repository": {
    "name": "globalping-mcp-server",
    "full_name": "jsdelivr/globalping-mcp-server",
    "description": "Remote MCP server that gives LLMs access to run network commands",
    "html_url": "https://github.com/jsdelivr/globalping-mcp-server",
    "created_at": "2025-04-01T10:05:00Z",
    "updated_at": "2025-06-17T10:55:27Z",
    "pushed_at": "2025-05-22T18:06:22Z",
    "size": 2156,
    "stargazers_count": 7,
    "watchers_count": 7,
    "forks_count": 2,
    "open_issues_count": 2,
    "language": "TypeScript",
    "license": null,
    "topics": [
      "mcp",
      "mcp-server",
      "remote-mcp-server"
    ],
    "default_branch": "master",
    "owner": {
      "login": "jsdelivr",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/6191378?v=4",
      "html_url": "https://github.com/jsdelivr"
    },
    "has_issues": true,
    "has_projects": false,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 2,
    "subscribers_count": 3,
    "languages": {
      "TypeScript": 60881
    },
    "language_percentages": {
      "TypeScript": 100
    },
    "pull_requests_count": 6,
    "contributors_count": 3,
    "tags": [
      {
        "name": "v1.0.1",
        "commit_sha": "4ed2830438ec8554f549f1616c88a03bebe615fb"
      },
      {
        "name": "v1.0.0",
        "commit_sha": "99035e4246267e02a8d0be2a7aae6c6fe4a3b421"
      }
    ],
    "latest_version": "v1.0.1",
    "package_json_version": "0.0.2"
  },
  "readme": "# Globalping MCP Server\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/jsdelivr/globalping-media/refs/heads/master/logo/full_colored_dark.svg\" alt=\"Globalping Logo\" width=\"180\"/>\n</p>\n\n<p align=\"center\">\n  <b>Enable AI models to interact with a global network measurement platform through natural language. Give network access to any LLM.</b>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/modelcontextprotocol/modelcontextprotocol\">\n    <img src=\"https://img.shields.io/badge/MCP-compatible-brightgreen.svg\" alt=\"MCP Compatible\">\n  </a>\n</p>\n\n\n## What is Globalping?\n\n[Globalping](https://globalping.io) is a free, public API that provides access to a globally distributed network of probes for monitoring, debugging, and benchmarking internet infrastructure. With Globalping, you can run network tests (ping, traceroute, DNS, MTR, HTTP) from thousands of locations worldwide.\n\n\n## What is the Globalping MCP Server?\n\nThe Globalping MCP Server implements the [Model Context Protocol (MCP)](https://modelcontextprotocol.io), allowing AI models like OpenAI's GPT and Anthropic's Claude to interact with Globalping's network measurement capabilities through natural language.\n\nIt also supports oAuth authentication, which offers a secure way to interact with our API and benefits from higher rate limits associated with your account.\n\n### Key Features\n\n- üåê **Global Network Access**: Run measurements from thousands of probes worldwide\n- ü§ñ **AI-Friendly Interface**: Any LLM will easily parse the data and run new measurements as needed\n- üìä **Comprehensive Measurements**: Support for ping, traceroute, DNS, MTR, and HTTP tests\n- üîç **Smart Context Handling**: Provides detailed parameter descriptions for AI clients to intelligently select measurement types and options\n- üîÑ **Comparative Analysis**: Allows to compare network performance between different targets\n- üîë **oAuth Support**: Use your own Globalping account for higher rate limits\n\n\n## Installation\n\nThe remote MCP server is available under this endpoint `https://mcp.globalping.dev/sse`\n\nYou can integrate our Globalping MCP server with various AI tools that support the Model Context Protocol. \n\nHere are instructions for the top 3 most popular tools:\n\n#### Claude Desktop App\n\nAdd to your Claude Desktop configuration file (located at `%APPDATA%\\Claude\\config.json` on Windows or `~/Library/Application Support/Claude/config.json` on macOS):\n\n```json\n{\n    \"mcpServers\": {\n        \"globalping\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"mcp-remote\",\n                \"https://mcp.globalping.dev/sse\"\n            ]\n        }\n    }\n}\n```\n\n#### Anthropic Claude API (via Console)\n\nWhen creating a Claude Assistant in the Anthropic Console:\n\n1. Go to [console.anthropic.com](https://console.anthropic.com/)\n2. Navigate to the Assistants section\n3. Create a new Assistant or edit an existing one\n4. In the Tools section, select \"Add custom tool\"\n5. Enter the following details:\n   - Tool Name: `Globalping`\n   - Description: `Run network tests from locations worldwide`\n   - Tool URL: `https://mcp.globalping.dev/sse`\n\n#### Cursor\n\nTo add the Globalping MCP server to Cursor:\n\n1. Open Cursor settings\n2. Navigate to the MCP tab\n3. Click on \"+ Add new global MCP server\"\n4. This opens the `mcp.json` config file, where you will need to add:\n```json\n{\n    \"mcpServers\": {\n        \"globalping\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"mcp-remote\",\n                \"https://mcp.globalping.dev/sse\"\n            ]\n        }\n    }\n}\n```\n5. Click \"Save\" and restart Cursor\n\n## Connecting AI Assistants\n\nThis MCP server can be used with any MCP-compatible AI assistant, including:\n\n- Claude Desktop\n- Anthropic Assistants\n- Cursor\n- Windsurf\n- Any custom implementation of the MCP protocol\n\nSee the MCP documentation for details on connecting clients to this server.\n\n\n## Available Tools\n\n- `ping` - Perform a ping test to a target\n- `traceroute` - Perform a traceroute test to a target\n- `dns` - Perform a DNS lookup for a domain\n- `mtr` - Perform an MTR (My Traceroute) test to a target\n- `http` - Perform an HTTP request to a URL\n- `locations` - List all available Globalping probe locations\n- `limits` - Show your current rate limits for the Globalping API\n- `getMeasurement` - Retrieve a previously run measurement by ID\n- `compareLocations` - Guide on how to run comparison measurements\n- `help` - Show a help message with documentation on available tools\n\n## Usage Examples\n\nOnce connected to an AI model through a compatible MCP client, you can interact with Globalping using natural language:\n\n```\nPing google.com from 3 locations in Europe\n```\n\n```\nRun a traceroute to github.com from Japan and compare with traceroute from the US\n```\n\n```\nCheck the DNS resolution of example.com using Google DNS (8.8.8.8)\n```\n\n```\nIs jsdelivr.com reachable from China? Test with both ping and HTTP\n```\n\n```\nWhat's the average response time for cloudflare.com across different continents?\n```\n\n\n## Location Specification\n\nLocations can be specified using the \"magic\" field, which supports various formats:\n\n- Continent codes: \"EU\", \"NA\", \"AS\", etc.\n- Country codes: \"US\", \"DE\", \"JP\", etc.\n- City names: \"London\", \"Tokyo\", \"New York\", etc.\n- Network names: \"Cloudflare\", \"Google\", etc.\n- ASN numbers: \"AS13335\", \"AS15169\", etc.\n- Cloud provider regions: \"aws-us-east-1\", \"gcp-us-central1\", etc.\n\nYou can also combine these with a plus sign for more specific targeting: \"London+UK\", \"Cloudflare+US\", etc.\n\n\n## Development\n\nThe codebase is organized into modules:\n\n- `src/index.ts` - Main entry point and MCP agent definition\n- `src/globalping/types.ts` - TypeScript interfaces for the Globalping API\n- `src/globalping/api.ts` - API wrapper functions for Globalping\n- `src/globalping/tools.ts` - MCP tool implementations\n- `src/utils.ts` - Helper utilities for rendering the web UI\n\n\n### Add Globalping credentials\n\nAdd Globalping OAuth credentials:\n\n- `npx wrangler secret put GLOBALPING_CLIENT_ID`\n\n### KV storage\nUsed for `OAuthProvider` docs https://github.com/cloudflare/workers-oauth-provider\n- create a KV namespace and copy ID\n- binding for it must be `OAUTH_KV`\n- configure `kv_namespaces` in the `wrangler.jsonc` file\n"
}