{
  "mcp_name": "Oxylabs",
  "mcp_description": "Scrape websites with Oxylabs Web API, supporting dynamic rendering and parsing for structured data extraction.",
  "mcp_id": "oxylabs_oxylabs-mcp",
  "fetch_timestamp": "2025-06-23T07:24:49.722503Z",
  "github_url": "https://github.com/oxylabs/oxylabs-mcp",
  "repository": {
    "name": "oxylabs-mcp",
    "full_name": "oxylabs/oxylabs-mcp",
    "description": "Official Oxylabs MCP integration",
    "html_url": "https://github.com/oxylabs/oxylabs-mcp",
    "created_at": "2025-01-17T13:47:05Z",
    "updated_at": "2025-06-16T18:29:11Z",
    "pushed_at": "2025-06-05T11:56:34Z",
    "size": 181,
    "stargazers_count": 39,
    "watchers_count": 39,
    "forks_count": 11,
    "open_issues_count": 2,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "ai-tools",
      "data-collection",
      "e-comerce-scraping",
      "llm",
      "llm-tools",
      "mcp",
      "mcp-server",
      "model-context-protocol",
      "oxylabs",
      "python",
      "scraping"
    ],
    "default_branch": "main",
    "owner": {
      "login": "oxylabs",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/43960873?v=4",
      "html_url": "https://github.com/oxylabs"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 11,
    "subscribers_count": 2,
    "languages": {
      "Python": 48064,
      "HTML": 1964,
      "Makefile": 843,
      "Dockerfile": 646
    },
    "language_percentages": {
      "Python": 93.3,
      "HTML": 3.81,
      "Makefile": 1.64,
      "Dockerfile": 1.25
    },
    "pull_requests_count": 25,
    "contributors_count": 7,
    "latest_release": {
      "tag_name": "v0.3.0",
      "name": "v0.3.0",
      "published_at": "2025-05-28T07:29:25Z",
      "body": "## What's Changed\r\n\r\n* üìù Add logging\r\n\r\n**Full Changelog**: https://github.com/oxylabs/oxylabs-mcp/compare/v0.2.2...v0.3.0",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.3.0",
        "commit_sha": "5122acb8044a9c967e50cd0521e58f10691caf42"
      },
      {
        "name": "v0.2.2",
        "commit_sha": "62da9126a71b2e96601256e4abeef931c37e2f24"
      },
      {
        "name": "v0.2.1",
        "commit_sha": "8243ca56b6b76d2c46764eb94c4a206c88876b7c"
      },
      {
        "name": "v0.2.0",
        "commit_sha": "88f19803652ac652e9587751ad7ac45ddad50ff1"
      }
    ],
    "latest_version": "v0.3.0"
  },
  "readme": "<p align=\"center\">\n  <img src=\"https://storage.googleapis.com/oxylabs-public-assets/oxylabs_mcp.svg\" alt=\"Oxylabs + MCP\">\n</p>\n<h1 align=\"center\" style=\"border-bottom: none;\">\n  Oxylabs MCP Server\n</h1>\n\n<p align=\"center\">\n  <em>The missing link between AI models and the real‚Äëworld web: one API that delivers clean, structured data from any site.</em>\n</p>\n\n<div align=\"center\">\n\n[![smithery badge](https://smithery.ai/badge/@oxylabs/oxylabs-mcp)](https://smithery.ai/server/@oxylabs/oxylabs-mcp)\n[![pypi package](https://img.shields.io/pypi/v/oxylabs-mcp?color=%2334D058&label=pypi%20package)](https://pypi.org/project/oxylabs-mcp/)\n[![](https://dcbadge.vercel.app/api/server/eWsVUJrnG5?style=flat)](https://discord.gg/Pds3gBmKMH)\n[![Licence](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/f6a9c0bc-83a6-4f78-89d9-f2cec4ece98d)\n![Coverage badge](https://raw.githubusercontent.com/oxylabs/oxylabs-mcp/coverage/coverage-badge.svg)\n\n<br/>\n<a href=\"https://glama.ai/mcp/servers/@oxylabs/oxylabs-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@oxylabs/oxylabs-mcp/badge\" alt=\"Oxylabs Server MCP server\" />\n</a>\n\n</div>\n\n---\n\n## üìñ Overview\n\nThe Oxylabs MCP server provides a bridge between AI models and the web. It enables them to scrape any URL, render JavaScript-heavy pages, extract and format content for AI use, bypass anti-scraping measures, and access geo-restricted web data from 195+ countries.\n\nThis implementation leverages the Model Context Protocol (MCP) to create a secure, standardized way for AI assistants to interact with web content.\n\n---\n\n## Why Oxylabs MCP? &nbsp;üï∏Ô∏è ‚ûú üì¶ ‚ûú ü§ñ\n\nImagine telling your LLM *\"Summarise the latest Hacker News discussion about GPT‚Äë7\"* ‚Äì and it simply answers.  \nMCP (Multi‚ÄëClient Proxy) makes that happen by doing the boring parts for you:\n\n| What Oxylabs MCP does                                             | Why it matters to you                    |\n|-------------------------------------------------------------------|------------------------------------------|\n| **Bypasses anti‚Äëbot walls** with the Oxylabs global proxy network | Keeps you unblocked and anonymous        |\n| **Renders JavaScript** in headless Chrome                         | Single‚Äëpage apps, sorted                 |\n| **Cleans HTML ‚Üí JSON**                                            | Drop straight into vector DBs or prompts |\n| **Optional structured parsers** (Google, Amazon, etc.)            | One‚Äëline access to popular targets       |\n\n## ‚ú® Key Features\n\n<details>\n<summary><strong> Scrape content from any site</strong></summary>\n<br>\n\n- Extract data from any URL, including complex single-page applications\n- Fully render dynamic websites using headless browser support\n- Choose full JavaScript rendering, HTML-only, or none\n- Emulate Mobile and Desktop viewports for realistic rendering\n\n</details>\n\n<details>\n<summary><strong> Automatically get AI-ready data</strong></summary>\n<br>\n\n- Automatically clean and convert HTML to Markdown for improved readability\n- Use automated parsers for popular targets like Google, Amazon, and etc.\n\n</details>\n\n<details>\n<summary><strong> Bypass blocks & geo-restrictions</strong></summary>\n<br>\n\n- Bypass sophisticated bot protection systems with high success rate\n- Reliably scrape even the most complex websites\n- Get automatically rotating IPs from a proxy pool covering 195+ countries\n\n</details>\n\n<details>\n<summary><strong> Flexible setup & cross-platform support</strong></summary>\n<br>\n\n- Set rendering and parsing options if needed\n- Feed data directly into AI models or analytics tools\n- Works on macOS, Windows, and Linux\n\n</details>\n\n<details>\n<summary><strong> Built-in error handling and request management</strong></summary>\n<br>\n\n- Comprehensive error handling and reporting\n- Smart rate limiting and request management\n\n</details>\n\n---\n\n## üõ†Ô∏è MCP Tools\n\nOxylabs MCP provides the following tools:\n\n1. **universal_scraper**: Uses Oxylabs Web Scraper API for general website scraping.\n2. **google_search_scraper**: Uses Oxylabs Web Scraper API to extract results from Google Search.\n3. **amazon_search_scraper**: Uses Oxylabs Web Scraper API to scrape Amazon search result pages.\n4. **amazon_product_scraper**: Uses Oxylabs Web Scraper API to extract data from individual Amazon product pages.\n\n\n## üí° Example Queries\nWhen you've set up the MCP server with **Claude**, you can make requests like:\n\n- Could you scrape `https://www.google.com/search?q=ai` page?\n- Scrape `https://www.amazon.de/-/en/Smartphone-Contract-Function-Manufacturer-Exclusive/dp/B0CNKD651V` with **parse** enabled\n- Scrape `https://www.amazon.de/-/en/gp/bestsellers/beauty/ref=zg_bs_nav_beauty_0` with **parse** and **render** enabled\n- Use web unblocker with **render** to scrape `https://www.bestbuy.com/site/top-deals/all-electronics-on-sale/pcmcat1674241939957.c`\n\n---\n\n## ‚úÖ Prerequisites\n\nBefore you begin, make sure you have:\n\n- **Oxylabs Account**: Obtain your username and password from [Oxylabs](https://dashboard.oxylabs.io/) (1-week free trial available)\n\n### Basic Usage\nVia Smithery CLI:\n- **Node.js** (v16+)\n- `npx` command-line tool\n\nVia uv:\n- `uv` package manager ‚Äì install it using [this guide](https://docs.astral.sh/uv/getting-started/installation/)\n\n### Local/Dev Setup\n- **Python 3.12+**\n- `uv` package manager ‚Äì install it using [this guide](https://docs.astral.sh/uv/getting-started/installation/)\n\n---\n\n## üß© API Parameters\n\nThe Oxylabs MCP Universal Scraper accepts these parameters:\n\n| Parameter         | Description                                     | Values                    |\n|-------------------|-------------------------------------------------|---------------------------|\n| `url`             | The URL to scrape                               | Any valid URL             |\n| `render`          | Use headless browser rendering                  | `html` or `None`          |\n| `geo_location`    | Sets the proxy's geo location to retrieve data. | `Brasil`, `Canada`, etc.  |\n| `user_agent_type` | Device type and browser                         | `desktop`, `tablet`, etc. |\n| `output_format`   | The format of the output                        | `links`, `md`, `html`     |\n\n---\n\n## üîß Configuration\n\n[![Install MCP Server](https://cursor.com/deeplink/mcp-install-dark.svg)](https://cursor.com/install-mcp?name=oxylabs&config=eyJjb21tYW5kIjoidXZ4IG94eWxhYnMtbWNwIiwiZW52Ijp7Ik9YWUxBQlNfVVNFUk5BTUUiOiJPWFlMQUJTX1VTRVJOQU1FIiwiT1hZTEFCU19QQVNTV09SRCI6Ik9YWUxBQlNfUEFTU1dPUkQifX0%3D)\n\n<details>\n<summary><strong><code>smithery</code></strong></summary>\n\n1. Go to https://smithery.ai/server/@oxylabs/oxylabs-mcp\n2. Login with GitHub\n3. Find the _Install_ section\n4. Follow the instructions to generate the config\n\nAuto install with Smithery CLI\n```bash\n# example for Claude Desktop\nnpx -y @smithery/cli@latest install @upstash/context7-mcp --client claude --key <smithery_key>\n```\n</details>\n\n<details>\n<summary><strong><code>uvx</code></strong></summary>\n\n1. Install the uv\n```bash\n# macOS and Linux\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Windows\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\n2. Use the following config\n```json\n{\n  \"mcpServers\": {\n    \"oxylabs\": {\n      \"command\": \"uvx\",\n      \"args\": [\"oxylabs-mcp\"],\n      \"env\": {\n        \"OXYLABS_USERNAME\": \"OXYLABS_USERNAME\",\n        \"OXYLABS_PASSWORD\": \"OXYLABS_PASSWORD\"\n      }\n    }\n  }\n}\n```\n</details>\n\n<details>\n<summary><strong><code>uv</code></strong></summary>\n\n1. Install the uvx \n```bash\n# macOS and Linux\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Windows\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\n2. Use the following config\n```json\n{\n  \"mcpServers\": {\n    \"oxylabs\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/<Absolute-path-to-folder>/oxylabs-mcp\",\n        \"run\",\n        \"oxylabs-mcp\"\n      ],\n      \"env\": {\n        \"OXYLABS_USERNAME\": \"OXYLABS_USERNAME\",\n        \"OXYLABS_PASSWORD\": \"OXYLABS_PASSWORD\"\n      }\n    }\n  }\n}\n```\n</details>\n\n### Manual Setup with Claude Desktop\n\nNavigate to **Claude ‚Üí Settings ‚Üí Developer ‚Üí Edit Config** and add one of the configurations above to the `claude_desktop_config.json` file.\n\n### Manual Setup with Cursor AI\n\nNavigate to **Cursor ‚Üí Settings ‚Üí Cursor Settings ‚Üí MCP**. Click **Add new global MCP server** and add one of the configurations above.\n\n---\n\n## ‚öôÔ∏è Environment variables\n\nOxylabs MCP server supports the following environment variables\n\n| Name               | Description                                   | Mandatory           | Default |\n|--------------------|-----------------------------------------------|---------------------|---------|\n| `OXYLABS_USERNAME` | Your Oxylabs username                         | true                |         |\n| `OXYLABS_PASSWORD` | Your Oxylabs password                         | true                |         |\n| `LOG_LEVEL`        | Log level for the logs returned to the client | false               | `INFO`  |\n\n---\n\n## üìù Logging\n\nServer provides additional information about the tool calls in `notification/message` events\n\n```json\n{\n  \"method\": \"notifications/message\",\n  \"params\": {\n    \"level\": \"info\",\n    \"data\": \"Create job with params: {\\\"url\\\": \\\"https://ip.oxylabs.io\\\"}\"\n  }\n}\n```\n\n```json\n{\n  \"method\": \"notifications/message\",\n  \"params\": {\n    \"level\": \"info\",\n    \"data\": \"Job info: job_id=7333113830223918081 job_status=done\"\n  }\n}\n```\n\n```json\n{\n  \"method\": \"notifications/message\",\n  \"params\": {\n    \"level\": \"error\",\n    \"data\": \"Error: request to Oxylabs API failed\"\n  }\n}\n```\n\n---\n\n## üõ°Ô∏è License\n\nDistributed under the MIT License ‚Äì see [LICENSE](LICENSE) for details.\n\n---\n\n## About Oxylabs\n\nEstablished in 2015, Oxylabs is a market-leading web intelligence collection\nplatform, driven by the highest business, ethics, and compliance standards,\nenabling companies worldwide to unlock data-driven insights.\n\n[![image](https://oxylabs.io/images/og-image.png)](https://oxylabs.io/)\n\n<div align=\"center\">\n<sub>\n  Made with ‚òï by <a href=\"https://oxylabs.io\">Oxylabs</a>.  Feel free to give us a ‚≠ê if MCP saved you a weekend.\n</sub>\n</div>\n"
}