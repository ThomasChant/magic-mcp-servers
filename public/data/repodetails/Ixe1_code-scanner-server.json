{
  "mcp_name": "Ixe1/code-scanner-server",
  "mcp_description": "A versatile tool for scanning code files, extracting definitions, and providing LLM-friendly outputs, with dual operation as a CLI tool and MCP server.",
  "mcp_id": "Ixe1_code-scanner-server",
  "fetch_timestamp": "2025-06-23T05:04:23.989249Z",
  "github_url": "https://github.com/Ixe1/code-scanner-server",
  "repository": {
    "name": "code-scanner-server",
    "full_name": "Ixe1/code-scanner-server",
    "description": "CLI & MCP server for scanning code definitions (.gitignore aware, LLM output)",
    "html_url": "https://github.com/Ixe1/code-scanner-server",
    "created_at": "2025-04-06T15:37:16Z",
    "updated_at": "2025-06-22T09:37:01Z",
    "pushed_at": "2025-06-22T09:36:57Z",
    "size": 46,
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks_count": 2,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": "GNU General Public License v3.0",
    "topics": [
      "ai",
      "mcp",
      "mcp-server",
      "typescript"
    ],
    "default_branch": "main",
    "owner": {
      "login": "Ixe1",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/96985590?v=4",
      "html_url": "https://github.com/Ixe1"
    },
    "has_issues": true,
    "has_projects": false,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 2,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 64413
    },
    "language_percentages": {
      "JavaScript": 100
    },
    "pull_requests_count": 1,
    "contributors_count": 2,
    "package_json_version": "0.1.0"
  },
  "readme": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/ixe1-code-scanner-server-badge.png)](https://mseep.ai/app/ixe1-code-scanner-server)\n\n# `code-scanner-server`\n\n> A CLI tool and MCP server that scans code files for definitions (classes, functions, etc.), respects .gitignore, provides line numbers, and outputs LLM-friendly formats (XML/Markdown).\n\nThis project provides a versatile code scanning tool built with TypeScript and Node.js. It leverages the Tree-sitter parsing library to analyze source code and extract structural information. It can operate both as a command-line interface (CLI) tool and as an MCP (Model Context Protocol) server.\n\n> **Note:** This tool is under active development. While core functionality is operational, some features or specific language parsers may not be fully tested and might contain bugs or limitations.\n\n## Features\n\n*   **Code Definition Extraction:** Identifies functions, classes, variables, interfaces, methods, etc.\n*   **Multi-Language Support:** Parses JavaScript (`.js`, `.jsx`), TypeScript (`.ts`, `.tsx`), C# (`.cs`), PHP (`.php`), CSS (`.css`), and Python (`.py`) via Tree-sitter.\n*   **.gitignore Aware:** Automatically respects rules defined in `.gitignore` files.\n*   **Flexible Filtering:** Filter results by definition type, modifiers (`public`, `private`), name patterns (regex), and file path patterns.\n*   **Multiple Output Formats:** Generates results in Markdown (default), XML, or JSON.\n*   **Configurable Detail Levels:** Output verbosity: `minimal`, `standard` (default), `detailed`.\n*   **Dual Mode Operation:** Run as a standalone CLI tool or as an integrated MCP server.\n\n## Usage Modes\n\n### 1. Command-Line Interface (CLI)\n\nRun the scanner directly from your terminal. This mode requires the `--directory` argument specifying the target codebase.\n\n**Basic Usage:**\n```bash\nnode build/index.js --directory /path/to/your/codebase\n```\n\n**Common Options:**\n*   `-d, --directory <path>`: (Required) Absolute or relative path to the directory to scan.\n*   `-p, --patterns <patterns...>`: Glob patterns for file extensions (e.g., `\"**/*.ts\"` ` \"**/*.js\"`). Defaults to JS, TSX, CS, PHP, CSS, PY files.\n*   `-f, --format <format>`: Output format (`xml`, `markdown`, `json`). Default: `markdown`.\n*   `-l, --detail <level>`: Level of detail (`minimal`, `standard`, `detailed`). Default: `standard`.\n*   `--include-types <types...>`: Only include specific definition types (e.g., `class`, `method`).\n*   `--exclude-types <types...>`: Exclude specific definition types.\n*   `--include-modifiers <modifiers...>`: Only include definitions with specific modifiers (e.g., `public`).\n*   `--exclude-modifiers <modifiers...>`: Exclude definitions with specific modifiers.\n*   `--name-pattern <regex>`: Include definitions matching a JavaScript regex pattern.\n*   `--exclude-name-pattern <regex>`: Exclude definitions matching a JavaScript regex pattern.\n*   `--include-paths <paths...>`: Additional file path patterns (glob) to include.\n*   `--exclude-paths <paths...>`: File path patterns (glob) to exclude.\n*   `-h, --help`: Display detailed help information for all options.\n\n**Example (Scan TypeScript files in `src`, output detailed JSON):**\n```bash\nnode build/index.js -d ./src -p \"**/*.ts\" -f json -l detailed\n```\n\n### 2. MCP Server Mode (`scan_code` tool)\n\nIf run without the `--directory` argument, the tool starts as an MCP server, listening for requests via standard input/output. This allows integration with MCP clients like AI assistants.\n\n*   **Tool Name:** `scan_code`\n*   **Description:** Scans a specified directory for code files and returns a list of definitions according to the provided filters.\n*   **Input Schema:** Accepts arguments corresponding to the CLI options. The `directory` property is required.\n    ```json\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"directory\": { \"type\": \"string\", \"description\": \"Absolute path to the directory to scan.\" },\n        \"filePatterns\": { \"type\": \"array\", \"items\": { \"type\": \"string\" }, \"description\": \"Glob patterns for files.\", \"default\": [\"**/*.js\", ..., \"**/*.py\"] },\n        \"outputFormat\": { \"type\": \"string\", \"enum\": [\"xml\", \"markdown\", \"json\"], \"default\": \"markdown\" },\n        \"detailLevel\": { \"type\": \"string\", \"enum\": [\"minimal\", \"standard\", \"detailed\"], \"default\": \"standard\" },\n        \"includeTypes\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n        \"excludeTypes\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n        \"includeModifiers\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n        \"excludeModifiers\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n        \"namePattern\": { \"type\": \"string\", \"description\": \"Regex pattern for names.\" },\n        \"excludeNamePattern\": { \"type\": \"string\", \"description\": \"Regex pattern to exclude names.\" },\n        \"includePaths\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n        \"excludePaths\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }\n      },\n      \"required\": [\"directory\"]\n    }\n    ```\n*   **Example Usage with AI Assistant:** \"Use code-scanner-server scan_code on directory /path/to/project outputting xml format.\"\n\n## Installation\n\n1.  **Prerequisites:** Ensure you have Node.js and npm installed.\n2.  **Clone (Optional):** If you don't have the code, clone the repository.\n    ```bash\n    # git clone <repository_url>\n    # cd code-scanner-server\n    ```\n3.  **Install Dependencies:**\n    ```bash\n    npm install\n    ```\n4.  **Build:** Compile the TypeScript code.\n    ```bash\n    npm run build\n    ```\n    This creates the executable JavaScript file at `build/index.js`.\n\n## Configuration (MCP Server)\n\nTo use the MCP server mode, add it to your MCP client's configuration file (e.g., `claude_desktop_config.json` for the desktop app or `cline_mcp_settings.json` for the VS Code extension).\n\n**Important:** Replace `/path/to/code-scanner-server` in the example below with the **absolute path** to this project's directory on your system.\n\n**Example (`claude_desktop_config.json` / `cline_mcp_settings.json`):**\n```json\n{\n  \"mcpServers\": {\n    \"code-scanner-server\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/absolute/path/to/your/code-scanner-server/build/index.js\" // <-- Replace this path! (e.g., \"C:\\\\Users\\\\YourUser\\\\Projects\\\\code-scanner-server\\\\build\\\\index.js\" on Windows)\n      ],\n      \"env\": {},\n      \"disabled\": false,\n      \"autoApprove\": [] // Add tool names here for auto-approval if desired\n    }\n  }\n}\n```\n*Remember to restart your MCP client application (IDE, Desktop App) after modifying the configuration for changes to take effect.*\n\n## Development\n\n*   **Watch Mode:** Automatically rebuild the project when source files change:\n    ```bash\n    npm run watch\n    ```\n*   **Debugging (MCP Mode):** Debugging MCP servers over stdio can be complex. Use the MCP Inspector tool for easier debugging:\n    ```bash\n    npm run inspector\n    ```\n    This starts the server with the Node.js inspector attached and provides a URL to connect debugging tools (like Chrome DevTools).\n\n## Acknowledgments\n\nThis project was significantly developed with the assistance of AI, primarily using Google's Gemini 2.5 Pro model accessed via the Roo Code extension for Visual Studio Code.\n\n## License\n\nThis project is licensed under the GNU General Public License v3.0 - see the [LICENSE](LICENSE) file for details.\n"
}