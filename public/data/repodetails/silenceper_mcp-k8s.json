{
  "mcp_name": "silenceper/mcp-k8s",
  "mcp_description": "🏎️ ☁️/🏠 - MCP-K8S is an AI-driven Kubernetes resource management tool that allows users to operate any resources in Kubernetes clusters through natural language interaction, including native resources (like Deployment, Service) and custom resources (CRD). No need to memorize complex commands - just describe your needs, and AI will accurately execute the corresponding cluster operations, greatly enhancing the usability of Kubernetes.",
  "mcp_id": "silenceper_mcp-k8s",
  "fetch_timestamp": "2025-06-23T08:26:15.060185Z",
  "github_url": "https://github.com/silenceper/mcp-k8s",
  "repository": {
    "name": "mcp-k8s",
    "full_name": "silenceper/mcp-k8s",
    "description": "A Kubernetes MCP (Model Control Protocol) server that enables interaction with Kubernetes clusters through MCP tools.",
    "html_url": "https://github.com/silenceper/mcp-k8s",
    "created_at": "2025-04-03T08:56:13Z",
    "updated_at": "2025-06-18T09:31:05Z",
    "pushed_at": "2025-05-08T11:43:09Z",
    "size": 697,
    "stargazers_count": 104,
    "watchers_count": 104,
    "forks_count": 20,
    "open_issues_count": 0,
    "language": "Go",
    "license": "Apache License 2.0",
    "topics": [
      "debug",
      "kubernetes",
      "mcp",
      "mcp-server"
    ],
    "default_branch": "main",
    "owner": {
      "login": "silenceper",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/2044558?v=4",
      "html_url": "https://github.com/silenceper"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 20,
    "subscribers_count": 1,
    "languages": {
      "Go": 51526,
      "Makefile": 1687,
      "Dockerfile": 666
    },
    "language_percentages": {
      "Go": 95.63,
      "Makefile": 3.13,
      "Dockerfile": 1.24
    },
    "pull_requests_count": 15,
    "contributors_count": 5,
    "latest_release": {
      "tag_name": "v1.0.5",
      "name": "v1.0.5",
      "published_at": "2025-05-08T11:48:55Z",
      "body": "## What's Changed\r\n* Bump helm.sh/helm/v3 from 3.15.2 to 3.17.3 by @dependabot in https://github.com/silenceper/mcp-k8s/pull/14\r\n* Bump github.com/docker/docker from 25.0.5+incompatible to 25.0.6+incompatible by @dependabot in https://github.com/silenceper/mcp-k8s/pull/12\r\n* Bump github.com/containerd/containerd from 1.7.12 to 1.7.27 by @dependabot in https://github.com/silenceper/mcp-k8s/pull/13\r\n* rename cmd/server to cmd/mcp-k8s by @optionals in https://github.com/silenceper/mcp-k8s/pull/16\r\n* update .goreleaser.yml by @silenceper in https://github.com/silenceper/mcp-k8s/pull/17\r\n\r\n## New Contributors\r\n* @optionals made their first contribution in https://github.com/silenceper/mcp-k8s/pull/16\r\n\r\n**Full Changelog**: https://github.com/silenceper/mcp-k8s/compare/v1.0.4...v1.0.5",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v1.0.5",
        "commit_sha": "a447f7c3d92e1a9b1353bb36a0f9279c4e5c1fe8"
      },
      {
        "name": "v1.0.4",
        "commit_sha": "87e172db5896816071ba7de75d940cd1baed70a1"
      },
      {
        "name": "v1.0.3",
        "commit_sha": "1917a8ab65d10268616092158ff0bd0a3d3591c2"
      },
      {
        "name": "v1.0.2",
        "commit_sha": "0843ae9384ff31175471814afd6670f73c796671"
      },
      {
        "name": "v1.0.1",
        "commit_sha": "9e834dc11d1bd1f5446c1bf4f6fc93764873d9af"
      },
      {
        "name": "v1.0.0",
        "commit_sha": "41f1ad0d0e1bac0d1065483bea1f49e7924249d2"
      }
    ],
    "latest_version": "v1.0.5"
  },
  "readme": "# mcp-k8s\n\n[![Go Version](https://img.shields.io/github/go-mod/go-version/silenceper/mcp-k8s)](https://github.com/silenceper/mcp-k8s/blob/main/go.mod)\n[![License](https://img.shields.io/github/license/silenceper/mcp-k8s)](https://github.com/silenceper/mcp-k8s/blob/main/LICENSE)\n[![Latest Release](https://img.shields.io/github/v/release/silenceper/mcp-k8s)](https://github.com/silenceper/mcp-k8s/releases)\n[![Go Report Card](https://goreportcard.com/badge/github.com/silenceper/mcp-k8s)](https://goreportcard.com/report/github.com/silenceper/mcp-k8s)\n[![Go CI](https://github.com/silenceper/mcp-k8s/actions/workflows/go-ci.yml/badge.svg)](https://github.com/silenceper/mcp-k8s/actions/workflows/go-ci.yml)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/silenceper/mcp-k8s/pulls)\n\nA Kubernetes MCP (Model Control Protocol) server that enables interaction with Kubernetes clusters through MCP tools.\n\n## Features\n\n- Query supported Kubernetes resource types (built-in resources and CRDs)\n- Kubernetes resource operations with fine-grained control\n  - Read operations: get resource details, list resources by type with filtering options\n  - Write operations: create, update, and delete resources (each can be independently enabled/disabled)\n  - Support for all Kubernetes resource types, including custom resources\n- Connects to Kubernetes cluster using kubeconfig\n- Helm support with fine-grained control\n  - Helm releases management (list, get, install, upgrade, uninstall)\n  - Helm repositories management (list, add, remove)\n  - Each operation can be independently enabled/disabled\n\n## Preview\n> Interaction through cursor\n\n![](./docs/create-deployment.png)\n\n## Use Cases\n\n### 1. Kubernetes Resource Management via LLM\n\n- **Interactive Resource Management**: Manage Kubernetes resources through natural language interaction with LLM, eliminating the need to memorize complex kubectl commands\n- **Batch Operations**: Describe complex batch operation requirements in natural language, letting LLM translate them into specific resource operations\n- **Resource Status Queries**: Query cluster resource status using natural language and receive easy-to-understand responses\n\n### 2. Automated Operations Scenarios\n\n- **Intelligent Operations Assistant**: Serve as an intelligent assistant for operators in daily cluster management tasks\n- **Problem Diagnosis**: Assist in cluster problem diagnosis through natural language problem descriptions\n- **Configuration Review**: Leverage LLM's understanding capabilities to help review and optimize Kubernetes resource configurations\n\n### 3. Development and Testing Support\n\n- **Quick Prototype Validation**: Developers can quickly create and validate resource configurations through natural language\n- **Environment Management**: Simplify test environment resource management, quickly create, modify, and clean up test resources\n- **Configuration Generation**: Automatically generate resource configurations that follow best practices based on requirement descriptions\n\n### 4. Education and Training Scenarios\n\n- **Interactive Learning**: Newcomers can learn Kubernetes concepts and operations through natural language interaction\n- **Best Practice Guidance**: LLM provides best practice suggestions during resource operations\n- **Error Explanation**: Provide easy-to-understand error explanations and correction suggestions when operations fail\n\n## Architecture\n\n### 1. Project Overview\n\nAn stdio-based MCP server that connects to Kubernetes clusters and provides the following capabilities:\n- Query Kubernetes resource types (including built-in resources and CRDs)\n- CRUD operations on Kubernetes resources (with configurable write operations)\n- Helm operations for release and repository management\n\n### 2. Technical Stack\n\n- Go\n- [mcp-go](https://github.com/mark3labs/mcp-go) SDK\n- Kubernetes client-go library\n- Helm v3 client library\n- Stdio for communication\n\n### 3. Core Components\n\n1. **MCP Server**: Uses mcp-go's `mcp-k8s` package to create an stdio-based MCP server\n2. **K8s Client**: Uses client-go to connect to Kubernetes clusters\n3. **Helm Client**: Uses Helm v3 library for Helm operations\n4. **Tool Implementations**: Implements various MCP tools for different Kubernetes operations\n\n### 4. Available Tools\n\n#### Resource Type Query Tools\n- `get_api_resources`: Get all supported API resource types in the cluster\n\n#### Resource Operation Tools\n- `get_resource`: Get detailed information about a specific resource\n- `list_resources`: List all instances of a resource type\n- `create_resource`: Create new resources (can be disabled)\n- `update_resource`: Update existing resources (can be disabled)\n- `delete_resource`: Delete resources (can be disabled)\n\n#### Helm Operation Tools\n- `list_helm_releases`: List all Helm releases in the cluster\n- `get_helm_release`: Get detailed information about a specific Helm release\n- `install_helm_chart`: Install a Helm chart (can be disabled)\n- `upgrade_helm_chart`: Upgrade a Helm release (can be disabled)\n- `uninstall_helm_chart`: Uninstall a Helm release (can be disabled)\n- `list_helm_repositories`: List configured Helm repositories\n- `add_helm_repository`: Add a new Helm repository (can be disabled)\n- `remove_helm_repository`: Remove a Helm repository (can be disabled)\n\n## Usage\n\nmcp-k8s supports two communication modes:\n\n### 1. Stdio Mode (Default)\n\nIn stdio mode, mcp-k8s communicates with the client through standard input/output streams. This is the default mode and is suitable for most use cases.\n\n```bash\n# Run in stdio mode (default)\n{\n    \"mcpServers\":\n    {\n        \"mcp-k8s\":\n        {\n            \"command\": \"/path/to/mcp-k8s\",\n            \"args\":\n            [\n                \"-kubeconfig\",\n                \"/path/to/kubeconfig\",\n                \"-enable-create\",\n                \"-enable-delete\",\n                \"-enable-update\",\n                \"-enable-list\",\n                \"-enable-helm-install\",\n                \"-enable-helm-upgrade\"\n            ]\n        }\n    }\n}\n```\n\n### 2. SSE Mode\n\nIn SSE (Server-Sent Events) mode, mcp-k8s exposes an HTTP endpoint to mcp client.\nYou can deploy the service on a remote server (but you need to pay attention to security)\n\n```bash\n# Run in SSE mode\n./bin/mcp-k8s -kubeconfig=/path/to/kubeconfig -transport=sse -port=8080 -host=localhost -enable-create -enable-delete -enable-list -enable-update -enable-helm-install\n# This command will open all operations\n```\n\nmcp config\n```json\n{\n  \"mcpServers\": {\n    \"mcp-k8s\": {\n      \"url\": \"http://localhost:8080/sse\",\n      \"args\": []\n    }\n  }\n}\n```\n\nSSE mode configuration:\n- `-transport`: Set to \"sse\" to enable SSE mode\n- `-port`: HTTP server port (default: 8080)\n- `--host`: HTTP server host (default: \"localhost\")\n\n### 3. Docker environment\n#### SSE Mode\n\n1. Complete Example\nAssuming your image name is mcp-k8s and you need to map ports and set environment parameters, you can run:\n```bash\ndocker run --rm -p 8080:8080 -i -v ~/.kube/config:/root/.kube/config ghcr.io/silenceper/mcp-k8s:latest -transport=sse\n```\n#### stdio Mode\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-k8s\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"-v\",\n        \"~/.kube/config:/root/.kube/config\",\n        \"--rm\",\n        \"ghcr.io/silenceper/mcp-k8s:latest\"\n      ]\n    }\n  }\n}\n```\n\n\n## Getting Started\n\n### Direct Usage\nYou can directly download the binary for your platform from the [releases page](https://github.com/silenceper/mcp-k8s/releases) and use it immediately.\n\n### Go Install\n\n```bash\ngo install github.com/silenceper/mcp-k8s/cmd/mcp-k8s@latest\n```\n\n### Build\n\n```bash\ngit clone https://github.com/silenceper/mcp-k8s.git\ncd mcp-k8s\ngo build -o bin/mcp-k8s cmd/mcp-k8s/main.go\n```\n\n### Command Line Arguments\n\n#### Kubernetes Resource Operations\n- `-kubeconfig`: Path to Kubernetes configuration file (uses default config if not specified)\n- `-enable-create`: Enable resource creation operations (default: false)\n- `-enable-update`: Enable resource update operations (default: false)\n- `-enable-delete`: Enable resource deletion operations (default: false)\n- `-enable-list`: Enable resource list operations (default: true)\n\n#### Helm Operations\n- `-enable-helm-release-list`: Enable Helm release list operations (default: true)\n- `-enable-helm-release-get`: Enable Helm release get operations (default: true)\n- `-enable-helm-install`: Enable Helm chart installation (default: false)\n- `-enable-helm-upgrade`: Enable Helm chart upgrade (default: false)\n- `-enable-helm-uninstall`: Enable Helm chart uninstallation (default: false)\n- `-enable-helm-repo-list`: Enable Helm repository list operations (default: true)\n- `-enable-helm-repo-add`: Enable Helm repository add operations (default: false)\n- `-enable-helm-repo-remove`: Enable Helm repository remove operations (default: false)\n\n#### Transport Configuration\n- `-transport`: Transport type (stdio or sse) (default: \"stdio\")\n- `-host`: Host for SSE transport (default \"localhost\")\n- `-port`: TCP port for SSE transport (default 8080)\n\n### Integration with MCP Clients\n\nmcp-k8s is an stdio-based MCP server that can be integrated with any MCP-compatible LLM client. Refer to your MCP client's documentation for integration instructions.\n\n## Security Considerations\n\n- Write operations are strictly controlled through independent configuration switches\n- Uses RBAC to ensure K8s client has only necessary permissions\n- Validates all user inputs to prevent injection attacks\n- Helm operations follow the same security principles with read operations enabled by default and write operations disabled by default\n\n## Follow WeChat Official Account\n![AI技术小林](./docs/qrcode.png)\n"
}