{
  "mcp_name": "gdcc/mcp-dataverse",
  "mcp_description": "Facilitates multilingual data integration and exploration in Dataverse using Croissant ML.",
  "mcp_id": "gdcc_mcp-dataverse",
  "fetch_timestamp": "2025-06-23T03:43:37.216804Z",
  "github_url": "https://github.com/gdcc/mcp-dataverse",
  "repository": {
    "name": "mcp-dataverse",
    "full_name": "gdcc/mcp-dataverse",
    "description": null,
    "html_url": "https://github.com/gdcc/mcp-dataverse",
    "created_at": "2025-04-28T21:04:38Z",
    "updated_at": "2025-06-20T20:43:06Z",
    "pushed_at": "2025-06-11T11:22:48Z",
    "size": 137,
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks_count": 1,
    "open_issues_count": 1,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "gdcc",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/71059741?v=4",
      "html_url": "https://github.com/gdcc"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 5,
    "languages": {
      "Python": 85434,
      "Dockerfile": 902
    },
    "language_percentages": {
      "Python": 98.96,
      "Dockerfile": 1.04
    },
    "pull_requests_count": 9,
    "contributors_count": 2
  },
  "readme": "# MCP (Model Context Protocol) server for Dataverse\n\nCredits: this work is funded by the [SSHOC-NL](https://sshoc.nl) project developing [Semantic Croissant](https://docs.google.com/document/d/1fi9Lb6x5Wm0L9CZftqjSGElV_ifcSW_IT-H8ZlpbrtQ/edit?tab=t.0). The first version of [Croissant](https://docs.mlcommons.org/croissant/docs/croissant-spec.html) export for Dataverse was implemented by Philip Durbin (Harvard IQSS) and Slava Tykhonov (DANS-KNAW).\n\nCroissant is a special language for machines, built on top of Schema.org. With Croissant, we aim to solve multilingual challenges and finally speak the same language across the planet.\nEven if it's artificial.\n\n## Getting started with mcp.dataverse.org\n\nWhen getting started, we recommend the public MCP server for Dataverse at <https://mcp.dataverse.org>. (Below you'll also find instructions on how to run the MCP server locally.) You can visit https://mcp.dataverse.org/tools for an inventory of available tools.\n\nYou will need an MCP client with AI agent support such as [Cursor](https://www.cursor.com), [Visual Studio Code](https://code.visualstudio.com), [Claude Desktop](https://claude.ai/download), [Windsurf Editor](https://windsurf.com), or [Zed](https://zed.dev).\n\n### (Optional) Command line test\n\nBefore you get too far into configuring your MCP client, you could try this quick test to get information about a dataset by passing its DOI.\n\n```\ncurl -X POST \"https://mcp.dataverse.org/tools/get_croissant_record\" -H \"Content-Type: application/json\" -d '{\"doi\":\"doi:10.7910/DVN/WGCRY7\"}'\n```\n\n### Configuring your MCP Client\n\nYou'll be using https://mcp.dataverse.org/sse as the URL and SSE (Server-Sent Events) as the type of MCP server.\n\nClick the arrow to expand instructions for your MCP client.\n\n<details><summary>Cursor</summary>\n\nCreate a configuration file for Cursor at [~/.cursor/mcp.json](https://docs.cursor.com/context/model-context-protocol):\n\n```\n{\n  \"mcpServers\": {\n    \"Croissant\": {\n      \"url\": \"https://mcp.dataverse.org/sse\",\n      \"headers\": {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  }\n}\n```\n\nEnsure that \"auto\" is selected as the agent.\n</details>\n\n<details><summary>Visual Studio Code</summary>\n\nTo register the MCP server in Visual Studio Code ([official docs](https://code.visualstudio.com/docs/copilot/chat/mcp-servers)), open settings and search for \"mcp\". Click the link \"edit in settings.json\" under \"Model Context Protocol server configurations\" and paste the \"mcp-dataverse\" object below, which is shown in a simplified version of that configuration file.\n\n```\n{\n...\n  \"mcp\": {\n    \"servers\": {\n      \"mcp-dataverse\": {\n        \"type\": \"sse\",\n        \"url\": \"https://mcp.dataverse.org/sse\"\n      }\n    }\n  }\n...\n}\n```\n\nNext, click \"view\", then \"open chat\". Choose \"Agent\" in the dropdown that offers \"Ask\", \"Edit\", and \"Agent\".\n\nYour new MCP server should be configured for use but you can check if it are enabled by clicking the \"select tools\" icon (just below the chat input area) and scrolling down (here you can also try the \"add more tools\" button).\n</details>\n\n<details><summary>Claude Desktop</summary>\n\nTo register the MCP server in Claude Desktop ([official docs](https://modelcontextprotocol.io/quickstart/user)), open your settings, click \"Developer\", and then click \"edit config\". Paste the following into the config file (`claude_desktop_config.json`):\n\n```\n{\n  \"mcpServers\": {\n    \"mcp-dataverse\": {\n      \"command\": \"npx\",\n      \"args\": [\"mcp-remote\", \"https://mcp.dataverse.org/sse\"]\n    }\n  }\n}\n```\n\nRestart Claude Desktop. If you click \"search and tools\" (just below the prompt) you should see \"mcp-dataverse\".\n</details>\n\n<details><summary>Windsurf</summary>\n\nAs explained in the [Windsurf docs](https://docs.windsurf.com/windsurf/cascade/mcp), configure\n`~/.codeium/windsurf/mcp_config.json` with the following.\n\n```\n{\n  \"mcpServers\": {\n    \"mcp-dataverse\": {\n      \"serverUrl\": \"https://mcp.dataverse.org/sse\"\n    }\n  }\n}\n```\n</details>\n\n<details><summary>Zed</summary>\n\nAs explained in the [Zed docs](https://zed.dev/docs/ai/mcp), add the following to `settings.json` (the `...` indicates there are probably additional lines in your file):\n\n```\n{\n  \"context_servers\": {\n    \"mcp-dataverse\": {\n      \"command\": {\n        \"path\": \"npx\",\n        \"args\": [\"-y\", \"mcp-remote\", \"https://mcp.dataverse.org/sse\"],\n        \"env\": null\n      },\n      \"settings\": {}\n    }\n  }\n...\n}\n\n```\n\n</details>\n\n### Chat examples\n\nHere are some suggested examples to use when chatting with the MCP server.\n\n#### Explore a dataset\n\nType in the chat of Agent:\n```\nConnect to the MCP server running at https://mcp.dataverse.org and explore all tools using the curl command.\n\nExplore dataset doi:10.7910/DVN/6TFFPG\n```\nIf everything is connected properly you should see this response from the Agent:\n```\nBased on the dataset information, this is a scientific dataset related to quantum physics research. Here are the key details:\nDataset Title: \"Replication Data for: All-Optical Photoluminescence Spectra of Nitrogen-Vacancy Ensembles in Diamond at Low Magnetic Fields\"\nDescription:\nThis dataset contains experimental data from research on Nitrogen-Vacancy (NV) centers in diamond\nIt includes data shown in both the main text and supplemental material of the associated scientific paper\nThe research focuses on photoluminescence spectra at low magnetic fields\n```\n\n#### Multilingual support\n\nLet's connect to a dataset in Dutch and ask questions in English. Example dataset is taken from [DANS Archaelogy Data Station](https://archaeology.datastations.nl/dataset.xhtml?persistentId=doi:10.17026/AR/IQZTRX):\n```\ngive me an overview of doi:10.17026/dans-xv2-dsx6\n```\nThe response in English:\n```\nHere's a comprehensive overview of the dataset with DOI 10.17026/AR/IQZTRX:\nBasic Information:\nTitle: \"Plangebied Epemawei te Ysbrechtum\" (Planning Area Epemawei in Ysbrechtum)\nDescription: Archaeological investigation report for the Epemawei area in Ysbrechtum\nCreator: B.I. van Hoof (RAAP Archeologisch Adviesbureau BV)\nDate Created: April 18, 2025\nVersion: 6.3 build DANS-DataStation-PATCH-10\nKey Findings:\nSoil investigation revealed:\nTidal deposits\nEroded peat remnants\nMiddelzee deposits\nNo evidence of archaeological sites was found\nNo further archaeological investigation recommended\nContent Structure:\nThe dataset contains 4 files:\nRAAPrap_7313_SFEP_20240821.pdf (2.7 MB)\nMain report document\nContains detailed findings and analysis\nSFEP_boorgegevens.GeoJson (28.4 KB)\nGeological data in GeoJSON format\nContains drilling data\nSFEP_rapport_meta.ods (22.9 KB)\nReport metadata in spreadsheet format\nSFEP_tabellijst.ods (11.7 KB)\nTable list in spreadsheet format\nTechnical Information:\nLicense: Creative Commons Attribution 4.0 (CC BY 4.0)\nFile Formats:\nPDF (application/pdf)\nGeoJSON (application/octet-stream)\nOpenDocument Spreadsheet (application/vnd.oasis.opendocument.spreadsheet)\nAll files have MD5 checksums for verification\nContext:\nLocation: Ysbrechtum, Netherlands\nType: Archaeological investigation report\nPurpose: Planning area assessment\nConducted by: RAAP Archeological Advisory Bureau\nThis dataset is valuable for:\nArchaeological research\nUrban planning\nHistorical geography\nEnvironmental studies\nCultural heritage management\n```\n\n## Local installation\n\n```\ncp .env-sample .env\ndocker-compose build\ndocker-compose up -d\n```\n\nGo to http://127.0.0.1:8000/tools to get an overview of available tools.\n\n### Test Croissant support for Dataverse\n```\ncurl -X POST \"http://localhost:8000/tools/get_croissant_record\" -H \"Content-Type: application/json\" -d '{\"doi\":\"doi:10.7910/DVN/WGCRY7\"}'\n```\n"
}