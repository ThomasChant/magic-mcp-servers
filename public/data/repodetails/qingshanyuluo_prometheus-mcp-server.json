{
  "mcp_name": "qingshanyuluo/prometheus-mcp-server",
  "mcp_description": "A streamlined Prometheus MCP server designed for metric collection and AI-friendly analysis.",
  "mcp_id": "qingshanyuluo_prometheus-mcp-server",
  "fetch_timestamp": "2025-06-23T07:43:21.143717Z",
  "github_url": "https://github.com/qingshanyuluo/prometheus-mcp-server",
  "repository": {
    "name": "prometheus-mcp-server",
    "full_name": "qingshanyuluo/prometheus-mcp-server",
    "description": "一个简化版的Prometheus MCP服务器，用于收集和暴露MCP服务器的指标",
    "html_url": "https://github.com/qingshanyuluo/prometheus-mcp-server",
    "created_at": "2025-04-28T06:16:37Z",
    "updated_at": "2025-06-12T08:16:13Z",
    "pushed_at": "2025-04-29T05:14:36Z",
    "size": 29,
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks_count": 0,
    "open_issues_count": 1,
    "language": "Go",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "qingshanyuluo",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/45786195?v=4",
      "html_url": "https://github.com/qingshanyuluo"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Go": 15288,
      "JavaScript": 1690
    },
    "language_percentages": {
      "Go": 90.05,
      "JavaScript": 9.95
    },
    "pull_requests_count": 0,
    "contributors_count": 2,
    "package_json_version": "1.0.0"
  },
  "readme": "# Prometheus MCP 服务器\n\n这是一个简化版的Prometheus MCP服务器，用于查询指标提供 ai 分析。\n\n## 快速开始\n\n### 启动\n\n1. 设置Prometheus地址环境变量：\n```bash\nexport PROMETHEUS_URL=your_Prometheus_endpoint\n```\n\n2. 启动服务器：\n```bash\ngo run cmd/server/main.go sse\n```\n\n服务器将在`:8081`端口启动，可以通过以下URL访问：\n- http://localhost:8081/sse\n\n3. (可选) 设置日志文件路径：\n```bash\nexport APP_LOG_FILE=/path/to/logfile.log\n```\n\n### 测试\n```bash\nnpx @modelcontextprotocol/inspector node build/index.js\n```\n\n## 功能特性\n\n### AI友好化分析指标\n\n1. **JSON格式输出**：所有查询结果均以JSON格式返回，便于AI系统解析处理\n\n### MCP工具\n\n1. **search_metrics** - 按正则表达式搜索指标\n   - 参数: `pattern` (指标名称模式，支持正则表达式)\n   - 示例: `http_.*` 匹配所有以`http_`开头的指标\n   - 返回: 匹配的指标名称列表(JSON格式)\n\n2. **get_metric_labels** - 获取指标的所有标签\n   - 参数: `name` (指标名称)\n   - 示例: `http_requests_total`\n   - 返回: 该指标的所有标签列表(JSON格式，不包括`__name__`标签)\n\n3. **get_metric_label_values** - 获取指标标签的所有值\n   - 参数: \n     - `name` (指标名称)\n     - `label` (标签名称)\n   - 示例: 获取`http_requests_total`指标的`method`标签的所有值\n   - 返回: 指定标签的所有值列表(JSON格式)\n\n4. **query** - 执行PromQL即时查询\n   - 参数:\n     - `query` (PromQL查询语句)\n     - `time` (查询时间戳，格式为RFC3339或Unix时间戳，可选)\n   - 示例: 查询当前CPU使用率\n   - 返回: 查询结果(JSON格式)\n\n5. **query_range** - 执行PromQL范围查询\n   - 参数:\n     - `query` (PromQL查询语句)\n     - `start` (开始时间，格式为RFC3339或Unix时间戳(毫秒))\n     - `end` (结束时间，格式为RFC3339或Unix时间戳(毫秒))\n     - `step` (查询步长，例如'15s'、'1m')\n   - 示例: 查询过去1小时CPU使用率变化，每15秒一个数据点\n   - 返回: 范围查询结果(JSON格式)\n\n6. **query_chart** - 执行PromQL范围查询并生成图表\n   - 参数:\n     - `query` (PromQL查询语句)\n     - `start` (开始时间，格式为RFC3339或Unix时间戳(毫秒))\n     - `end` (结束时间，格式为RFC3339或Unix时间戳(毫秒))\n     - `step` (查询步长，例如'15s'、'1m')\n     - `title` (图表标题，可选)\n   - 示例: 查询过去1小时CPU使用率变化并生成图表\n   - 返回: 图表图片(base64编码的PNG格式)\n\n### 服务器端\n\n1. 设置Prometheus地址：\n```bash\nexport PROMETHEUS_URL=your_Prometheus_endpoint\n```\n2. 启动服务器：\n```bash\ngo run cmd/server/main.go sse\n```\n\n服务器默认将在`:8081`端口暴露Prometheus指标。\n\n### mcp 客户端配置\n\n配置示例：\n```json\n{\n  \"mcpServers\": {\n    \"products-sse\": {\n      \"url\": \"http://localhost:8081/sse\"\n    }\n  }\n}\n```\n## 项目结构\n\n```\n.\n├── cmd/           # 命令行程序入口\n│   └── server/   # 服务器代码\n├── internal/      # 内部实现\n├── pkg/           # 可复用包\n│   └── prometheus # Prometheus相关实现\n└── go.mod         # Go模块定义\n```"
}