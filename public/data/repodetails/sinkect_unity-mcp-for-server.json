{
  "mcp_name": "sinkect/unity-mcp-for-server",
  "mcp_description": "Facilitates the integration of Unity with MCP through a Node.js server, enabling seamless communication and debugging within the Unity Editor.",
  "mcp_id": "sinkect_unity-mcp-for-server",
  "fetch_timestamp": "2025-06-23T08:27:48.432908Z",
  "github_url": "https://github.com/sinkect/unity-mcp-for-server",
  "repository": {
    "name": "unity-mcp-for-server",
    "full_name": "sinkect/unity-mcp-for-server",
    "description": null,
    "html_url": "https://github.com/sinkect/unity-mcp-for-server",
    "created_at": "2025-04-26T11:37:17Z",
    "updated_at": "2025-04-26T12:24:33Z",
    "pushed_at": "2025-04-26T12:24:29Z",
    "size": 6627,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "sinkect",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/103894984?v=4",
      "html_url": "https://github.com/sinkect"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 60436,
      "JavaScript": 60434,
      "Dockerfile": 1401
    },
    "language_percentages": {
      "TypeScript": 49.43,
      "JavaScript": 49.43,
      "Dockerfile": 1.15
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "1.0.0"
  },
  "readme": "# MCP Unity エディター MCP PC (LLM)\n\n\n## 要件\n- Node.js 18以降 - [サーバーを起動](#start-server)するため\n- npm 9以降 - [サーバーをデバッグ](#debug-server)するため\n\n## <a name=\"install-server\"></a>インストール\n\n\n### ステップ1: Node.jsをインストール\n> MCP Unityサーバーを実行するには、コンピューターにNode.js 18以降がインストールされている必要があります：\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Windows</span></summary>\n\n1. [Node.jsダウンロードページ](https://nodejs.org/en/download/)にアクセス\n2. LTSバージョンのWindowsインストーラー（.msi）をダウンロード（推奨）\n3. インストーラーを実行し、インストールウィザードに従う\n4. PowerShellを開いて以下を実行してインストールを確認：\n   ```bash\n   node --version\n   ```\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">macOS</span></summary>\n\n1. [Node.jsダウンロードページ](https://nodejs.org/en/download/)にアクセス\n2. LTSバージョンのmacOSインストーラー（.pkg）をダウンロード（推奨）\n3. インストーラーを実行し、インストールウィザードに従う\n4. または、Homebrewがインストールされている場合は以下を実行：\n   ```bash\n   brew install node@18\n   ```\n5. ターミナルを開いて以下を実行してインストールを確認：\n   ```bash\n   node --version\n   ```\n</details>\n\n<br>\n\n### ステップ2: 手動設定\n\nAIクライアントのMCP設定ファイル（例：Claude Desktopのclaude_desktop_config.json）を開き、以下のテキストをコピー：\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-unity\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"ABSOLUTE/PATH/TO/Server/build/index.js\"\n      ],\n       \"env\": {\n          \"UNITY_HOST\" : \"YOUR_IP_ADDRESS\",\n          \"UNITY_PORT\" : \"YOUR_PORT\"\n       }\n    }\n  }\n}\n```\n\n## <a name=\"start-server\"></a>サーバーの起動\n\nMCP Unityサーバーを起動するには2つの方法があります：\n\n### オプション1: Unityエディター経由で起動\n1. Unityエディターを開く\n2. Tools > MCP Unity > Server Windowに移動\n3. \"Start Server\"ボタンをクリック\n\n### オプション2: コマンドラインから起動\n1. ターミナルまたはコマンドプロンプトを開く\n2. MCP Unityサーバーディレクトリに移動\n3. 以下のコマンドを実行：\n   ```bash\n   node Server/build/index.js\n   ```\n\n## <a name=\"debug-server\"></a>サーバーのデバッグ\n\nMCP Unityサーバーをデバッグするには、以下の方法を使用できます：\n\n### オプション1: Unityエディターを使用してデバッグ\n1. Unityエディターを開く\n2. Tools > MCP Unity > Server Windowに移動\n3. \"Debug Server\"ボタンをクリック\n\n### オプション2: コマンドラインを使用してデバッグ\n1. ターミナルまたはコマンドプロンプトを開く\n2. MCP Unityサーバーディレクトリに移動\n3. 以下のコマンドを実行：\n   ```bash\n   npm run debug\n   ```\n\n## トラブルシューティング\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">接続の問題</span></summary>\n\n- WebSocketサーバーが実行中であることを確認してください（UnityのServer Windowを確認）\n- ファイアウォールの制限が接続を妨げていないか確認してください\n- ポート番号が正しいことを確認してください（デフォルトは8080）\n- UnityエディターのMCP Serverウィンドウでポート番号を変更できます（ツール > MCP Unity > Server Window）\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">サーバーが起動しない</span></summary>\n\n- Unityコンソールにエラーメッセージがないか確認してください\n- Node.jsが正しくインストールされ、PATHで利用可能であることを確認してください\n- Serverディレクトリ内の依存関係がすべてインストールされていることを確認してください\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Play Modeテスト実行時の接続失敗</span></summary>\n\n`run_tests` ツールは以下の応答を返します：\n```\nError:\nConnection failed: Unknown error\n```\n\nこのエラーは、Play Modeへ切り替える際にドメインリロードが発生し、ブリッジ接続が失われるために発生します。  \n回避策は、**Edit > Project Settings > Editor > \"Enter Play Mode Settings\"** で **Reload Domain** をオフにすることです。\n</details>\n\n## ライセンス\n\n本プロジェクトは [MIT License](License.md) の下で提供されています。\n\n## 謝辞\n\n- [Model Context Protocol](https://modelcontextprotocol.io)\n- [Unity Technologies](https://unity.com)\n- [Node.js](https://nodejs.org)\n- [WebSocket-Sharp](https://github.com/sta/websocket-sharp)\n\n## 貢献\n\n貢献は大歓迎です！詳細については[貢献ガイド](CONTRIBUTING.md)をお読みください。\n\n## ライセンス\n\nこのプロジェクトはMITライセンスの下でライセンスされています - 詳細は[LICENSE](LICENSE)ファイルを参照してください。\n\n## 謝辞\n\n- [Model Context Protocol](https://modelcontextprotocol.io)\n- [Unity Technologies](https://unity.com)\n- [Node.js](https://nodejs.org)\n- [WebSocket-Sharp](https://github.com/sta/websocket-sharp)\n- [mcp-unity](https://github.com/CoderGamester/mcp-unity)"
}