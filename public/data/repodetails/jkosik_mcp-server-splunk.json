{
  "mcp_name": "jkosik/mcp-server-splunk",
  "mcp_description": "Facilitates seamless integration with Splunk by providing a Go-based MCP server supporting STDIO and SSE modes.",
  "mcp_id": "jkosik_mcp-server-splunk",
  "fetch_timestamp": "2025-06-23T05:27:25.587971Z",
  "github_url": "https://github.com/jkosik/mcp-server-splunk",
  "repository": {
    "name": "mcp-server-splunk",
    "full_name": "jkosik/mcp-server-splunk",
    "description": "MCP server for Splunk",
    "html_url": "https://github.com/jkosik/mcp-server-splunk",
    "created_at": "2025-04-28T11:20:03Z",
    "updated_at": "2025-05-23T02:47:41Z",
    "pushed_at": "2025-05-12T08:38:39Z",
    "size": 58301,
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks_count": 0,
    "open_issues_count": 1,
    "language": "Go",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "jkosik",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/3286033?v=4",
      "html_url": "https://github.com/jkosik"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 2,
    "languages": {
      "Go": 27402,
      "Dockerfile": 676
    },
    "language_percentages": {
      "Go": 97.59,
      "Dockerfile": 2.41
    },
    "pull_requests_count": 4,
    "contributors_count": 3,
    "latest_release": {
      "tag_name": "v1.0.2",
      "name": "Updated docs and bugfixes",
      "published_at": "2025-05-09T13:11:48Z",
      "body": "",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v1.0.2",
        "commit_sha": "a010fef383cfe2c427fc1e676903c6f8a6ba4031"
      },
      {
        "name": "v1.0.1",
        "commit_sha": "35bfe80dc26086286dbd761235740738798894a7"
      },
      {
        "name": "v1.0.0",
        "commit_sha": "a5c48ed75fbaae5d615e4d87317b6e1a0f9963e0"
      }
    ],
    "latest_version": "v1.0.2"
  },
  "readme": "# MCP Server for Splunk\n\nA Go implementation of the MCP server for Splunk.\nSupports STDIO and SSE (Server-Sent Events HTTP API). Uses github.com/mark3labs/mcp-go SDK.\n\n## MCP Tools implemented\n- `list_splunk_saved_searches`\n    - Parameters:\n        - `count` (number, optional): Number of results to return (max 100, default 100)\n        - `offset` (number, optional): Offset for pagination (default 0)\n- `list_splunk_alerts`\n    - Parameters:\n        - `count` (number, optional): Number of results to return (max 100, default 10)\n        - `offset` (number, optional): Offset for pagination (default 0)\n        - `title` (string, optional): Case-insensitive substring to filter alert titles\n- `list_splunk_fired_alerts`\n    - Parameters:\n        - `count` (number, optional): Number of results to return (max 100, default 10)\n        - `offset` (number, optional): Offset for pagination (default 0)\n        - `ss_name` (string, optional): Search name pattern to filter alerts (default \"*\")\n        - `earliest` (string, optional): Time range to look back (default \"-24h\")\n- `list_splunk_indexes`\n    - Parameters:\n        - `count` (number, optional): Number of results to return (max 100, default 10)\n        - `offset` (number, optional): Offset for pagination (default 0)\n- `list_splunk_macros`\n    - Parameters:\n        - `count` (number, optional): Number of results to return (max 100, default 10)\n        - `offset` (number, optional): Offset for pagination (default 0)\n\n## MCP Prompts and Resources\n- `internal/splunk/prompt.go` implements an MCP Prompt to find Splunk alerts for a specific keyword (e.g. GitHub or OKTA) and instructs Cursor to utilise multiple MCP tools to review all Splunk alerts, indexes and macros first to provide the best answer.\n- `cmd/mcp/server/main.go` implements MCP Resource in the form of local CSV file with Splunk related content, providing further context to the chat.\n\n## Usage\n### STDIO mode (default)\n```bash\nexport SPLUNK_URL=https://your-splunk-instance:8089\nexport SPLUNK_TOKEN=your-splunk-token\n\n# List available tools\necho '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"tools/list\",\"params\":{}}' | go run cmd/mcp-server-splunk/main.go | jq\n\n# Call list_splunk_saved_searches tool\necho '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"tools/call\",\"params\":{\"name\":\"list_splunk_saved_searches\",\"arguments\":{}}}' | go run cmd/mcp-server-splunk/main.go | jq\n```\n\n## SSE mode (Server-Sent Events HTTP API)\n```bash\nexport SPLUNK_URL=https://your-splunk-instance:8089\nexport SPLUNK_TOKEN=your-splunk-token\n\n# Start the server\ngo run cmd/mcp-server-splunk/main.go -transport sse -port 3001\n\n# Call the server and get Session ID from the output. Do not terminate the session.\ncurl http://localhost:3001/sse\n\n# Keep session running and and use different terminal window for the final MCP call\ncurl -X POST \"http://localhost:3001/message?sessionId=YOUR_SESSION_ID\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"tools/list\",\"params\":{}}' | jq\n```\n\n## Installing via Smithery\n[![smithery badge](https://smithery.ai/badge/@jkosik/mcp-server-splunk)](https://smithery.ai/server/@jkosik/mcp-server-splunk)\n\n`Dockerfile` and `smithery.yaml` are used to support hosting this MCP server at [Smithery](https://smithery.ai/server/@jkosik/.\n\n\n### Local Docker build and run\n```\ndocker build -t mcp-server-splunk .\n\necho '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"tools/list\",\"params\":{}}' | \\\ndocker run --rm -i \\\n  -e SPLUNK_URL=https://your-splunk-instance:8089 \\\n  -e SPLUNK_TOKEN=your-splunk-token \\\n  mcp-server-splunk | jq\n```\n\n## Cursor integration\nBy configuring MCP Settings in Cursor, you can include remote data directly into the LLM context.\n\n![Demo](docs/mcp-short.gif)\n\nIntegrate STDIO or SSE MCP Servers (see below) and use Cursor Chat.\nCursor will automatically try to use MCP Tools, Prompts or Re\nSample prompts:\n- `How many MCP tools for Splunk are available?`\n- `How many Splunk indexes do we have?`\n- `Can you list first 5 Splunk macros including underlying queries?`\n- `How many alers with \"Alert_CRITICAL\" in the name were fired in the last day?`\n- `Read the MCP Resource \"Data Dictionary\" and find the contact person for the Splunk index XYZ.`\n\n### STDIO mode\nBuild the server:\n```\ngo build -o cmd/mcp-server-splunk/mcp-server-splunk cmd/mcp-server-splunk/main.go\n```\n\nUpdate `~/.cursor/mcp.json`\n```json\n{\n  \"mcpServers\": {\n    \"splunk_stdio\": {\n      \"name\": \"Splunk MCP Server (STDIO)\",\n      \"description\": \"MCP server for Splunk integration\",\n      \"type\": \"stdio\",\n      \"command\": \"/Users/juraj/data/github.com/jkosik/mcp-server-splunk/cmd/mcp-server-splunk/mcp-server-splunk\",\n      \"env\": {\n        \"SPLUNK_URL\": \"https://your-splunk-instance:8089\",\n        \"SPLUNK_TOKEN\": \"your-splunk-token\"\n      }\n    }\n  }\n}\n```\n\n### SSE mode\nStart the server:\n```bash\nexport SPLUNK_URL=https://your-splunk-instance:8089\nexport SPLUNK_TOKEN=your-splunk-token\n\n# Start the server\ngo run cmd/mcp-server-splunk/main.go -transport sse -port 3001\n```\n\nUpdate `~/.cursor/mcp.json`\n```json\n{\n  \"mcpServers\": {\n    \"splunk_sse\": {\n      \"name\": \"Splunk MCP Server (SSE)\",\n      \"description\": \"MCP server for Splunk integration (SSE mode)\",\n      \"type\": \"sse\",\n      \"url\": \"http://localhost:3001/sse\"\n    }\n  }\n}\n```\n\n"
}