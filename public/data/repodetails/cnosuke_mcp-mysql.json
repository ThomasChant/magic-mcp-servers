{
  "mcp_name": "cnosuke/mcp-mysql",
  "mcp_description": "Facilitates MySQL database operations through a Go-based MCP server, enabling seamless integration with MCP clients for database querying and management.",
  "mcp_id": "cnosuke_mcp-mysql",
  "fetch_timestamp": "2025-06-23T02:10:40.435104Z",
  "github_url": "https://github.com/cnosuke/mcp-mysql",
  "repository": {
    "name": "mcp-mysql",
    "full_name": "cnosuke/mcp-mysql",
    "description": "MCP server that acts as a MySQL Client implemented in Go language",
    "html_url": "https://github.com/cnosuke/mcp-mysql",
    "created_at": "2025-04-22T09:55:14Z",
    "updated_at": "2025-04-26T06:36:25Z",
    "pushed_at": "2025-04-26T06:36:22Z",
    "size": 25,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Go",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "cnosuke",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/1452950?v=4",
      "html_url": "https://github.com/cnosuke"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 2,
    "languages": {
      "Go": 26542,
      "Makefile": 1224,
      "Dockerfile": 952
    },
    "language_percentages": {
      "Go": 92.42,
      "Makefile": 4.26,
      "Dockerfile": 3.31
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# MCP MySQL Server\n\nMCP MySQL Server is a Go-based MCP server implementation that provides MySQL database interaction functionality, allowing MCP clients (e.g., Claude Desktop) to perform database operations.\n\n## Features\n\n- MCP Compliance: Provides a JSON‐RPC based interface for tool execution according to the MCP specification.\n- MySQL Operations: Supports database operations such as querying, schema inspection, and (optionally) data manipulation.\n- Read-Only Mode: Optional restriction to prevent data modification operations.\n- Query Plan Verification: Optional EXPLAIN analysis to verify query safety.\n- URL-Style Connection Strings: Supports standard URL-style database connection strings like `mysql://user:pass@host:port/dbname`.\n- Minimal Container: Built with Google's distroless for improved security and smaller image size.\n\n## Requirements\n\n- Docker (recommended)\n\nFor local development:\n\n- Go 1.24 or later\n- MySQL server (local or remote)\n\n## Using with Docker (Recommended)\n\n```bash\n# Pull the image\ndocker pull cnosuke/mcp-mysql:latest\n\n# Run with default settings\ndocker run -i --rm cnosuke/mcp-mysql:latest\n\n# Run with custom MySQL connection\ndocker run -i --rm \\\n  -e MYSQL_HOST=your-mysql-host \\\n  -e MYSQL_PORT=3306 \\\n  -e MYSQL_USER=your-username \\\n  -e MYSQL_PASSWORD=your-password \\\n  -e MYSQL_DATABASE=your-database \\\n  cnosuke/mcp-mysql:latest\n\n# Run in read-only mode\ndocker run -i --rm \\\n  -e MYSQL_HOST=your-mysql-host \\\n  -e MYSQL_USER=your-username \\\n  -e MYSQL_PASSWORD=your-password \\\n  -e MYSQL_DATABASE=your-database \\\n  -e MYSQL_READ_ONLY=true \\\n  cnosuke/mcp-mysql:latest\n```\n\n### Using with Claude Desktop (Docker)\n\nTo integrate with Claude Desktop using Docker, add an entry to your `claude_desktop_config.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"mysql\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"cnosuke/mcp-mysql:latest\"],\n      \"env\": {\n        \"MYSQL_HOST\": \"your-mysql-host\",\n        \"MYSQL_PORT\": \"3306\",\n        \"MYSQL_USER\": \"your-username\",\n        \"MYSQL_PASSWORD\": \"your-password\",\n        \"MYSQL_DATABASE\": \"your-database\",\n        \"MYSQL_READ_ONLY\": \"false\"\n      }\n    }\n  }\n}\n```\n\n## Building and Running (Go Binary)\n\nAlternatively, you can build and run the Go binary directly:\n\n```bash\n# Build the server\nmake\n\n# Run the server\n./bin/mcp-mysql server --config=config.yml\n```\n\n### Using with Claude Desktop (Go Binary)\n\nTo integrate with Claude Desktop using the Go binary, add an entry to your `claude_desktop_config.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"mysql\": {\n      \"command\": \"./bin/mcp-mysql\",\n      \"args\": [\"server\"],\n      \"env\": {\n        \"LOG_PATH\": \"mcp-mysql.log\",\n        \"DEBUG\": \"false\",\n        \"MYSQL_HOST\": \"your-mysql-host\",\n        \"MYSQL_PORT\": \"3306\",\n        \"MYSQL_USER\": \"your-username\",\n        \"MYSQL_PASSWORD\": \"your-password\",\n        \"MYSQL_DATABASE\": \"your-database\",\n        \"MYSQL_READ_ONLY\": \"false\"\n      }\n    }\n  }\n}\n```\n\n## Docker Image Details\n\nThis project uses Google's distroless container images for the final Docker image. The `gcr.io/distroless/static` base image provides:\n\n- Minimal attack surface - only the necessary components are included\n- Smaller image size - no shell, package manager, or other unnecessary binaries\n- Improved security - reduced number of potential vulnerabilities\n\nThe Docker image is built using a multi-stage build process:\n\n1. First stage uses Go Alpine to build the application\n2. Second stage uses distroless/static with just the compiled binary\n\n## Configuration\n\nThe server is configured via a YAML file (default: config.yml) or environment variables:\n\n```yaml\nlog: 'path/to/mcp-mysql.log' # Log file path, if empty no log will be produced\ndebug: false # Enable debug mode for verbose logging\n\nmysql:\n  host: 'localhost'\n  user: 'root'\n  password: ''\n  port: 3306\n  database: ''\n  dsn: ''\n  read_only: false\n  explain_check: false\n```\n\n### Connection Options\n\nYou can specify MySQL connection details in three ways (in order of precedence):\n\n1. **Tool Parameter**: Pass a `dsn` parameter directly to any tool when invoking it\n2. **DSN in Config**: Set the `mysql.dsn` value in the configuration file\n3. **Individual Parameters**: Set individual connection parameters in the configuration file\n\nIf no connection information is provided in any of these ways, the server will return an error message prompting you to provide connection details.\n\n### Configuration Options\n\n- `mysql.host`: MySQL server hostname (default: 'localhost')\n- `mysql.user`: MySQL username (default: 'root')\n- `mysql.password`: MySQL password\n- `mysql.port`: MySQL port (default: 3306)\n- `mysql.database`: MySQL database name\n- `mysql.dsn`: MySQL DSN (Data Source Name) string. If provided, this overrides the individual connection parameters\n- `mysql.read_only`: Enable read-only mode. In this mode, only tools beginning with `list`, `read_` and `desc_` are available\n- `mysql.explain_check`: Check query plan with `EXPLAIN` before executing\n\nYou can override configurations using environment variables:\n\n- `LOG_PATH`: Path to log file\n- `DEBUG`: Enable debug mode (true/false)\n- `MYSQL_HOST`: MySQL server hostname\n- `MYSQL_PORT`: MySQL server port\n- `MYSQL_USER`: MySQL username\n- `MYSQL_PASSWORD`: MySQL password\n- `MYSQL_DATABASE`: MySQL database name\n- `MYSQL_DSN`: MySQL DSN string\n- `MYSQL_READ_ONLY`: Enable read-only mode (true/false)\n- `MYSQL_EXPLAIN_CHECK`: Enable query plan checking (true/false)\n\n## Logging\n\nLogging behavior is controlled through configuration:\n\n- If `log` is set in the config file, logs will be written to the specified file\n- If `log` is empty, no logs will be produced\n- Set `debug: true` for more verbose logging\n\n## MCP Server Tools\n\nMCP clients interact with the server by sending JSON‐RPC requests to execute various tools. The following MCP tools are supported:\n\n### Schema Tools\n\n1. `list_database`\n\n   - List all databases in the MySQL server.\n   - Parameters:\n     - `dsn` (optional): MySQL DSN string to override configuration.\n   - Returns: A list of matching database names.\n\n2. `list_table`\n\n   - List all tables in the MySQL server.\n   - Parameters:\n     - `dsn` (optional): MySQL DSN string to override configuration.\n   - Returns: A list of matching table names.\n\n3. `create_table` (not available in read-only mode)\n\n   - Create a new table in the MySQL server.\n   - Parameters:\n     - `query`: The SQL query to create the table.\n     - `dsn` (optional): MySQL DSN string to override configuration.\n   - Returns: x rows affected.\n\n4. `alter_table` (not available in read-only mode)\n\n   - Alter an existing table in the MySQL server. The LLM is informed not to drop an existing table or column.\n   - Parameters:\n     - `query`: The SQL query to alter the table.\n     - `dsn` (optional): MySQL DSN string to override configuration.\n   - Returns: x rows affected.\n\n5. `desc_table`\n\n   - Describe the structure of a table.\n   - Parameters:\n     - `name`: The name of the table to describe.\n     - `dsn` (optional): MySQL DSN string to override configuration.\n   - Returns: The structure of the table.\n\n### Data Tools\n\n1. `read_query`\n\n   - Execute a read-only SQL query.\n   - Parameters:\n     - `query`: The SQL query to execute.\n     - `dsn` (optional): MySQL DSN string to override configuration.\n   - Returns: The result of the query.\n\n2. `write_query` (not available in read-only mode)\n\n   - Execute a write SQL query.\n   - Parameters:\n     - `query`: The SQL query to execute.\n     - `dsn` (optional): MySQL DSN string to override configuration.\n   - Returns: x rows affected, last insert id: <last_insert_id>.\n\n3. `update_query` (not available in read-only mode)\n\n   - Execute an update SQL query.\n   - Parameters:\n     - `query`: The SQL query to execute.\n     - `dsn` (optional): MySQL DSN string to override configuration.\n   - Returns: x rows affected.\n\n4. `delete_query` (not available in read-only mode)\n\n   - Execute a delete SQL query.\n   - Parameters:\n     - `query`: The SQL query to execute.\n     - `dsn` (optional): MySQL DSN string to override configuration.\n   - Returns: x rows affected.\n\n## MySQL DSN Format\n\nThe `dsn` parameter or `mysql.dsn` configuration option can be specified in two formats:\n\n### 1. Native MySQL DSN Format\n\n```\n[username[:password]@][protocol[(address)]]/dbname[?param1=value1&...&paramN=valueN]\n```\n\nExample: `username:password@tcp(localhost:3306)/mydb?parseTime=true&loc=Local`\n\nPlease refer to [MySQL DSN](https://github.com/go-sql-driver/mysql#dsn-data-source-name) for more details on this format.\n\n### 2. URL-Style Connection Format\n\n```\nmysql://username:password@hostname:port/dbname?param1=value1&param2=value2\n```\n\nExample: `mysql://root:pass@localhost:3306/mydb?parseTime=true&loc=Local`\n\nThis URL-style format is automatically converted to the native MySQL DSN format.\nSupported URL schemes include: `mysql://`, `mariadb://`.\n\n## Command-Line Parameters\n\nWhen starting the server, you can specify various settings:\n\n```bash\n./bin/mcp-mysql server [options]\n```\n\nOptions:\n\n- `--config`, `-c`: Path to the configuration file (default: \"config.yml\").\n\n## Contributing\n\nContributions are welcome! Please fork the repository and submit pull requests for improvements or bug fixes. For major changes, open an issue first to discuss your ideas.\n\n## License\n\nThis project is licensed under the MIT License.\n\nAuthor: cnosuke ( x.com/cnosuke )\n"
}