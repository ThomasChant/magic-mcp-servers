{
  "mcp_name": "falahgs/gemini-vision-art-studio",
  "mcp_description": "Gemini Vision Art Studio harnesses Google's Gemini AI to generate 3D cartoons and transform images with artistic flair.",
  "mcp_id": "falahgs_gemini-vision-art-studio",
  "fetch_timestamp": "2025-06-23T02:59:23.025650Z",
  "github_url": "https://github.com/falahgs/gemini-vision-art-studio",
  "repository": {
    "name": "gemini-vision-art-studio",
    "full_name": "falahgs/gemini-vision-art-studio",
    "description": null,
    "html_url": "https://github.com/falahgs/gemini-vision-art-studio",
    "created_at": "2025-04-18T05:47:45Z",
    "updated_at": "2025-04-18T06:57:22Z",
    "pushed_at": "2025-04-18T06:57:19Z",
    "size": 11588,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 2,
    "open_issues_count": 1,
    "language": "TypeScript",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "falahgs",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/5242012?v=4",
      "html_url": "https://github.com/falahgs"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 2,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 12558,
      "Python": 1839
    },
    "language_percentages": {
      "TypeScript": 87.23,
      "Python": 12.77
    },
    "pull_requests_count": 1,
    "contributors_count": 2,
    "package_json_version": "0.1.0"
  },
  "readme": "# 🎨 Gemini Vision Art Studio\r\n\r\nA powerful MCP server leveraging Google's Gemini AI for advanced image generation and transformation. This studio offers two specialized tools: a 3D cartoon generator and an image processing transformer, both powered by the cutting-edge Gemini 2.0 Flash model.\r\n\r\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\r\n[![TypeScript](https://img.shields.io/badge/TypeScript-5.8.3-blue.svg)](https://www.typescriptlang.org/)\r\n[![Gemini AI](https://img.shields.io/badge/Gemini-AI-orange.svg)](https://deepmind.google/technologies/gemini/)\r\n\r\n## ✨ Features\r\n\r\n### 1. 3D Cartoon Generator\r\n- Generate high-quality 3D cartoon images from text descriptions\r\n- Child-friendly designs with vibrant colors and engaging visuals\r\n- Perfect for children's books, educational materials, and creative projects\r\n\r\n### 2. Image Transformer\r\n- Transform existing images using Gemini AI's vision capabilities\r\n- Apply various artistic styles and modifications\r\n- Enhance, modify, or completely reimagine your images\r\n\r\n### Additional Features\r\n- 🖼️ Automatic preview generation\r\n- 🌐 Browser-based image viewing\r\n- 💾 Local storage with organized output\r\n- 🔄 Real-time processing\r\n- 📱 Cross-platform support\r\n\r\n## 🚀 Quick Start\r\n\r\n### Installation\r\n\r\n```bash\r\n# Clone the repository\r\ngit clone https://github.com/falahgs/gemini-vision-art-studio.git\r\n\r\n# Install dependencies\r\ncd gemini-vision-art-studio\r\nnpm install\r\n```\r\n\r\n### Configuration\r\n\r\n1. Project Configuration:\r\nCreate a `.env` file in the root directory:\r\n\r\n```env\r\nGEMINI_API_KEY=your_api_key_here\r\n# Set to true if running in a remote environment (no browser preview)\r\nIS_REMOTE=true\r\n```\r\n\r\n2. Claude Desktop Configuration:\r\nAdd the server configuration to your Claude Desktop config file at `%AppData%\\Claude\\claude_desktop_config.json`:\r\n\r\n```json\r\n{\r\n  \"mcpServers\": {\r\n    \"gemini-vision-art-studio\": {\r\n      \"command\": \"node\",\r\n      \"args\": [\r\n        \"PATH_TO_YOUR_PROJECT\\\\build\\\\src\\\\index.js\"\r\n      ],\r\n      \"env\": {\r\n        \"GEMINI_API_KEY\": \"your_gemini_api_key_here\",\r\n        \"IS_REMOTE\": \"true\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nReplace:\r\n- `PATH_TO_YOUR_PROJECT` with your actual project path\r\n- `your_gemini_api_key_here` with your Gemini API key\r\n\r\n> 💡 **Note**: On Windows, the config file is typically located at:\r\n> `C:\\Users\\YourUsername\\AppData\\Roaming\\Claude\\claude_desktop_config.json`\r\n\r\n### Remote Usage\r\n\r\nWhen running the server remotely:\r\n1. Set `IS_REMOTE=true` in your environment or Claude Desktop configuration\r\n2. The server will:\r\n   - Create necessary directories automatically:\r\n     - `/app/output`: For generated images and previews\r\n     - `/app/temp`: For temporary processing files\r\n   - Skip browser preview attempts\r\n   - Save all files to the `/app/output` directory\r\n   - Return absolute file paths in the response\r\n3. Directory Structure in Remote Mode:\r\n   ```\r\n   /app/\r\n   ├── output/           # Generated images and previews\r\n   │   ├── image1.png\r\n   │   └── image1_preview.html\r\n   └── temp/            # Temporary processing files\r\n   ```\r\n\r\n4. Troubleshooting Remote Usage:\r\n   - Ensure the `/app` directory exists and is writable\r\n   - Check the console output for directory creation messages\r\n   - Look for \"Image saved to:\" messages in the logs\r\n   - File paths in the response will be absolute paths\r\n\r\n### Running the Server\r\n\r\n1. Build the project:\r\n```bash\r\nnpm run build\r\n```\r\n\r\n2. The server will be available in Claude Desktop automatically when you:\r\n   - Open Claude Desktop\r\n   - Start a new conversation\r\n   - The tools will appear in the available tools list\r\n\r\n## 🛠️ Available Tools\r\n\r\n### 1. Generate 3D Cartoon (`generate_3d_cartoon`)\r\n\r\nCreates a 3D-style cartoon image from your text description.\r\n\r\n```json\r\n{\r\n  \"name\": \"generate_3d_cartoon\",\r\n  \"arguments\": {\r\n    \"prompt\": \"A friendly dragon teaching math to forest animals\",\r\n    \"fileName\": \"dragon_teacher\"\r\n  }\r\n}\r\n```\r\n\r\n### 2. Process Image (`process_image`)\r\n\r\nTransforms existing images according to your instructions.\r\n\r\n```json\r\n{\r\n  \"name\": \"process_image\",\r\n  \"arguments\": {\r\n    \"imagePath\": \"input/photo.jpg\",\r\n    \"prompt\": \"Transform this into a watercolor painting with autumn colors\",\r\n    \"outputFileName\": \"watercolor_autumn\"\r\n  }\r\n}\r\n```\r\n\r\n## 📂 Directory Structure\r\n\r\n```\r\ngemini-vision-art-studio/\r\n├── src/               # Source code\r\n├── build/            # Compiled code\r\n├── input/            # Input images\r\n├── output/           # Generated images and previews\r\n├── temp/             # Temporary processing files\r\n└── examples/         # Example usage and images\r\n```\r\n\r\n## 🔧 Technical Details\r\n\r\n- **Runtime**: Node.js v14+\r\n- **Language**: TypeScript 5.8.3\r\n- **AI Model**: Gemini 2.0 Flash\r\n- **Framework**: Model Context Protocol (MCP) SDK\r\n- **Image Processing**: Google Generative AI\r\n\r\n## 🤝 Contributing\r\n\r\nContributions are welcome! Please feel free to submit a Pull Request. For major changes, please open an issue first to discuss what you would like to change.\r\n\r\n1. Fork the Project\r\n2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)\r\n3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)\r\n4. Push to the Branch (`git push origin feature/AmazingFeature`)\r\n5. Open a Pull Request\r\n\r\n## 📝 License\r\n\r\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\r\n\r\n## 👨‍💻 Author\r\n\r\n**Falah G. Salieh**\r\n- Copyright © 2025\r\n- GitHub: [@falahgs](https://github.com/falahgs)\r\n\r\n## 🙏 Acknowledgments\r\n\r\n- Google Gemini AI team for the powerful image generation model\r\n- The MCP SDK team for the excellent tooling\r\n- All contributors and users of this project\r\n\r\n---\r\n\r\n<p align=\"center\">Made with ❤️ by Falah G. Salieh</p> "
}