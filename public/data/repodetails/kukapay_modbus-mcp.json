{
  "mcp_name": "kukapay/modbus-mcp",
  "mcp_description": "Standardizes and contextualizes Modbus data for seamless AI agent integration with industrial IoT systems.",
  "mcp_id": "kukapay_modbus-mcp",
  "fetch_timestamp": "2025-06-23T05:59:17.344229Z",
  "github_url": "https://github.com/kukapay/modbus-mcp",
  "repository": {
    "name": "modbus-mcp",
    "full_name": "kukapay/modbus-mcp",
    "description": "An MCP server that standardizes and contextualizes industrial Modbus data.",
    "html_url": "https://github.com/kukapay/modbus-mcp",
    "created_at": "2025-04-28T14:46:49Z",
    "updated_at": "2025-06-17T15:39:00Z",
    "pushed_at": "2025-05-12T07:11:37Z",
    "size": 32,
    "stargazers_count": 8,
    "watchers_count": 8,
    "forks_count": 4,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "kukapay",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/201164822?v=4",
      "html_url": "https://github.com/kukapay"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 4,
    "subscribers_count": 1,
    "languages": {
      "Python": 9887
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 1,
    "contributors_count": 2
  },
  "readme": "# Modbus MCP Server\n\nAn MCP server that standardizes and contextualizes Modbus data, enabling seamless integration of AI agents with industrial IoT systems.\n\n![GitHub License](https://img.shields.io/github/license/kukapay/crypto-trending-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Modbus Tools**:\n  - Read/write holding registers (`read_register`, `write_register`).\n  - Read/write coils (`read_coils`, `write_coil`).\n  - Read input registers (`read_input_registers`).\n  - Read multiple holding registers (`read_multiple_holding_registers`).\n- **Prompt**: Analyze Modbus register values with a customizable prompt (`analyze_register`).\n- **Flexible Connections**: Supports Modbus over TCP, UDP, or serial, configured via environment variables.\n\n## Requirements\n\n- **Python**: 3.10\n- **uv** for dependency and virtual environment management.\n\n## Installation\n\n1. **Install `uv`**:\n   ```bash\n   curl -LsSf https://astral.sh/uv/install.sh | sh\n   ```\n\n2. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/modbus-mcp.git\n   cd modbus-mcp\n   ```\n\n3. **Install Dependencies**:\n   ```bash\n   uv sync\n   ```\n\n## Configuration\n\nThe server connects to a Modbus device using parameters specified via environment variables. Set these variables in a `.env` file or your shell environment.\n\n### Environment Variables\n\n| Variable                   | Description                                      | Default              | Required |\n|-------------------------   |--------------------------------------------------|----------------------|----------|\n| `MODBUS_TYPE`              | Connection type: `tcp`, `udp`, or `serial`       | `tcp`                | Yes      |\n| `MODBUS_HOST`              | Host address for TCP/UDP                        | `127.0.0.1`          | For TCP/UDP |\n| `MODBUS_PORT`              | Port for TCP/UDP                                | `502`                | For TCP/UDP |\n| `MODBUS_DEFAULT_SLAVE_ID`  | Slave ID                                        | `1`                  | For TCP/UDP |\n| `MODBUS_SERIAL_PORT`       | Serial port (e.g., `/dev/ttyUSB0`, `COM1`)      | `/dev/ttyUSB0`       | For serial |\n| `MODBUS_BAUDRATE`          | Serial baud rate                                | `9600`               | For serial |\n| `MODBUS_PARITY`            | Serial parity: `N` (none), `E` (even), `O` (odd) | `N`                 | For serial |\n| `MODBUS_STOPBITS`          | Serial stop bits                                | `1`                  | For serial |\n| `MODBUS_BYTESIZE`          | Serial byte size                                | `8`                  | For serial |\n| `MODBUS_TIMEOUT`           | Serial timeout (seconds)                        | `1`                  | For serial |\n\n### Example `.env` File\n\nFor TCP:\n```\nMODBUS_TYPE=tcp\nMODBUS_HOST=192.168.1.100\nMODBUS_PORT=502\nMODBUS_SLAVE_ID=1\n```\n\nFor Serial:\n```\nMODBUS_TYPE=serial\nMODBUS_SERIAL_PORT=/dev/ttyUSB0\nMODBUS_BAUDRATE=9600\nMODBUS_PARITY=N\nMODBUS_STOPBITS=1\nMODBUS_BYTESIZE=8\nMODBUS_TIMEOUT=1\n```\n\n## Usage\n\n### Installing for Claude Desktop\n\nThe configuration file:\n\n```json\n{\n   \"mcpServers\": {\n       \"Modbus MCP Server\": {\n           \"command\": \"uv\",\n           \"args\": [ \"--directory\", \"/path/to/modbus-mcp\", \"run\", \"modbus-mcp\" ],\n           \"env\": { \"MODBUS_TYPE\": \"tcp\", \"MODBUS_HOST\": \"127.0.0.1\", \"MODBUS_PORT\": 502 },\n       }\n   }\n}\n```\n\n### Using Tools\n\n**Note**: Natural language support depends on the clientâ€™s ability to parse and map prompts to tools. The MCP Inspector requires structured JSON, but the examples below show how conversational inputs translate.\n\n1. **Read a Holding Register**:\n   - **Prompt**:\n     ```\n     Please read the value of Modbus holding register 0.\n     ```\n   - **MCP Inspector JSON**:\n     ```json\n     {\n       \"tool\": \"read_register\",\n       \"parameters\": {\"address\": 0, \"slave_id\": 1}\n     }\n     ```\n   - **Expected Output**: `Value: <register_value>`\n\n2. **Write to a Holding Register**:\n   - **Prompt**:\n     ```\n     Set Modbus holding register 10 to the value 100.\n     ```\n   - **MCP Inspector JSON**:\n     ```json\n     {\n       \"tool\": \"write_register\",\n       \"parameters\": {\"address\": 10, \"value\": 100, \"slave_id\": 1}\n     }\n     ```\n   - **Expected Output**: `Successfully wrote 100 to register 10`\n\n3. **Read Coils**:\n   - **Prompt**:\n     ```\n     Check the status of the first 5 Modbus coils starting at address 0.\n     ```\n   - **MCP Inspector JSON**:\n     ```json\n     {\n       \"tool\": \"read_coils\",\n       \"parameters\": {\"address\": 0, \"count\": 5, \"slave_id\": 1}\n     }\n     ```\n   - **Expected Output**: `Coils 0 to 4: [False, False, False, False, False]`\n\n4. **Write to a Coil**:\n   - **Prompt**:\n     ```\n     Turn on Modbus coil 5.\n     ```\n   - **MCP Inspector JSON**:\n     ```json\n     {\n       \"tool\": \"write_coil\",\n       \"parameters\": {\"address\": 5, \"value\": true, \"slave_id\": 1}\n     }\n     ```\n   - **Expected Output**: `Successfully wrote True to coil 5`\n\n5. **Read Input Registers**:\n   - **Prompt**:\n     ```\n     Read the values of 3 Modbus input registers starting from address 2.\n     ```\n   - **MCP Inspector JSON**:\n     ```json\n     {\n       \"tool\": \"read_input_registers\",\n       \"parameters\": {\"address\": 2, \"count\": 3, \"slave_id\": 1}\n     }\n     ```\n   - **Expected Output**: `Input Registers 2 to 4: [<value1>, <value2>, <value3>]`\n\n6. **Read Multiple Holding Registers**:\n   - **Prompt**:\n     ```\n     Get the values of Modbus holding registers 0 through 2.\n     ```\n   - **MCP Inspector JSON**:\n     ```json\n     {\n       \"tool\": \"read_multiple_holding_registers\",\n       \"parameters\": {\"address\": 0, \"count\": 3, \"slave_id\": 1}\n     }\n     ```\n   - **Expected Output**: `Holding Registers 0 to 2: [<value1>, <value2>, <value3>]`\n\n\n## License\n\nThis project is licensed under the MIT License. See [LICENSE](LICENSE) for details.\n"
}