{
  "mcp_name": "nicekon/zendesk-mcp-server-kon",
  "mcp_description": "Enhances Zendesk integration by managing tickets, community posts, and knowledge base access.",
  "mcp_id": "nicekon_zendesk-mcp-server-kon",
  "fetch_timestamp": "2025-06-23T07:06:14.249280Z",
  "github_url": "https://github.com/nicekon/zendesk-mcp-server-kon",
  "repository": {
    "name": "zendesk-mcp-server-kon",
    "full_name": "nicekon/zendesk-mcp-server-kon",
    "description": "이 프로젝트는 reminia/zendesk-mcp-server(https://github.com/reminia/zendesk-mcp-server) 를 포크하여 추가 기능과 개선사항을 추가한 버전입니다.",
    "html_url": "https://github.com/nicekon/zendesk-mcp-server-kon",
    "created_at": "2025-04-25T10:56:42Z",
    "updated_at": "2025-04-25T11:11:10Z",
    "pushed_at": "2025-04-25T10:58:28Z",
    "size": 78,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "nicekon",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/792574?v=4",
      "html_url": "https://github.com/nicekon"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 28726
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 2
  },
  "readme": "# Zendesk MCP Server KON\n\n[한국어](README.ko.md)\n\nThis project is a fork of [reminia/zendesk-mcp-server](https://github.com/reminia/zendesk-mcp-server) with modifications to support additional features and improvements.\n\n[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\nA Model Context Protocol server for Zendesk.\n\nThis server provides a comprehensive integration with Zendesk. It offers:\n\n- Tools for retrieving and managing Zendesk tickets and comments\n- Tools for managing community posts, comments, and topics\n- Specialized prompts for ticket analysis and response drafting\n- Full access to the Zendesk Help Center articles as knowledge base\n\n## Setup\n\n1. Install the package:\n```bash\nuv venv && uv pip install -e .\n```\n\n2. Configure in Claude desktop:\n```json\n{\n  \"mcpServers\": {\n    \"zendesk\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/zendesk-mcp-server-kon\",\n        \"run\",\n        \"zendesk\"\n      ],\n      \"env\": {\n        \"ZENDESK_SUBDOMAIN\": \"your-zendesk-subdomain\",\n        \"ZENDESK_EMAIL\": \"your-zendesk-email\",\n        \"ZENDESK_API_KEY\": \"your-zendesk-api-key\"\n      }\n    }\n  }\n}\n```\n\nReplace the environment variables with your Zendesk credentials:\n- `ZENDESK_SUBDOMAIN`: Your Zendesk subdomain (e.g., if your Zendesk URL is `company.zendesk.com`, use `company`)\n- `ZENDESK_EMAIL`: Your Zendesk admin email address\n- `ZENDESK_API_KEY`: Your Zendesk API token\n\n## Resources\n\n- zendesk://knowledge-base, get access to the whole help center articles.\n\n## Prompts\n\n### analyze-ticket\n\nAnalyze a Zendesk ticket and provide a detailed analysis of the ticket.\n\n### draft-ticket-response\n\nDraft a response to a Zendesk ticket.\n\n## Tools\n\n### Ticket Management\n\n#### get_ticket\nRetrieve a Zendesk ticket by its ID\n- Input:\n  - `ticket_id` (integer): The ID of the ticket to retrieve\n\n#### get_ticket_comments\nRetrieve all comments for a Zendesk ticket by its ID\n- Input:\n  - `ticket_id` (integer): The ID of the ticket to get comments for\n\n#### create_ticket_comment\nCreate a new comment on an existing Zendesk ticket\n- Input:\n  - `ticket_id` (integer): The ID of the ticket to comment on\n  - `comment` (string): The comment text/content to add\n  - `public` (boolean, optional): Whether the comment should be public (defaults to true)\n\n### Community Management\n\n#### get_community_posts\nRetrieve community posts with optional filtering and sorting\n- Input:\n  - `filter_by` (string, optional): Filter posts by status (planned, not_planned, completed, answered, none)\n  - `sort_by` (string, optional): Sort posts by criteria (created_at, edited_at, updated_at, recent_activity, votes, comments)\n\n#### get_community_post_comments\nRetrieve a community post and all its comments\n- Input:\n  - `post_id` (integer): The ID of the post to retrieve comments for\n\n#### create_community_post_comment\nCreate a new comment on a community post\n- Input:\n  - `post_id` (integer): ID of the post to comment on\n  - `body` (string): Comment content\n  - `author_id` (integer, optional): Comment author ID (only available for Help Center administrators)\n  - `notify_subscribers` (boolean, optional): Whether to notify subscribers (defaults to true)\n\n#### update_community_post_comment\nUpdate a comment on a community post\n- Input:\n  - `post_id` (integer): ID of the post containing the comment\n  - `comment_id` (integer): ID of the comment to update\n  - `body` (string): Updated comment content\n\n#### update_community_post\nUpdate a community post\n- Input:\n  - `post_id` (integer): ID of the post to update\n  - `title` (string, optional): Post title\n  - `details` (string, optional): Post content (supports p, br, strong tags)\n  - `topic_id` (integer, optional): ID of the topic this post belongs to\n  - `status` (string, optional): Post status (planned, not_planned, answered, completed)\n\n#### get_community_topics\nRetrieve all community topics\n- Returns a list of topics with their details including name, description, follower count, etc.\n"
}