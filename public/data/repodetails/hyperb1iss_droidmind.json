{
  "mcp_name": "hyperb1iss/droidmind",
  "mcp_description": "🐍 🏠 - Control Android devices with AI through MCP, enabling device control, debugging, system analysis, and UI automation with a comprehensive security framework.",
  "mcp_id": "hyperb1iss_droidmind",
  "fetch_timestamp": "2025-06-23T04:53:02.046338Z",
  "github_url": "https://github.com/hyperb1iss/droidmind",
  "repository": {
    "name": "droidmind",
    "full_name": "hyperb1iss/droidmind",
    "description": "Control your Android devices with AI using Model Context Protocol",
    "html_url": "https://github.com/hyperb1iss/droidmind",
    "created_at": "2025-03-02T10:46:15Z",
    "updated_at": "2025-06-20T07:05:17Z",
    "pushed_at": "2025-05-16T20:36:01Z",
    "size": 1533,
    "stargazers_count": 174,
    "watchers_count": 174,
    "forks_count": 19,
    "open_issues_count": 5,
    "language": "Python",
    "license": "Apache License 2.0",
    "topics": [
      "adb",
      "ai",
      "android",
      "claude",
      "context",
      "llm",
      "mcp",
      "model",
      "protocol"
    ],
    "default_branch": "main",
    "owner": {
      "login": "hyperb1iss",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/102151?v=4",
      "html_url": "https://github.com/hyperb1iss"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": true,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 19,
    "subscribers_count": 3,
    "languages": {
      "Python": 299515,
      "Dockerfile": 1550,
      "Shell": 1166
    },
    "language_percentages": {
      "Python": 99.1,
      "Dockerfile": 0.51,
      "Shell": 0.39
    },
    "pull_requests_count": 2,
    "contributors_count": 1,
    "latest_release": {
      "tag_name": "v0.3.1",
      "name": "Release v0.3.1",
      "published_at": "2025-05-16T20:36:13Z",
      "body": "DroidMind 0.3.1 is a major release that significantly enhances the project's architecture, user experience, and feature set. This release includes a comprehensive documentation framework, unified tool interfaces, improved error handling, and enhanced security features. The project now offers a more maintainable codebase with better organization and consistent API design.\r\n\r\n## ✨ Highlights\r\n\r\n### 📝 Comprehensive Documentation\r\n\r\nAdded extensive MkDocs-based documentation with detailed user guides, reference materials, and examples to make DroidMind more accessible to new users.\r\n\r\n### ♻️ Unified Tool Interfaces\r\n\r\nRefactored all tool modules into consistent, action-based interfaces that provide a more intuitive and maintainable API for developers and AI assistants.\r\n\r\n### 🔒️ Enhanced Security Framework\r\n\r\nImplemented a robust security system with risk categorization, command sanitization, and path protection to ensure safe device operations.\r\n\r\n### 🐳 Docker Support\r\n\r\nAdded containerized deployment with multi-stage builds for smaller image size and flexible transport mode support.\r\n\r\n## ✨ New Features\r\n\r\n- Added comprehensive MkDocs documentation framework with detailed user guides and reference materials\r\n- Added Docker support for containerized deployment with multi-stage build for smaller image size\r\n- Implemented advanced diagnostic tools for bug reports and heap dumps\r\n- Added UI automation tools for device interaction (tap, swipe, input_text, press_key, start_intent)\r\n- Added comprehensive security framework with risk categorization and command sanitization\r\n- Added file logging capabilities with automatic directory creation\r\n- Added 'monkey' command to allowed shell commands list for UI/application stress testing (#4)\r\n- Added 8 new diagnostic prompts for device analysis and troubleshooting\r\n\r\n## ♻️ Refactoring\r\n\r\n- Refactored all tool modules (app, device, UI, log, diagnostics, file) into unified operations with action parameters\r\n- Moved app manifest functionality from resources to app_management package\r\n- Moved logging functionality from resources to tools package\r\n- Moved device info code from resources to tools package\r\n- Refactored screenshot capture with improved file handling and random filenames\r\n- Refactored bug report handling for better code organization with dedicated helper methods\r\n- Migrated from mypy to pyright for type checking with better starlette type support\r\n\r\n## 🔧 Improvements\r\n\r\n- Enhanced CI/CD workflow with improved structure, documentation build, and Docker image publishing\r\n- Added development scripts for project maintenance (lint.py and release.py)\r\n- Updated dependencies to latest versions for better compatibility and features\r\n- Added project branding with new logo and enhanced visual identity\r\n- Changed default port from 6463 to 4256 (h.a.l.o) for better consistency (#3)\r\n- Standardized Android tool naming to android- prefix for consistency\r\n\r\n## 🐛 Bug Fixes\r\n\r\n- Fixed release workflow issues and simplified the release process\r\n- Fixed serial decoding in device queries for better TCP/IP device handling\r\n- Improved screenshot security with temporary hidden filenames and timestamps\r\n- Enhanced error handling and output management across the ADB stack\r\n\r\n## 📝 Documentation\r\n\r\n- Added online documentation badge to README for better discoverability\r\n- Added comprehensive source code documentation with full type annotations\r\n- Updated app management documentation with new app info tools\r\n\r\n## 🔧 Upgrade Notes\r\n\r\n- Tool naming has been standardized with android- prefix (e.g., android-app, android-ui, android-diag)\r\n- Default server port has changed from 6463 to 4256\r\n- Type checking now uses pyright instead of mypy\r\n\r\n## 📊 Metrics\r\n\r\n- Total Commits: 81\r\n- Files Changed: 422\r\n- Insertions: 45254\r\n- Deletions: 31525\r\n\r\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n\r\n**Full Changelog**: https://github.com/hyperb1iss/droidmind/commits/v0.3.1",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.3.1",
        "commit_sha": "bdf54d1c715bceb35665a03bfeecee0923516db9"
      }
    ],
    "latest_version": "v0.3.1"
  },
  "readme": "<div align=\"center\">\n\n# 🤖 DroidMind 🧠\n\n<img src=\"docs/assets/images/logo_neon_glow_icon.png\" alt=\"DroidMind Logo\" width=\"180\" />\n\n[![Python 3.13+](https://img.shields.io/badge/python-3.13+-9D00FF.svg?style=for-the-badge&logo=python&logoColor=white)](https://www.python.org/downloads/)\n[![License](https://img.shields.io/badge/license-Apache_2.0-FF00FF.svg?style=for-the-badge&logo=apache&logoColor=white)](LICENSE)\n[![Status](https://img.shields.io/badge/status-active_development-39FF14.svg?style=for-the-badge&logo=githubactions&logoColor=white)](docs/plan.md)\n[![Code Style](https://img.shields.io/badge/code_style-ruff-00FFFF.svg?style=for-the-badge&logo=ruff&logoColor=white)](https://github.com/astral-sh/ruff)\n[![Type Check](https://img.shields.io/badge/type_check-pyright-FFBF00.svg?style=for-the-badge&logo=typescript&logoColor=white)](https://github.com/microsoft/pyright)\n[![MCP](https://img.shields.io/badge/protocol-MCP-E6E6FA.svg?style=for-the-badge&logo=anthropic&logoColor=white)](https://modelcontextprotocol.io/)\n[![Android](https://img.shields.io/badge/platform-android-A4C639.svg?style=for-the-badge&logo=android&logoColor=white)](https://www.android.com/)\n[![Docs](https://img.shields.io/badge/docs-online-FF9E80.svg?style=for-the-badge&logo=gitbook&logoColor=white)](https://hyperb1iss.github.io/droidmind/)\n\n**Control Android devices with AI through the Model Context Protocol**\n\n</div>\n\nDroidMind is a powerful bridge between AI assistants and Android devices, enabling control, debugging, and system analysis through natural language. By implementing the Model Context Protocol (MCP), DroidMind allows AI models to directly interact with Android devices via ADB in a secure, structured way. When used as part of an agentic coding workflow, DroidMind can enable your assistant to build and debug with your device directly in the loop.\n\n## 💫 Core Features\n\nDroidMind empowers AI assistants to:\n\n- 📱 **Manage Devices**: Connect via USB/TCP-IP, list devices, view properties, and reboot.\n- 📊 **Analyze Systems**: Access logs (logcat, ANR, crash, battery), capture bug reports, and dump heap.\n- 📂 **Handle Files**: Browse, read, write, push, pull, delete, and manage device files/directories.\n- 📦 **Control Apps**: Install, uninstall, start, stop, clear data, and inspect app details (manifest, permissions, activities).\n- 🖼️ **Automate UI**: Perform taps, swipes, text input, and key presses.\n- 🐚 **Execute Shell Commands**: Run ADB shell commands with a security-conscious framework.\n- 🔒 **Operate Securely**: Benefit from command validation, risk assessment, and sanitization.\n- 💬 **Integrate Seamlessly**: Connect with any MCP-compatible client (Claude, Cursor, Cline, etc.).\n\nFor a detailed list of capabilities, see the **[User Manual](docs/user_manual/index.md)** and **[MCP Reference](docs/mcp-reference.md)**.\n\n## 🚀 Getting Started\n\n### Quickstart for IDEs (Zero Install with `uvx`)\n\nFor the fastest way to integrate DroidMind with an MCP-compatible IDE (like Cursor), you can configure it to run DroidMind directly from its GitHub repository using `uvx`. This method **does not require you to manually clone or install DroidMind first**.\n\nAdd the following to your IDE's MCP configuration (e.g., `.cursor/mcp.json` for Cursor):\n\n```json\n{\n  \"mcpServers\": {\n    \"droidmind\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--from\",\n        \"git+https://github.com/hyperb1iss/droidmind\",\n        \"droidmind\",\n        \"--transport\",\n        \"stdio\" // The default and preferred mode for most IDE integrations\n      ]\n    }\n  }\n}\n```\n\nYour IDE will be configured to launch DroidMind on demand. Full instructions for this setup are in the **[Quick Start Guide](docs/quickstart.md#1-configure-your-ide-to-run-droidmind-via-uvx)**.\n\n### Prerequisites\n\n- Python 3.13 or higher\n- `uv` (Python package manager)\n- Android device with USB debugging enabled\n- ADB (Android Debug Bridge) installed and in your system's PATH\n\n### Installation\n\nFor detailed instructions on setting up DroidMind, including the quick IDE integration with `uvx` (covered in the Quick Start), manual installation from source, or using Docker, please see our comprehensive **[Installation Guide](docs/installation.md)**.\n\n### Running DroidMind\n\nHow you run DroidMind depends on your setup:\n\n- **IDE Integration (via `uvx`)**: Your IDE automatically manages running DroidMind as configured in its MCP settings (e.g., `mcp.json`). See the [Quick Start Guide](docs/quickstart.md).\n- **Manual Installation**: After installing from source, you can run DroidMind directly.\n  - **Stdio (for direct terminal interaction or some IDE setups):**\n    ```bash\n    droidmind --transport stdio\n    ```\n  - **SSE (for web UIs or AI assistants like Claude Desktop):**\n    ```bash\n    droidmind --transport sse\n    ```\n    This usually starts a server at `sse://localhost:4256/sse`.\n- **Docker**: Refer to the [Docker Guide](docs/docker.md) for commands to run DroidMind in a container.\n\nRefer to the **[Installation Guide](docs/installation.md)** for more details on running DroidMind in different environments.\n\n## 🐳 Running with Docker\n\nDroidMind can also be run using Docker for a consistent, containerized environment. This is particularly useful for deployment and isolating dependencies.\n\nFor comprehensive instructions on building the Docker image and running DroidMind in a container with `stdio` or `SSE` transport, including notes on ADB device access, please refer to our **[Docker Guide](docs/docker.md)**.\n\n## 🔮 Example AI Assistant Queries\n\nWith an AI assistant connected to DroidMind, you can make requests like:\n\n- \"List all connected Android devices and show their properties.\"\n- \"Take a screenshot of my Pixel.\"\n- \"Install this APK on `emulator-5554`.\"\n- \"Show me the recent crash logs from `your_device_serial`.\"\n- \"Tap the 'Next' button on the current screen of `emulator-5554`.\"\n\nFor more inspiration, check out our **[Example Queries and Workflows](docs/user_manual/example_queries.md)** in the User Manual.\n\n## 🔒 Security\n\nDroidMind incorporates a security framework to protect your devices:\n\n- **Command Validation & Sanitization**\n- **Risk Assessment Categorization**\n- **Protected Path Operations**\n- **Comprehensive Logging**\n\nHigh-risk operations are flagged, and critical ones are blocked by default. Learn more in our **[Security Considerations](docs/user_manual/security.md)** chapter.\n\n## 💻 Development\n\nDroidMind uses `uv` for dependency management and development workflows.\n\n```bash\n# Install/update dependencies (after cloning and activating .venv)\nuv pip install -e .[dev,sse]\n\n# Run tests\npytest\n\n# Run linting\nruff check .\n\n# Run type checking\npyright # Ensure pyright is installed or use ruff's type checking capabilities\n```\n\n## 🤝 Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1.  Fork the repository.\n2.  Create your feature branch (`git checkout -b feature/amazing-feature`).\n3.  Set up your development environment with `uv`.\n4.  Make your changes.\n5.  Run tests, linting, and type checking.\n6.  Commit your changes (`git commit -m 'Add some amazing feature'`).\n7.  Push to the branch (`git push origin feature/amazing-feature`).\n8.  Open a Pull Request.\n\n## 📝 License\n\nThis project is licensed under the Apache License - see the [LICENSE](LICENSE) file for details.\n\n---\n\n<div align=\"center\">\n\nCreated by [Stefanie Jane 🌠](https://github.com/hyperb1iss)\n\nIf you find DroidMind useful, [buy me a Monster Ultra Violet ⚡️](https://ko-fi.com/hyperb1iss)\n\n</div>\n"
}