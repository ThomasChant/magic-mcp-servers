{
  "mcp_name": "Algorand",
  "mcp_description": "A comprehensive MCP server for tooling interactions(40+) and resource accessibility(60+) plus many useful prompts to interact with Algorand Blockchain.",
  "mcp_id": "GoPlausible_algorand-mcp",
  "fetch_timestamp": "2025-06-23T01:00:16.300255Z",
  "github_url": "https://github.com/GoPlausible/algorand-mcp",
  "repository": {
    "name": "algorand-mcp",
    "full_name": "GoPlausible/algorand-mcp",
    "description": "Algorand Model Context Protocol (Server & Client)",
    "html_url": "https://github.com/GoPlausible/algorand-mcp",
    "created_at": "2025-03-10T15:09:14Z",
    "updated_at": "2025-06-18T16:58:49Z",
    "pushed_at": "2025-05-29T11:21:10Z",
    "size": 2135,
    "stargazers_count": 32,
    "watchers_count": 32,
    "forks_count": 10,
    "open_issues_count": 1,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [
      "algorand",
      "mcp",
      "mcp-client",
      "mcp-server",
      "model-context-protocol"
    ],
    "default_branch": "main",
    "owner": {
      "login": "GoPlausible",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/106061767?v=4",
      "html_url": "https://github.com/GoPlausible"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 10,
    "subscribers_count": 2,
    "languages": {
      "TypeScript": 509489,
      "JavaScript": 749,
      "Dockerfile": 499
    },
    "language_percentages": {
      "TypeScript": 99.76,
      "JavaScript": 0.15,
      "Dockerfile": 0.1
    },
    "pull_requests_count": 2,
    "contributors_count": 2,
    "package_json_version": "2.7.7"
  },
  "readme": "# Algorand MCP Implementation\n[![smithery badge](https://smithery.ai/badge/@GoPlausible/algorand-mcp)](https://smithery.ai/server/@GoPlausible/algorand-mcp)\n[![npm downloads](https://img.shields.io/npm/dm/algorand-mcp.svg)](https://www.npmjs.com/package/algorand-mcp)\n[![npm version](https://badge.fury.io/js/algorand-mcp.svg)](https://badge.fury.io/js/algorand-mcp)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n## Overview\n\n[Model context protocol](https://modelcontextprotocol.io/) or MCP, is an open protocol that standardizes how applications provide context to LLMs. MCP provides specification standards to give LLMs tools, resources and instructions to be more useful and effective.\n\n![Screenshot 2025-03-15 at 17 47 54](https://github.com/user-attachments/assets/db561f9f-5f95-4b07-914b-a71f48bb5399)\n\n[MCP Github](https://github.com/modelcontextprotocol) contains more information and different tools and specifications plus documentation of MCP.\n\nThis repository is a Model Context Protocol (MCP) implementation for Algorand blockchain interactions. The implementation consists of:\n- (PRODUCTION) A server package for blockchain interactions (Node.js only)\n- (WIP) A client package for wallet management and transaction signing (supports both browser and Node.js)\n\n**ðŸ“¦ Packages in this repository:**\n- **[Algorand MCP Server](packages/server/README.md)** - Algorand MCP server full implementation.\n- **[Algorand MCP Client](packages/client/README.md)** - Algorand MCP Client for client side Wallet management and transaction signing, as well as integration by other Agent hosts.\n\n**ðŸ“¦ NPM:**\n- **[Algorand MCP Server NPM package](https://www.npmjs.com/package/algorand-mcp)** - Algorand MCP server implementation via NPM package installation.\n\n**ðŸ“¦ Smithery:**\n- **[Algorand MCP Server on Smithery](https://smithery.ai/server/@GoPlausible/algorand-mcp)** - Algorand MCP server implementation via smithery.\n\n\n## Features\n- **Complete Algorand Documentation Integration**\n  - **Full Algorand knowledge taxonomy**\n  - **Comprehensive developer documentation**\n  - **ARCs, SDKs, and tools documentation**\n  - **Direct document access via knowledge tool**\n- Complete Algorand blockchain interaction capabilities\n- Extensive wallet management system\n- Comprehensive transaction handling\n- Rich blockchain state querying\n- Built-in security features\n- Support for Claude Desktop and Cursor integration\n\n## Requirements\n- Node.js v23.6.1 or later\n- npm v10.2.4 or later\n\n## Installation\n\nTo install or update the Algorand MCP implementation, clone the repository, install the dependencies and build the project\":\n\nFirst check node version to be 23.6.1 or later:\n```bash\nnode -v\n```\n\nUpgrade to 23.6.1 or later if needed!\n\nThen check the Claude or Cursor container folders to have mcp-servers folder (if not create one):\n```bash\nmkdir PATH_ON_YOUR_MACHINE/Claude/mcp-servers\n# or for Cursor \nmkdir PATH_ON_YOUR_MACHINE/Cursor/mcp-servers\n```\nThen clone this repository under mcp-servers folder and install dependencies:\n\n```bash\ncd PATH_ON_YOUR_MACHINE/Claude/mcp-servers\n# or for Cursor \ncd PATH_ON_YOUR_MACHINE/Cursor/mcp-servers\n# Clone the repository\ngit clone https://github.com/GoPlausible/algorand-mcp.git\ncd algorand-mcp\n# Install dependencies\nnpm install\n# Build the project\nnpm run build\n# Edit the .env file to set your configurations\n```\nAnd you are done! Now you can open you MCP config and add the server as :\n\n```json\n{\n  \"mcpServers\": {\n    \"algorand-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"PATH_ON_YOUR_MACHINE/Claude/mcp-servers/algorand-mcp/packages/server/dist/index.js\"\n     ],\n      \"env\": {\n        \"ALGORAND_NETWORK\": \"testnet\",\n        \"ALGORAND_ALGOD_API\": \"https://testnet-api.algonode.cloud/v2\",\n        \"ALGORAND_ALGOD\": \"https://testnet-api.algonode.cloud\",\n        \"ALGORAND_INDEXER_API\": \"https://testnet-idx.algonode.cloud/v2\",\n        \"ALGORAND_INDEXER\": \"https://testnet-idx.algonode.cloud\",\n        \"ALGORAND_ALGOD_PORT\": \"\",\n        \"ALGORAND_INDEXER_PORT\": \"\",\n        \"ALGORAND_TOKEN\": \"\",\n        \"ALGORAND_AGENT_WALLET\": \"problem aim online jaguar upper oil flight stumble mystery aerobic toy avoid file tomato moment exclude witness guard lab opera crunch noodle dune abandon broccoli\",\n        \"NFD_API_URL\": \"https://api.nf.domains\",\n        \"NFD_API_KEY\": \"\",\n        \"TINYMAN_ACTIVE\": \"false\",\n        \"ULTRADE_ACTIVE\": \"false\",\n        \"ULTRADE_API_URL\": \"https://api.ultrade.io\",\n        \"VESTIGE_ACTIVE\": \"false\",\n        \"VESTIGE_API_URL\": \"https://api.vestigelabs.org\",\n        \"VESTIGE_API_KEY\": \"\",\n        \"ITEMS_PER_PAGE\": \"10\"\n\n      }\n    }\n  }\n}\n```\nMake sure yopu change the paths to match your local system's paths.\n\nFor example on MACOS and Claud, the path would be something like this:\n\n```json\n{\n  \"mcpServers\": {\n    \"algorand-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\n        \" /Users/YOUR_USERNAME/Library/Application\\ Support/Claude/mcp-servers/algorand-mcp/packages/server/dist/index.js\"\n     ]\n    }\n  }\n}\n```\n\n## Project Architecture\n\nThe project follows a modular architecture with two main packages:\n\n1. **Server Package (`@algorand-mcp/server`)**\n   - Provides MCP tools and resources\n   - Manages blockchain interactions\n   - Handles transaction creation and submission\n   - Offers comprehensive blockchain queries\n\n2. **Client Package (`@algorand-mcp/client`)**\n   - Handles wallet connections and transaction signing\n   - Supports both local and external wallets\n   - Universal compatibility (browser/Node.js)\n   - Secure credential management\n   - Still work in progress (Server works irrelevant to client status)\n\n## Project Structure\n\n```\nalgorand-mcp/\nâ”œâ”€â”€ packages/\nâ”‚   â”œâ”€â”€ client/                    # Client Package\nâ”‚   â”‚   â”œâ”€â”€ src/\nâ”‚   â”‚   â”‚   â”œâ”€â”€ index.ts          # Client entry point and wallet management\nâ”‚   â”‚   â”‚   â””â”€â”€ LocalWallet.ts    # Local wallet implementation\nâ”‚   â”‚   â”œâ”€â”€ package.json\nâ”‚   â”‚   â””â”€â”€ tsconfig.json\nâ”‚   â””â”€â”€ server/                    # Server Package\nâ”‚       â”œâ”€â”€ src/\nâ”‚       â”‚   â”œâ”€â”€ resources/         # MCP Resources (User-invokable endpoints)\nâ”‚       â”‚   â”‚   â”œâ”€â”€ knowledge/     # Documentation and taxonomy\nâ”‚       â”‚   â”‚   â”‚   â”œâ”€â”€ taxonomy/  # Markdown documentation\nâ”‚       â”‚   â”‚   â”‚   â””â”€â”€ index.ts   # Knowledge resource handler\nâ”‚       â”‚   â”‚   â”œâ”€â”€ wallet/       # Wallet management\nâ”‚       â”‚   â”‚   â”‚   â””â”€â”€ index.ts   # Wallet resource handler\nâ”‚       â”‚   â”‚   â””â”€â”€ index.ts       # Resource registration\nâ”‚       â”‚   â”œâ”€â”€ tools/            # MCP Tools (Agent-invokable operations)\nâ”‚       â”‚   â”‚   â”œâ”€â”€ accountManager.ts     # Account operations\nâ”‚       â”‚   â”‚   â”œâ”€â”€ algodManager.ts       # Node interactions\nâ”‚       â”‚   â”‚   â”œâ”€â”€ utilityManager.ts     # Utility functions\nâ”‚       â”‚   â”‚   â”œâ”€â”€ apiManager/       # API Tools\nâ”‚       â”‚   â”‚   â”‚   â”œâ”€â”€ algod/           # Algod API tools\nâ”‚       â”‚   â”‚   â”‚   â”œâ”€â”€ indexer/         # Indexer API tools\nâ”‚       â”‚   â”‚   â”‚   â”œâ”€â”€ nfd/            # NFDomains tools\nâ”‚       â”‚   â”‚   â”‚   â”œâ”€â”€ vestige/        # Vestige DeFi tools\nâ”‚       â”‚   â”‚   â”‚   â”œâ”€â”€ tinyman/        # Tinyman AMM tools\nâ”‚       â”‚   â”‚   â”‚   â””â”€â”€ ultrade/        # Ultrade DEX tools\nâ”‚       â”‚   â”‚   â””â”€â”€ transactionManager/   # Transaction handling\nâ”‚       â”‚   â”œâ”€â”€ env.ts            # Environment configuration\nâ”‚       â”‚   â””â”€â”€ index.ts          # Server entry point\nâ”‚       â”œâ”€â”€ package.json\nâ”‚       â””â”€â”€ tsconfig.json\nâ”œâ”€â”€ package.json                   # Root package file\nâ””â”€â”€ tsconfig.json                 # Root TypeScript config\n```\n\n## Core Functionalities\n\n### Server Features\n- Account management\n- Asset operations\n- Application interactions\n- Transaction creation and submission\n- Blockchain state queries\n- Comprehensive utility functions\n- Standardized response format\n- Built-in pagination support\n- NFDomains integration\n- Vestige DeFi analytics (optional, disabled by default)\n- Tinyman AMM integration (optional, disabled by default)\n- Ultrade DEX integration (optional, disabled by default)\n- Knowledge taxonomy resources:\n  - Full documentation taxonomy (algorand://knowledge/taxonomy)\n  - Category-specific documentation:\n    - ARCs (algorand://knowledge/taxonomy/arcs)\n    - SDKs (algorand://knowledge/taxonomy/sdks)\n    - AlgoKit (algorand://knowledge/taxonomy/algokit)\n    - AlgoKit Utils (algorand://knowledge/taxonomy/algokit-utils)\n    - TEALScript (algorand://knowledge/taxonomy/tealscript)\n    - Puya (algorand://knowledge/taxonomy/puya)\n    - Liquid Auth (algorand://knowledge/taxonomy/liquid-auth)\n    - Python (algorand://knowledge/taxonomy/python)\n    - Developer Docs (algorand://knowledge/taxonomy/developers)\n    - CLI Tools (algorand://knowledge/taxonomy/clis)\n    - Node Management (algorand://knowledge/taxonomy/nodes)\n    - Technical Details (algorand://knowledge/taxonomy/details)\n\n### Client Features (Work in Progress)\n- Local wallet with secure storage\n- External wallet support (Pera, Defly, Daffi)\n- Transaction signing\n- Session management\n- Universal ES module support\n\n## Response Format\n\nAll responses follow a standardized format:\n\n```typescript\n{\n  \"data\": {\n    // Response data here\n  },\n  \"metadata\": {  // Only for paginated responses\n    \"totalItems\": number,\n    \"itemsPerPage\": number,\n    \"currentPage\": number,\n    \"totalPages\": number,\n    \"hasNextPage\": boolean,\n    \"pageToken\": string,\n    \"arrayField\": string  // Name of paginated array field\n  }\n}\n```\n\nErrors are returned in a standardized format:\n```typescript\n{\n  \"error\": {\n    \"code\": string,\n    \"message\": string\n  }\n}\n```\n\n## Available Tools and Resources\n\nThe Algorand MCP implementation provides 125 tools and resources for blockchain interaction:\n- 40 base tools (account, asset, application, transaction management)\n- 30 API tools (algod and indexer)\n- 6 NFDomains (NFD) tools for name services\n- 28 Vestige tools for DeFi analytics\n- 9 Tinyman tools for AMM interactions\n- 12 Ultrade tools for DEX functionality\n\n### API Tools\n\n#### Algod API Tools\n- api_algod_get_account_info: Get current account balance, assets, and auth address\n- api_algod_get_account_application_info: Get account-specific application information\n- api_algod_get_account_asset_info: Get account-specific asset information\n- api_algod_get_application_by_id: Get application information\n- api_algod_get_application_box: Get application box by name\n- api_algod_get_application_boxes: Get all application boxes\n- api_algod_get_asset_by_id: Get current asset information\n- api_algod_get_pending_transaction: Get pending transaction information\n- api_algod_get_pending_transactions_by_address: Get pending transactions for an address\n- api_algod_get_pending_transactions: Get all pending transactions\n- api_algod_get_transaction_params: Get suggested transaction parameters\n- api_algod_get_node_status: Get current node status\n- api_algod_get_node_status_after_block: Get node status after a specific round\n\n#### Indexer API Tools\n- api_indexer_lookup_account_by_id: Get account information\n- api_indexer_lookup_account_assets: Get account assets\n- api_indexer_lookup_account_app_local_states: Get account application local states\n- api_indexer_lookup_account_created_applications: Get applications created by account\n- api_indexer_search_for_accounts: Search for accounts with various criteria\n- api_indexer_lookup_applications: Get application information\n- api_indexer_lookup_application_logs: Get application log messages\n- api_indexer_search_for_applications: Search for applications\n- api_indexer_lookup_asset_by_id: Get asset information and configuration\n- api_indexer_lookup_asset_balances: Get accounts holding this asset\n- api_indexer_lookup_asset_transactions: Get transactions involving this asset\n- api_indexer_search_for_assets: Search for assets\n- api_indexer_lookup_transaction_by_id: Get transaction information\n- api_indexer_lookup_account_transactions: Get account transaction history\n- api_indexer_search_for_transactions: Search for transactions\n\n#### NFDomains (NFD) API Tools\n- api_nfd_get_nfd: Get NFD by name or application ID\n- api_nfd_get_nfds_for_addresses: Get NFDs for specific addresses\n- api_nfd_get_nfd_activity: Get activity/changes for NFDs\n- api_nfd_get_nfd_analytics: Get analytics data for NFDs\n- api_nfd_browse_nfds: Browse NFDs with various filters\n- api_nfd_search_nfds: Search NFDs with various filters\n\n#### Vestige API Tools\n\n1. View Tools:\n- api_vestige_view_networks: Get all networks\n- api_vestige_view_network_by_id: Get network by id\n- api_vestige_view_protocols: Get all protocols\n- api_vestige_view_protocol_by_id: Get protocol by id\n- api_vestige_view_protocol_volumes: Get protocol volumes at specific day\n- api_vestige_view_assets: Get data about assets\n- api_vestige_view_assets_list: Get asset list\n- api_vestige_view_assets_search: Search assets by query\n- api_vestige_view_asset_price: Get asset prices\n- api_vestige_view_asset_candles: Get asset candles\n- api_vestige_view_asset_history: Get asset volume, swaps, total lockup, vwap and confidence history\n- api_vestige_view_asset_composition: Get asset lockups based on protocol and pair\n- api_vestige_view_pools: Get pools\n- api_vestige_view_vaults: Get all vaults\n- api_vestige_view_balances: Get balances by network id, protocol id and asset id\n- api_vestige_view_notes: Get notes by network id and optionally asset id\n- api_vestige_view_first_asset_notes: Get first note for assets\n- api_vestige_view_asset_notes_count: Get notes count for assets\n- api_vestige_view_swaps: Get swaps\n\n2. Swap Tools:\n- api_vestige_get_best_v4_swap_data: Get best V4 swap data\n- api_vestige_get_v4_swap_discount: Get V4 swap discount\n- api_vestige_get_v4_swap_data_transactions: Get V4 swap data transactions\n- api_vestige_get_aggregator_stats: Get aggregator stats\n\n3. Currency Tools:\n- api_vestige_view_currency_prices: Get all latest currency prices\n- api_vestige_view_currency_price_history: Get currency prices by timestamp range\n- api_vestige_view_currency_price: Get currency price by timestamp\n- api_vestige_view_currency_average_price: Get average price for currency\n- api_vestige_view_currency_prices_simple_30d: Get currency prices for last 30 days\n\n#### Tinyman API Tools\n- api_tinyman_get_pool: Get Tinyman pool information by asset pair\n- api_tinyman_get_pool_analytics: Get analytics for a Tinyman pool\n- api_tinyman_get_pool_creation_quote: Get quote for creating a new pool\n- api_tinyman_get_liquidity_quote: Get quote for adding liquidity\n- api_tinyman_get_remove_liquidity_quote: Get quote for removing liquidity\n- api_tinyman_get_swap_quote: Get quote for swapping assets\n- api_tinyman_get_asset_optin_quote: Get quote for opting into pool token\n- api_tinyman_get_validator_optin_quote: Get quote for opting into validator\n- api_tinyman_get_validator_optout_quote: Get quote for opting out of validator\n\n#### Ultrade API Tools\n1. Wallet Tools:\n- api_ultrade_wallet_signin_message: Generate message from the sign in data\n- api_ultrade_wallet_signin: Sign in to trading account\n- api_ultrade_wallet_add_key: Add a trading key\n- api_ultrade_wallet_revoke_key: Revoke a trading key\n- api_ultrade_wallet_keys: Get trading keys\n- api_ultrade_wallet_key_message: Generate message from the trading key data\n- api_ultrade_wallet_trades: Get filtered wallet trades\n- api_ultrade_wallet_transactions: Get filtered wallet transactions\n- api_ultrade_wallet_withdraw: Withdraw token\n- api_ultrade_wallet_withdraw_message: Generate message from the withdrawal data\n\n2. Market Tools:\n- api_ultrade_market_symbols: Get market symbols\n- api_ultrade_market_details: Get market details\n- api_ultrade_market_price: Get last market price by pair symbol\n- api_ultrade_market_depth: Get order book depth\n- api_ultrade_market_last_trades: Get last trades\n- api_ultrade_market_history: Get market history\n- api_ultrade_market_assets: Get trading assets\n- api_ultrade_market_fee_rates: Get fee rates\n- api_ultrade_market_chains: Get blockchain chains\n- api_ultrade_market_withdrawal_fee: Get withdrawal fee\n- api_ultrade_market_operation_details: Get operation details\n- api_ultrade_market_settings: Get market settings\n- api_ultrade_market_orders: Get orders\n- api_ultrade_market_open_orders: Get open orders\n- api_ultrade_market_order_by_id: Get order by ID\n- api_ultrade_market_order_message: Generate message from the order data\n- api_ultrade_market_create_order: Create new order\n- api_ultrade_market_create_orders: Create new orders\n- api_ultrade_market_cancel_order: Cancel open order\n- api_ultrade_market_cancel_orders: Cancel multiple open orders\n\n3. System Tools:\n- api_ultrade_system_time: Get current system time\n- api_ultrade_system_maintenance: Get system maintenance status\n- api_ultrade_system_version: Get system version\n\n### Account Management Tools\n- create_account: Create a new Algorand account\n- rekey_account: Rekey an account to a new address\n- validate_address: Check if an Algorand address is valid\n- encode_address: Encode a public key to an Algorand address\n- decode_address: Decode an Algorand address to a public key\n\n### Application Tools\n- make_app_create_txn: Create an application creation transaction\n- make_app_update_txn: Create an application update transaction\n- make_app_delete_txn: Create an application delete transaction\n- make_app_optin_txn: Create an application opt-in transaction\n- make_app_closeout_txn: Create an application close-out transaction\n- make_app_clear_txn: Create an application clear state transaction\n- make_app_call_txn: Create an application call transaction\n- get_application_address: Get the address for a given application ID\n- compile_teal: Compile TEAL source code\n- disassemble_teal: Disassemble TEAL bytecode back to source\n\n### Asset Tools\n- make_asset_create_txn: Create an asset creation transaction\n- make_asset_config_txn: Create an asset configuration transaction\n- make_asset_destroy_txn: Create an asset destroy transaction\n- make_asset_freeze_txn: Create an asset freeze transaction\n- make_asset_transfer_txn: Create an asset transfer transaction\n\n### Transaction Tools\n- send_raw_transaction: Submit signed transactions to the network\n- simulate_raw_transactions: Simulate raw transactions\n- simulate_transactions: Simulate transactions with detailed configuration\n- make_payment_txn: Create a payment transaction\n- assign_group_id: Assign a group ID to a list of transactions\n- sign_transaction: Sign a transaction with a secret key\n\n### Key Management Tools\n- mnemonic_to_mdk: Convert a mnemonic to a master derivation key\n- mdk_to_mnemonic: Convert a master derivation key to a mnemonic\n- secret_key_to_mnemonic: Convert a secret key to a mnemonic\n- mnemonic_to_secret_key: Convert a mnemonic to a secret key\n- seed_from_mnemonic: Generate a seed from a mnemonic\n- mnemonic_from_seed: Generate a mnemonic from a seed\n- sign_bytes: Sign arbitrary bytes with a secret key\n\n### Utility Tools\n- bytes_to_bigint: Convert bytes to a BigInt\n- bigint_to_bytes: Convert a BigInt to bytes\n- encode_uint64: Encode a uint64 to bytes\n- decode_uint64: Decode bytes to a uint64\n- generate_algorand_uri: Generate an Algorand URI and QR code according to ARC-26 specification\n\n## Dependencies\n\n- algosdk: Algorand JavaScript SDK\n- @perawallet/connect: Pera Wallet connector\n- @blockshake/defly-connect: Defly Wallet connector\n- @daffiwallet/connect: Daffi Wallet connector\n\n## License\n\nMIT\n"
}