{
  "mcp_name": "amidabuddha/unichat-mcp-server",
  "mcp_description": "üêç/üìá ‚òÅÔ∏è - Send requests to OpenAI, MistralAI, Anthropic, xAI, Google AI or DeepSeek using MCP protocol via tool or predefined prompts. Vendor API key required",
  "mcp_id": "amidabuddha_unichat-mcp-server",
  "fetch_timestamp": "2025-06-23T01:04:41.397245Z",
  "github_url": "https://github.com/amidabuddha/unichat-mcp-server",
  "repository": {
    "name": "unichat-mcp-server",
    "full_name": "amidabuddha/unichat-mcp-server",
    "description": null,
    "html_url": "https://github.com/amidabuddha/unichat-mcp-server",
    "created_at": "2024-11-30T21:44:28Z",
    "updated_at": "2025-06-10T11:22:41Z",
    "pushed_at": "2025-05-05T04:53:18Z",
    "size": 237,
    "stargazers_count": 36,
    "watchers_count": 36,
    "forks_count": 7,
    "open_issues_count": 1,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "amidabuddha",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/1759588?v=4",
      "html_url": "https://github.com/amidabuddha"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 7,
    "subscribers_count": 2,
    "languages": {
      "Python": 10339,
      "Dockerfile": 687
    },
    "language_percentages": {
      "Python": 93.77,
      "Dockerfile": 6.23
    },
    "pull_requests_count": 3,
    "contributors_count": 3
  },
  "readme": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/amidabuddha-unichat-mcp-server-badge.png)](https://mseep.ai/app/amidabuddha-unichat-mcp-server)\n\n# Unichat MCP Server in Python\nAlso available in [TypeScript](https://github.com/amidabuddha/unichat-ts-mcp-server)\n--\n <h4 align=\"center\">\n  <a href=\"https://github.com/amidabuddha/unichat-mcp-server/blob/main/LICENSE.md\">\n  <img src=\"https://img.shields.io/github/license/amidabuddha/unichat-mcp-server\" alt=\"Released under the MIT license.\" />\n  </a>\n  <a href=\"https://smithery.ai/server/unichat-mcp-server\">\n    <img src=\"https://smithery.ai/badge/unichat-mcp-server\" alt=\"Smithery Server Installations\" />\n  </a>\n</h4>\n\nSend requests to OpenAI, MistralAI, Anthropic, xAI, Google AI, DeepSeek, Alibaba, Inception using MCP protocol via tool or predefined prompts.\nVendor API key required\n\n### Tools\n\nThe server implements one tool:\n- `unichat`: Send a request to unichat\n  - Takes \"messages\" as required string arguments\n  - Returns a response\n\n### Prompts\n\n- `code_review`\n  - Review code for best practices, potential issues, and improvements\n  - Arguments:\n    - `code` (string, required): The code to review\"\n- `document_code`\n  - Generate documentation for code including docstrings and comments\n  - Arguments:\n    - `code` (string, required): The code to comment\"\n- `explain_code`\n  - Explain how a piece of code works in detail\n  - Arguments:\n    - `code` (string, required): The code to explain\"\n- `code_rework`\n  - Apply requested changes to the provided code\n  - Arguments:\n    - `changes` (string, optional): The changes to apply\"\n    - `code` (string, required): The code to rework\"\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n**Supported Models:**\n> A list of currently supported models to be used as `\"SELECTED_UNICHAT_MODEL\"` may be found [here](https://github.com/amidabuddha/unichat/blob/main/unichat/models.py). Please make sure to add the relevant vendor API key as `\"YOUR_UNICHAT_API_KEY\"`\n\n**Example:**\n```json\n\"env\": {\n  \"UNICHAT_MODEL\": \"gpt-4o-mini\",\n  \"UNICHAT_API_KEY\": \"YOUR_OPENAI_API_KEY\"\n}\n```\nDevelopment/Unpublished Servers Configuration\n```json\n\"mcpServers\": {\n  \"unichat-mcp-server\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"--directory\",\n      \"{{your source code local directory}}/unichat-mcp-server\",\n      \"run\",\n      \"unichat-mcp-server\"\n    ],\n    \"env\": {\n      \"UNICHAT_MODEL\": \"SELECTED_UNICHAT_MODEL\",\n      \"UNICHAT_API_KEY\": \"YOUR_UNICHAT_API_KEY\"\n    }\n  }\n}\n```\n\nPublished Servers Configuration\n```json\n\"mcpServers\": {\n  \"unichat-mcp-server\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"unichat-mcp-server\"\n    ],\n    \"env\": {\n      \"UNICHAT_MODEL\": \"SELECTED_UNICHAT_MODEL\",\n      \"UNICHAT_API_KEY\": \"YOUR_UNICHAT_API_KEY\"\n    }\n  }\n}\n```\n\n### Installing via Smithery\n\nTo install Unichat for Claude Desktop automatically via [Smithery](https://smithery.ai/server/unichat-mcp-server):\n\n```bash\nnpx -y @smithery/cli install unichat-mcp-server --client claude\n```\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Remove older builds:\n```bash\nrm -rf dist\n```\n\n2. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n3. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n4. Publish to PyPI:\n```bash\nuv publish --token {{YOUR_PYPI_API_TOKEN}}\n```\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory {{your source code local directory}}/unichat-mcp-server run unichat-mcp-server\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n"
}