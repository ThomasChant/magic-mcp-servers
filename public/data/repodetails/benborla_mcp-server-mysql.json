{
  "mcp_name": "benborla29/mcp-server-mysql",
  "mcp_description": "‚òÅÔ∏è üè† - MySQL database integration in NodeJS with configurable access controls and schema inspection",
  "mcp_id": "benborla_mcp-server-mysql",
  "fetch_timestamp": "2025-06-23T01:36:18.186427Z",
  "github_url": "https://github.com/benborla/mcp-server-mysql",
  "repository": {
    "name": "mcp-server-mysql",
    "full_name": "benborla/mcp-server-mysql",
    "description": "A Model Context Protocol server that provides read-only access to MySQL databases. This server enables LLMs to inspect database schemas and execute read-only queries.",
    "html_url": "https://github.com/benborla/mcp-server-mysql",
    "created_at": "2024-12-09T14:02:55Z",
    "updated_at": "2025-06-21T11:53:47Z",
    "pushed_at": "2025-05-29T08:45:50Z",
    "size": 23337,
    "stargazers_count": 524,
    "watchers_count": 524,
    "forks_count": 75,
    "open_issues_count": 15,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "benborla",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/22745294?v=4",
      "html_url": "https://github.com/benborla"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 75,
    "subscribers_count": 3,
    "languages": {
      "TypeScript": 69528,
      "JavaScript": 11065,
      "Dockerfile": 1331
    },
    "language_percentages": {
      "TypeScript": 84.87,
      "JavaScript": 13.51,
      "Dockerfile": 1.62
    },
    "pull_requests_count": 17,
    "contributors_count": 12,
    "latest_release": {
      "tag_name": "v2.0.0",
      "name": "MySQL MCP Release v2.0.0",
      "published_at": "2025-04-03T05:41:46Z",
      "body": "### Major New Features üéâ\r\n\r\n#### Multi-DB Permission\r\n- Added support for managing multiple databases through a single MCP server instance\r\n- Detailed documentation available in [MULTI-DB](https://github.com/benborla/mcp-server-mysql/blob/main/README-MULTI-DB.md)\r\n- Special thanks to [@saarthak-gupta-architect](https://github.com/saarthak-gupta-architect) for this contribution\r\n- Features include:\r\n  - Dynamic database switching\r\n  - Cross-database operations\r\n  - Schema-specific permissions\r\n  - Safe multi-DB mode with optional write protection\r\n\r\n### Improvements üîß\r\n\r\n#### Enhanced Logging System\r\n- Added optional logging system controlled by `ENABLE_LOGGING` environment variable\r\n- Log levels: info and error\r\n- Improved debugging capabilities while maintaining clean output when needed\r\n- Set `ENABLE_LOGGING=1` to enable logging, leave unset or set to any other value to disable\r\n\r\n#### Query Handling Improvements\r\n- Standardized query case handling to prevent column case sensitivity issues\r\n- All SQL queries are now automatically converted to lowercase before execution\r\n- Improved reliability when working with different MySQL configurations\r\n- Better handling of case-sensitive identifiers\r\n\r\n### Breaking Changes ‚ö†Ô∏è\r\n\r\n- Query handling now consistently uses lowercase, which might affect case-sensitive database configurations\r\n- Logging output format has changed - applications parsing server output may need updates\r\n- Multi-DB support introduces new configuration options that might require updates to existing deployment scripts\r\n\r\n### Migration Guide üîÑ\r\n\r\n1. Update Environment Variables:\r\n   ```bash\r\n   # Optional: Enable logging\r\n   ENABLE_LOGGING=1\r\n\r\n   # For Multi-DB support (optional)\r\n   MULTI_DB_WRITE_MODE=true  # Enable write operations in multi-DB mode\r\n   ```\r\n\r\n2. Review any case-sensitive database operations in your queries\r\n3. Update any scripts that parse server output to handle the new logging format\r\n4. Check `README-MULTI-DB.md` for multi-database setup instructions if needed\r\n\r\n### Contributors üë•\r\n\r\nSpecial thanks to:\r\n- [@saarthak-gupta-architect](https://github.com/saarthak-gupta-architect) - Multi-DB Support\r\n- [@boyzoid](https://github.com/boyzoid) - logging",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v2.0.0",
        "commit_sha": "b763fe8e4de8f7165e2e9a3538e8a3d1f8728343"
      },
      {
        "name": "v1.0.21",
        "commit_sha": "857b2568fee9a6216f2f20e1148bef3168493cab"
      },
      {
        "name": "v1.0.20",
        "commit_sha": "db0a2cbbf16b35809e5ba581b5c708f64bd640bd"
      },
      {
        "name": "v1.0.19",
        "commit_sha": "05c22e89f466fb9bd69146435a5e5b2cfc533e83"
      },
      {
        "name": "v1.0.18",
        "commit_sha": "d8fbe545583bbb500cb04cad58a6aa1f27144512"
      },
      {
        "name": "v1.0.17",
        "commit_sha": "2bfb7c194a267c2772022c61936280abb0004ad8"
      },
      {
        "name": "v1.0.16",
        "commit_sha": "5deb7734383b159c9c863e4a183008c40009a2af"
      },
      {
        "name": "v1.0.14",
        "commit_sha": "f04c2b5cb6599b4abbb5c2bcdda5194d01bcd9ba"
      },
      {
        "name": "v1.0.13",
        "commit_sha": "d2a0d12f680b30f6ed7e3c0da297efc8096c6ba4"
      },
      {
        "name": "v1.0.12",
        "commit_sha": "2db292c271d3e4dfd931a6b317e674f6687d0795"
      }
    ],
    "latest_version": "v2.0.0",
    "package_json_version": "2.0.2"
  },
  "readme": "\n# MCP Server for MySQL based on NodeJS\n[![smithery badge](https://smithery.ai/badge/@benborla29/mcp-server-mysql)](https://smithery.ai/server/@benborla29/mcp-server-mysql)\n\n![Demo](assets/demo.gif)\n<a href=\"https://glama.ai/mcp/servers/@benborla/mcp-server-mysql\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@benborla/mcp-server-mysql/badge\" />\n</a>\n\nA Model Context Protocol server that provides access to MySQL databases. This server enables LLMs to inspect database schemas and execute SQL queries.\n\n## Table of Contents\n- [Requirements](#requirements)\n- [Installation](#installation)\n  - [Smithery](#using-smithery)\n  - [Clone to Local Repository](#running-from-local-repository)\n- [Components](#components)\n- [Configuration](#configuration)\n- [Environment Variables](#environment-variables)\n- [Multi-DB Mode](#multi-db-mode)\n- [Schema-Specific Permissions](#schema-specific-permissions)\n- [Testing](#testing)\n- [Troubleshooting](#troubleshooting)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Requirements\n\n- Node.js v18 or higher\n- MySQL 5.7 or higher (MySQL 8.0+ recommended)\n- MySQL user with appropriate permissions for the operations you need\n- For write operations: MySQL user with INSERT, UPDATE, and/or DELETE privileges\n\n## Installation\n\nThere are several ways to install and configure the MCP server but the most common would be checking this website https://smithery.ai/server/@benborla29/mcp-server-mysql\n\n### Cursor\n\nFor Cursor IDE, you can install this MCP server with the following command in your project:\n\n1. Visit https://smithery.ai/server/@benborla29/mcp-server-mysql\n2. Follow the instruction for Cursor\n\n\nMCP Get provides a centralized registry of MCP servers and simplifies the installation process.\n\n### Using NPM/PNPM\n\nFor manual installation:\n\n```bash\n# Using npm\nnpm install -g @benborla29/mcp-server-mysql\n\n# Using pnpm\npnpm add -g @benborla29/mcp-server-mysql\n```\n\nAfter manual installation, you'll need to configure your LLM application to use the MCP server (see Configuration section below).\n\n### Running from Local Repository\n\nIf you want to clone and run this MCP server directly from the source code, follow these steps:\n\n1. **Clone the repository**\n   ```bash\n   git clone https://github.com/benborla/mcp-server-mysql.git\n   cd mcp-server-mysql\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   # or\n   pnpm install\n   ```\n\n3. **Build the project**\n   ```bash\n   npm run build\n   # or\n   pnpm run build\n   ```\n\n4. **Configure Claude Desktop**\n\n   Add the following to your Claude Desktop configuration file (`claude_desktop_config.json`):\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"mcp_server_mysql\": {\n         \"command\": \"/path/to/node\",\n         \"args\": [\n           \"/full/path/to/mcp-server-mysql/dist/index.js\"\n         ],\n         \"env\": {\n           \"MYSQL_HOST\": \"127.0.0.1\",\n           \"MYSQL_PORT\": \"3306\",\n           \"MYSQL_USER\": \"root\",\n           \"MYSQL_PASS\": \"your_password\",\n           \"MYSQL_DB\": \"your_database\",\n           \"ALLOW_INSERT_OPERATION\": \"false\",\n           \"ALLOW_UPDATE_OPERATION\": \"false\",\n           \"ALLOW_DELETE_OPERATION\": \"false\",\n           \"PATH\": \"/Users/atlasborla/Library/Application Support/Herd/config/nvm/versions/node/v22.9.0/bin:/usr/bin:/bin\", // <--- Important to add the following, run in your terminal `echo \"$(which node)/../\"` to get the path\n           \"NODE_PATH\": \"/Users/atlasborla/Library/Application Support/Herd/config/nvm/versions/node/v22.9.0/lib/node_modules\" // <--- Important to add the following, run in your terminal `echo \"$(which node)/../../lib/node_modules\"`\n         }\n       }\n     }\n   }\n   ```\n\n   Replace:\n   - `/path/to/node` with the full path to your Node.js binary (find it with `which node`)\n   - `/full/path/to/mcp-server-mysql` with the full path to where you cloned the repository\n   - Set the MySQL credentials to match your environment\n\n5. **Test the server**\n   ```bash\n   # Run the server directly to test\n   node dist/index.js\n   ```\n\n   If it connects to MySQL successfully, you're ready to use it with Claude Desktop.\n\n## Components\n\n### Tools\n\n- **mysql_query**\n  - Execute SQL queries against the connected database\n  - Input: `sql` (string): The SQL query to execute\n  - By default, limited to READ ONLY operations\n  - Optional write operations (when enabled via configuration):\n    - INSERT: Add new data to tables (requires `ALLOW_INSERT_OPERATION=true`)\n    - UPDATE: Modify existing data (requires `ALLOW_UPDATE_OPERATION=true`)\n    - DELETE: Remove data (requires `ALLOW_DELETE_OPERATION=true`)\n  - All operations are executed within a transaction with proper commit/rollback handling\n  - Supports prepared statements for secure parameter handling\n  - Configurable query timeouts and result pagination\n  - Built-in query execution statistics\n\n### Resources\n\nThe server provides comprehensive database information:\n\n- **Table Schemas**\n  - JSON schema information for each table\n  - Column names and data types\n  - Index information and constraints\n  - Foreign key relationships\n  - Table statistics and metrics\n  - Automatically discovered from database metadata\n\n### Security Features\n\n- SQL injection prevention through prepared statements\n- Query whitelisting/blacklisting capabilities\n- Rate limiting for query execution\n- Query complexity analysis\n- Configurable connection encryption\n- Read-only transaction enforcement\n\n### Performance Optimizations\n\n- Optimized connection pooling\n- Query result caching\n- Large result set streaming\n- Query execution plan analysis\n- Configurable query timeouts\n\n### Monitoring and Debugging\n\n- Comprehensive query logging\n- Performance metrics collection\n- Error tracking and reporting\n- Health check endpoints\n- Query execution statistics\n\n## Configuration\n\n### Automatic Configuration with Smithery\nIf you installed using Smithery, your configuration is already set up. You can view or modify it with:\n\n```bash\nsmithery configure @benborla29/mcp-server-mysql\n```\n\nWhen reconfiguring, you can update any of the MySQL connection details as well as the write operation settings:\n\n- **Basic connection settings**:\n  - MySQL Host, Port, User, Password, Database\n  - SSL/TLS configuration (if your database requires secure connections)\n\n- **Write operation permissions**:\n  - Allow INSERT Operations: Set to true if you want to allow adding new data\n  - Allow UPDATE Operations: Set to true if you want to allow updating existing data\n  - Allow DELETE Operations: Set to true if you want to allow deleting data\n\nFor security reasons, all write operations are disabled by default. Only enable these settings if you specifically need Claude to modify your database data.\n\n### Advanced Configuration Options\nFor more control over the MCP server's behavior, you can use these advanced configuration options:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp_server_mysql\": {\n      \"command\": \"/path/to/npx/binary/npx\",\n      \"args\": [\n        \"-y\",\n        \"@benborla29/mcp-server-mysql\"\n      ],\n      \"env\": {\n        // Basic connection settings\n        \"MYSQL_HOST\": \"127.0.0.1\",\n        \"MYSQL_PORT\": \"3306\",\n        \"MYSQL_USER\": \"root\",\n        \"MYSQL_PASS\": \"\",\n        \"MYSQL_DB\": \"db_name\",\n        \"PATH\": \"/path/to/node/bin:/usr/bin:/bin\",\n        \n        // Performance settings\n        \"MYSQL_POOL_SIZE\": \"10\",\n        \"MYSQL_QUERY_TIMEOUT\": \"30000\",\n        \"MYSQL_CACHE_TTL\": \"60000\",\n        \n        // Security settings\n        \"MYSQL_RATE_LIMIT\": \"100\",\n        \"MYSQL_MAX_QUERY_COMPLEXITY\": \"1000\",\n        \"MYSQL_SSL\": \"true\",\n        \n        // Monitoring settings\n        \"ENABLE_LOGGING\": \"true\",\n        \"MYSQL_LOG_LEVEL\": \"info\",\n        \"MYSQL_METRICS_ENABLED\": \"true\",\n        \n        // Write operation flags\n        \"ALLOW_INSERT_OPERATION\": \"false\",\n        \"ALLOW_UPDATE_OPERATION\": \"false\",\n        \"ALLOW_DELETE_OPERATION\": \"false\"\n      }\n    }\n  }\n}\n```\n\n## Environment Variables\n\n### Basic Connection\n- `MYSQL_SOCKET_PATH`: Unix socket path for local connections (e.g., \"/tmp/mysql.sock\")\n- `MYSQL_HOST`: MySQL server host (default: \"127.0.0.1\") - ignored if MYSQL_SOCKET_PATH is set\n- `MYSQL_PORT`: MySQL server port (default: \"3306\") - ignored if MYSQL_SOCKET_PATH is set\n- `MYSQL_USER`: MySQL username (default: \"root\")\n- `MYSQL_PASS`: MySQL password\n- `MYSQL_DB`: Target database name (leave empty for multi-DB mode)\n\n### Performance Configuration\n- `MYSQL_POOL_SIZE`: Connection pool size (default: \"10\")\n- `MYSQL_QUERY_TIMEOUT`: Query timeout in milliseconds (default: \"30000\")\n- `MYSQL_CACHE_TTL`: Cache time-to-live in milliseconds (default: \"60000\")\n\n### Security Configuration\n- `MYSQL_RATE_LIMIT`: Maximum queries per minute (default: \"100\")\n- `MYSQL_MAX_QUERY_COMPLEXITY`: Maximum query complexity score (default: \"1000\")\n- `MYSQL_SSL`: Enable SSL/TLS encryption (default: \"false\")\n- `ALLOW_INSERT_OPERATION`: Enable INSERT operations (default: \"false\")\n- `ALLOW_UPDATE_OPERATION`: Enable UPDATE operations (default: \"false\")\n- `ALLOW_DELETE_OPERATION`: Enable DELETE operations (default: \"false\")\n- `ALLOW_DDL_OPERATION`: Enable DDL operations (default: \"false\")\n- `SCHEMA_INSERT_PERMISSIONS`: Schema-specific INSERT permissions\n- `SCHEMA_UPDATE_PERMISSIONS`: Schema-specific UPDATE permissions\n- `SCHEMA_DELETE_PERMISSIONS`: Schema-specific DELETE permissions\n- `SCHEMA_DDL_PERMISSIONS`: Schema-specific DDL permissions\n- `MULTI_DB_WRITE_MODE`: Enable write operations in multi-DB mode (default: \"false\")\n\n### Monitoring Configuration\n- `MYSQL_ENABLE_LOGGING`: Enable query logging (default: \"false\")\n- `MYSQL_LOG_LEVEL`: Logging level (default: \"info\")\n- `MYSQL_METRICS_ENABLED`: Enable performance metrics (default: \"false\")\n\n## Multi-DB Mode\n\nMCP-Server-MySQL supports connecting to multiple databases when no specific database is set. This allows the LLM to query any database the MySQL user has access to. For full details, see [README-MULTI-DB.md](./README-MULTI-DB.md).\n\n### Enabling Multi-DB Mode\n\nTo enable multi-DB mode, simply leave the `MYSQL_DB` environment variable empty. In multi-DB mode, queries require schema qualification:\n\n```sql\n-- Use fully qualified table names\nSELECT * FROM database_name.table_name;\n\n-- Or use USE statements to switch between databases\nUSE database_name;\nSELECT * FROM table_name;\n```\n\n## Schema-Specific Permissions\n\nFor fine-grained control over database operations, MCP-Server-MySQL now supports schema-specific permissions. This allows different databases to have different levels of access (read-only, read-write, etc.).\n\n### Configuration Example\n\n```\nSCHEMA_INSERT_PERMISSIONS=development:true,test:true,production:false\nSCHEMA_UPDATE_PERMISSIONS=development:true,test:true,production:false\nSCHEMA_DELETE_PERMISSIONS=development:false,test:true,production:false\nSCHEMA_DDL_PERMISSIONS=development:false,test:true,production:false\n```\n\nFor complete details and security recommendations, see [README-MULTI-DB.md](./README-MULTI-DB.md).\n\n## Testing\n\n### Database Setup\n\nBefore running tests, you need to set up the test database and seed it with test data:\n\n1. **Create Test Database and User**\n   ```sql\n   -- Connect as root and create test database\n   CREATE DATABASE IF NOT EXISTS mcp_test;\n   \n   -- Create test user with appropriate permissions\n   CREATE USER IF NOT EXISTS 'mcp_test'@'localhost' IDENTIFIED BY 'mcp_test_password';\n   GRANT ALL PRIVILEGES ON mcp_test.* TO 'mcp_test'@'localhost';\n   FLUSH PRIVILEGES;\n   ```\n\n2. **Run Database Setup Script**\n   ```bash\n   # Run the database setup script\n   pnpm run setup:test:db\n   ```\n\n   This will create the necessary tables and seed data. The script is located in `scripts/setup-test-db.ts`\n\n3. **Configure Test Environment**\n   Create a `.env.test` file in the project root (if not existing):\n   ```env\n   MYSQL_HOST=127.0.0.1\n   MYSQL_PORT=3306\n   MYSQL_USER=mcp_test\n   MYSQL_PASS=mcp_test_password\n   MYSQL_DB=mcp_test\n   ```\n\n4. **Update package.json Scripts**\n   Add these scripts to your package.json:\n   ```json\n   {\n     \"scripts\": {\n       \"setup:test:db\": \"ts-node scripts/setup-test-db.ts\",\n       \"pretest\": \"pnpm run setup:test:db\",\n       \"test\": \"vitest run\",\n       \"test:watch\": \"vitest\",\n       \"test:coverage\": \"vitest run --coverage\"\n     }\n   }\n   ```\n\n### Running Tests\n\nThe project includes a comprehensive test suite to ensure functionality and reliability:\n\n```bash\n# First-time setup\npnpm run setup:test:db\n\n# Run all tests\npnpm test\n```\n\n\n\n## Running evals\n\nThe evals package loads an mcp client that then runs the index.ts file, so there is no need to rebuild between tests. You can load environment variables by prefixing the npx command. Full documentation can be found [here](https://www.mcpevals.io/docs).\n\n```bash\nOPENAI_API_KEY=your-key  npx mcp-eval evals.ts index.ts\n```\n## Troubleshooting\n\n### Common Issues\n\n1. **Connection Issues**\n   - Verify MySQL server is running and accessible\n   - Check credentials and permissions\n   - Ensure SSL/TLS configuration is correct if enabled\n   - Try connecting with a MySQL client to confirm access\n\n2. **Performance Issues**\n   - Adjust connection pool size\n   - Configure query timeout values\n   - Enable query caching if needed\n   - Check query complexity settings\n   - Monitor server resource usage\n\n3. **Security Restrictions**\n   - Review rate limiting configuration\n   - Check query whitelist/blacklist settings\n   - Verify SSL/TLS settings\n   - Ensure the user has appropriate MySQL permissions\n\n4. **Path Resolution**\nIf you encounter an error \"Could not connect to MCP server mcp-server-mysql\", explicitly set the path of all required binaries:\n```json\n{\n  \"env\": {\n    \"PATH\": \"/path/to/node/bin:/usr/bin:/bin\"\n  }\n}\n```\n\n*Where can I find my `node` bin path*\nRun the following command to get it:\n\nFor **PATH**\n```bash\necho \"$(which node)/../\"    \n```\n\nFor **NODE_PATH**\n```bash\necho \"$(which node)/../../lib/node_modules\"    \n```\n\n5. **Claude Desktop Specific Issues**\n   - If you see \"Server disconnected\" logs in Claude Desktop, check the logs at `~/Library/Logs/Claude/mcp-server-mcp_server_mysql.log`\n   - Ensure you're using the absolute path to both the Node binary and the server script\n   - Check if your `.env` file is being properly loaded; use explicit environment variables in the configuration\n   - Try running the server directly from the command line to see if there are connection issues\n   - If you need write operations (INSERT, UPDATE, DELETE), set the appropriate flags to \"true\" in your configuration:\n     ```json\n     \"env\": {\n       \"ALLOW_INSERT_OPERATION\": \"true\",  // Enable INSERT operations\n       \"ALLOW_UPDATE_OPERATION\": \"true\",  // Enable UPDATE operations\n       \"ALLOW_DELETE_OPERATION\": \"true\"   // Enable DELETE operations\n     }\n     ```\n   - Ensure your MySQL user has the appropriate permissions for the operations you're enabling\n   - For direct execution configuration, use:\n     ```json\n     {\n       \"mcpServers\": {\n         \"mcp_server_mysql\": {\n           \"command\": \"/full/path/to/node\",\n           \"args\": [\n             \"/full/path/to/mcp-server-mysql/dist/index.js\"\n           ],\n           \"env\": {\n             \"MYSQL_HOST\": \"127.0.0.1\",\n             \"MYSQL_PORT\": \"3306\",\n             \"MYSQL_USER\": \"root\",\n             \"MYSQL_PASS\": \"your_password\",\n             \"MYSQL_DB\": \"your_database\"\n           }\n         }\n       }\n     }\n     ```\n\n6. **Authentication Issues**\n   - For MySQL 8.0+, ensure the server supports the `caching_sha2_password` authentication plugin\n   - Check if your MySQL user is configured with the correct authentication method\n   - Try creating a user with legacy authentication if needed:\n     ```sql\n     CREATE USER 'user'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';\n     ```\n     @lizhuangs\n\n7. I am encountering `Error [ERR_MODULE_NOT_FOUND]: Cannot find package 'dotenv' imported from` error\ntry this workaround:\n```bash\nnpx -y -p @benborla29/mcp-server-mysql -p dotenv mcp-server-mysql\n```\nThanks to @lizhuangs\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request to \nhttps://github.com/benborla/mcp-server-mysql\n\n## Many Thanks to the following Contributors:\n<a href = \"https://github.com/benborla/mcp-server-mysql/graphs/contributors\">\n  <img src = \"https://contrib.rocks/image?repo=benborla/mcp-server-mysql\"/>\n</a>\n\n### Development Setup\n\n1. Clone the repository\n2. Install dependencies: `pnpm install`\n3. Build the project: `pnpm run build`\n4. Run tests: `pnpm test`\n\n### Project Roadmap\n\nWe're actively working on enhancing this MCP server. Check our [CHANGELOG.md](./CHANGELOG.md) for details on planned features, including:\n\n- Enhanced query capabilities with prepared statements\n- Advanced security features\n- Performance optimizations\n- Comprehensive monitoring\n- Expanded schema information\n\nIf you'd like to contribute to any of these areas, please check the issues on GitHub or open a new one to discuss your ideas.\n\n### Submitting Changes\n\n1. Fork the repository\n2. Create a feature branch: `git checkout -b feature/your-feature-name`\n3. Commit your changes: `git commit -am 'Add some feature'`\n4. Push to the branch: `git push origin feature/your-feature-name`\n5. Submit a pull request\n\n## License\n\nThis MCP server is licensed under the MIT License. See the LICENSE file for details.\n"
}