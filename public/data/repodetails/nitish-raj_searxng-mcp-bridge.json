{
  "mcp_name": "nitish-raj/searxng-mcp-bridge",
  "mcp_description": "Facilitates search operations by bridging MCP clients with a SearxNG instance.",
  "mcp_id": "nitish-raj_searxng-mcp-bridge",
  "fetch_timestamp": "2025-06-23T07:07:50.738039Z",
  "github_url": "https://github.com/nitish-raj/searxng-mcp-bridge",
  "repository": {
    "name": "searxng-mcp-bridge",
    "full_name": "nitish-raj/searxng-mcp-bridge",
    "description": "Model-Context Protocol server that acts as a bridge to a SearxNG instance",
    "html_url": "https://github.com/nitish-raj/searxng-mcp-bridge",
    "created_at": "2025-04-13T15:09:39Z",
    "updated_at": "2025-05-08T06:47:10Z",
    "pushed_at": "2025-04-16T18:46:06Z",
    "size": 99,
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks_count": 1,
    "open_issues_count": 1,
    "language": "JavaScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "master",
    "owner": {
      "login": "nitish-raj",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/22993803?v=4",
      "html_url": "https://github.com/nitish-raj"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 12545,
      "Dockerfile": 587
    },
    "language_percentages": {
      "JavaScript": 95.53,
      "Dockerfile": 4.47
    },
    "pull_requests_count": 2,
    "contributors_count": 2,
    "latest_release": {
      "tag_name": "v0.4.4",
      "name": "v0.4.4",
      "published_at": "2025-04-16T18:20:47Z",
      "body": "## @nitish-raj/searxng-mcp-bridge v0.4.4\n\nSee [CHANGELOG.md](https://github.com/nitish-raj/searxng-mcp-bridge/blob/master/CHANGELOG.md) for details.\n",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.4.4",
        "commit_sha": "4800b1e0f05885bef8520e2a824cf80d3d38aba8"
      },
      {
        "name": "v0.4.3",
        "commit_sha": "21ecd0a1b07b0aac974b1d5aec20f063f1940d04"
      },
      {
        "name": "v0.4.2",
        "commit_sha": "f7cef1eba8e477c4b2966350747869717d60c233"
      },
      {
        "name": "v0.4.1",
        "commit_sha": "785efcaacc7ed43804a4288bfb37417ac7619848"
      },
      {
        "name": "v0.4.0",
        "commit_sha": "2bbfbe3fc912981942ba682bc72863710d9e8b00"
      },
      {
        "name": "v0.3.0",
        "commit_sha": "f7c09ba850d1bd53cdac5e09f9459c44bb41b4de"
      },
      {
        "name": "v0.2.0",
        "commit_sha": "09053a17539288870345f18c4e809e9b348146e4"
      }
    ],
    "latest_version": "v0.4.4",
    "package_json_version": "0.4.4"
  },
  "readme": "[![Release](https://github.com/nitish-raj/searxng-mcp-bridge/actions/workflows/release.yml/badge.svg)](https://github.com/nitish-raj/searxng-mcp-bridge/actions/workflows/release.yml)\n[![smithery badge](https://smithery.ai/badge/@nitish-raj/searxng-mcp-bridge)](https://smithery.ai/server/@nitish-raj/searxng-mcp-bridge)\n\n# SearXNG MCP Bridge Server\n\nThis is a Model Context Protocol (MCP) server that acts as a bridge to a [SearXNG](https://github.com/searxng/searxng) instance. It allows compatible clients to perform searches using a configured SearXNG instance via MCP tools.\n\n## Quick Start (Using from npm)\n\n1. **Set up a SearXNG instance**:\n   ```bash\n   # Using Docker\n   docker run -d -p 8888:8080 --name searxng searxng/searxng\n   ```\n\n2. **Install and run the MCP bridge**:\n   ```bash\n   # Run directly with npx\n   npx @nitish-raj/searxng-mcp-bridge\n   ```\n\n3. **Configure in your MCP settings file**:\n   Add to your MCP settings file (e.g., `~/.vscode-server/data/User/globalStorage/rooveterinaryinc.roo-cline/settings/mcp_settings.json`):\n   ```json\n   {\n     \"mcpServers\": {\n       \"searxng-bridge\": {\n         \"command\": \"npx\",\n         \"args\": [\"@nitish-raj/searxng-mcp-bridge\"],\n         \"env\": {\n           \"SEARXNG_INSTANCE_URL\": \"YOUR_SEARXNG_INSTANCE_URL\" # Replace with your instance URL (e.g., http://localhost:8888 or a public one)\n         },\n         \"disabled\": false\n       }\n     }\n   }\n   ```\n\n## Features\n\n*   Provides an MCP tool named `search`.\n*   Connects to a SearXNG instance specified by an environment variable.\n*   Returns search results from SearXNG in JSON format.\n\n## Prerequisites\n\n*   Node.js and npm installed.\n*   A running SearXNG instance accessible from where this server will run.\n\n## Installation & Configuration\n\n### Installing via Smithery\n\nTo install searxng-mcp-bridge for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@nitish-raj/searxng-mcp-bridge):\n\n```bash\nnpx -y @smithery/cli install @nitish-raj/searxng-mcp-bridge --client claude\n```\n\n### Option 1: Using npm (Recommended)\n\n1. **Install the package globally:**\n   ```bash\n   npm install -g @nitish-raj/searxng-mcp-bridge\n   ```\n\n2. **Add to MCP Settings:**\n   Add the following configuration to your MCP settings file (e.g., `~/.vscode-server/data/User/globalStorage/rooveterinaryinc.roo-cline/settings/mcp_settings.json`):\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"searxng-bridge\": {\n         \"command\": \"mcp-searxng-bridge\",\n         \"env\": {\n           \"SEARXNG_INSTANCE_URL\": \"YOUR_SEARXNG_INSTANCE_URL\" # Replace with your instance URL (e.g., http://localhost:8888 or a public one)\n         },\n         \"disabled\": false,\n         \"alwaysAllow\": [\"search\"] // Optional: Allow search without confirmation\n       }\n     }\n   }\n   ```\n   * **Crucially**, set the `SEARXNG_INSTANCE_URL` environment variable in the `env` section to the URL of the SearXNG instance the bridge should connect to (e.g., `http://localhost:8888` or a public instance like `https://searx.space/`). **This variable is mandatory.**\n\n### Option 2: From Source\n\n1. **Clone the repository:**\n   ```bash\n   git clone https://github.com/nitish-raj/searxng-mcp-bridge.git\n   cd searxng-mcp-bridge\n   npm install\n   npm run build\n   ```\n\n2. **Add to MCP Settings:**\n   Add the following configuration to your MCP settings file:\n   ```json\n   {\n     \"mcpServers\": {\n       \"searxng-bridge\": {\n         \"command\": \"node\",\n         \"args\": [\n           \"/path/to/searxng-mcp-bridge/build/index.js\" // Adjust path if needed\n         ],\n         \"env\": {\n           \"SEARXNG_INSTANCE_URL\": \"YOUR_SEARXNG_INSTANCE_URL\" # Replace with your instance URL (e.g., http://localhost:8888 or a public one)\n         },\n         \"disabled\": false\n       }\n     }\n   }\n   ```\n   * Replace `/path/to/searxng-mcp-bridge/build/index.js` with the actual path to the built server file.\n\n3. **Restart MCP Client:** Restart the application using MCP (e.g., VS Code with the Roo extension) to load the new server configuration.\n\n## Setting up SearXNG\n\nYou need a running SearXNG instance to use this bridge. Here are some options:\n\n1. **Using Docker (Recommended):**\n   ```bash\n   docker run -d -p 8888:8080 --name searxng searxng/searxng\n   ```\n\n2. **Using Docker Compose:**\n   Create a `docker-compose.yml` file:\n   ```yaml\n   version: '3'\n   services:\n     searxng:\n       image: searxng/searxng\n       ports:\n         - \"8888:8080\"\n       restart: unless-stopped\n   ```\n   Then run:\n   ```bash\n   docker-compose up -d\n   ```\n\n3. **For more advanced configuration options**, refer to the [SearXNG documentation](https://github.com/searxng/searxng).\n\n## Usage\n\nOnce configured, you can instruct your MCP client (like Roo) to use the tool:\n\n\"Use the searxng-bridge search tool to search for 'your query'\"\n\n## Development\n\n*   `npm install`: Install dependencies.\n*   `npm run build`: Compile TypeScript to JavaScript.\n*   `npm run watch`: Watch for changes and rebuild automatically.\n*   `npm run inspector`: Run the MCP inspector to test the server.\n\n## Release Process\n\nThis project uses GitHub Actions for continuous integration and deployment:\n\n### Initial Setup (First-time only)\n\n1. **Push the code to GitHub**:\n   ```bash\n   # Initialize git if not already done\n   git init\n   git add .\n   git commit -m \"Initial commit\"\n   \n   # Add your GitHub repository as remote\n   git remote add origin https://github.com/nitish-raj/searxng-mcp-bridge.git\n   git push -u origin main\n   ```\n\n2. **Set up npm access**:\n   ```bash\n   # Login to npm (you'll need an npm account)\n   npm login\n   \n   # Generate an access token for GitHub Actions\n   # Go to npmjs.com → User Settings → Access Tokens → Generate New Token\n   ```\n\n3. **Add the npm token to GitHub repository secrets**:\n   - Go to your GitHub repository\n   - Navigate to Settings → Secrets and variables → Actions\n   - Click \"New repository secret\"\n   - Name: `NPM_TOKEN`\n   - Value: [Your npm access token]\n   - Click \"Add secret\"\n\n4. **Validate your package before publishing** (optional):\n   - After pushing your code to GitHub, go to the \"Actions\" tab\n   - Select the \"Validate Package\" workflow\n   - Click \"Run workflow\"\n   - This will build and pack your package without publishing it\n   - You can download the packed package as an artifact to inspect it\n\n### Release Process\n\n1. **Continuous Integration**: Every push to main and pull request is automatically built and tested.\n\n2. **Release Management**: When a new version is ready to be released:\n\n   ```bash\n   # For a patch release (0.1.0 -> 0.1.1)\n   npm run release:patch\n   \n   # For a minor release (0.1.0 -> 0.2.0)\n   npm run release:minor\n   \n   # For a major release (0.1.0 -> 1.0.0)\n   npm run release:major\n   ```\n\n   This will:\n   - Update the version in `package.json`.\n   - **Automatically update `CHANGELOG.md`** based on commit messages since the last tag (using `conventional-changelog-cli`). Ensure `conventional-changelog-cli` is installed (`npm install --save-dev conventional-changelog-cli`) and use [Conventional Commits](https://www.conventionalcommits.org/) (e.g., `feat: ...`, `fix: ...`) for meaningful changelog entries.\n   - Create a git commit and tag locally.\n   \n3. **Publishing**:\n   ```bash\n   # Push the commit and tag\n   git push && git push --tags\n   ```\n   \n   The GitHub Actions workflow will automatically:\n   - Build the project\n   - Publish to npm\n   - Create a GitHub release\n\nThe `CHANGELOG.md` file is automatically updated by the release script based on conventional commit messages.\n\n\n## Contributing\n\nContributions are welcome!\n\nPlease see the GitHub repository for contribution guidelines.\n"
}