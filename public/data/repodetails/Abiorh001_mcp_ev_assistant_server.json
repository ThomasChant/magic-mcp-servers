{
  "mcp_name": "Abiorh001/mcp_ev_assistant_server",
  "mcp_description": "Facilitates efficient management of EV charging stations and trip planning with robust APIs and interactive tools.",
  "mcp_id": "Abiorh001_mcp_ev_assistant_server",
  "fetch_timestamp": "2025-06-23T00:12:26.398749Z",
  "github_url": "https://github.com/Abiorh001/mcp_ev_assistant_server",
  "repository": {
    "name": "mcp_ev_assistant_server",
    "full_name": "Abiorh001/mcp_ev_assistant_server",
    "description": " A powerful server implementation for managing Electric Vehicle (EV) charging stations, trip planning, and resource management. This server provides a comprehensive set of tools and APIs for EV-related services.",
    "html_url": "https://github.com/Abiorh001/mcp_ev_assistant_server",
    "created_at": "2025-03-21T21:31:19Z",
    "updated_at": "2025-04-04T17:12:00Z",
    "pushed_at": "2025-04-04T17:11:56Z",
    "size": 544,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "Abiorh001",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/111014145?v=4",
      "html_url": "https://github.com/Abiorh001"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "Python": 51461
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# MCP EV Assistant Server\n\nA powerful server implementation for managing Electric Vehicle (EV) charging stations, trip planning, and resource management. This server provides a comprehensive set of tools and APIs for EV-related services.\n\n## Table of Contents\n- [Features](#features)\n- [Installation](#installation)\n- [Configuration](#configuration)\n- [Usage](#usage)\n- [API Reference](#api-reference)\n- [Resource Management](#resource-management)\n- [Error Handling](#error-handling)\n- [Development](#development)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Features\n\n### 1. EV Charging Station Services\n- **Charging Station Locator**: Find nearby EV charging stations based on location and preferences\n- **Socket Type Filtering**: Search for specific charging socket types (CCS, CHAdeMO, Type 2, etc.)\n- **Distance-based Search**: Specify search radius for finding charging stations\n\n### 2. Trip Planning\n- **Route Planning**: Plan EV-friendly routes between locations\n- **Charging Stop Integration**: Automatically includes necessary charging stops\n- **Range Consideration**: Takes into account vehicle range and current charge level\n\n### 3. Resource Management\n- **PDF Document Management**: Handles EV-related PDF documents (user guides, manuals, etc.)\n- **Resource Subscription**: Supports resource subscription for real-time updates\n- **Automatic Text Extraction**: PDF text extraction with fallback mechanisms\n\n### 4. Interactive Prompts\n- **Charging Station Search**: Interactive prompts for finding charging stations\n- **Charging Time Estimation**: Calculate charging duration based on various parameters\n- **Route Planning Assistance**: Interactive route planning with charging considerations\n\n## Installation\n\n### 1. Clone the Repository\n```bash\ngit clone https://github.com/Abiorh001/mcp_ev_assistant_server.git\ncd mcp_ev_assistant_server\n```\n\n### 2. Set Up Virtual Environment (Recommended)\n```bash\npython -m venv .venv\nsource .venv/bin/activate  # On Linux/Mac\n# or\n.venv\\\\Scripts\\\\activate  # On Windows\n```\n\n### 3. Install Dependencies\n```bash\nuv sync\n```\n\n## Configuration\n\n### 1. Environment Variables\nCreate a `.env` file in your project root with the following variables:\n```bash\nOPENCHARGE_MAP_API_KEY=your_opencharge_map_api_key\nGOOGLE_MAP_API_KEY=your_google_map_api_key\n```\n\n### 2. Server Configuration\nCreate or update `servers_config.json`:\n```json\n{\n  \"mcpServers\": {\n    \"ev_assistant\": {\n      \"command\": \"/home/$USER/path/mcp_learning/.venv/bin/python\",\n      \"args\": [\"/home/$USER/path/mcp_ev_assistant_server/ev_assistant_server.py\"],\n      \"env\": {\n        \"OPENCHARGE_MAP_API_KEY\": \"your_opencharge_map_api_key\",\n        \"GOOGLE_MAP_API_KEY\": \"your_google_map_api_key\"\n      }\n    }\n  }\n}\n```\n\n### 3. Directory Structure\n```\nmcp_ev_assistant_server/\n├── ev_assistant_server.py\n├── .env\n├── servers_config.json\n├── Data/                  # PDF resources directory\n├── agentTools/           # Tool implementations\n│   ├── charge_station_locator.py\n│   └── ev_trip_planner.py\n└── core/                 # Core functionality\n    ├── schemas.py\n    └── logger.py\n```\n\n## Usage\n\n### Starting the Server\n```bash\n# Method 1: Direct Python execution\npython ev_assistant_server.py\n\n\n```\n\n### API Examples\n\n1. Finding Charging Stations:\n```python\nresult = await client.call_tool(\"charge_points_locator\", {\n    \"address\": \"London, UK\",\n    \"max_distance\": 10,\n    \"socket_type\": \"CCS\"\n})\n```\n\n2. Planning a Trip:\n```python\nresult = await client.call_tool(\"ev_trip_planner\", {\n    \"user_address\": \"Manchester, UK\",\n    \"user_destination_address\": \"Liverpool, UK\",\n    \"socket_type\": \"Type 2\"\n})\n```\n\n## API Reference\n\n### Tools\n\n1. **charge_points_locator**\n   - Purpose: Find EV charging stations near a location\n   - Parameters:\n     - `address`: Location to search around (string, required)\n     - `max_distance`: Search radius in kilometers (integer, required)\n     - `socket_type`: Type of charging socket (string, required)\n\n2. **ev_trip_planner**\n   - Purpose: Plan an EV-friendly route\n   - Parameters:\n     - `user_address`: Starting location (string, required)\n     - `user_destination_address`: Destination location (string, required)\n     - `socket_type`: Preferred charging socket type (string, required)\n\n### Prompts\n\n1. **find-charging-stations**\n   - Required:\n     - `location`: Search location\n   - Optional:\n     - `radius`: Search radius in km\n     - `socket_type`: Charging socket type\n\n2. **charging-time-estimate**\n   - Required:\n     - `vehicle_model`: EV make and model\n     - `current_charge`: Current battery percentage\n     - `target_charge`: Desired battery percentage\n     - `charger_power`: Charging station power in kW\n\n3. **route-planner**\n   - Required:\n     - `start_location`: Starting point\n     - `end_location`: Destination\n     - `vehicle_range`: Vehicle's full charge range\n   - Optional:\n     - `current_charge`: Current battery percentage\n\n## Resource Management\n\n### PDF Resource Handling\n- Automatically discovers PDF files in the `/Data` directory\n- Supports text extraction with multiple fallback methods\n- Handles resource subscriptions for updates\n\n### Subscription System\n```python\n# Subscribe to a resource\nawait client.subscribe_resource(\"file:///pdf/ev_manual\")\n\n# Unsubscribe from a resource\nawait client.unsubscribe_resource(\"file:///pdf/ev_manual\")\n```\n\n## Error Handling\n- Comprehensive error logging\n- Fallback mechanisms for PDF processing\n- Input validation using Pydantic schemas\n- Graceful handling of missing resources\n\n## Development\n\n### Adding New Tools\n1. Define the tool schema in `core.schemas`\n2. Implement the tool function in `agentTools`\n3. Add the tool to `handle_list_tools()`\n4. Implement the tool handling in `handle_call_tool()`\n\n### Adding New Prompts\n1. Define the prompt structure in `PROMPTS`\n2. Implement validation in `handle_get_prompt()`\n3. Add necessary schema validation\n\n## Contributing\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n## License\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n"
}