{
  "mcp_name": "hipposys-ltd/airflow-mcp",
  "mcp_description": "Enhance your Apache Airflow management with natural language queries and troubleshooting using a custom MCP server.",
  "mcp_id": "hipposys-ltd_airflow-mcp",
  "fetch_timestamp": "2025-06-23T04:46:09.555413Z",
  "github_url": "https://github.com/hipposys-ltd/airflow-mcp",
  "repository": {
    "name": "airflow-mcp",
    "full_name": "hipposys-ltd/airflow-mcp",
    "description": null,
    "html_url": "https://github.com/hipposys-ltd/airflow-mcp",
    "created_at": "2025-04-15T06:49:42Z",
    "updated_at": "2025-06-17T01:12:38Z",
    "pushed_at": "2025-06-17T01:12:34Z",
    "size": 367,
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "hipposys-ltd",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/88116615?v=4",
      "html_url": "https://github.com/hipposys-ltd"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "Python": 50212,
      "HTML": 19087,
      "Just": 1077,
      "Dockerfile": 575
    },
    "language_percentages": {
      "Python": 70.77,
      "HTML": 26.9,
      "Just": 1.52,
      "Dockerfile": 0.81
    },
    "pull_requests_count": 2,
    "contributors_count": 3
  },
  "readme": "# Airflow MCP\n\nThis project implements an MCP server for Apache Airflow, enabling users to interact with their orchestration platform using natural language.\n\nWith a few minutes of setup, you should be able to use Claude Desktop or any MCP-enabled LLM to ask questions like:\n- \"What DAGs do we have in our Airflow cluster?\"\n- \"What is our latest failed DAG?\"\n\nAnd more!\n\n## About MCP and Airflow MCP\n\nThe Model Context Protocol (MCP) is an open standard creating secure connections between data sources and AI applications. This repository provides a custom MCP server for Apache Airflow that transforms how teams interact with their orchestration platform through natural language.\n\n## üöÄ Features\n\n- Query pipeline statuses through natural language\n- Troubleshoot DAG failures efficiently\n- Retrieve comprehensive DAG information\n- Trigger DAGs based on their status\n- Monitor execution results\n- Analyze DAG components and configurations\n\n## üõ†Ô∏è Getting Started\n\n### Prerequisites\n\nIf you already have an Airflow instance and want to use our prebuilt Docker image, you only need:\n- Docker\n- Access to your Apache Airflow instance\n- LLM access (Claude, ChatGPT, or AWS Bedrock)\n\nThis repository also provides a local setup for Apache Airflow, which you can use for demo purposes.\n\nYou can also build the MCP server from source, detailed below.\n\n### Quick Start - Using the Prebuilt Docker Image\n\nIf you have an Airflow instance and want to use our prebuilt Docker image, simply follow these steps:\n\n\nYou'll need to configure Claude Desktop to connect to your Airflow instance. If you haven't configured Claude Desktop for use with MCP before, we recommend following the [Claude Desktop documentation](https://modelcontextprotocol.io/quickstart/user).\n\nHere are the steps to configure Claude Desktop to connect to your Airflow instance, using our prebuilt Docker image:\n\n- Open Claude Desktop\n- Go to Settings ‚Üí Developer tab\n- Edit the MCP config with:\n```json\n{\n   \"mcpServers\": {\n         \"airflow_mcp\": {\n            \"command\": \"docker\",\n            \"args\": [\"run\", \"-i\", \"--rm\", \"-e\", \"airflow_api_url\", \"-e\", \"airflow\", \"-e\", \"airflow\", \"hipposysai/airflow-mcp:latest\"],\n            \"env\": {\n               \"airflow_api_url\": \"http://host.docker.internal:8088/api/v1\",\n               \"airflow_username\": \"airflow\",\n               \"airflow_password\": \"airflow\"\n            }\n         }\n   }\n}\n```\n\n\n\n\n\n### Running MCP Locally with Claude Desktop\n\n1. Clone this repository:\n   ```\n   git clone https://github.com/hipposys-ltd/airflow-mcp\n   ```\n\n2. If you don't have a running Airflow environment, start one with:\n   ```\n   just airflow\n   ```\n\n   This will start an Airflow instance on port 8088, with username `airflow` and password `airflow`.\n\n   You can access Airflow at http://localhost:8088/ and see multiple DAGs configured:\n\n   ![Airflow DAGs](docs/images/airflow_dags.jpg).\n\n   These DAGs have complex dependencies, some running on a schedule and some using Airflow's Dataset functionality.\n\n3. Configure Claude Desktop:\n\n   You'll need to configure Claude Desktop to connect to your Airflow instance. If you haven't configured Claude Desktop for use with MCP before, we recommend following the [Claude Desktop documentation](https://modelcontextprotocol.io/quickstart/user).\n\n   Here are the steps to configure Claude Desktop to connect to your Airflow instance:\n\n   - Open Claude Desktop\n   - Go to Settings ‚Üí Developer tab\n   - Edit the MCP config with:\n   ```json\n   {\n      \"mcpServers\": {\n          \"airflow_mcp\": {\n              \"command\": \"docker\",\n              \"args\": [\"run\", \"-i\", \"--rm\", \"-e\", \"airflow_api_url\", \"-e\", \"airflow\", \"-e\", \"airflow\", \"hipposysai/airflow-mcp:latest\"],\n              \"env\": {\n                \"airflow_api_url\": \"http://host.docker.internal:8088/api/v1\",\n                \"airflow_username\": \"airflow\",\n                \"airflow_password\": \"airflow\"\n              }\n          }\n      }\n   }\n   ```\n\n4. Test your setup by asking Claude: \"What DAGs do we have in our Airflow cluster?\"\n\n### Integrating with LangChain\n\n1. Set up environment:\n   ```\n   cp template.env .env\n   ```\n\n2. Configure your LLM model in `.env`:\n   - For AWS Bedrock: `LLM_MODEL_ID=bedrock:...`\n   - For Anthropic: `LLM_MODEL_ID=anthropic:...`\n   - For OpenAI: `LLM_MODEL_ID=openai:...`\n\n3. Add your API credentials to `.env`:\n   - AWS credentials for Bedrock\n   - `ANTHROPIC_API_KEY` for Claude\n   - `OPENAI_API_KEY` for ChatGPT\n\n4. (Optional) Connect to your own Airflow:\n   ```\n   airflow_api_url=your_airflow_api_url\n   airflow_username=your_airflow_username\n   airflow_password=your_airflow_password\n   ```\n\n5. Start the project:\n   - With bundled Airflow: `just project`\n   - With existing Airflow: `just project_no_airflow`\n\n6. Open web interfaces:\n   ```\n   just open_web_tabs\n   ```\n\n7. Try it out by asking \"How many DAGs failed today?\" in the Chat UI\n\n## üìù Example Usage\n\n- \"What DAGs do we have in our Airflow cluster?\"\n- \"Identify all DAGs with failed status in their most recent execution and trigger a new run for each one\"\n- \"What operators are used by the transform_forecast_attendance DAG?\"\n- \"Has the transform_forecast_attendance DAG ever completed successfully?\"\n\n## ü§ù Contributing\n\nWe enthusiastically invite the community to contribute to this open-source initiative! Whether you're interested in:\n\n- Adding new features\n- Improving documentation\n- Enhancing compatibility with different LLM providers\n- Reporting bugs\n- Suggesting improvements\n\nPlease feel free to submit pull requests or open issues on our GitHub repository.\n\n## üîó Links\n\n- [GitHub Repository](https://github.com/hipposys-ltd/airflow-mcp)\n- [Docker Repository](https://hub.docker.com/repository/docker/hipposysai/airflow-mcp/general)\n\n---\n"
}