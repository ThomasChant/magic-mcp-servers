{
  "mcp_name": "tumf/grafana-loki-mcp",
  "mcp_description": "üêç üè† - An MCP server that allows querying Loki logs through the Grafana API.",
  "mcp_id": "tumf_grafana-loki-mcp",
  "fetch_timestamp": "2025-06-23T09:07:23.618092Z",
  "github_url": "https://github.com/tumf/grafana-loki-mcp",
  "repository": {
    "name": "grafana-loki-mcp",
    "full_name": "tumf/grafana-loki-mcp",
    "description": "Grafana Loki MCP Repository",
    "html_url": "https://github.com/tumf/grafana-loki-mcp",
    "created_at": "2025-03-10T07:25:53Z",
    "updated_at": "2025-06-18T22:00:01Z",
    "pushed_at": "2025-06-18T22:00:02Z",
    "size": 169,
    "stargazers_count": 10,
    "watchers_count": 10,
    "forks_count": 3,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "tumf",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/69994?v=4",
      "html_url": "https://github.com/tumf"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 3,
    "subscribers_count": 1,
    "languages": {
      "Python": 56440,
      "Makefile": 3719
    },
    "language_percentages": {
      "Python": 93.82,
      "Makefile": 6.18
    },
    "pull_requests_count": 15,
    "contributors_count": 6,
    "tags": [
      {
        "name": "v0.1.14-beta2",
        "commit_sha": "b73bd6d3dac318a0ceab48b200955270155f5983"
      },
      {
        "name": "v0.1.4",
        "commit_sha": "809613773eb95155280f4b901fff8850b7de2cd6"
      },
      {
        "name": "v0.1.4-beta9",
        "commit_sha": "f5d3a4c6fa6cfce1d15f06050b513573424e0969"
      },
      {
        "name": "v0.1.4-beta8",
        "commit_sha": "1dba1655a093fea727066a97bbb4a28f68f02f7e"
      },
      {
        "name": "v0.1.4-beta7",
        "commit_sha": "fed76794ea3afab9da794c47900fabbd1be32d03"
      },
      {
        "name": "v0.1.4-beta6",
        "commit_sha": "63a6e1365084d2d115d5f03b03ce0d8c86d0975e"
      },
      {
        "name": "v0.1.4-beta5",
        "commit_sha": "bfd99eb686d678c5c5d7f4e3c8b3f9e88b5b84db"
      },
      {
        "name": "v0.1.4-beta4",
        "commit_sha": "153137faa48c4d463124145f7eeeb216053cc020"
      },
      {
        "name": "v0.1.4-beta3",
        "commit_sha": "378460386b356ab322fd5986330e6ce4ce8decff"
      },
      {
        "name": "v0.1.4-beta",
        "commit_sha": "11dcc4d99703ae78a929a46fc2a3b9b7953e7919"
      }
    ],
    "latest_version": "v0.1.14-beta2"
  },
  "readme": "# Grafana-Loki MCP Server\n\n[![Test](https://github.com/tumf/grafana-loki-mcp/actions/workflows/test.yml/badge.svg)](https://github.com/tumf/grafana-loki-mcp/actions/workflows/test.yml)\n[![PyPI version](https://badge.fury.io/py/grafana-loki-mcp.svg)](https://badge.fury.io/py/grafana-loki-mcp)\n[![codecov](https://codecov.io/gh/tumf/grafana-loki-mcp/branch/main/graph/badge.svg)](https://codecov.io/gh/tumf/grafana-loki-mcp)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nA [FastMCP](https://github.com/jlowin/fastmcp) server that allows querying Loki logs from Grafana.\n\n## MCP Server Settings\n\n```json\n{\n  \"mcpServers\": {\n    \"loki\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"grafana-loki-mcp\",\n        \"-u\",\n        \"GRAFANA_URL\",\n        \"-k\",\n        \"GRAFANA_API_KEY\"\n      ]\n    }\n  }\n}\n```\n\n- `GRAFANA_URL`: URL of your Grafana instance\n- `GRAFANA_API_KEY`: Grafana API key with appropriate permissions\n\n## Features\n\n- Query Loki logs through Grafana API\n- Get Loki labels and label values\n- Format query results in different formats (text, JSON, markdown)\n- Support for both stdio and SSE transport protocols\n\n## Requirements\n\n- Python 3.10+\n- FastMCP\n- Requests\n\n## Installation\n\n### Using pip\n\n```bash\npip install grafana-loki-mcp\n```\n\n### Development Setup\n\n1. Clone this repository\n2. Install dependencies using uv:\n\n```bash\n# Install uv\npip install uv\n\n# Create and activate virtual environment\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\nuv pip install -e \".[dev]\"\n```\n\n## Usage\n\n### Environment Variables\n\nSet the following environment variables:\n\n- `GRAFANA_URL`: URL of your Grafana instance\n- `GRAFANA_API_KEY`: Grafana API key with appropriate permissions\n\n### Command Line Arguments\n\nYou can also provide these values as command line arguments:\n\n```bash\ngrafana-loki-mcp -u https://your-grafana-instance.com -k your-api-key\n```\n\nAdditional options:\n- `--transport`: Transport protocol to use (`stdio` or `sse`, default: `stdio`)\n\n### Running the Server\n\n```bash\n# Using environment variables\nexport GRAFANA_URL=https://your-grafana-instance.com\nexport GRAFANA_API_KEY=your-api-key\ngrafana-loki-mcp\n\n# Using command line arguments\ngrafana-loki-mcp -u https://your-grafana-instance.com -k your-api-key\n\n# Using SSE transport\ngrafana-loki-mcp --transport sse\n```\n\n## Development\n\n### Testing\n\nRun the test suite:\n\n```bash\npytest\n```\n\nRun with coverage:\n\n```bash\npytest --cov=. --cov-report=term\n```\n\n### Linting and Formatting\n\n```bash\n# Run ruff linter\nruff check .\n\n# Run black formatter\nblack .\n\n# Run type checking\nmypy .\n```\n\n## Available Tools\n\n### query_loki\n\nQuery Loki logs through Grafana.\n\nParameters:\n- `query`: Loki query string\n- `start`: Start time (ISO format, Unix timestamp, or Grafana-style relative time like 'now-1h', default: 1 hour ago)\n- `end`: End time (ISO format, Unix timestamp, or Grafana-style relative time like 'now', default: now)\n- `limit`: Maximum number of log lines to return (default: 100)\n- `direction`: Query direction ('forward' or 'backward', default: 'backward')\n- `max_per_line`: Maximum characters per log line (0 for unlimited, default: 100)\n\n### get_loki_labels\n\nGet all label names from Loki.\n\n### get_loki_label_values\n\nGet values for a specific label from Loki.\n\nParameters:\n- `label`: Label name\n\n### format_loki_results\n\nFormat Loki query results in a more readable format.\n\nParameters:\n- `results`: Loki query results from query_loki\n- `format_type`: Output format ('text', 'json', or 'markdown', default: 'text')\n- `max_per_line`: Maximum characters per log line (0 for unlimited, default: 0)\n\n## Example Usage\n\n```python\n# Example client code\nfrom mcp.client import Client\n\nasync with Client() as client:\n    # Query Loki logs with max_per_line limit\n    results = await client.call_tool(\n        \"query_loki\",\n        {\n            \"query\": '{app=\"my-app\"} |= \"error\"',\n            \"limit\": 50,\n            \"max_per_line\": 100,  # Limit log lines to 100 characters\n            \"start\": \"now-6h\",    # Grafana-style relative time: 6 hours ago\n            \"end\": \"now\"          # Current time\n        }\n    )\n\n    # Format the results\n    formatted = await client.call_tool(\n        \"format_loki_results\",\n        {\n            \"results\": results,\n            \"format_type\": \"markdown\",\n            \"max_per_line\": 100  # Can also limit at formatting time\n        }\n    )\n\n    print(formatted)\n```\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n"
}