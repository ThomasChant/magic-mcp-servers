{
  "mcp_name": "yoda-digital/mcp-cerebra-legal-server",
  "mcp_description": "Cerebra Legal is an enterprise-grade server for legal reasoning and analysis, offering domain-specific tools for structured legal thinking, follow-up questioning, and result presentation.",
  "mcp_id": "yoda-digital_mcp-cerebra-legal-server",
  "fetch_timestamp": "2025-06-23T09:40:32.465391Z",
  "github_url": "https://github.com/yoda-digital/mcp-cerebra-legal-server",
  "repository": {
    "name": "mcp-cerebra-legal-server",
    "full_name": "yoda-digital/mcp-cerebra-legal-server",
    "description": null,
    "html_url": "https://github.com/yoda-digital/mcp-cerebra-legal-server",
    "created_at": "2025-03-24T02:43:13Z",
    "updated_at": "2025-06-19T21:50:32Z",
    "pushed_at": "2025-03-24T11:31:52Z",
    "size": 41,
    "stargazers_count": 8,
    "watchers_count": 8,
    "forks_count": 3,
    "open_issues_count": 1,
    "language": "TypeScript",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "yoda-digital",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/175815773?v=4",
      "html_url": "https://github.com/yoda-digital"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 3,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 54311,
      "JavaScript": 27798
    },
    "language_percentages": {
      "TypeScript": 66.15,
      "JavaScript": 33.85
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "1.0.0"
  },
  "readme": "# Cerebra Legal MCP Server\n\nAn enterprise-grade MCP server for legal reasoning and analysis based on the \"think\" tool concept from [Anthropic's engineering blog](https://www.anthropic.com/engineering/claude-think-tool).\n\n## Overview\n\nCerebra Legal provides three powerful tools for legal reasoning and analysis:\n\n1. **legal_think** - A structured legal reasoning tool that helps analyze complex legal issues with domain-specific guidance and templates.\n2. **legal_ask_followup_question** - A specialized tool for asking follow-up questions in legal contexts with domain-specific options.\n3. **legal_attempt_completion** - A tool for presenting legal analysis results with proper structure and citation formatting.\n\nThe server automatically detects legal domains (ANSC contestation, consumer protection, contract analysis) and provides domain-specific guidance, templates, and feedback.\n\n## Features\n\n- **Domain Detection**: Automatically identifies the legal domain of the analysis\n- **Domain-Specific Guidance**: Provides tailored guidance for different legal domains\n- **Structured Templates**: Offers domain-specific templates for legal analysis\n- **Citation Formatting**: Properly formats legal citations\n- **Thought Quality Analysis**: Provides feedback on legal reasoning quality\n- **Revision Support**: Allows for revising previous thoughts\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/yoda-digital/mcp-cerebra-legal-server.git\ncd mcp-cerebra-legal-server\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Usage\n\n### Running the Server\n\n```bash\nnpm start\n```\n\n### Testing the Server\n\nThe repository includes a test client that demonstrates how to interact with the server:\n\n```bash\n# Make the test client executable\nchmod +x test-client.js\n\n# Run the test client\n./test-client.js\n```\n\nThe test client will:\n1. Start the server\n2. Send a tools/list request to get available tools\n3. Send a legal_think request with a sample thought\n4. Display the server's responses\n\n### Adding to Claude\n\nTo add the server to Claude, update your MCP settings file with the following configuration:\n\n#### For VSCode Extension\n\nEdit the file at `~/.config/Code/User/globalStorage/rooveterinaryinc.roo-cline/settings/cline_mcp_settings.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"cerebra-legal\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/mcp-cerebra-legal-server/build/index.js\"],\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    }\n  }\n}\n```\n\n#### For Claude Desktop App\n\nEdit the file at `~/Library/Application Support/Claude/claude_desktop_config.json` (macOS) or the equivalent on your platform:\n\n```json\n{\n  \"mcpServers\": {\n    \"cerebra-legal\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/mcp-cerebra-legal-server/build/index.js\"],\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    }\n  }\n}\n```\n\n### Using the Tools in Claude\n\nOnce the server is added to Claude, you can use the tools in your conversations:\n\n### System Prompt Integration\n\nFor optimal AI interaction with these legal tools, it's essential to include proper guidance in the system prompt. These tools follow the same AI → Human interaction model as standard Cline tools but with domain-specific enhancements.\n\nThe system prompt should include detailed documentation for each tool:\n\n```\n## legal_think\nDescription: A structured legal reasoning tool that helps analyze complex legal issues with domain-specific guidance and templates. This tool enables step-by-step legal analysis with feedback on reasoning quality.\n\nParameters:\n- thought: (required) The current legal reasoning step\n- thoughtNumber: (required) Current thought number in sequence\n- totalThoughts: (required) Estimated total thoughts needed\n- nextThoughtNeeded: (required) Whether another thought step is needed\n- category: (optional) Legal domain category (auto-detected if not provided)\n- references: (optional) Array of legal references\n- isRevision: (optional) Whether this revises previous thinking\n- revisesThoughtNumber: (optional) Which thought is being reconsidered\n- requestGuidance: (optional) Whether to request domain-specific guidance\n- requestTemplate: (optional) Whether to request a domain-specific template\n\nUsage:\n<legal_think>\n<thought>Your legal reasoning step here</thought>\n<thoughtNumber>Current thought number</thoughtNumber>\n<totalThoughts>Estimated total thoughts</totalThoughts>\n<nextThoughtNeeded>true or false</nextThoughtNeeded>\n<category>Legal domain (optional)</category>\n<references>Array of references (optional)</references>\n<isRevision>true or false (optional)</isRevision>\n<revisesThoughtNumber>Thought number being revised (optional)</revisesThoughtNumber>\n<requestGuidance>true or false (optional)</requestGuidance>\n<requestTemplate>true or false (optional)</requestTemplate>\n</legal_think>\n\n## legal_ask_followup_question\nDescription: Ask the user a legal domain-specific question to gather additional information needed to complete the task. This tool enhances the standard ask_followup_question with legal domain detection, terminology formatting, and domain-specific suggested options.\n\nParameters:\n- question: (required) The question to ask the user. This will be automatically enhanced with appropriate legal terminology.\n- options: (optional) An array of 2-5 options for the user to choose from. If not provided, domain-specific options will be automatically suggested.\n- context: (optional) Additional context to help with domain detection and question formatting.\n\nUsage:\n<legal_ask_followup_question>\n<question>Your question here</question>\n<options>\nArray of options here (optional), e.g. [\"Option 1\", \"Option 2\", \"Option 3\"]\n</options>\n<context>Additional context to help with domain detection (optional)</context>\n</legal_ask_followup_question>\n\n## legal_attempt_completion\nDescription: Present the result of your work to the user with proper legal structure and formatting. This tool enhances the standard attempt_completion with legal domain detection, document structuring, and citation formatting.\n\nParameters:\n- result: (required) The result of the task. This will be automatically formatted with proper legal structure.\n- command: (optional) A CLI command to execute to show a live demo of the result to the user.\n- context: (optional) Additional context to help with domain detection and result formatting.\n\nUsage:\n<legal_attempt_completion>\n<result>\nYour final result description here\n</result>\n<command>Command to demonstrate result (optional)</command>\n<context>Additional context to help with domain detection (optional)</context>\n</legal_attempt_completion>\n```\n\nThis guidance ensures the AI understands:\n1. These are specialized versions of standard tools\n2. They maintain the same AI → Human interaction flow\n3. They have additional capabilities and parameters\n4. How to properly format the tool calls\n\nWithout this guidance, the AI might not fully leverage the domain-specific capabilities built into these tools.\n\n#### 1. Using legal_think\n\nThe legal_think tool helps you analyze complex legal issues with structured thinking:\n\n```\nI need to analyze an ANSC contestation where a claimant argues that technical specifications in a tender were too restrictive.\n```\n\nClaude will use the legal_think tool to:\n- Detect the legal domain (ANSC contestation)\n- Provide domain-specific guidance\n- Offer a structured template for analysis\n- Give feedback on the quality of legal reasoning\n- Support revision of previous thoughts\n\n#### 2. Using legal_ask_followup_question\n\nWhen Claude needs more information to complete a legal analysis:\n\n```\nWhat specific provisions of the technical specifications are being challenged?\n```\n\nClaude will use the legal_ask_followup_question tool to:\n- Format the question with appropriate legal terminology\n- Provide domain-specific options for the user to choose from\n- Detect the legal domain for context-aware questioning\n\n#### 3. Using legal_attempt_completion\n\nWhen Claude is ready to present the final legal analysis:\n\n```\nBased on my analysis, the technical specifications requiring \"minimum 5 years experience\" appear disproportionate and likely violate Article 33(2) of Law 131/2015 on public procurement.\n```\n\nClaude will use the legal_attempt_completion tool to:\n- Format the conclusion with proper legal structure\n- Extract and format legal citations\n- Organize the analysis into clear sections\n- Provide a professional legal document format\n\n### Tool Input Schemas\n\n#### legal_think\n\n```json\n{\n  \"thought\": \"Analyzing ANSC contestation where claimant argues technical specifications were too restrictive.\",\n  \"thoughtNumber\": 1,\n  \"totalThoughts\": 5,\n  \"nextThoughtNeeded\": true,\n  \"category\": \"ansc_contestation\",  // Optional, auto-detected if not provided\n  \"references\": [\"Law 131/2015\", \"ANSC Decision #12345\"],  // Optional\n  \"isRevision\": false,  // Optional\n  \"revisesThoughtNumber\": null,  // Optional\n  \"requestGuidance\": true,  // Optional\n  \"requestTemplate\": true  // Optional\n}\n```\n\n#### legal_ask_followup_question\n\n```json\n{\n  \"question\": \"What specific provisions of the technical specifications are being challenged?\",\n  \"options\": [  // Optional, auto-generated if not provided\n    \"Are you challenging the experience requirements?\",\n    \"Are you challenging the technical capacity requirements?\",\n    \"Are you challenging the financial requirements?\",\n    \"Are you challenging the certification requirements?\"\n  ],\n  \"context\": \"ANSC contestation regarding procurement of IT equipment\"  // Optional\n}\n```\n\n#### legal_attempt_completion\n\n```json\n{\n  \"result\": \"Based on the analysis of ANSC contestation #12345, the technical specifications requiring 'minimum 5 years experience' appear disproportionate and likely violate Article 33(2) of Law 131/2015 on public procurement.\",\n  \"command\": null,  // Optional\n  \"context\": \"ANSC contestation analysis\"  // Optional\n}\n```\n\n## Architecture\n\nThe server is built with a modular architecture:\n\n- **Domain Detector**: Identifies the legal domain of the analysis\n- **Legal Knowledge Base**: Provides domain-specific guidance and templates\n- **Citation Formatter**: Formats legal citations properly\n- **Tool Implementations**: Handles the logic for each tool\n\n## Development\n\n### Project Structure\n\n```\nmcp-cerebra-legal-server/\n├── src/\n│   ├── shared/           # Shared components\n│   │   ├── DomainDetector.ts\n│   │   ├── LegalKnowledgeBase.ts\n│   │   ├── CitationFormatter.ts\n│   │   └── types.ts\n│   ├── tools/            # Tool implementations\n│   │   ├── LegalThinkTool.ts\n│   │   ├── LegalAskFollowupQuestionTool.ts\n│   │   └── LegalAttemptCompletionTool.ts\n│   ├── utils/            # Utilities\n│   │   └── logger.ts\n│   └── index.ts          # Main server entry point\n├── build/                # Compiled JavaScript\n├── test-client.js        # Test client\n├── package.json\n└── tsconfig.json\n```\n\n### Building\n\n```bash\nnpm run build\n```\n\n### Testing\n\n```bash\n# Run the test client\n./test-client.js\n```\n\n## Repository\n\nThis project is available on GitHub at:\nhttps://github.com/yoda-digital/mcp-cerebra-legal-server\n\n## References\n\n- [The \"think\" tool: Enabling Claude to stop and think in complex tool use situations](https://www.anthropic.com/engineering/claude-think-tool) - Anthropic Engineering Blog\n\n## License\n\nMIT"
}