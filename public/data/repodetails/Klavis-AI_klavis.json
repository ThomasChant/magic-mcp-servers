{
  "mcp_name": "Klavis-AI/YouTube",
  "mcp_description": "üêç üìá - Extract and convert YouTube video information.",
  "mcp_id": "Klavis-AI_klavis",
  "fetch_timestamp": "2025-06-23T05:49:48.481905Z",
  "github_url": "https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/youtube",
  "repository": {
    "name": "klavis",
    "full_name": "Klavis-AI/klavis",
    "description": "Klavis AI (YC X25):  Open Source MCP integration for AI applications",
    "html_url": "https://github.com/Klavis-AI/klavis",
    "created_at": "2025-04-14T07:53:36Z",
    "updated_at": "2025-06-23T03:47:05Z",
    "pushed_at": "2025-06-23T01:47:11Z",
    "size": 8738,
    "stargazers_count": 2591,
    "watchers_count": 2591,
    "forks_count": 267,
    "open_issues_count": 13,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "agents",
      "ai",
      "ai-agents",
      "api",
      "developer-tools",
      "discord",
      "function-calling",
      "integration",
      "llm",
      "mcp",
      "mcp-client",
      "mcp-server",
      "oauth2",
      "open-source"
    ],
    "default_branch": "main",
    "owner": {
      "login": "Klavis-AI",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/205720652?v=4",
      "html_url": "https://github.com/Klavis-AI"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 267,
    "subscribers_count": 148,
    "languages": {
      "Python": 866119,
      "TypeScript": 701824,
      "Go": 297405,
      "JavaScript": 184389,
      "Dockerfile": 23140
    },
    "language_percentages": {
      "Python": 41.78,
      "TypeScript": 33.86,
      "Go": 14.35,
      "JavaScript": 8.9,
      "Dockerfile": 1.12
    },
    "pull_requests_count": 97,
    "contributors_count": 9,
    "latest_release": {
      "tag_name": "ts-v0.1.1",
      "name": "TypeScript SDK v0.1.1",
      "published_at": "2025-06-20T21:35:23Z",
      "body": "## What's Changed\n* update openai example  by @zihaolin96 in https://github.com/Klavis-AI/klavis/pull/101\n* update openai example by @zihaolin96 in https://github.com/Klavis-AI/klavis/pull/102\n* add ts sdk workflow by @zihaolin96 in https://github.com/Klavis-AI/klavis/pull/104\n\n\n**Full Changelog**: https://github.com/Klavis-AI/klavis/compare/v1.0.1...ts-v0.1.1",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v1.0.1",
        "commit_sha": "e084c5decaa196793bdd98a4f4b6a1eee425311c"
      },
      {
        "name": "v0.1.9",
        "commit_sha": "41b7308e5faf0be4c5dcec36e1be5bb49ea4a715"
      },
      {
        "name": "v0.1.8",
        "commit_sha": "4c27badb4145e7824d5e499d6a60e7b7cbb68321"
      },
      {
        "name": "v0.1.7",
        "commit_sha": "e2187714cf5ea0f8833fe790a5346425cd039bf7"
      },
      {
        "name": "v0.1.6",
        "commit_sha": "8158f13b747190004e039e506b624276e085820e"
      },
      {
        "name": "v0.1.5",
        "commit_sha": "cdbb295a114820bdc5b125338a194b820b7883a8"
      },
      {
        "name": "v0.1.3",
        "commit_sha": "7cb9261f14690523975606083b77d2a9bf6d1fd9"
      },
      {
        "name": "v0.1.2",
        "commit_sha": "a0de4eabcd21606b6ea5e6d2bc20ca88814ddd08"
      },
      {
        "name": "ts-v0.1.1",
        "commit_sha": "98a8a23fac970fdd998f2a090dc42a86eeafe749"
      }
    ],
    "latest_version": "v1.0.1"
  },
  "readme": "<div align=\"center\">\n  <picture>\n    <img src=\"https://raw.githubusercontent.com/klavis-ai/klavis/main/static/klavis-ai.png\" width=\"80\">\n  </picture>\n</div>\n\n<h1 align=\"center\">Klavis AI - open source MCP integrations for AI Applications</h1>\n\n<div align=\"center\">\n\n[![Documentation](https://img.shields.io/badge/Documentation-üìñ-green)](https://docs.klavis.ai)\n[![Website](https://img.shields.io/badge/Website-üåê-purple)](https://www.klavis.ai)\n[![Discord](https://img.shields.io/badge/Discord-Join-7289DA?logo=discord&logoColor=white)](https://discord.gg/p7TuTEcssn)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](LICENSE)\n[![PyPI](https://img.shields.io/pypi/v/klavis.svg)](https://pypi.org/project/klavis/)\n[![npm](https://img.shields.io/npm/v/klavis.svg)](https://www.npmjs.com/package/klavis)\n\n</div>\n\n## What is Klavis AI?\n\nKlavis AI is open source MCP integrations for AI Applications. Our API provides hosted, secure MCP servers, eliminating auth management and client-side code.\n## ‚ú® Key Features\n\n- **üöÄ Instant Integration**: Get started in minutes with our Python and TypeScript SDKs, or simply REST API\n- **üîê Built-in Authentication**: Secure OAuth flows and API key management\n- **‚ö° Production-Ready**: Hosted infrastructure that scales to millions of users\n- **üõ†Ô∏è 100+ Tools**: Access to CRM, GSuite, Github, Slack, databases, and many more\n- **üåê Multi-Platform**: Works with any LLM provider (OpenAI, Anthropic, Gemini, etc.) and any AI agent framework (LangChain, Llamaindex, CrewAI, AutoGen, etc.)\n- **üîß Self-Hostable**: Open-source MCP servers you can run yourself\n\n## üöÄ Quick Start\n\n### Installation\n\n**Python**\n```bash\npip install klavis\n```\n\n**TypeScript/JavaScript**\n```bash\nnpm install klavis\n```\n\n#### Get Your API Key\n\nSign up at [klavis.ai](https://www.klavis.ai) and create your [API key](https://www.klavis.ai/home/api-keys).\n\n## With MCP Client\n\nIf you already have an MCP client implementation in your codebase:\n\n**Python Example**\n```python\nfrom klavis import Klavis\nfrom klavis.types import McpServerName, ConnectionType\n\nklavis_client = Klavis(api_key=\"your-klavis-key\")\n\n# Create a YouTube MCP server instance\nyoutube_server = klavis_client.mcp_server.create_server_instance(\n    server_name=McpServerName.YOUTUBE,\n    user_id=\"user123\", # Change to user id in your platform\n    platform_name=\"MyApp\", # change to your platform\n    connection_type=ConnectionType.STREAMABLE_HTTP,\n)\n\nprint(f\"Server created: {youtube_server.server_url}\")\n```\n\n**TypeScript Example**\n```typescript\nimport { KlavisClient, Klavis } from 'klavis';\n\nconst klavisClient = new KlavisClient({ apiKey: 'your-klavis-key' });\n\n// Create Gmail MCP server with OAuth\nconst gmailServer = await klavisClient.mcpServer.createServerInstance({\n    serverName: Klavis.McpServerName.Gmail,\n    userId: \"user123\",\n    platformName: \"MyApp\",\n    connectionType: Klavis.ConnectionType.StreamableHttp\n});\n\n// Gmail needs OAuth flow\nawait window.open(gmailServer.oauthUrl);\n```\n\n## Without MCP Client (Function Calling)\n\nIntegrate directly with your LLM provider or AI agent framework using function calling:\n\n**Python + OpenAI Example**\n```python\nimport json\nfrom openai import OpenAI\nfrom klavis import Klavis\nfrom klavis.types import McpServerName, ConnectionType, ToolFormat\n\nOPENAI_MODEL = \"gpt-4o-mini\"\n\nopenai_client = OpenAI(api_key=\"YOUR_OPENAI_API_KEY\")\nklavis_client = Klavis(api_key=\"YOUR_KLAVIS_API_KEY\")\n\n# Create server instance\nyoutube_server = klavis_client.mcp_server.create_server_instance(\n    server_name=McpServerName.YOUTUBE,\n    user_id=\"user123\",\n    platform_name=\"MyApp\",\n    connection_type=ConnectionType.STREAMABLE_HTTP,\n)\n\n# Get available tools in OpenAI format\ntools = klavis_client.mcp_server.list_tools(\n    server_url=youtube_server.server_url,\n    connection_type=ConnectionType.STREAMABLE_HTTP,\n    format=ToolFormat.OPENAI,\n)\n\n# Initial conversation\nmessages = [{\"role\": \"user\", \"content\": \"Summarize this video: https://youtube.com/watch?v=...\"}]\n\n# First OpenAI call with function calling\nresponse = openai_client.chat.completions.create(\n    model=OPENAI_MODEL,\n    messages=messages,\n    tools=tools.tools\n)\n\nmessages.append(response.choices[0].message)\n\n# Handle tool calls\nif response.choices[0].message.tool_calls:\n    for tool_call in response.choices[0].message.tool_calls:\n        result = klavis_client.mcp_server.call_tools(\n            server_url=youtube_server.server_url,\n            tool_name=tool_call.function.name,\n            tool_args=json.loads(tool_call.function.arguments),\n            connection_type=ConnectionType.STREAMABLE_HTTP\n        )\n        \n        # Add tool result to conversation\n        messages.append({\n            \"role\": \"tool\",\n            \"tool_call_id\": tool_call.id,\n            \"content\": str(result)\n        })\n\n# Second OpenAI call to process tool results and generate final response\nfinal_response = openai_client.chat.completions.create(\n    model=OPENAI_MODEL,\n    messages=messages\n)\n\nprint(final_response.choices[0].message.content)\n```\n\n**TypeScript + OpenAI Example**\n```typescript\nimport OpenAI from 'openai';\nimport { KlavisClient, Klavis } from 'klavis';\n\n// Constants\nconst OPENAI_MODEL = \"gpt-4o-mini\";\n\nconst EMAIL_RECIPIENT = \"john@example.com\";\nconst EMAIL_SUBJECT = \"Hello from Klavis\";\nconst EMAIL_BODY = \"This email was sent using Klavis MCP Server!\";\n\nconst openaiClient = new OpenAI({ apiKey: 'your-openai-key' });\nconst klavisClient = new KlavisClient({ apiKey: 'your-klavis-key' });\n\n// Create server and get tools\nconst gmailServer = await klavisClient.mcpServer.createServerInstance({\n    serverName: Klavis.McpServerName.Gmail,\n    userId: \"user123\",\n    platformName: \"MyApp\"\n});\n\n// Handle OAuth authentication for Gmail\nif (gmailServer.oauthUrl) {\n    console.log(\"Please complete OAuth authorization:\", gmailServer.oauthUrl);\n    await window.open(gmailServer.oauthUrl);\n}\n\nconst tools = await klavisClient.mcpServer.listTools({\n    serverUrl: gmailServer.serverUrl,\n    connectionType: Klavis.ConnectionType.StreamableHttp,\n    format: Klavis.ToolFormat.Openai\n});\n\n// Initial conversation\nconst messages = [{ \n    role: \"user\", \n    content: `Please send an email to ${EMAIL_RECIPIENT} with subject \"${EMAIL_SUBJECT}\" and body \"${EMAIL_BODY}\"` \n}];\n\n// First OpenAI call with function calling\nconst response = await openaiClient.chat.completions.create({\n    model: OPENAI_MODEL,\n    messages: messages,\n    tools: tools.tools\n});\n\nmessages.push(response.choices[0].message);\n\n// Handle tool calls\nif (response.choices[0].message.tool_calls) {\n    for (const toolCall of response.choices[0].message.tool_calls) {\n        const result = await klavisClient.mcpServer.callTools({\n            serverUrl: gmailServer.serverUrl,\n            toolName: toolCall.function.name,\n            toolArgs: JSON.parse(toolCall.function.arguments),\n            connectionType: Klavis.ConnectionType.StreamableHttp\n        });\n        \n        // Add tool result to conversation\n        messages.push({\n            role: \"tool\",\n            tool_call_id: toolCall.id,\n            content: JSON.stringify(result)\n        });\n    }\n}\n\n// Second OpenAI call to process tool results and generate final response\nconst finalResponse = await openaiClient.chat.completions.create({\n    model: OPENAI_MODEL,\n    messages: messages\n});\n\nconsole.log(finalResponse.choices[0].message.content);\n```\n\n## üìö AI Platform Integration Tutorials\n\n- **[AI Platform Integrations Overview](https://docs.klavis.ai/documentation/integrations/overview)** - Learn how to integrate with leading AI platforms\n- **[Together AI Integration](https://docs.klavis.ai/documentation/integrations/together-ai)** - Build AI agents with Together AI's high-performance LLMs\n- **[OpenAI Integration](https://docs.klavis.ai/documentation/integrations/open-ai)** - Create fast and efficient AI agents with OpenAI and Klavis MCP Servers\n- And More!\n\n## üõ†Ô∏è Available MCP Servers\n\n### CRM & Sales\n- **[Salesforce](https://docs.klavis.ai/documentation/mcp-server/salesforce)** - CRM and sales automation\n- **[Close](https://docs.klavis.ai/documentation/mcp-server/close)** - Sales CRM platform\n- **[Asana](https://docs.klavis.ai/documentation/mcp-server/asana)** - Team collaboration and project management\n- **[Attio](https://docs.klavis.ai/documentation/mcp-server/attio)** - Modern CRM platform\n- **[ClickUp](https://docs.klavis.ai/documentation/mcp-server/clickup)** - All-in-one workspace\n- **[Motion](https://docs.klavis.ai/documentation/mcp-server/motion)** - AI-powered task management\n\n### Google Workspace\n- **[Gmail](https://docs.klavis.ai/documentation/mcp-server/gmail)** - Email management with OAuth\n- **[Google Calendar](https://docs.klavis.ai/documentation/mcp-server/google-calendar)** - Calendar management\n- **[Google Sheets](https://docs.klavis.ai/documentation/mcp-server/google-sheets)** - Spreadsheet automation\n- **[Google Docs](https://docs.klavis.ai/documentation/mcp-server/google-docs)** - Document creation and editing\n- **[Google Drive](https://docs.klavis.ai/documentation/mcp-server/google-drive)** - File storage and management\n- **[Google Slides](https://docs.klavis.ai/documentation/mcp-server/google-slides)** - Presentation management\n\n### Development & Productivity\n- **[GitHub](https://docs.klavis.ai/documentation/mcp-server/github)** - Repository operations and automation\n- **[Jira](https://docs.klavis.ai/documentation/mcp-server/jira)** - Project management and sprint tracking\n- **[Linear](https://docs.klavis.ai/documentation/mcp-server/linear)** - Issue tracking and project management\n- **[Notion](https://docs.klavis.ai/documentation/mcp-server/notion)** - Workspace and documentation management\n- **[Confluence](https://docs.klavis.ai/documentation/mcp-server/confluence)** - Team documentation and knowledge base\n- **[Figma](https://docs.klavis.ai/documentation/mcp-server/figma)** - Design collaboration platform\n\n### Communication & Collaboration\n- **[Discord](https://docs.klavis.ai/documentation/mcp-server/discord)** - Discord API integration\n- **[Slack](https://docs.klavis.ai/documentation/mcp-server/slack)** - Slack workspace automation  \n- **[Resend](https://docs.klavis.ai/documentation/mcp-server/resend)** - Transactional email service\n\n### Data & Analytics\n- **[Postgres](https://docs.klavis.ai/documentation/mcp-server/postgres)** - Database operations and queries\n- **[Supabase](https://docs.klavis.ai/documentation/mcp-server/supabase)** - Backend-as-a-Service platform\n- **[Gong](https://docs.klavis.ai/documentation/mcp-server/gong)** - Revenue intelligence platform\n\n### Content & Media\n- **[YouTube](https://docs.klavis.ai/documentation/mcp-server/youtube)** - Video information and transcripts\n- **[Firecrawl](https://docs.klavis.ai/documentation/mcp-server/firecrawl)** - Web scraping and data extraction\n- **[Firecrawl Deep Research](https://docs.klavis.ai/documentation/mcp-server/firecrawl-deep-research)** - Advanced web research\n- **[Markitdown](https://docs.klavis.ai/documentation/mcp-server/markitdown)** - Document format conversion\n- **[Pandoc](https://docs.klavis.ai/documentation/mcp-server/pandoc)** - Universal document converter\n- **[Report Generation](https://docs.klavis.ai/documentation/mcp-server/report-generation)** - Professional web reports\n- **[WordPress](https://docs.klavis.ai/documentation/mcp-server/wordpress)** - Content management system\n\n### Payments & Infrastructure\n- **[Stripe](https://docs.klavis.ai/documentation/mcp-server/stripe)** - Payment processing\n- **[Shopify](https://docs.klavis.ai/documentation/mcp-server/shopify)** - E-commerce platform integration\n- **[Cloudflare](https://docs.klavis.ai/documentation/mcp-server/cloudflare)** - CDN and security services\n- **[Perplexity](https://docs.klavis.ai/documentation/mcp-server/perplexity)** - AI-powered search\n\n[**View All Servers ‚Üí**](https://docs.klavis.ai/documentation/mcp-server)\n\n## üîß Authentication & Multi-Tool Workflows\n\n### Authentication\n\nMany MCP servers require authentication. Klavis handles this seamlessly:\n\n```python\n# For OAuth services (Gmail, Google Drive, etc.)\nserver = klavis_client.mcp_server.create_server_instance(\n    server_name=McpServerName.GMAIL,\n    user_id=\"user123\",\n    platform_name=\"MyApp\"\n)\n# Option 1 - OAuth URL is provided in server.oauth_url, redirect user to OAuth URL for authentication\nimport webbrowser\nwebbrowser.open(server.oauth_url)\n\n# Option 2 - or for API key services\nklavis_client.mcp_server.set_auth_token(\n    instance_id=server.instance_id,\n    auth_token=\"your-service-api-key\"\n)\n```\n\n### Multi-Tool Workflows\n\nCombine multiple MCP servers for complex workflows:\n\n```python\n# Create multiple servers\ngithub_server = klavis_client.mcp_server.create_server_instance(...)\nslack_server = klavis_client.mcp_server.create_server_instance(...)\n\n# Use tools from both servers in a single AI conversation\nall_tools = []\nall_tools.extend(klavis_client.mcp_server.list_tools(github_server.server_url).tools)\nall_tools.extend(klavis_client.mcp_server.list_tools(slack_server.server_url).tools)\n\n# Initialize conversation\nmessages = [{\"role\": \"user\", \"content\": \"Create a GitHub issue and notify the team on Slack\"}]\n\n# Loop to let LLM work with multiple tools\nmax_iterations = 5\nfor iteration in range(max_iterations):\n    response = openai_client.chat.completions.create(\n        model=\"gpt-4\",\n        messages=messages,\n        tools=all_tools\n    )\n    \n    messages.append(response.choices[0].message)\n    \n    # Check if LLM wants to use tools\n    if response.choices[0].message.tool_calls:\n        for tool_call in response.choices[0].message.tool_calls:\n            # Determine which server to use based on tool name\n            server_url = github_server.server_url if \"github\" in tool_call.function.name else slack_server.server_url\n            \n            # Execute tool\n            result = klavis_client.mcp_server.call_tools(\n                server_url=server_url,\n                tool_name=tool_call.function.name,\n                tool_args=json.loads(tool_call.function.arguments),\n                connection_type=ConnectionType.STREAMABLE_HTTP\n            )\n            \n            # Add tool result to conversation\n            messages.append({\n                \"role\": \"tool\",\n                \"tool_call_id\": tool_call.id,\n                \"content\": str(result)\n            })\n    else:\n        # LLM finished the task\n        print(f\"Task completed in {iteration + 1} iterations\")\n        print(response.choices[0].message.content)\n        break\n```\n\n## üè† Self-Hosting\n\nWant to run MCP servers yourself? All our servers are open-source:\n\n```bash\n# Clone the repository\ngit clone https://github.com/klavis-ai/klavis.git\ncd klavis\n\n# Run a specific MCP server\ncd mcp_servers/github\ndocker build -t klavis-github .\ndocker run -p 8000:8000 klavis-github\n```\n\n### MCP Clients\n\nBuild custom integrations with our MCP clients:\n\n- **[Discord Bot](mcp-clients/README-Discord.md)** - Deploy AI bots to Discord\n- **[Slack Bot](mcp-clients/README-Slack.md)** - Create Slack AI assistants  \n- **[Web Interface](mcp-clients/README-Web.md)** - Browser-based AI chat\n- **[WhatsApp Bot](mcp-clients/README-WhatsApp.md)** - WhatsApp AI integration\n\n## üìñ Documentation\n\n- **[API Documentation](https://docs.klavis.ai)** - Complete API reference\n- **[SDK Documentation](https://docs.klavis.ai/sdks)** - Python & TypeScript guides\n- **[MCP Protocol Guide](https://docs.klavis.ai/mcp)** - Understanding MCP\n- **[Authentication Guide](https://docs.klavis.ai/auth)** - OAuth and API keys\n\n## ü§ù Contributing\n\nWe welcome contributions! Here's how to get started:\n\n1. **Report Issues**: Found a bug? [Open an issue](https://github.com/klavis-ai/klavis/issues)\n2. **Request Features**: Have an idea? [Start a discussion](https://github.com/klavis-ai/klavis/discussions)\n3. **Contribute Code**: Check our [Contributing Guidelines](CONTRIBUTING.md)\n4. **Join Community**: Connect with us on [Discord](https://discord.gg/p7TuTEcssn)\n\n## üìú License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n---\n\n<div align=\"center\">\n  <p><strong>Ready to supercharge your AI applications?</strong></p>\n  <p>\n    <a href=\"https://www.klavis.ai\">Get Started</a> ‚Ä¢\n    <a href=\"https://docs.klavis.ai\">Documentation</a> ‚Ä¢\n    <a href=\"https://discord.gg/p7TuTEcssn\">Discord</a> ‚Ä¢\n    <a href=\"examples/\">Examples</a>\n  </p>\n</div>\n"
}