{
  "mcp_name": "Glitchfix/mcp-duckduckgo",
  "mcp_description": "Enables LLMs to perform web searches and content retrieval using DuckDuckGo without API keys.",
  "mcp_id": "Glitchfix_mcp-duckduckgo",
  "fetch_timestamp": "2025-06-23T03:50:39.444013Z",
  "github_url": "https://github.com/Glitchfix/mcp-duckduckgo",
  "repository": {
    "name": "mcp-duckduckgo",
    "full_name": "Glitchfix/mcp-duckduckgo",
    "description": null,
    "html_url": "https://github.com/Glitchfix/mcp-duckduckgo",
    "created_at": "2025-04-12T10:41:52Z",
    "updated_at": "2025-04-12T23:28:48Z",
    "pushed_at": "2025-04-12T12:25:54Z",
    "size": 24,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "Glitchfix",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/6094496?v=4",
      "html_url": "https://github.com/Glitchfix"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 1346,
      "Dockerfile": 440
    },
    "language_percentages": {
      "Python": 75.36,
      "Dockerfile": 24.64
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# DuckDuckGo MCP Server\n\nA Model Context Protocol server that provides web search and content fetching capabilities using DuckDuckGo. This server enables LLMs to search the web and retrieve content from web pages without requiring any API keys.\n\n### Available Tools\n\n- `search` - Searches the web using DuckDuckGo and returns a list of results.\n    - `query` (string, required): The search query\n    - `max_results` (integer, optional): Maximum number of results to return (default: 5)\n\n- `fetch` - Fetches a URL from the internet and extracts its contents.\n    - `url` (string, required): URL to fetch\n\n## Installation\n\n### Using Docker\n\n```bash\n# Build the Docker image\ndocker build -t mcp/duckduckgo .\n\n# Run the container with stdio\ndocker run -i --rm mcp/duckduckgo\n```\n\n### Using pip\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/mcp-duckduckgo.git\ncd mcp-duckduckgo\n\n# Install dependencies\npip install -r requirements.txt\n\n# Make the script executable\nchmod +x app.py\n\n# Run the server\npython app.py\n```\n\n### Using fastmcp\n\nIf you have `fastmcp` installed, you can install the server directly:\n\n```bash\n# Install the server\nfastmcp install /path/to/mcp-duckduckgo/app.py\n```\n\n## Configuration\n\n### Configure for Claude Desktop\n\nAdd to your Claude settings:\n\n<details>\n<summary>Using fastmcp installation</summary>\n\n```json\n\"mcpServers\": {\n  \"duckduckgo\": {\n    \"command\": \"python\",\n    \"args\": [\"/path/to/mcp-duckduckgo/app.py\"]\n  }\n}\n```\n</details>\n\n<details>\n<summary>Using Docker</summary>\n\n```json\n\"mcpServers\": {\n  \"duckduckgo\": {\n    \"command\": \"docker\",\n    \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/duckduckgo\"]\n  }\n}\n```\n</details>\n\n### Configure for Claude.ai\n\nIf you're using Claude.ai in the browser, you can configure the MCP server in your Claude settings:\n\n1. Go to Claude.ai and click on your profile picture\n2. Select \"Settings\"\n3. Navigate to the \"MCP Servers\" section\n4. Add a new server with the appropriate configuration\n\n## Usage Examples\n\n### In Claude Desktop/Claude.ai\n\nOnce installed, you can use the DuckDuckGo MCP server in your conversations with Claude:\n\n- **Search the web:**\n  ```\n  Use DuckDuckGo to search for \"latest AI research papers 2025\"\n  ```\n\n- **Fetch content from a URL:**\n  ```\n  Use DuckDuckGo to fetch the content from https://example.com\n  ```\n\n- **Combined usage:**\n  ```\n  Search DuckDuckGo for \"climate change reports 2025\", then fetch and summarize the content from the first result\n  ```\n\n### Using MCP Client Libraries\n\n#### Python\n\n```python\nfrom mcp.client import Client\nimport subprocess\nimport json\n\n# Start the MCP server as a subprocess\nserver_process = subprocess.Popen(\n    [\"python\", \"app.py\"],\n    stdin=subprocess.PIPE,\n    stdout=subprocess.PIPE,\n    stderr=subprocess.PIPE,\n    text=True,\n    bufsize=1\n)\n\n# Create an MCP client that communicates with the server via stdio\nclient = Client(transport=\"stdio\", stdio_process=server_process)\n\n# Initialize the connection\nclient.initialize()\n\n# List available tools\ntools = client.tools_list().tools\nprint(f\"Available tools: {[tool.name for tool in tools]}\")\n\n# Execute the search tool\nsearch_results = client.tools_execute(\n    name=\"search\",\n    params={\"query\": \"python programming language\", \"max_results\": 3}\n).result\n\nprint(f\"Search results: {json.dumps(search_results, indent=2)}\")\n\n# Execute the fetch tool\nfetch_result = client.tools_execute(\n    name=\"fetch\",\n    params={\"url\": \"https://example.com\"}\n).result\n\nprint(f\"Fetched content length: {len(fetch_result['content'])}\")\n\n# Clean up\nclient.shutdown()\nserver_process.terminate()\n```\n\n#### JavaScript/TypeScript\n\n```typescript\nimport { spawn } from 'child_process';\nimport { MCPClient } from '@mcp/client';\n\nasync function main() {\n  // Start the MCP server as a child process\n  const serverProcess = spawn('python', ['app.py'], {\n    stdio: ['pipe', 'pipe', 'pipe']\n  });\n\n  // Create an MCP client that communicates with the server via stdio\n  const client = new MCPClient({\n    transport: 'stdio',\n    process: serverProcess\n  });\n\n  try {\n    // Initialize the connection\n    await client.initialize();\n\n    // List available tools\n    const { tools } = await client.toolsList();\n    console.log(`Available tools: ${tools.map(tool => tool.name).join(', ')}`);\n\n    // Execute the search tool\n    const searchResults = await client.toolsExecute({\n      name: 'search',\n      params: { query: 'python programming language', max_results: 3 }\n    });\n    console.log('Search results:', searchResults.result);\n\n    // Execute the fetch tool\n    const fetchResult = await client.toolsExecute({\n      name: 'fetch',\n      params: { url: 'https://example.com' }\n    });\n    console.log(`Fetched content length: ${fetchResult.result.content.length}`);\n\n    // Clean up\n    await client.shutdown();\n  } catch (error) {\n    console.error('Error:', error);\n  } finally {\n    serverProcess.kill();\n  }\n}\n\nmain();\n```\n\n## Debugging\n\nYou can use the MCP inspector to debug the server:\n\n```bash\n# Using fastmcp\nfastmcp dev app.py\n\n# Using the MCP Inspector directly\nnpx @modelcontextprotocol/inspector python app.py\n```\n\n## Contributing\n\nWe encourage contributions to help expand and improve the DuckDuckGo MCP server. Whether you want to add new tools, enhance existing functionality, or improve documentation, your input is valuable.\n\nPull requests are welcome! Feel free to contribute new ideas, bug fixes, or enhancements to make this MCP server even more powerful and useful.\n\n## License\n\nThis project is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License.\n"
}