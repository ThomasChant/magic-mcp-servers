{
  "mcp_name": "appleweed/UnrealMCPBridge",
  "mcp_description": "Facilitates access to the Unreal Engine Python API for MCP clients, enabling dynamic tool development and automation within the UE environment.",
  "mcp_id": "appleweed_UnrealMCPBridge",
  "fetch_timestamp": "2025-06-23T01:14:14.758268Z",
  "github_url": "https://github.com/appleweed/UnrealMCPBridge",
  "repository": {
    "name": "UnrealMCPBridge",
    "full_name": "appleweed/UnrealMCPBridge",
    "description": "An Unreal Engine plugin that implements an MCP server allowing MCP clients to access the UE Editor Python API.",
    "html_url": "https://github.com/appleweed/UnrealMCPBridge",
    "created_at": "2025-04-07T21:16:27Z",
    "updated_at": "2025-06-20T23:37:59Z",
    "pushed_at": "2025-04-09T17:00:31Z",
    "size": 53,
    "stargazers_count": 17,
    "watchers_count": 17,
    "forks_count": 2,
    "open_issues_count": 1,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "master",
    "owner": {
      "login": "appleweed",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/752879?v=4",
      "html_url": "https://github.com/appleweed"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 2,
    "subscribers_count": 1,
    "languages": {
      "Python": 74556,
      "C++": 20775,
      "C#": 1232
    },
    "language_percentages": {
      "Python": 77.21,
      "C++": 21.51,
      "C#": 1.28
    },
    "pull_requests_count": 1,
    "contributors_count": 1
  },
  "readme": "# Unreal Engine MCP Python Bridge Plugin\n\nThis is a plugin for Unreal Engine (UE) that creates a server implementation of [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction).\nThis allows MCP clients, like Anthropic's [Claude](https://claude.ai/), to access the full UE Python API.\n\n## Use Cases\n\n- Developing tools and workflows in Python with an agent like Claude.\n- Intelligent and dynamic automation of such workflows.\n- General collaborative development with an agent.\n\n## Prerequisites\n\n- Visual Studio 2019 or higher (if building from code).\n- An AI Agent. Below, we assume Claude will be used. But any AI Agent that implements MCP should suffice.\n- Unreal Engine 5 with the Python Editor Script Plugin enabled.\n- Note the [Unreal Engine Python API](https://dev.epicgames.com/documentation/en-us/unreal-engine/python-api/?application_version=5.5).\n\n## Installing from Fab\n\nThe easiest way to install the MCP Python Bridge plugin is from the [Fab store listing](https://www.fab.com/listings/0167ac03-47b5-4a08-b68f-5d54ab7b208e). Once you purchase the plugin, it will appear in your Library in the Epic Games Launcher. Click \"Install to Engine\" and choose the appropriate version of Unreal Engine.\n\n## Installing from GitHub\n\n1. Create a new Unreal Engine C++ project.\n2. Under the project root directory, find the `Plugins` folder.\n3. Clone this repo into the `Plugins` folder so that there is a new containing folder with all the project contents underneath.\n4. Right-click your UE project file (ends with `.uproject`) and select \"Generate Visual Studio project files\". If you don't immediately see that option, first select \"Show more options\" and it should appear.\n5. Open your new Visual Studio project and build.\n6. Copy `unreal_mcp_client.py` from the 'MCPClient' folder to a location of your choice.\n7. Find your `claude_desktop_config.json` configuration file.\nMac location: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nWindows location: `[path_to_your_user_account]\\AppData\\Claude\\claude_desktop_config.json`\n8. Add the `unreal-engine` server section to your config file and update the path location excluding the square brackets, below.\nMac path format: `/[path_from_step_4]/unreal_mcp_client.py`\nWindows path format: `C:\\\\[path_from_step_4]\\\\unreal_mcp_client.py`\n```json\n{\n  \"mcpServers\": {\n    \"unreal-engine\": {\n      \"command\": \"python\",\n      \"args\": [\n        \"[mac_or_windows_format_path_to_unreal_mcp_client.py]\"\n      ]\n    } \n  }\n}\n```\n9. Start Unreal Engine and load your new project.\n10. Enable the new `UnrealMCPBridge` plugin, and restart.\n11. There should be a new toolbar button that says, \"Start MCP Bridge\" when you hover with your mouse.\n12. Click the MCP Bridge button. A pop-up will state, \"MCP Python bridge running.\" The Output Log will note a new socket server listening on 127.0.0.1:9000.\n13. Launch Claude as an administrator.\n14. Click the \"Attach from MCP\" plug-icon. Under \"Choose an integration\" are two test Prompts: `create_castle` and `create_town`. You can edit their implementations in `unreal_server_init.py` under the `Content` folder of the plugin. Be sure to restart Unreal Engine after any changes.\n15. Alternatively, ask Claude to build in your project using the UE Python API.\n16. A list of currently implemented tools can be found by clicking the hammer-icon to the left of the plug-icon.\n\n## Developing New Tools and Prompts\n\nExamine at `unreal_mcp_client.py` and you'll see how MCP defines tools and prompts using Python decorators above functions. As an example:\n\n```\n@mcp.tool()\ndef get_project_dir() -> str:\n    \"\"\"Get the top level project directory\"\"\"\n    result = send_command(\"get_project_dir\")\n    if result.get(\"status\") == \"success\":\n        response = result.get(\"result\")\n        return response\n    else:\n        return json.dumps(result)\n```\n\nThis sends the `get_project_dir` command to Unreal Engine for execution and returns the project level directory for the current project. Under the `Content` folder of the plugin, you will see the server-side implementation of this tool command:\n\n```\n@staticmethod\ndef get_project_dir():\n    \"\"\"Get the top level project directory\"\"\"\n    try:\n        project_dir = unreal.Paths.project_dir()\n        return json.dumps({\n            \"status\": \"success\",\n            \"result\" : f\"{project_dir}\"\n        })\n    except Exception as e:\n        return json.dumps({ \"status\": \"error\", \"message\": str(e) })\n``` \n\nFollow this pattern to create new tools the appear in the Claude desktop interface under the hammer-icon.\n\nImplementing new prompts is a matter of adding them to `unreal_mcp_client.py`. As an example, here is the `create_castle` prompt from `unreal_mcp_client.py`:\n\n```\n@mcp.prompt()\ndef create_castle() -> str:\n    \"\"\"Create a castle\"\"\"\n    return f\"\"\"\nPlease create a castle in the current Unreal Engine project.\n0. Refer to the Unreal Engine Python API when creating new python code: https://dev.epicgames.com/documentation/en-us/unreal-engine/python-api/?application_version=5.5\n1. Clear all the StaticMeshActors in the scene.\n2. Get the project directory and the content directory.\n3. Find basic shapes to use for building structures.\n4. Create a castle using these basic shapes.\n\"\"\"\n```\n\nBe sure to maintain triple-quotes so the entire prompt is returned. A good way to iterate over creating prompts is simply iterating each step number with Claude until you get satisfactory results. Then combine them all into a numbered step-by-step prompt as shown.\n\nYou must restart Claude for any changes to `unreal_mcp_client.py` to take effect. Note for Windows, you might need to end the Claude process in the Task Manager to truly restart Claude.\n"
}