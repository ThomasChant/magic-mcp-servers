{
  "mcp_name": "dynstat/agents-mcp-clients",
  "mcp_description": "Facilitates file system operations via a server-client architecture using MCP.",
  "mcp_id": "dynstat_agents-mcp-clients",
  "fetch_timestamp": "2025-06-23T02:45:12.749004Z",
  "github_url": "https://github.com/dynstat/agents-mcp-clients",
  "repository": {
    "name": "agents-mcp-clients",
    "full_name": "dynstat/agents-mcp-clients",
    "description": "A working example of your own agents from the scratch and using it with the mcp servers from scratch",
    "html_url": "https://github.com/dynstat/agents-mcp-clients",
    "created_at": "2025-04-26T20:09:04Z",
    "updated_at": "2025-05-04T17:22:52Z",
    "pushed_at": "2025-05-04T17:22:49Z",
    "size": 58,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [
      "agents",
      "mcp",
      "mcp-client",
      "mcp-server"
    ],
    "default_branch": "main",
    "owner": {
      "login": "dynstat",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/38962239?v=4",
      "html_url": "https://github.com/dynstat"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 14722
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# MCP File Operations Agent\n\nA simple Model Context Protocol (MCP) implementation providing file system operations through a server-client architecture.\n\n## Components\n\n- **file_agent_server.py**: MCP server exposing file system operations as tools\n- **file_agent_client.py**: Client implementation using Google's Gemini API\n\n## Features\n\n- Read file contents\n- Write content to files\n- List directory contents\n\n## Requirements\n\n- Python â‰¥3.12\n- `mcp[cli]>=1.6.0`\n- `google-genai>=1.12.1`\n- `python-dotenv`\n\n## Setup\n\n1. Install dependencies: `pip install -e .`\n2. Create a `.env` file with your API keys (see `.env-sample`)\n3. Run server: `python file_agent_server.py`\n4. Run client: `python file_agent_client.py`\n5. For SSE example: `python sse_echo.py`\n\n## Implementing MCP Agents\n\nHere's how to set up MCP servers and clients using different transport layers:\n\n### Stdio Transport (Standard Input/Output)\n\nStdio transport is useful for local inter-process communication, often used when a client application spawns a server process.\n\n**Server (`file_agent_server.py` example):**\n\n```python\n# file_agent_server.py\nfrom mcp.server.fastmcp import FastMCP\nimport os # Example tool dependencies\n\n# 1. Create a FastMCP server instance\nfile_agent = FastMCP(\"File Operations Agent\")\n\n# 2. Define tools using the @file_agent.tool() decorator\n@file_agent.tool()\ndef read_file(file_path: str) -> str:\n    \"\"\"Read the contents of a file.\"\"\"\n    try:\n        with open(file_path, 'r', encoding='utf-8') as f:\n            return f.read()\n    except Exception as e:\n        return f\"Error reading file: {str(e)}\"\n\n# Add other tools (write_file, list_directory) similarly...\n\n# 3. Run the server (automatically uses Stdio)\nif __name__ == \"__main__\":\n    file_agent.run()\n```\n\n**Client (`file_agent_client.py` example):**\n\n```python\n# file_agent_client.py\nimport asyncio\nfrom mcp import ClientSession, StdioServerParameters, types as mcp_types\nfrom mcp.client.stdio import stdio_client\n\n# 1. Define server parameters (how to start the server process)\nserver_params = StdioServerParameters(\n    command=\"python\", # Command to execute\n    args=[\"file_agent_server.py\"], # Arguments for the command\n)\n\nasync def run_client():\n    try:\n        # 2. Use stdio_client to start the server process and get read/write streams\n        async with stdio_client(server_params) as (read, write):\n            print(\"stdio_client connected.\")\n            # 3. Create a ClientSession with the streams\n            # Optionally pass a sampling_callback for agent logic\n            async with ClientSession(read, write) as session:\n                print(\"ClientSession created.\")\n                # 4. Initialize the connection\n                await session.initialize()\n                print(\"Session initialized.\")\n\n                # 5. List available tools\n                list_tools_result = await session.list_tools()\n                print(\"Available tools:\", list_tools_result.tools)\n\n                # 6. Call a tool\n                call_result = await session.call_tool(\"read_file\", {\"file_path\": \"README.md\"})\n                if call_result.content and isinstance(call_result.content[0], mcp_types.TextContent):\n                    print(\"Read file result:\", call_result.content[0].text[:100] + \"...\")\n                else:\n                    print(\"Error or unexpected result:\", call_result)\n\n    except Exception as e:\n        print(f\"Client error: {e}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(run_client())\n\n```\n\n### SSE Transport (Server-Sent Events)\n\nSSE transport uses HTTP for communication, suitable for web-based or network-based interactions.\n\n**Server (`sse_echo.py` example):**\n\n```python\n# sse_server_example.py (based on sse_echo.py)\nimport asyncio\nfrom mcp import FastMCP\nfrom mcp.types import TextContent # Example type import\n\n# Define connection details\nHOST = \"127.0.0.1\"\nPORT = 8765\nSSE_PATH = \"/sse\" # The HTTP path for the SSE endpoint\n\n# 1. Instantiate FastMCP with SSE configuration\napp = FastMCP(name=\"SSE Echo Server\", host=HOST, port=PORT, sse_path=SSE_PATH)\n\n# 2. Define tools as usual\n@app.tool()\nasync def echo(text: str) -> list[TextContent]:\n    \"\"\"Echoes the input text back.\"\"\"\n    print(f\"Server received: {text}\")\n    return [TextContent(type=\"text\", text=f\"Echo: {text}\")]\n\n# 3. Run the server asynchronously using run_sse_async\nasync def run_server():\n    print(f\"Starting SSE server on http://{HOST}:{PORT}{SSE_PATH}\")\n    await app.run_sse_async()\n\nif __name__ == \"__main__\":\n    asyncio.run(run_server())\n\n```\n\n**Client (`sse_echo.py` example):**\n\n```python\n# sse_client_example.py (based on sse_echo.py)\nimport asyncio\nfrom mcp import ClientSession\nfrom mcp.client.sse import sse_client # SSE specific client helper\nfrom mcp.types import TextContent, CallToolResult # Example type imports\n\n# Server connection details (must match the server)\nHOST = \"127.0.0.1\"\nPORT = 8765\nSSE_PATH = \"/sse\"\n\nasync def run_client():\n    server_url = f\"http://{HOST}:{PORT}{SSE_PATH}\"\n    print(f\"Client connecting to {server_url}\")\n\n    try:\n        # Allow server time to start (in combined demo scripts)\n        await asyncio.sleep(1)\n\n        # 1. Use sse_client helper to connect to the server URL\n        async with sse_client(url=server_url) as (read, write):\n             print(\"sse_client connected.\")\n             # 2. Create ClientSession with the read/write streams\n             async with ClientSession(read, write) as session:\n                print(\"ClientSession created.\")\n                # 3. Initialize the session\n                await session.initialize()\n                print(\"Session initialized.\")\n\n                # 4. Call a tool\n                message = \"Hello via SSE!\"\n                response: CallToolResult = await session.call_tool(\"echo\", {\"text\": message})\n\n                # Process response\n                if response.content and isinstance(response.content[0], TextContent):\n                     print(f\"Client received: {response.content[0].text}\")\n                else:\n                     print(f\"Client received unexpected response: {response}\")\n\n    except Exception as e:\n        print(f\"Client error: {e}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(run_client())\n```\n\n## Cursor IDE Integration (sample example)\n\nConfigure in `.cursor/mcp.json`:\n```json\n{\n  \"mcpServers\": {\n    \"File Operations Agent\": {\n      \"command\": \"python\",\n      \"args\": [\"path/to/file_agent_server.py\"],\n      \"env\": {}\n    }\n  }\n}\n```"
}