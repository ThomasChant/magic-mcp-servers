{
  "mcp_name": "leshchenko1979/tg_mcp",
  "mcp_description": "Facilitates seamless interaction with Telegram through a robust API, enabling message search, chat management, and analytics within the Cursor IDE.",
  "mcp_id": "leshchenko1979_tg_mcp",
  "fetch_timestamp": "2025-06-23T06:08:43.929406Z",
  "github_url": "https://github.com/leshchenko1979/tg_mcp",
  "repository": {
    "name": "tg_mcp",
    "full_name": "leshchenko1979/tg_mcp",
    "description": "Telegram MCP Server. Talk to your Telegram from Cursor and Claude",
    "html_url": "https://github.com/leshchenko1979/tg_mcp",
    "created_at": "2025-04-25T16:57:27Z",
    "updated_at": "2025-06-20T17:40:54Z",
    "pushed_at": "2025-06-20T17:40:51Z",
    "size": 99,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "claude",
      "cursor",
      "cursor-ai",
      "mcp",
      "mcp-server",
      "telegram",
      "telethon"
    ],
    "default_branch": "master",
    "owner": {
      "login": "leshchenko1979",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/60138889?v=4",
      "html_url": "https://github.com/leshchenko1979"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 78056,
      "Batchfile": 444
    },
    "language_percentages": {
      "Python": 99.43,
      "Batchfile": 0.57
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# MCP Telegram Server\n\nA powerful MCP server implementation that provides Telegram functionality through a clean API interface, including message search, sending, and chat management capabilities.\n\nJoin our [Telegram Discussion Group](https://t.me/mcp_telegram) for support, updates, and community discussions.\n\n## Features\n\n- Message search with multiple modes:\n  - Basic search by text\n  - Advanced search with custom filters\n  - Pattern-based search using regex\n- Chat management:\n  - List available dialogs\n  - Send messages with optional reply support\n  - Generate message links\n- Analytics and data:\n  - Chat statistics and analytics\n  - Chat data export functionality\n- Robust error handling and logging\n- Built on MCP (Model Control Protocol) architecture\n\n## Prerequisites\n\n- Python 3.x\n- Telegram API credentials (API ID, API Hash)\n- MCP-compatible environment (like Cursor IDE)\n\n## Installation\n\n1. Clone the repository and navigate to the project directory:\n```bash\ngit clone https://github.com/leshchenko1979/tg_mcp.git\ncd tg_mcp\n```\n\n2. Install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n3. Create a `.env` file in the root directory with your Telegram credentials:\n```env\nAPI_ID=your_api_id\nAPI_HASH=your_api_hash\nPHONE_NUMBER=+123456789\n```\n\n4. Run the setup script to authenticate with Telegram:\n```bash\npython setup_telegram.py\n```\n\nThis will create a session file (`mcp_telegram_search.session`) that stores your Telegram session data.\n\n## Cursor Configuration\n\nTo use this server with Cursor IDE:\n\n1. Create an `mcp.json` file in your `.cursor` directory with the following content:\n```json\n{\n  \"mcpServers\": {\n    \"mcp-telegram\": {\n      \"command\": \"cmd /c set PYTHONPATH=%PYTHONPATH%;<path_to_server> && mcp run <path_to_server>/src/server.py\",\n      \"description\": \"Telegram MCP server\"\n    }\n  }\n}\n```\n\nNote: Replace `<path_to_server>` with the absolute path to your installation directory.\n\n2. Ensure your `.env` file is properly configured as described in the Installation section.\n\n3. The server will automatically connect to Cursor when you open the project, making all Telegram tools available through the IDE.\n\nNote: If you modify the server code, you'll need to reload the server in Cursor for changes to take effect.\n\n## Usage\n\nThe server can be run using MCP:\n\n```bash\nmcp run <path_to_server>/server.py\n```\n\n## Available Tools\n\nThe server provides the following MCP tools:\n\n- `search_messages(query: str, chat_id: str = None, limit: int = 20, offset: int = 0, chat_type: str = None, min_date: str = None, max_date: str = None, auto_expand_batches: int = 2)`\n  - Search for messages in Telegram chats\n  - Supports both global search and chat-specific search\n  - Supports pagination with `limit` and `offset` parameters\n  - Supports filtering by chat type with the optional `chat_type` parameter:\n    - `\"private\"` — only personal dialogs (one-to-one)\n    - `\"group\"` — only group chats\n    - `\"channel\"` — only channels/supergroups\n    - `None` (default) — all types\n  - Supports date range filtering with `min_date` and `max_date` (ISO format, e.g. `2024-05-15` or `2024-05-15T12:00:00`)\n  - Supports `auto_expand_batches` (int, default 2): maximum additional batches to fetch if not enough filtered results are found\n  - **Query parameter behavior:**\n    - If `chat_id` is provided, you may leave `query` empty to fetch all messages from that chat (optionally filtered by `min_date` and `max_date`).\n    - If `chat_id` is not provided (global search), `query` must not be empty.\n  - **Example: Fetch all messages from a chat in a date range:**\n    ```json\n    {\n      \"tool\": \"search_messages\",\n      \"params\": {\n        \"query\": \"\",\n        \"chat_id\": \"123456789\",\n        \"min_date\": \"2024-05-01\",\n        \"max_date\": \"2024-05-31\",\n        \"limit\": 50\n      }\n    }\n    ```\n  - **Note:**\n    - For global search (no `chat_id`), you must provide a non-empty `query`.\n    - For per-chat search, an empty `query` will return all messages in the specified chat (optionally filtered by date).\n\n- `send_telegram_message(chat_id: str, message: str, reply_to_msg_id: int = None, parse_mode: str = None)`\n  - Send messages to Telegram chats\n  - Supports replying to messages\n  - Optional markdown/HTML parsing\n\n- `get_dialogs(limit: int = 50, offset: int = 0)`\n  - List available Telegram dialogs\n  - Supports pagination with `limit` and `offset` parameters\n  - Returns chat IDs, names, types, and unread counts\n  - Example:\n    ```json\n    {\n      \"tool\": \"get_dialogs\",\n      \"params\": {\n        \"limit\": 10,\n        \"offset\": 30\n      }\n    }\n    ```\n\n- `get_statistics(chat_id: str)`\n  - Get statistics for a specific chat\n\n- `generate_links(chat_id: str, message_ids: list[int])`\n  - Generate Telegram links for messages\n\n- `export_data(chat_id: str, format: str = \"json\")`\n  - Export chat data in specified format\n\n- `invoke_mtproto(method_full_name: str, params: dict)`\n  - Dynamically invoke any raw MTProto method supported by Telethon\n  - **Parameters:**\n    - `method_full_name` (str): Full class name of the MTProto method, e.g., `\"messages.GetHistory\"` (the tool will automatically append `Request` if needed)\n    - `params` (dict): Dictionary of parameters required by the method. All required fields must be provided (see Telegram API docs for details).\n  - **Example:**\n    ```json\n    {\n      \"tool\": \"invoke_mtproto\",\n      \"params\": {\n        \"method_full_name\": \"messages.GetHistory\",\n        \"params\": {\n          \"peer\": \"@flipping_invest\",\n          \"limit\": 1,\n          \"offset_id\": 0,\n          \"offset_date\": 0,\n          \"add_offset\": 0,\n          \"max_id\": 0,\n          \"min_id\": 0,\n          \"hash\": 0\n        }\n      }\n    }\n    ```\n  - **Note:**\n    - You must provide all required parameters for the method. For `messages.GetHistory`, this includes `peer`, `limit`, `offset_id`, `offset_date`, `add_offset`, `max_id`, `min_id`, and `hash` (set `hash` to `0` unless you are using advanced caching).\n    - The result will be a raw dictionary as returned by Telethon, including all message and chat metadata.\n  - **Warning:**\n    - This tool is for advanced users. Incorrect parameters may result in errors from the Telegram API or Telethon.\n    - Refer to the [Telegram API documentation](https://core.telegram.org/methods) and [Telethon docs](https://docs.telethon.dev/en/latest/) for method details and required fields.\n\n## Example Use Cases & AI Agent Requests\n\nHere are some practical scenarios and example user requests you can make to an AI Agent using this MCP Telegram server:\n\n\n- **Find all private conversations about warehouses since a specific date**\n  - User: `Find all private chats about warehouses since May 1, 2025.`\n  - AI Agent action:\n    ```json\n    {\n      \"tool\": \"search_messages\",\n      \"params\": {\n        \"query\": \"warehouse\",\n        \"chat_type\": \"private\",\n        \"min_date\": \"2025-05-01\"\n      }\n    }\n    ```\n\n- **Get the latest warehouse market analytics from broker channels**\n  - User: `Find the latest warehouse market analytics from broker channels.`\n  - AI Agent action:\n    ```json\n    {\n      \"tool\": \"search_messages\",\n      \"params\": {\n        \"query\": \"warehouse market analytics\",\n        \"chat_type\": \"channel\",\n        \"limit\": 10\n      }\n    }\n    ```\n\n- **Summarize the current warehouse market and send to an assistant**\n  - User: `Summarize the current state of the warehouse market and send it to my assistant, Jane Smith.`\n  - AI Agent action (after resolving the chat_id for Jane Smith):\n    ```json\n    {\n      \"tool\": \"send_telegram_message\",\n      \"params\": {\n        \"chat_id\": \"123456789\",\n        \"message\": \"Summary of the current warehouse market situation (2025):\\n\\n- The volume of new warehouse construction in Russia reached a record 1.2 million sq.m in Q1 2025, a 12% increase year-over-year, mainly due to high demand in previous years. However, forecasts indicate a 29% year-over-year decrease in new warehouse supply in Moscow and the region by the end of 2026, down to 1.2 million sq.m, due to high financing costs and rising construction expenses.\\n- Developers are increasingly shifting from speculative projects to build-to-suit and owner-occupied warehouses, with many taking a wait-and-see approach.\\n- The share of e-commerce companies among tenants has dropped sharply (from 57% to 15-34%), while the share of logistics, transport, and distribution companies is growing.\\n- Despite a drop in demand and a slight increase in vacancy (up to 2-4%), rental rates for class A warehouses continue to rise.\\n- Regional expansion of retailers has led to record-high new supply, with the Moscow region remaining the leader (44% of new supply in Q1 2025).\\n- The market is experiencing a cooling after several years of rapid growth, but there is potential for renewed activity if monetary policy eases.\\n\\nIf you need more details or analytics, let me know!\"\n      }\n    }\n    ```\n\n\nThese examples illustrate how natural language requests can be mapped to MCP tool calls for powerful Telegram automation and search.\n\n## Project Structure\n\n```\ntg_mcp/\n├── src/                # Source code directory\n│   ├── client/        # Telegram client management\n│   ├── config/        # Configuration settings\n│   ├── monitoring/    # Monitoring and health checks\n│   ├── tools/         # MCP tool implementations\n│   ├── utils/         # Utility functions\n│   ├── __init__.py    # Package initialization\n│   └── server.py      # Main server implementation\n├── tests/             # Test directory\n├── logs/              # Log files directory\n├── setup_telegram.py  # Telegram setup script\n├── setup.py          # Package setup configuration\n├── requirements.txt  # Project dependencies\n├── .env             # Environment variables (create this)\n├── .gitignore       # Git ignore patterns\n└── LICENSE          # MIT License\n\nNote: *.session and *.session-journal files will be created after authentication\n```\n\n## Dependencies\n\nThe project relies on the following main packages:\n```\nloguru          # Logging\naiohttp         # Async HTTP\nmcp[cli]        # Model Control Protocol\ntelethon>=1.34.0  # Telegram client\npython-dotenv>=1.0.0  # Environment management\n```\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n"
}