{
  "mcp_name": "MladenSU/cli-mcp-server",
  "mcp_description": "üêç üè† - Command line interface with secure execution and customizable security policies",
  "mcp_id": "MladenSU_cli-mcp-server",
  "fetch_timestamp": "2025-06-23T06:50:21.046241Z",
  "github_url": "https://github.com/MladenSU/cli-mcp-server",
  "repository": {
    "name": "cli-mcp-server",
    "full_name": "MladenSU/cli-mcp-server",
    "description": "Command line interface for MCP clients with secure execution and customizable security policies",
    "html_url": "https://github.com/MladenSU/cli-mcp-server",
    "created_at": "2024-12-08T23:01:54Z",
    "updated_at": "2025-06-22T22:05:47Z",
    "pushed_at": "2025-04-21T21:39:39Z",
    "size": 36,
    "stargazers_count": 115,
    "watchers_count": 115,
    "forks_count": 18,
    "open_issues_count": 1,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "MladenSU",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/53565817?v=4",
      "html_url": "https://github.com/MladenSU"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 18,
    "subscribers_count": 3,
    "languages": {
      "Python": 30863
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 4,
    "contributors_count": 4
  },
  "readme": "# CLI MCP Server\n\n---\n\nA secure Model Context Protocol (MCP) server implementation for executing controlled command-line operations with\ncomprehensive security features.\n\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n![Python Version](https://img.shields.io/badge/python-3.10%2B-blue)\n![MCP Protocol](https://img.shields.io/badge/MCP-Compatible-green)\n[![smithery badge](https://smithery.ai/badge/cli-mcp-server)](https://smithery.ai/protocol/cli-mcp-server)\n[![Python Tests](https://github.com/MladenSU/cli-mcp-server/actions/workflows/python-tests.yml/badge.svg)](https://github.com/MladenSU/cli-mcp-server/actions/workflows/python-tests.yml)\n\n<a href=\"https://glama.ai/mcp/servers/q89277vzl1\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/q89277vzl1/badge\" /></a>\n\n---\n\n# Table of Contents\n\n1. [Overview](#overview)\n2. [Features](#features)\n3. [Configuration](#configuration)\n4. [Available Tools](#available-tools)\n    - [run_command](#run_command)\n    - [show_security_rules](#show_security_rules)\n5. [Usage with Claude Desktop](#usage-with-claude-desktop)\n    - [Development/Unpublished Servers Configuration](#developmentunpublished-servers-configuration)\n    - [Published Servers Configuration](#published-servers-configuration)\n6. [Security Features](#security-features)\n7. [Error Handling](#error-handling)\n8. [Development](#development)\n    - [Prerequisites](#prerequisites)\n    - [Building and Publishing](#building-and-publishing)\n    - [Debugging](#debugging)\n9. [License](#license)\n\n---\n\n## Overview\n\nThis MCP server enables secure command-line execution with robust security measures including command whitelisting, path\nvalidation, and execution controls. Perfect for providing controlled CLI access to LLM applications while maintaining security.\n\n## Features\n\n- üîí Secure command execution with strict validation\n- ‚öôÔ∏è Configurable command and flag whitelisting with 'all' option\n- üõ°Ô∏è Path traversal prevention and validation\n- üö´ Shell operator injection protection\n- ‚è±Ô∏è Execution timeouts and length limits\n- üìù Detailed error reporting\n- üîÑ Async operation support\n- üéØ Working directory restriction and validation\n\n## Configuration\n\nConfigure the server using environment variables:\n\n| Variable             | Description                                          | Default            |\n|---------------------|------------------------------------------------------|-------------------|\n| `ALLOWED_DIR`       | Base directory for command execution (Required)      | None (Required)   |\n| `ALLOWED_COMMANDS`  | Comma-separated list of allowed commands or 'all'    | `ls,cat,pwd`      |\n| `ALLOWED_FLAGS`     | Comma-separated list of allowed flags or 'all'       | `-l,-a,--help`    |\n| `MAX_COMMAND_LENGTH`| Maximum command string length                        | `1024`            |\n| `COMMAND_TIMEOUT`   | Command execution timeout (seconds)                  | `30`              |\n| `ALLOW_SHELL_OPERATORS` | Allow shell operators (&&, \\|\\|, \\|, >, etc.)    | `false`           |\n\nNote: Setting `ALLOWED_COMMANDS` or `ALLOWED_FLAGS` to 'all' will allow any command or flag respectively.\n\n## Installation\n\nTo install CLI MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/protocol/cli-mcp-server):\n\n```bash\nnpx @smithery/cli install cli-mcp-server --client claude\n```\n\n## Available Tools\n\n### run_command\n\nExecutes whitelisted CLI commands within allowed directories.\n\n**Input Schema:**\n```json\n{\n  \"command\": {\n    \"type\": \"string\",\n    \"description\": \"Single command to execute (e.g., 'ls -l' or 'cat file.txt')\"\n  }\n}\n```\n\n**Security Notes:**\n- Shell operators (&&, |, >, >>) are not supported by default, but can be enabled with `ALLOW_SHELL_OPERATORS=true`\n- Commands must be whitelisted unless ALLOWED_COMMANDS='all'\n- Flags must be whitelisted unless ALLOWED_FLAGS='all'\n- All paths are validated to be within ALLOWED_DIR\n\n### show_security_rules\n\nDisplays current security configuration and restrictions, including:\n- Working directory\n- Allowed commands\n- Allowed flags\n- Security limits (max command length and timeout)\n\n## Usage with Claude Desktop\n\nAdd to your `~/Library/Application\\ Support/Claude/claude_desktop_config.json`:\n\n> Development/Unpublished Servers Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"cli-mcp-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<path/to/the/repo>/cli-mcp-server\",\n        \"run\",\n        \"cli-mcp-server\"\n      ],\n      \"env\": {\n        \"ALLOWED_DIR\": \"</your/desired/dir>\",\n        \"ALLOWED_COMMANDS\": \"ls,cat,pwd,echo\",\n        \"ALLOWED_FLAGS\": \"-l,-a,--help,--version\",\n        \"MAX_COMMAND_LENGTH\": \"1024\",\n        \"COMMAND_TIMEOUT\": \"30\",\n        \"ALLOW_SHELL_OPERATORS\": \"false\"\n      }\n    }\n  }\n}\n```\n\n> Published Servers Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"cli-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"cli-mcp-server\"\n      ],\n      \"env\": {\n        \"ALLOWED_DIR\": \"</your/desired/dir>\",\n        \"ALLOWED_COMMANDS\": \"ls,cat,pwd,echo\",\n        \"ALLOWED_FLAGS\": \"-l,-a,--help,--version\",\n        \"MAX_COMMAND_LENGTH\": \"1024\",\n        \"COMMAND_TIMEOUT\": \"30\",\n        \"ALLOW_SHELL_OPERATORS\": \"false\"\n      }\n    }\n  }\n}\n```\n> In case it's not working or showing in the UI, clear your cache via `uv clean`.\n\n## Security Features\n\n- ‚úÖ Command whitelist enforcement with 'all' option\n- ‚úÖ Flag validation with 'all' option\n- ‚úÖ Path traversal prevention and normalization\n- ‚úÖ Shell operator blocking (with opt-in support via `ALLOW_SHELL_OPERATORS=true`)\n- ‚úÖ Command length limits\n- ‚úÖ Execution timeouts\n- ‚úÖ Working directory restrictions\n- ‚úÖ Symlink resolution and validation\n\n## Error Handling\n\nThe server provides detailed error messages for:\n\n- Security violations (CommandSecurityError)\n- Command timeouts (CommandTimeoutError)\n- Invalid command formats\n- Path security violations\n- Execution failures (CommandExecutionError)\n- General command errors (CommandError)\n\n## Development\n\n### Prerequisites\n\n- Python 3.10+\n- MCP protocol library\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n    ```bash\n    uv sync\n    ```\n\n2. Build package distributions:\n    ```bash\n    uv build\n    ```\n\n   > This will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n   ```bash\n   uv publish --token {{YOUR_PYPI_API_TOKEN}}\n   ```\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with\nthis command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory {{your source code local directory}}/cli-mcp-server run cli-mcp-server\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n---\n\nFor more information or support, please open an issue on the project repository."
}