{
  "mcp_name": "nguyendinhsinh361/supergateway-sinhnd",
  "mcp_description": "Supergateway facilitates running MCP stdio-based servers over SSE or WebSockets, enabling seamless remote access and integration with web-based clients.",
  "mcp_id": "nguyendinhsinh361_supergateway-sinhnd",
  "fetch_timestamp": "2025-06-23T07:05:12.498415Z",
  "github_url": "https://github.com/nguyendinhsinh361/supergateway-sinhnd",
  "repository": {
    "name": "supergateway-sinhnd",
    "full_name": "nguyendinhsinh361/supergateway-sinhnd",
    "description": null,
    "html_url": "https://github.com/nguyendinhsinh361/supergateway-sinhnd",
    "created_at": "2025-04-24T15:51:26Z",
    "updated_at": "2025-04-24T16:16:11Z",
    "pushed_at": "2025-04-24T16:16:08Z",
    "size": 73,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "nguyendinhsinh361",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/86426699?v=4",
      "html_url": "https://github.com/nguyendinhsinh361"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 21032,
      "JavaScript": 5849,
      "Dockerfile": 111
    },
    "language_percentages": {
      "TypeScript": 77.92,
      "JavaScript": 21.67,
      "Dockerfile": 0.41
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "0.0.1"
  },
  "readme": "![Supergateway: Run stdio MCP servers over SSE and WS](https://raw.githubusercontent.com/supercorp-ai/supergateway/main/supergateway.png)\n\n**Supergateway** runs **MCP stdio-based servers** over **SSE (Server-Sent Events)** or **WebSockets (WS)** with one command. This is useful for remote access, debugging, or connecting to clients when your MCP server only supports stdio.\n\nSupported by [Supermachine](https://supermachine.ai) (hosted MCPs), [Superinterface](https://superinterface.ai), and [Supercorp](https://supercorp.ai).\n\n## Installation & Usage\n\nRun Supergateway via `npx`:\n\n```bash\nnpx -y supergateway --stdio \"uvx mcp-server-git\"\n```\n\n- **`--stdio \"command\"`**: Command that runs an MCP server over stdio\n- **`--sse \"https://mcp-server-ab71a6b2-cd55-49d0-adba-562bc85956e3.supermachine.app\"`**: SSE URL to connect to (SSE→stdio mode)\n- **`--outputTransport stdio | sse | ws`**: Output MCP transport (default: `sse` with `--stdio`, `stdio` with `--sse`)\n- **`--port 8000`**: Port to listen on (stdio→SSE or stdio→WS mode, default: `8000`)\n- **`--baseUrl \"http://localhost:8000\"`**: Base URL for SSE or WS clients (stdio→SSE mode; optional)\n- **`--ssePath \"/sse\"`**: Path for SSE subscriptions (stdio→SSE mode, default: `/sse`)\n- **`--messagePath \"/message\"`**: Path for messages (stdio→SSE or stdio→WS mode, default: `/message`)\n- **`--header \"x-user-id: 123\"`**: Add one or more headers (stdio→SSE or SSE→stdio mode; can be used multiple times)\n- **`--oauth2Bearer \"some-access-token\"`**: Adds an `Authorization` header with the provided Bearer token\n- **`--logLevel info | none`**: Controls logging level (default: `info`). Use `none` to suppress all logs.\n- **`--cors`**: Enable CORS (stdio→SSE or stdio→WS mode). Use `--cors` with no values to allow all origins, or supply one or more allowed origins (e.g. `--cors \"http://example.com\"` or `--cors \"/example\\\\.com$/\"` for regex matching).\n- **`--healthEndpoint /healthz`**: Register one or more endpoints (stdio→SSE or stdio→WS mode; can be used multiple times) that respond with `\"ok\"`\n\n## stdio → SSE\n\nExpose an MCP stdio server as an SSE server:\n\n```bash\nnpx -y supergateway \\\n    --stdio \"npx -y @modelcontextprotocol/server-filesystem ./my-folder\" \\\n    --port 8000 --baseUrl http://localhost:8000 \\\n    --ssePath /sse --messagePath /message\n```\n\n- **Subscribe to events**: `GET http://localhost:8000/sse`\n- **Send messages**: `POST http://localhost:8000/message`\n\n## SSE → stdio\n\nConnect to a remote SSE server and expose locally via stdio:\n\n```bash\nnpx -y supergateway --sse \"https://mcp-server-ab71a6b2-cd55-49d0-adba-562bc85956e3.supermachine.app\"\n```\n\nUseful for integrating remote SSE MCP servers into local command-line environments.\n\nYou can also pass headers when sending requests. This is useful for authentication:\n\n```bash\nnpx -y supergateway \\\n    --sse \"https://mcp-server-ab71a6b2-cd55-49d0-adba-562bc85956e3.supermachine.app\" \\\n    --oauth2Bearer \"some-access-token\" \\\n    --header \"X-My-Header: another-header-value\"\n```\n\n## stdio → WS\n\nExpose an MCP stdio server as a WebSocket server:\n\n```bash\nnpx -y supergateway \\\n    --stdio \"npx -y @modelcontextprotocol/server-filesystem ./my-folder\" \\\n    --port 8000 --outputTransport ws --messagePath /message\n```\n\n- **WebSocket endpoint**: `ws://localhost:8000/message`\n\n## Example with MCP Inspector (stdio → SSE mode)\n\n1. **Run Supergateway**:\n\n```bash\nnpx -y supergateway --port 8000 \\\n    --stdio \"npx -y @modelcontextprotocol/server-filesystem /Users/MyName/Desktop\"\n```\n\n2. **Use MCP Inspector**:\n\n```bash\nnpx @modelcontextprotocol/inspector\n```\n\nYou can now list tools, resources, or perform MCP actions via Supergateway.\n\n## Using with ngrok\n\nUse [ngrok](https://ngrok.com/) to share your local MCP server publicly:\n\n```bash\nnpx -y supergateway --port 8000 --stdio \"npx -y @modelcontextprotocol/server-filesystem .\"\n\n# In another terminal:\nngrok http 8000\n```\n\nngrok provides a public URL for remote access. \n\nMCP server will be available at URL similar to: https://1234-567-890-12-456.ngrok-free.app/sse\n\n## Running with Docker\n\nA Docker-based workflow avoids local Node.js setup. A ready-to-run Docker image is available here:\n[supercorp/supergateway](https://hub.docker.com/r/supercorp/supergateway). Also on GHCR: [ghcr.io/supercorp-ai/supergateway](https://github.com/supercorp-ai/supergateway/pkgs/container/supergateway)\n\n### Using the Official Image\n\n```bash\ndocker run -it --rm -p 8000:8000 supercorp/supergateway \\\n    --stdio \"npx -y @modelcontextprotocol/server-filesystem /\" \\\n    --port 8000\n```\n\nDocker pulls the image automatically. The MCP server runs in the container’s root directory (`/`). You can mount host directories if needed.\n\n### Building the Image Yourself\n\nUse provided Dockerfile:\n\n```bash\ndocker build -t supergateway .\n\ndocker run -it --rm -p 8000:8000 supergateway \\\n    --stdio \"npx -y @modelcontextprotocol/server-filesystem /\" \\\n    --port 8000\n```\n\n## Using with Claude Desktop (SSE → stdio mode)\n\nClaude Desktop can use Supergateway’s SSE→stdio mode.\n\n### NPX-based MCP Server Example\n\n```json\n{\n  \"mcpServers\": {\n    \"supermachineExampleNpx\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"supergateway\",\n        \"--sse\",\n        \"https://mcp-server-ab71a6b2-cd55-49d0-adba-562bc85956e3.supermachine.app\"\n      ]\n    }\n  }\n}\n```\n\n### Docker-based MCP Server Example\n\n```json\n{\n  \"mcpServers\": {\n    \"supermachineExampleDocker\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"supercorp/supergateway\",\n        \"--sse\",\n        \"https://mcp-server-ab71a6b2-cd55-49d0-adba-562bc85956e3.supermachine.app\"\n      ]\n    }\n  }\n}\n```\n\n## Using with Cursor (SSE → stdio mode)\n\nCursor can also integrate with Supergateway in SSE→stdio mode. The configuration is similar to Claude Desktop.\n\n### NPX-based MCP Server Example for Cursor\n\n```json\n{\n  \"mcpServers\": {\n    \"cursorExampleNpx\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"supergateway\",\n        \"--sse\",\n        \"https://mcp-server-ab71a6b2-cd55-49d0-adba-562bc85956e3.supermachine.app\"\n      ]\n    }\n  }\n}\n```\n\n### Docker-based MCP Server Example for Cursor\n\n```json\n{\n  \"mcpServers\": {\n    \"cursorExampleDocker\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"supercorp/supergateway\",\n        \"--sse\",\n        \"https://mcp-server-ab71a6b2-cd55-49d0-adba-562bc85956e3.supermachine.app\"\n      ]\n    }\n  }\n}\n```\n\n**Note:** Although the setup supports sending headers via the `--header` flag, if you need to pass an Authorization header (which typically includes a space, e.g. `\"Bearer 123\"`), you must use the `--oauth2Bearer` flag due to a known Cursor bug with spaces in command-line arguments.\n\n## Why MCP?\n\n[Model Context Protocol](https://spec.modelcontextprotocol.io/) standardizes AI tool interactions. Supergateway converts MCP stdio servers into SSE or WS services, simplifying integration and debugging with web-based or remote clients.\n\n## Advanced Configuration\n\nSupergateway emphasizes modularity:\n\n- Automatically manages JSON-RPC versioning.\n- Retransmits package metadata where possible.\n- stdio→SSE or stdio→WS mode logs via standard output; SSE→stdio mode logs via stderr.\n\n## Additional resources\n\n- [Superargs](https://github.com/supercorp-ai/superargs) - provide arguments to MCP servers during runtime.\n\n## Contributors\n\n- [@StefanBurscher](https://github.com/StefanBurscher)\n- [@tarasyarema](https://github.com/tarasyarema)\n- [@pcnfernando](https://github.com/pcnfernando)\n- [@Areo-Joe](https://github.com/Areo-Joe)\n- [@Joffref](https://github.com/Joffref)\n- [@michaeljguarino](https://github.com/michaeljguarino)\n\n## Contributing\n\nIssues and PRs welcome. Please open one if you encounter problems or have feature suggestions.\n\n## License\n\n[MIT License](./LICENSE)\n"
}