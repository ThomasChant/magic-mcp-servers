{
  "mcp_name": "ces-hongvo/github-mcp-client",
  "mcp_description": "Demonstrates integration of Spring AI with MCP servers for tool execution and chat capabilities in a Spring Boot application.",
  "mcp_id": "ces-hongvo_github-mcp-client",
  "fetch_timestamp": "2025-06-23T01:59:51.270553Z",
  "github_url": "https://github.com/ces-hongvo/github-mcp-client",
  "repository": {
    "name": "github-mcp-client",
    "full_name": "ces-hongvo/github-mcp-client",
    "description": null,
    "html_url": "https://github.com/ces-hongvo/github-mcp-client",
    "created_at": "2025-04-08T10:50:08Z",
    "updated_at": "2025-04-08T10:58:01Z",
    "pushed_at": "2025-04-08T10:57:57Z",
    "size": 10,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Java",
    "license": null,
    "topics": [],
    "default_branch": "master",
    "owner": {
      "login": "ces-hongvo",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/30401690?v=4",
      "html_url": "https://github.com/ces-hongvo"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Java": 1780
    },
    "language_percentages": {
      "Java": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# Spring AI - MCP Starter Client\n\nThis project demonstrates how to use the Spring AI MCP (Model Context Protocol) Client Boot Starter in a Spring Boot application. It showcases how to connect to MCP servers and integrate them with Spring AI's tool execution framework.\n\nFollow the [MCP Client Boot Starter](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-client-boot-starter-docs.html) reference documentation.\n\n## Overview\n\nThe project uses Spring Boot and Spring AI to create a command-line application that demonstrates MCP server integration. The application:\n- Connects to MCP servers using STDIO and/or SSE (HttpClient-based) transports\n- Integrates with Spring AI's chat capabilities\n- Demonstrates tool execution through MCP servers\n- Takes a user-defined question via the `-Dai.user.input` command-line property, which is mapped to a Spring `@Value` annotation in the code\n\nFor example, running the application with `-Dai.user.input=\"Does Spring AI support MCP?\"` will inject this question into the application through Spring's property injection, and the application will use it to query the MCP server.\n\n## Prerequisites\n\n- Java 17 or later\n- Maven 3.6+\n- Anthropic API key (Claude) (Get one at https://docs.anthropic.com/en/docs/initial-setup)\n- Brave Search API key (Get one at https://brave.com/search/api/)\n\n## Dependencies\n\nThe project uses the following main dependencies:\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.ai</groupId>\n        <artifactId>spring-ai-starter-mcp-client</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.ai</groupId>\n        <artifactId>spring-ai-starter-model-anthropic</artifactId>\n    </dependency>\n</dependencies>\n```\n\n## Configuration\n\n### Application Properties\n\nCheck the [MCP Client configuration properties](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-client-boot-starter-docs.html#_configuration_properties) documentation.\n\nThe application can be configured through `application.properties` or `application.yml`:\n\n#### Common Properties\n```properties\n# Application Configuration\nspring.application.name=mcp\nspring.main.web-application-type=none\n\n# AI Provider Configuration\nspring.ai.anthropic.api-key=${ANTHROPIC_API_KEY}\n```\n\n#### STDIO Transport Properties\n\nFollow the [STDIO Configuration properties](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-client-boot-starter-docs.html#_stdio_transport_properties) documentation.\n\nConfigure a separate, named configuration for each STDIO server you connect to:\n\n```properties\nspring.ai.mcp.client.stdio.connections.brave-search.command=npx\nspring.ai.mcp.client.stdio.connections.brave-search.args=-y,@modelcontextprotocol/server-brave-search\n```\n\nHere, `brave-search` is the name of your connection.\n\nAlternatively, you can configure STDIO connections using an external JSON file in the Claude Desktop format:\n\n```properties\nspring.ai.mcp.client.stdio.servers-configuration=classpath:/mcp-servers-config.json\n```\n\nExample `mcp-servers-config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"brave-search\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-brave-search\"\n      ],\n      \"env\": {\n      }\n    }\n  }\n}\n```\n\n#### SSE Transport Properties\n\nYou can also connect to Server-Sent Events (SSE) servers using HttpClient.\nFollow the [SSE Configuration properties](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-client-boot-starter-docs.html#_sse_transport_properties) documentation.\n\nThe properties for SSE transport are prefixed with `spring.ai.mcp.client.sse`:\n\n```properties\nspring.ai.mcp.client.sse.connections.server1.url=http://localhost:8080\nspring.ai.mcp.client.sse.connections.server2.url=http://localhost:8081\n```\n\n## How It Works\n\nThe application demonstrates a simple command-line interaction with an AI model using MCP tools:\n\n1. The application starts and configures multiple MCP Clients (one for each provided STDIO or SSE connection configuration)\n2. It builds a ChatClient with the configured MCP tools\n3. Sends a predefined question (set via the `ai.user.input` property) to the AI model\n4. Displays the AI's response\n5. Automatically closes the application\n\n## Running the Application\n\n1. Set the required environment variable:\n   ```bash\n   export ANTHROPIC_API_KEY=your-api-key\n   export BRAVE_API_KEY='your-brave-api-key-here'\n   ```\n\n2. Build the application:\n   ```bash   \n   ./mvnw clean install\n   ```\n\n3. Run the application:\n   ```bash   \n   java -Dai.user.input='Does Spring AI support MCP?' -jar target/mcp-starter-default-client-0.0.1-SNAPSHOT.jar\n   ```\n\nThe application will execute the question \"Does Spring AI support MCP?\", use the provided brave (or other tools) to answer it, and display the AI assistant's response.\n\n## Additional Resources\n\n- [Spring AI Documentation](https://docs.spring.io/spring-ai/reference/)\n- [MCP Client Boot Starter](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-client-boot-starter-docs.html)\n- [Model Context Protocol Specification](https://modelcontextprotocol.github.io/specification/)\n- [Spring Boot Documentation](https://docs.spring.io/spring-boot/docs/current/reference/html/)\n"
}