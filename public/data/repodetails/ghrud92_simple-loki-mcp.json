{
  "mcp_name": "ghrud92/simple-loki-mcp",
  "mcp_description": "Facilitates AI-driven log analysis by interfacing with Grafana Loki logs via the Model Context Protocol.",
  "mcp_id": "ghrud92_simple-loki-mcp",
  "fetch_timestamp": "2025-06-23T03:47:01.542558Z",
  "github_url": "https://github.com/ghrud92/simple-loki-mcp",
  "repository": {
    "name": "simple-loki-mcp",
    "full_name": "ghrud92/simple-loki-mcp",
    "description": null,
    "html_url": "https://github.com/ghrud92/simple-loki-mcp",
    "created_at": "2025-04-07T00:31:20Z",
    "updated_at": "2025-05-09T07:57:30Z",
    "pushed_at": "2025-05-09T03:07:22Z",
    "size": 143,
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks_count": 3,
    "open_issues_count": 1,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "ghrud92",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/11571142?v=4",
      "html_url": "https://github.com/ghrud92"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 3,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 30888,
      "JavaScript": 7322,
      "Dockerfile": 400
    },
    "language_percentages": {
      "TypeScript": 80,
      "JavaScript": 18.96,
      "Dockerfile": 1.04
    },
    "pull_requests_count": 4,
    "contributors_count": 4,
    "package_json_version": "0.0.9"
  },
  "readme": "# Simple Loki MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@ghrud92/simple-loki-mcp)](https://smithery.ai/server/@ghrud92/simple-loki-mcp)\n\nLoki MCP Server is a [Model Context Protocol (MCP)](https://github.com/modelcontextprotocol/mcp) interface for querying Grafana Loki logs using `logcli`. The server enables AI assistants to access and analyze log data from Loki directly.\n\n<a href=\"https://glama.ai/mcp/servers/@ghrud92/loki-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@ghrud92/loki-mcp/badge\" alt=\"Loki Server MCP server\" />\n</a>\n\n## Features\n\n- Query Loki logs with full LogQL support\n- Get label values and metadata\n- Authentication and configuration support via environment variables or config files\n- Provides formatted results in different output formats (default, raw, JSON lines)\n- Automatic fallback to HTTP API when `logcli` is not available in the environment\n\n## Prerequisites\n\n- Node.js v16 or higher\n- TypeScript\n- (Optional) [Grafana Loki logcli](https://grafana.com/docs/loki/latest/tools/logcli/) installed and accessible in your PATH. If `logcli` is not available, the server will automatically use the Loki HTTP API instead\n- Access to a Loki server instance\n\n## Installation\n\n### Installing via Smithery\n\nTo install Simple Loki MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@ghrud92/simple-loki-mcp):\n\n```bash\nnpx -y @smithery/cli install @ghrud92/simple-loki-mcp --client claude\n```\n\n### for MCP\n\n```json\n{\n  \"mcpServers\": {\n    \"simple-loki\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"simple-loki-mcp\"],\n      \"env\": {\n        \"LOKI_ADDR\": \"https://loki.sup.band\"\n      }\n    }\n  }\n}\n```\n\n### npm\n\n1. Clone the repository:\n\n```bash\ngit clone https://github.com/ghrud92/loki-mcp.git\ncd loki-mcp\n```\n\n2. Install dependencies:\n\n```bash\nnpm install\n```\n\n3. Build the project:\n\n```bash\nnpm run build\n```\n\n## Available MCP Tools\n\n### query-loki\n\nQuery logs from Loki with filtering options.\n\nParameters:\n\n- `query` (required): Loki query string (LogQL)\n- `from`: Start timestamp (e.g. \"2023-01-01T12:00:00Z\")\n- `to`: End timestamp (e.g. \"2023-01-01T13:00:00Z\")\n- `limit`: Maximum number of logs to return\n- `batch`: Batch size for query results\n- `output`: Output format (\"default\", \"raw\", or \"jsonl\")\n- `quiet`: Suppress query metadata\n- `forward`: Display results in chronological order\n\n### get-label-values\n\nRetrieve all values for a specific label.\n\nParameters:\n\n- `label` (required): Label name to get values for\n\n### get-labels\n\nRetrieve all available labels.\n\nNo parameters required.\n\n## Configuration\n\nYou can configure Loki access using:\n\n### Environment Variables\n\n- `LOKI_ADDR`: Loki server address (URL)\n- `LOKI_USERNAME`: Username for basic auth\n- `LOKI_PASSWORD`: Password for basic auth\n- `LOKI_TENANT_ID`: Tenant ID for multi-tenant Loki\n- `LOKI_BEARER_TOKEN`: Bearer token for authentication\n- `LOKI_BEARER_TOKEN_FILE`: File containing bearer token\n- `LOKI_CA_FILE`: Custom CA file for TLS\n- `LOKI_CERT_FILE`: Client certificate file for TLS\n- `LOKI_KEY_FILE`: Client key file for TLS\n- `LOKI_ORG_ID`: Organization ID for multi-org setups\n- `LOKI_TLS_SKIP_VERIFY`: Skip TLS verification (\"true\" or \"false\")\n- `LOKI_CONFIG_PATH`: Custom path to config file\n- `DEBUG`: Enable debug logging\n\n> **Note**: When the client is using the HTTP API mode (when `logcli` is not available), the same configuration parameters are used to authenticate and connect to the Loki server.\n\n### Config Files\n\nAlternatively, create a `logcli-config.yaml` file in one of these locations:\n\n- Custom path specified by `LOKI_CONFIG_PATH`\n- Current working directory\n- Your home directory (`~/.logcli-config.yaml`)\n\nExample config file:\n\n```yaml\naddr: https://loki.example.com\nusername: user\npassword: pass\ntenant_id: mytenant\n```\n\n## Usage\n\nStart the server:\n\n```bash\nnpm start\n```\n\nFor development:\n\n```bash\nnpm run dev\n```\n\n## Implementation Details\n\n### Automatic Fallback to HTTP API\n\nThe server will automatically check if `logcli` is installed and available in the environment:\n\n1. If `logcli` is available, it will be used for all queries, providing the full functionality of the CLI tool\n2. If `logcli` is not available, the server will automatically fall back to using the Loki HTTP API:\n   - No additional configuration is needed\n   - The same authentication parameters are used for the HTTP API\n   - Response formatting is consistent with the CLI output\n   - Default limit of 1000 logs per query is applied in both modes\n\nThis automatic detection ensures that the server works seamlessly in different environments without manual configuration.\n\n## Development\n\n```bash\n# Run linter\nnpm run lint\n\n# Fix linting issues\nnpm run lint:fix\n\n# Run tests\nnpm run test\n```\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details."
}