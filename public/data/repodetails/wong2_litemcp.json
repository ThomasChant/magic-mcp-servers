{
  "mcp_name": "LiteMCP",
  "mcp_description": "A TypeScript framework for building MCP servers elegantly",
  "mcp_id": "wong2_litemcp",
  "fetch_timestamp": "2025-06-23T06:12:47.649474Z",
  "github_url": "https://github.com/wong2/litemcp",
  "repository": {
    "name": "litemcp",
    "full_name": "wong2/litemcp",
    "description": "A TypeScript framework for building MCP servers elegantly",
    "html_url": "https://github.com/wong2/litemcp",
    "created_at": "2024-12-09T10:25:06Z",
    "updated_at": "2025-06-18T02:09:41Z",
    "pushed_at": "2025-04-27T03:30:13Z",
    "size": 116,
    "stargazers_count": 178,
    "watchers_count": 178,
    "forks_count": 15,
    "open_issues_count": 5,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [
      "mcp",
      "model-context-protocol",
      "typescript",
      "typescript-library"
    ],
    "default_branch": "main",
    "owner": {
      "login": "wong2",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/321947?v=4",
      "html_url": "https://github.com/wong2"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 15,
    "subscribers_count": 2,
    "languages": {
      "TypeScript": 10926,
      "JavaScript": 263
    },
    "language_percentages": {
      "TypeScript": 97.65,
      "JavaScript": 2.35
    },
    "pull_requests_count": 3,
    "contributors_count": 1,
    "tags": [
      {
        "name": "v0.7.0",
        "commit_sha": "ed9ebd87a71a36a465167119e2a3c6b4f4273ee0"
      },
      {
        "name": "v0.6.0",
        "commit_sha": "d1bb4de3193c410cbbec68267e1ff34e5ef160ff"
      },
      {
        "name": "v0.5.0",
        "commit_sha": "39d8652b78fb7c98e3be724f90ed453b64d7a6c2"
      },
      {
        "name": "v0.4.1",
        "commit_sha": "22a992831fe300962087635e0069841b8f9081b2"
      },
      {
        "name": "v0.4.0",
        "commit_sha": "e5b2c3505bb316cb447cc29bf611f8871e84166d"
      },
      {
        "name": "v0.2.0",
        "commit_sha": "68d8169a175a0952990ea280095928ca686e2544"
      },
      {
        "name": "v0.1.3",
        "commit_sha": "7d5ee46a83eaaa5d169491f6870c5ae2f350c5b3"
      },
      {
        "name": "v0.1.0",
        "commit_sha": "300c07804a971962b8d647b4ede63a90cff0c3bf"
      }
    ],
    "latest_version": "v0.7.0",
    "package_json_version": "0.9.0"
  },
  "readme": "# LiteMCP\n\nA TypeScript framework for building MCP (Model Context Protocol) servers elegantly\n\n> **Deprecate notice**:\n> \n> Since the [official SDK](https://github.com/modelcontextprotocol/typescript-sdk) already offers a high-level API similar to this project, this project will no longer be maintained.\n>\n> If you like the CLI commands in this project, you can use them independently: https://github.com/wong2/mcp-cli\n\n## Features\n\n- Simple Tool, Resource, Prompt definition\n- Full TypeScript support\n- Built-in [logging](#logging)\n- Built-in error handling\n- Built-in CLI for [testing and debugging](#debugging-with-mcp-cli)\n- Built-in support for [SSE transport](#sse-transport)\n\n## Installation\n\n```bash\nnpm install litemcp zod\n```\n\n## Quickstart\n\n```js\nimport { LiteMCP } from \"litemcp\";\nimport { z } from \"zod\";\n\nconst server = new LiteMCP(\"demo\", \"1.0.0\");\n\nserver.addTool({\n  name: \"add\",\n  description: \"Add two numbers\",\n  parameters: z.object({\n    a: z.number(),\n    b: z.number(),\n  }),\n  execute: async (args) => {\n    return args.a + args.b;\n  },\n});\n\nserver.addResource({\n  uri: \"file:///logs/app.log\",\n  name: \"Application Logs\",\n  mimeType: \"text/plain\",\n  async load() {\n    return {\n      text: \"Example log content\",\n    };\n  },\n});\n\nserver.start();\n```\n\nYou can test the server in terminal with:\n\n```bash\nnpx litemcp dev server.js\n```\n\n## Core Concepts\n\n### Tools\n\nTools in MCP allow servers to expose executable functions that can be invoked by clients and used by LLMs to perform actions.\n\n```js\nserver.addTool({\n  name: \"fetch\",\n  description: \"Fetch the content of a url\",\n  parameters: z.object({\n    url: z.string(),\n  }),\n  execute: async (args) => {\n    const content = await fetchWebpageContent(args.url);\n    return content;\n  },\n});\n```\n\n### Resources\n\nResources represent any kind of data that an MCP server wants to make available to clients. This can include:\n\n- File contents\n- Screenshots and images\n- Log files\n- And more\n\nEach resource is identified by a unique URI and can contain either text or binary data.\n\n```js\nserver.addResource({\n  uri: \"file:///logs/app.log\",\n  name: \"Application Logs\",\n  mimeType: \"text/plain\",\n  async load() {\n    return {\n      text: await readLogFile(),\n    };\n  },\n});\n```\n\nYou can also return binary contents in `load`:\n\n```js\nasync load() {\n  return {\n    blob: 'base64-encoded-data'\n  }\n}\n```\n\n### Prompts\n\nPrompts enable servers to define reusable prompt templates and workflows that clients can easily surface to users and LLMs. They provide a powerful way to standardize and share common LLM interactions.\n\n```js\nserver.addPrompt({\n  name: \"git-commit\",\n  description: \"Generate a Git commit message\",\n  arguments: [\n    {\n      name: \"changes\",\n      description: \"Git diff or description of changes\",\n      required: true,\n    },\n  ],\n  load: async (args) => {\n    return `Generate a concise but descriptive commit message for these changes:\\n\\n${args.changes}`;\n  },\n});\n```\n\n### Logging\n\nYou can send log messages to the client with `server.logger`\n\n```js\nserver.addTool({\n  name: \"download\",\n  description: \"Download a file from a url\",\n  parameters: z.object({\n    url: z.string(),\n  }),\n  execute: async (args) => {\n    server.logger.info(\"Downloading file\", { url: args.url });\n    // ...\n    server.logger.info(\"Downloaded file\", { url: args.url });\n    return response;\n  },\n});\n```\n\nThe `logger` object has the following methods:\n\n- `debug(message: string, context?: JsonValue)`\n- `info(message: string, context?: JsonValue)`\n- `warn(message: string, context?: JsonValue)`\n- `error(message: string, context?: JsonValue)`\n\n## Running Your Server\n\n### Debugging with `mcp-cli`\n\nThe fastest way to test and debug your server is with [`mcp-cli`](https://github.com/wong2/mcp-cli):\n\n```bash\nnpx litemcp dev server.js\nnpx litemcp dev server.ts // ts files are also supported\n```\n\nThis will run your server with `mcp-cli` for testing and debugging your MCP server in the terminal.\n\n### Inspect with `MCP Inspector`\n\nAnother way is to use the official [`MCP Inspector`](https://modelcontextprotocol.io/docs/tools/inspector) to inspect your server with a Web UI:\n\n```bash\nnpx litemcp inspect server.js\n```\n\n### SSE Transport\n\nThe servers are running with `stdio` transport by default. You can also run the server with SSE mode:\n\n```js\nserver.start({\n  transportType: \"sse\",\n  sse: {\n    endpoint: \"/sse\",\n    port: 8080,\n  },\n});\n```\n\nThis will start the server and listen for SSE connections on http://localhost:8080/sse.\n\nYou can then connect to the server with [SSE transport](https://modelcontextprotocol.io/docs/concepts/transports#server-sent-events-sse) in the client.\n\n## Showcase\n\n> If you've developed a server using LiteMCP, please submit a PR to showcase it here!\n\n- https://github.com/wong2/mcp-jina-reader\n- https://github.com/nloui/paperless-mcp\n\n## Roadmap\n\n- Add support for Resource Templates\n\n## Related\n\n- [mcp-cli](https://github.com/wong2/mcp-cli) - A CLI for testing and debugging MCP servers\n- [mcpservers.org](https://mcpservers.org) - A curated list of MCP servers\n- [FastMCP](https://github.com/jlowin/fastmcp) - A Python library for MCP server development, inspiration for this project\n"
}