{
  "mcp_name": "JackKuo666/PubChem-MCP-Server",
  "mcp_description": "Facilitates AI-driven searches and retrieval of chemical compound data from PubChem via a streamlined MCP interface.",
  "mcp_id": "JackKuo666_PubChem-MCP-Server",
  "fetch_timestamp": "2025-06-23T05:05:26.218692Z",
  "github_url": "https://github.com/JackKuo666/PubChem-MCP-Server",
  "repository": {
    "name": "PubChem-MCP-Server",
    "full_name": "JackKuo666/PubChem-MCP-Server",
    "description": "üß™ Enable AI assistants to search and access chemical compound information through a simple MCP interface.",
    "html_url": "https://github.com/JackKuo666/PubChem-MCP-Server",
    "created_at": "2025-04-07T09:03:48Z",
    "updated_at": "2025-06-13T09:03:06Z",
    "pushed_at": "2025-04-07T10:25:30Z",
    "size": 9,
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks_count": 0,
    "open_issues_count": 1,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "JackKuo666",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/41313632?v=4",
      "html_url": "https://github.com/JackKuo666"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 9835
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 1,
    "contributors_count": 1
  },
  "readme": "# PubChem MCP Server\n[![smithery badge](https://smithery.ai/badge/@JackKuo666/pubchem-mcp-server)](https://smithery.ai/server/@JackKuo666/pubchem-mcp-server)\n\nüß™ Enable AI assistants to search and access chemical compound information through a simple MCP interface.\n\nThe PubChem MCP Server provides a bridge between AI assistants and PubChem's chemical database through the Model Context Protocol (MCP). It allows AI models to search for chemical compounds and access their detailed information in a programmatic way.\n\nü§ù Contribute ‚Ä¢ üìù Report Bug\n\n## ‚ú® Core Features\n- üîé Compound Search: Query PubChem compounds by name, SMILES, or CID ‚úÖ\n- üß™ Chemical Structure: Access molecular structures and identifiers ‚úÖ\n- üìä Property Data: Retrieve detailed chemical and physical properties ‚úÖ\n- üî¨ Advanced Search: Combine multiple parameters for precise queries ‚úÖ\n- üß¨ Molecular Visualization: Generate and display molecular structures üìù\n- üìà Property Analysis: Compare properties across multiple compounds üìù\n- üóÉÔ∏è Local Storage: Save frequently used compounds for faster access üìù\n- üìù Chemistry Prompts: Specialized prompts for chemical analysis üìù\n\n## üöÄ Quick Start\n\n### Installing via Smithery\n\nTo install PubChem Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@JackKuo666/pubchem-mcp-server):\n\n#### Claude\n\n```bash\nnpx -y @smithery/cli@latest install @JackKuo666/pubchem-mcp-server --client claude --config \"{}\"\n```\n\n#### Cursor\n\nPaste the following into Settings ‚Üí Cursor Settings ‚Üí MCP ‚Üí Add new server: \n- Mac/Linux  \n```s\nnpx -y @smithery/cli@latest run @JackKuo666/pubchem-mcp-server --client cursor --config \"{}\" \n```\n#### Windsurf\n```sh\nnpx -y @smithery/cli@latest install @JackKuo666/pubchem-mcp-server --client windsurf --config \"{}\"\n```\n### CLine\n```sh\nnpx -y @smithery/cli@latest install @JackKuo666/pubchem-mcp-server --client cline --config \"{}\"\n```\n\n### Installing Manually\nInstall using uv:\n\n```bash\nuv tool install pubchem-mcp-server\n```\n\nFor development:\n\n```bash\n# Clone and set up development environment\ngit clone https://github.com/JackKuo666/PubChem-MCP-Server.git\ncd PubChem-MCP-Server\n\n# Create and activate virtual environment\nuv venv\nsource .venv/bin/activate\nuv pip install -r requirements.txt\n```\n\n## üìä Usage\n\nStart the MCP server:\n\n```bash\npython pubchem_server.py\n```\n\nOnce the server is running, you can use the provided MCP tools in your AI assistant or application. Here are some examples of how to use the tools:\n\n### Example 1: Search for compounds by name\n\n```python\nresult = await mcp.use_tool(\"search_pubchem_by_name\", {\n    \"name\": \"aspirin\",\n    \"max_results\": 3\n})\nprint(result)\n```\n\n### Example 2: Search for compounds by SMILES notation\n\n```python\nresult = await mcp.use_tool(\"search_pubchem_by_smiles\", {\n    \"smiles\": \"CC(=O)OC1=CC=CC=C1C(=O)O\",  # Aspirin's SMILES\n    \"max_results\": 2\n})\nprint(result)\n```\n\n### Example 3: Get detailed information for a specific compound\n\n```python\nresult = await mcp.use_tool(\"get_pubchem_compound_by_cid\", {\n    \"cid\": 2244  # Aspirin's CID\n})\nprint(result)\n```\n\n### Example 4: Perform an advanced search with multiple parameters\n\n```python\nresult = await mcp.use_tool(\"search_pubchem_advanced\", {\n    \"name\": \"caffeine\",\n    \"formula\": \"C8H10N4O2\",\n    \"max_results\": 2\n})\nprint(result)\n```\n\nThese examples demonstrate how to use the four main tools provided by the PubChem MCP Server. Adjust the parameters as needed for your specific use case.\n\n## üõ† MCP Tools\n\nThe PubChem MCP Server provides the following tools:\n\n### search_pubchem_by_name\n\nSearch for chemical compounds on PubChem using a compound name.\n\n**Parameters:**\n- `name` (str): Name of the chemical compound\n- `max_results` (int, optional): Maximum number of results to return (default: 5)\n\n**Returns:** List of dictionaries containing compound information\n\n### search_pubchem_by_smiles\n\nSearch for chemical compounds on PubChem using a SMILES string.\n\n**Parameters:**\n- `smiles` (str): SMILES notation of the chemical compound\n- `max_results` (int, optional): Maximum number of results to return (default: 5)\n\n**Returns:** List of dictionaries containing compound information\n\n### get_pubchem_compound_by_cid\n\nFetch detailed information about a chemical compound using its PubChem CID.\n\n**Parameters:**\n- `cid` (int): PubChem Compound ID (CID)\n\n**Returns:** Dictionary containing compound information\n\n### search_pubchem_advanced\n\nPerform an advanced search for compounds on PubChem.\n\n**Parameters:**\n- `name` (str, optional): Name of the chemical compound\n- `smiles` (str, optional): SMILES notation of the chemical compound\n- `formula` (str, optional): Molecular formula\n- `cid` (int, optional): PubChem Compound ID\n- `max_results` (int, optional): Maximum number of results to return (default: 5)\n\n**Returns:** List of dictionaries containing compound information\n\n## Usage with Claude Desktop\n\nAdd this configuration to your `claude_desktop_config.json`:\n\n(Mac OS)\n\n```json\n{\n  \"mcpServers\": {\n    \"pubchem\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"pubchem-mcp-server\"]\n      }\n  }\n}\n```\n\n(Windows version):\n\n```json\n{\n  \"mcpServers\": {\n    \"pubchem\": {\n      \"command\": \"C:\\\\Users\\\\YOUR_USERNAME\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python311\\\\python.exe\",\n      \"args\": [\n        \"-m\",\n        \"pubchem-mcp-server\"\n      ]\n    }\n  }\n}\n```\nUsing with Cline\n```json\n{\n  \"mcpServers\": {\n    \"pubchem\": {\n      \"command\": \"bash\",\n      \"args\": [\n        \"-c\",\n        \"source /home/YOUR/PATH/mcp-hub/PubChem-MCP-Server/.venv/bin/activate && python /home/YOUR/PATH/mcp-hub/PubChem-MCP-Server/pubchem_server.py\"\n      ],\n      \"env\": {},\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nAfter restarting Claude Desktop, the following capabilities will be available:\n\n### Searching Compounds\n\nYou can ask Claude to search for chemical compounds using queries like:\n```\nCan you search PubChem for information about aspirin?\n```\n\nThe search will return basic information about matching compounds including:\n\n‚Ä¢ Compound name\n\n‚Ä¢ CID (PubChem Compound ID)\n\n‚Ä¢ Molecular formula\n\n‚Ä¢ Molecular weight\n\n### Getting Compound Details\n\nOnce you have a CID, you can ask for more details:\n```\nCan you show me the details for compound with CID 2244?\n```\n\nThis will return:\n\n‚Ä¢ IUPAC name\n\n‚Ä¢ Molecular formula\n\n‚Ä¢ Molecular weight\n\n‚Ä¢ SMILES notation\n\n‚Ä¢ InChI and InChIKey\n\n‚Ä¢ Physical and chemical properties\n\n‚Ä¢ Synonyms\n\n## üìù TODO\n\n### visualize_compound\n\nGenerate and display a 2D or 3D visualization of a chemical compound.\n\n### compare_compounds\n\nCompare properties and structures of multiple compounds.\n\n### save_compound\n\nSave a compound locally for faster access.\n\n### list_saved_compounds\n\nList all saved compounds.\n\n### üìù Chemistry Prompts\n\nThe server will offer specialized prompts to help analyze chemical compounds:\n\n#### Compound Analysis Prompt\n\nA comprehensive workflow for analyzing chemical compounds that only requires a compound ID:\n\n```python\nresult = await call_prompt(\"deep-compound-analysis\", {\n    \"compound_id\": \"2244\"\n})\n```\n\nThis prompt will include:\n\n- Detailed instructions for using available tools\n- A systematic workflow for compound analysis\n- Comprehensive analysis structure covering:\n  - Chemical structure and properties\n  - Pharmacological properties\n  - Biological activities\n  - Applications and uses\n  - Safety and toxicity information\n  - Related compounds\n\n## üìÅ Project Structure\n\n- `pubchem_server.py`: The main MCP server implementation using FastMCP\n- `pubchem_search.py`: Contains example code for searching PubChem\n\n## üîß Dependencies\n\n- Python 3.10+\n- FastMCP\n- asyncio\n- logging\n- pubchempy (for PubChem API access)\n- pandas (for data handling)\n\nYou can install the required dependencies using:\n\n```bash\npip install mcp pubchempy pandas\n```\n\n## ü§ù Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## üìÑ License\n\nThis project is licensed under the MIT License.\n\n## ‚ö†Ô∏è Disclaimer\n\nThis tool is for research purposes only. Please respect PubChem's terms of service and use this tool responsibly.\n"
}