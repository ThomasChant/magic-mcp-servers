{
  "mcp_name": "deak-ai/openehr-mcp-server",
  "mcp_description": "Facilitates seamless integration with openEHR REST APIs, enabling the creation and management of electronic health records and compositions.",
  "mcp_id": "deak-ai_openehr-mcp-server",
  "fetch_timestamp": "2025-06-23T02:32:36.897948Z",
  "github_url": "https://github.com/deak-ai/openehr-mcp-server",
  "repository": {
    "name": "openehr-mcp-server",
    "full_name": "deak-ai/openehr-mcp-server",
    "description": null,
    "html_url": "https://github.com/deak-ai/openehr-mcp-server",
    "created_at": "2025-04-24T16:25:38Z",
    "updated_at": "2025-06-20T11:00:48Z",
    "pushed_at": "2025-06-07T15:25:53Z",
    "size": 70,
    "stargazers_count": 9,
    "watchers_count": 9,
    "forks_count": 3,
    "open_issues_count": 2,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "deak-ai",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/151435985?v=4",
      "html_url": "https://github.com/deak-ai"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 3,
    "subscribers_count": 1,
    "languages": {
      "Python": 109916,
      "Shell": 2406,
      "Dockerfile": 741
    },
    "language_percentages": {
      "Python": 97.22,
      "Shell": 2.13,
      "Dockerfile": 0.66
    },
    "pull_requests_count": 5,
    "contributors_count": 2
  },
  "readme": "# openEHR MCP Server\n\nAn MCP (Model Context Protocol) server designed to interface with openEHR REST APIs, specifically the EHRbase implementation. \nThis server enables MCP clients like Claude Desktop to create compositions for openEHR templates and submit them to a server.\nFor production grade EHR integrations you must use an AI Model where you can ensure data privacy.\n\nSee https://modelcontextprotocol.io/introduction for more information about MCP.\n\n## Version\n\nCurrent version: **0.1.0**\n\nThis project follows semantic versioning. For details on our versioning strategy, see [VERSIONING.md](VERSIONING.md).\n\n## MCP Tools \n\n* **openehr_template_list**: List all available openEHR templates from the EHRbase server\n* **openehr_template_get**: Retrieve a specific openEHR template by its unique identifier\n* **openehr_template_example_composition**: Generate an example openEHR composition based on a specific template\n* **openehr_ehr_create**: Create a new EHR in the system\n* **openehr_ehr_get**: Retrieve an EHR by its ID\n* **openehr_ehr_list**: List all available EHRs in the system\n* **openehr_ehr_get_by_subject**: Get an EHR by subject ID and namespace\n* **openehr_composition_create**: Create a new openEHR composition in the Electronic Health Record\n* **openehr_composition_get**: Retrieve an existing openEHR composition by its unique identifier\n* **openehr_composition_update**: Update an existing openEHR composition in the Electronic Health Record\n* **openehr_composition_delete**: Delete an existing openEHR composition from the Electronic Health Record\n* **openehr_query_adhoc**: Execute an ad-hoc AQL query against the openEHR server\n\n## MCP Prompts\n\n* **vital_signs_capture**: Capture vital signs for a specific EHR ID\n\n## MCP Resource\n\nNot yet implemented\n\n# Quick Start with Docker\n\nThe easiest way to get started is to use the pre-built Docker image available on Docker Hub.\n\n## 1. Prerequisites\n\nEnsure you have a running EHRbase server. For running one locally, see below.\n\n## 2. Configure Claude Desktop\n\nEdit your Claude Desktop configuration file (claude_desktop_config.json) and add an \"openEHR\" configuration block inside the \"mcpServers\" section.\n\nThis file can usually be found in the following locations:\n* On macOS: ~/Library/Application Support/Claude\n* On Windows: %APPDATA%\\Claude\n\n```json\n{\n  \"mcpServers\": {\n    \"openEHR\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"--network=host\",\n        \"-e\",\"EHRBASE_URL=http://localhost:8080/ehrbase/rest\",\n        \"-e\",\"EHRBASE_JSON_FORMAT=wt_flat\",\n        \"ctodeakai/openehr-mcp-server:latest\"\n      ]\n    }\n  }\n}\n```\n\nYou can point EHRBASE_URL to your own EHRbase server or use the provided docker-compose setup.\n\n### JSON Format Configuration\n\nThe MCP server supports different JSON serialization formats for interacting with the EHRbase API. You can configure the format using the optional `EHRBASE_JSON_FORMAT` environment variable:\n\n```json\n\"-e\", \"EHRBASE_JSON_FORMAT=wt_flat\"\n```\n\nAvailable format options:\n\n* **wt_flat** (default): Use the simplified data types (SDT) based on the flat web template format\n* **canonical**: Uses the canonical openEHR JSON format consistently across all operations\n* **wt_structured**: SDT based on the structured web template format (currently not working)\n\n\n\nFor more information on how to set up Claude Desktop with MCP servers, see https://modelcontextprotocol.io/quickstart/user.\n\n\n# Setup\n\n## Prerequisities\n\nFor this MCP server to work, you currently require\n* an ehrbase server\n    * a sample server is provided here: [docker-compose.yml](docker-compose/docker-compose.yml)\n* an openEHR template\n    * a sample template is provided here: [vital_signs_basic.opt](resources/vital_signs_basic.opt)\n    * you can upload one using the script [upload_template.py](scripts/upload_template.py)\n* an EHR within this server and its associated EHR ID\n    * you can create one using the script [create_ehr.py](scripts/create_ehr.py)\n\n\n## Local EHRBase Setup\n\n### Prerequisites\n* A working Docker installation\n* Python 3 (this project was built with python 3.12, earlier versions might work) \n* A Python virtual environment (pip, conda or uv)\n* Install the required dependencies in your Python environment:\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n\n### Running the EHRbase Server\n\n1. Navigate to the docker-compose directory:\n   ```bash\n   cd docker-compose\n   ```\n\n2. Start the EHRbase server in detached mode:\n   ```bash\n   docker compose up -d\n   ```\n\n3. Check the logs to verify the server is running properly:\n   ```bash\n   docker compose logs -f\n   ```\n\n4. The EHRbase server will be available at http://localhost:8080/ehrbase/\n\n5. The EHRBase API documentation should be here: http://localhost:8080/ehrbase/swagger-ui/index.html\n\n\n### Uploading the Vital Signs Template\n\nAfter setting up the EHRbase server and your Python environment, you can upload the vital signs template:\n\n```bash\npython scripts/upload_template.py\n```\n\nYou can also specify a custom template or EHRbase URL:\n\n```bash\npython scripts/upload_template.py --template path/to/template.opt --ehrbase-url http://custom-url:8080/ehrbase/rest\n```\n\nYou should see output confirming the successful upload of the template to the EHRbase server.\n\n\n### Creating an EHR\n\nAfter uploading the template, you need to create an Electronic Health Record (EHR) to store compositions:\n\n```bash\npython scripts/create_ehr.py\n```\n\nThis will create an EHR with a randomly generated subject ID. You can also specify a custom subject ID:\n\n```bash\npython scripts/create_ehr.py --subject-id \"patient_12345\"\n```\n\nThe script will output the EHR ID, which you'll need when creating compositions or using the MCP server.\n\n\n### Running the Integration Tests\n\nTo run the tests, you'll need to install the test dependencies first:\n\n```bash\npip install -r requirements-test.txt\n```\n\nAfter installing the test dependencies and uploading the template, you can run the tests with:\n\n```bash\npython -m pytest tests/test_*.py -v\n```\n\nThis will run all the tests in the `tests` directory.\n\n## Running the openEHR MCP server with Docker\n\n### Building the Docker Image\n\nBuild the Docker image from the project root:\n\n```bash\ndocker build -t openehr-mcp-server .\n```\n\n### Running the Docker Container\n\n```bash\ndocker run -i --rm --network=host openehr-mcp-server\n```\n"
}