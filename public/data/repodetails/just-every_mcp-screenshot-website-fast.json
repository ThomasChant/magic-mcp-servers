{
  "mcp_name": "just-every/mcp-screenshot-website-fast",
  "mcp_description": "High-quality screenshot capture optimized for Claude Vision API. Automatically tiles full pages into 1072x1072 chunks (1.15 megapixels) with configurable viewports and wait strategies for dynamic content.",
  "mcp_id": "just-every_mcp-screenshot-website-fast",
  "fetch_timestamp": "2025-06-23T05:38:17.592798Z",
  "github_url": "https://github.com/just-every/mcp-screenshot-website-fast",
  "repository": {
    "name": "mcp-screenshot-website-fast",
    "full_name": "just-every/mcp-screenshot-website-fast",
    "description": "Quickly screenshots webpages and converts to an LLM friendly size",
    "html_url": "https://github.com/just-every/mcp-screenshot-website-fast",
    "created_at": "2025-06-11T16:27:17Z",
    "updated_at": "2025-06-18T15:48:14Z",
    "pushed_at": "2025-06-11T20:00:37Z",
    "size": 615,
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks_count": 1,
    "open_issues_count": 1,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [
      "claude",
      "codex",
      "fast",
      "mcp",
      "mcp-server",
      "screenshot"
    ],
    "default_branch": "main",
    "owner": {
      "login": "just-every",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/213184375?v=4",
      "html_url": "https://github.com/just-every"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 0,
    "languages": {
      "TypeScript": 26213,
      "JavaScript": 13120,
      "Shell": 1215
    },
    "language_percentages": {
      "TypeScript": 64.65,
      "JavaScript": 32.36,
      "Shell": 3
    },
    "pull_requests_count": 1,
    "contributors_count": 2,
    "tags": [
      {
        "name": "v0.1.11",
        "commit_sha": "51f149459a884c3515603febb2011ef10eb430a7"
      },
      {
        "name": "v0.1.9",
        "commit_sha": "fbafda47c04711761f1a65bb685ee152224166ff"
      },
      {
        "name": "v0.1.8",
        "commit_sha": "9854037f6cf2cee6dec073535efd5d16d8577a63"
      },
      {
        "name": "v0.1.7",
        "commit_sha": "6d68e4e879afe333e19911d8511a9f7bb71fb883"
      },
      {
        "name": "v0.1.6",
        "commit_sha": "235dd59f4e855d208d80b8daeb22ad39e95d8e68"
      },
      {
        "name": "v0.1.5",
        "commit_sha": "6775f11e69ebd9220e7e346f61c2998a2ed1b416"
      },
      {
        "name": "v0.1.4",
        "commit_sha": "b33ba862212e38241eea58e3d0d1ec2deceab8b6"
      }
    ],
    "latest_version": "v0.1.11",
    "package_json_version": "0.1.11"
  },
  "readme": "# @just-every/mcp-screenshot-website-fast\n\nFast, efficient screenshot capture tool for web pages - optimized for Claude Vision API. Automatically tiles full pages into 1072x1072 chunks for optimal AI processing.\n\n[![npm version](https://badge.fury.io/js/@just-every%2Fmcp-screenshot-website-fast.svg)](https://www.npmjs.com/package/@just-every/mcp-screenshot-website-fast)\n[![GitHub Actions](https://github.com/just-every/mcp-screenshot-website-fast/workflows/Release/badge.svg)](https://github.com/just-every/mcp-screenshot-website-fast/actions)\n\n## Overview\n\nBuilt specifically for AI vision workflows, this tool captures high-quality screenshots with automatic resolution limiting and tiling for optimal processing by Claude Vision API and other AI models. It ensures screenshots are perfectly sized at 1072x1072 pixels (1.15 megapixels) for maximum compatibility.\n\n## Features\n\n- üì∏ **Fast screenshot capture** using Puppeteer headless browser\n- üéØ **Claude Vision optimized** with automatic resolution limiting (1072x1072 for optimal 1.15 megapixels)\n- üî≤ **Automatic tiling** - Full pages are automatically split into 1072x1072 tiles\n- üîÑ **Always fresh content** - No caching ensures up-to-date screenshots\n- üì± **Configurable viewports** for responsive testing\n- ‚è±Ô∏è **Wait strategies** for dynamic content (networkidle, custom delays)\n- üìÑ **Full page capture** by default for complete page screenshots\n- üì¶ **Minimal dependencies** for fast npm installs\n- üîå **MCP integration** for seamless AI workflows\n\n## Installation\n\n### Claude Code\n\n```bash\nclaude mcp add screenshot-website-fast -s user -- npx -y @just-every/mcp-screenshot-website-fast\n```\n\n### VS Code\n\n```bash\ncode --add-mcp '{\"name\":\"screenshot-website-fast\",\"command\":\"npx\",\"args\":[\"-y\",\"@just-every/mcp-screenshot-website-fast\"]}'\n```\n\n### Cursor\n\n```bash\ncursor://anysphere.cursor-deeplink/mcp/install?name=screenshot-website-fast&config=eyJzY3JlZW5zaG90LXdlYnNpdGUtZmFzdCI6eyJjb21tYW5kIjoibnB4IiwiYXJncyI6WyIteSIsIkBqdXN0LWV2ZXJ5L21jcC1zY3JlZW5zaG90LXdlYnNpdGUtZmFzdCJdfX0=\n```\n\n### JetBrains IDEs\n\nSettings ‚Üí Tools ‚Üí AI Assistant ‚Üí Model Context Protocol (MCP) ‚Üí Add\n\nChoose \"As JSON\" and paste:\n\n```json\n{\"command\":\"npx\",\"args\":[\"-y\",\"@just-every/mcp-screenshot-website-fast\"]}\n```\n\n### Raw JSON (works in any MCP client)\n\n```json\n{\n  \"mcpServers\": {\n    \"screenshot-website-fast\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@just-every/mcp-screenshot-website-fast\"]\n    }\n  }\n}\n```\n\nDrop this into your client's mcp.json (e.g. .vscode/mcp.json, ~/.cursor/mcp.json, or .mcp.json for Claude).\n\n## Prerequisites\n\n- Node.js 20.x or higher\n- npm or npx\n- Chrome/Chromium (automatically downloaded by Puppeteer)\n\n## Quick Start\n\n### MCP Server Usage\n\nOnce installed in your IDE, the following tools are available:\n\n#### Available Tools\n\n- `screenshot_website_fast` - Captures a high-quality screenshot of a webpage\n  - Parameters:\n    - `url` (required): The HTTP/HTTPS URL to capture\n    - `width` (optional): Viewport width in pixels (max 1072, default: 1072)\n    - `height` (optional): Viewport height in pixels (max 1072, default: 1072)\n    - `fullPage` (optional): Capture full page screenshot (default: true)\n    - `waitUntil` (optional): Wait until event: load, domcontentloaded, networkidle0, networkidle2 (default: networkidle2)\n    - `waitFor` (optional): Additional wait time in milliseconds\n\n## Development Usage\n\n### Install\n\n```bash\nnpm install\nnpm run build\n```\n\n### Capture screenshot\n```bash\n# Full page with automatic tiling (default)\nnpm run dev capture https://example.com -o screenshot.png\n\n# Viewport-only screenshot  \nnpm run dev capture https://example.com --no-full-page -o screenshot.png\n\n# Wait for specific conditions\nnpm run dev capture https://example.com --wait-until networkidle0 --wait-for 2000 -o screenshot.png\n```\n\n### CLI Options\n\n- `-w, --width <pixels>` - Viewport width (max 1072, default: 1072)\n- `-h, --height <pixels>` - Viewport height (max 1072, default: 1072)\n- `--no-full-page` - Disable full page capture and tiling\n- `--wait-until <event>` - Wait until event: load, domcontentloaded, networkidle0, networkidle2\n- `--wait-for <ms>` - Additional wait time in milliseconds\n- `-o, --output <path>` - Output file path (required for tiled output)\n\n## Architecture\n\n```\nmcp-screenshot-website-fast/\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îú‚îÄ‚îÄ internal/       # Core screenshot capture logic\n‚îÇ   ‚îú‚îÄ‚îÄ utils/          # Logger and utilities\n‚îÇ   ‚îú‚îÄ‚îÄ index.ts        # CLI entry point\n‚îÇ   ‚îî‚îÄ‚îÄ serve.ts        # MCP server entry point\n```\n\n## Development\n\n```bash\n# Run in development mode\nnpm run dev capture https://example.com -o screenshot.png\n\n# Build for production\nnpm run build\n\n# Run tests\nnpm test\n\n# Type checking\nnpm run typecheck\n\n# Linting\nnpm run lint\n```\n\n## Why This Tool?\n\nBuilt specifically for AI vision workflows:\n\n1. **Optimized for Claude Vision API** - Automatic resolution limiting to 1072x1072 pixels (1.15 megapixels)\n2. **Automatic tiling** - Full pages split into perfect chunks for AI processing\n3. **Always fresh** - No caching ensures you get the latest content\n4. **MCP native** - First-class integration with AI development tools\n5. **Simple API** - Clean, straightforward interface for capturing screenshots\n\n## Contributing\n\nContributions are welcome! Please:\n\n1. Fork the repository\n2. Create a feature branch\n3. Add tests for new functionality\n4. Submit a pull request\n\n## Troubleshooting\n\n### Puppeteer Issues\n- Ensure Chrome/Chromium can be downloaded\n- Check firewall settings\n- Try setting `PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true` and provide custom executable\n\n### Screenshot Quality\n- Adjust viewport dimensions\n- Use appropriate wait strategies\n- Check if site requires authentication\n\n### Timeout Errors\n- Increase wait time with `--wait-for` flag\n- Use different `--wait-until` strategies\n- Check if site is accessible\n\n## License\n\nMIT"
}