{
  "mcp_name": "ai-wes/version_checker_mcp",
  "mcp_description": "A specialized MCP server that aids developers in managing React Native and Expo projects by analyzing dependencies, checking compatibility, and reviewing changelogs.",
  "mcp_id": "ai-wes_version_checker_mcp",
  "fetch_timestamp": "2025-06-23T00:18:49.663348Z",
  "github_url": "https://github.com/ai-wes/version_checker_mcp",
  "repository": {
    "name": "version_checker_mcp",
    "full_name": "ai-wes/version_checker_mcp",
    "description": null,
    "html_url": "https://github.com/ai-wes/version_checker_mcp",
    "created_at": "2025-04-22T22:20:57Z",
    "updated_at": "2025-04-22T23:02:40Z",
    "pushed_at": "2025-04-22T23:02:37Z",
    "size": 153,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "ai-wes",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/132653112?v=4",
      "html_url": "https://github.com/ai-wes"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 28678
    },
    "language_percentages": {
      "TypeScript": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# React Native / Expo Helper MCP Server\n\n[![MCP Compatible](https://img.shields.io/badge/MCP-Compatible-brightgreen)](https://modelcontextprotocol.io)\n\nThis project implements a [Model Context Protocol (MCP)](https://modelcontextprotocol.io) server designed to assist developers working with React Native and Expo projects. It provides tools, resources, and prompts to help analyze dependencies, check compatibility, and review changelogs.\n\n## Overview\n\nThe server acts as a knowledgeable assistant for the React Native/Expo ecosystem. When connected to an MCP-compatible client (like Cursor, Genkit, Continue, etc.), it allows an LLM to:\n\n*   Fetch detailed information about NPM packages.\n*   Retrieve known compatibility information for specific Expo SDK versions.\n*   Access files within the local project directory (requires `stdio` transport and careful security considerations).\n*   Fetch and analyze GitHub release notes for specified version ranges.\n*   Check for potential breaking changes or deprecations based on keywords in release notes.\n*   Perform project health checks by analyzing `package.json` and dependencies.\n\n## Features\n\nThe server exposes the following MCP capabilities:\n\n### Resources\n\n*   **`npm-package-info`** (`package://npm/{packageName}/version/{version?}`)\n    *   Fetches details (version, description, repo URL, NPM URL) for an NPM package from the registry. Optionally fetches a specific version.\n*   **`github-changelog`** (`changelog://github/{owner}/{repo}`)\n    *   Fetches recent release notes (up to 15) from the GitHub Releases page for the specified repository. Requires GitHub API access.\n*   **`expo-sdk-compatibility`** (`compatibility://expo/sdk/{sdkVersion}`)\n    *   Retrieves known compatible versions (React Native, React) for a given Expo SDK version based on an internal map (requires updates for new SDKs).\n*   **`project-file`** (`project://{filePath}`)\n    *   Reads the content of a file within the project directory where the server is running.\n    *   **Security Warning:** This resource grants file system access. Use only with trusted MCP clients and preferably via the `stdio` transport for local execution. Path validation is in place to prevent access outside the project root.\n\n### Tools\n\n*   **`checkProjectCompatibility`**\n    *   **Arguments:** `packageJsonContent: string`, `lockfileContent?: string`, `expoSdkVersion?: string`\n    *   Analyzes the provided `package.json` (and optionally lockfile) content against the known Expo SDK compatibility data. Reports potential mismatches.\n*   **`findUpgradeChangelog`**\n    *   **Arguments:** `packageName: string`, `fromVersion: string`, `toVersion: string`\n    *   Fetches GitHub release notes for the specified package between the `fromVersion` (exclusive) and `toVersion` (inclusive).\n*   **`checkBreakingChanges`**\n    *   **Arguments:** `packageName: string`, `fromVersion: string`, `toVersion: string`\n    *   Fetches GitHub release notes for the specified package between versions and scans them for keywords like \"breaking change\", \"deprecated\", \"migration\", etc., reporting relevant snippets.\n\n### Prompts\n\n*   **`assistUpgrade`**\n    *   **Arguments:** `packageName: string`, `currentVersion: string`, `targetVersion: string`\n    *   Generates a plan for an LLM to use the available tools and resources to guide a user through upgrading the specified package.\n*   **`checkProjectHealth`**\n    *   **Arguments:** `packageJsonPath?: string`, `lockfilePath?: string`\n    *   Generates a plan for an LLM to analyze the project's dependency health by reading project files, checking compatibility, and identifying outdated major dependencies.\n\n## Installation\n\n1.  **Clone the repository (if applicable) or ensure you have the project files.**\n2.  **Install Node.js and npm:** Ensure you have a recent version of Node.js (v18 or later recommended) and npm installed.\n3.  **Install Dependencies:** Open a terminal in the project root directory and run:\n    ```bash\n    npm install\n    ```\n\n## Configuration\n\n### GitHub API Token (Recommended)\n\nThe server uses the GitHub API to fetch release notes for the `github-changelog` resource and the `findUpgradeChangelog`/`checkBreakingChanges` tools. Unauthenticated requests are heavily rate-limited.\n\nTo avoid rate limiting, create a [GitHub Personal Access Token (PAT)](https://github.com/settings/tokens) with **no scopes** (public repository access is sufficient for reading releases).\n\nProvide this token to the server via the `GITHUB_TOKEN` environment variable. The recommended way to do this is through your MCP client's configuration file.\n\n**Example MCP Configuration (`.mcp/config.json` or similar):**\n\n```json\n{\n  \"mcpServers\": {\n    \"react-native-expo-helper\": {\n      // Assumes the server is built and run from the project root\n      \"command\": \"node\",\n      \"args\": [\"dist/version_checker_server.js\"],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"YOUR_GITHUB_PERSONAL_ACCESS_TOKEN\"\n        // Add other environment variables if needed\n      }\n    }\n  }\n}\n```\n\nReplace `\"YOUR_GITHUB_PERSONAL_ACCESS_TOKEN\"` with your actual token.\n\n### Expo Compatibility Map\n\nThe `expo-sdk-compatibility` resource relies on a hardcoded map (`expoCompatMap`) within `src/version_checker_server.ts`. This map needs to be manually updated as new Expo SDKs are released to remain accurate.\n\n```typescript\n// src/version_checker_server.ts\nconst expoCompatMap: Record<string, Record<string, string>> = {\n  \"49.0.0\": { \"react-native\": \"0.72.6\", \"react\": \"18.2.0\" },\n  \"50.0.0\": { \"react-native\": \"0.73.4\", \"react\": \"18.2.0\" },\n  \"51.0.0\": { \"react-native\": \"0.74.1\", \"react\": \"18.2.0\" },\n  \"52.0.0\": { \"react-native\": \"0.77.0\", \"react\": \"18.2.0\" },\n  \"53.0.0\": { \"react-native\": \"0.79.0\", \"react\": \"19.0.0\" },\n  // Add more SDK versions and their dependencies here\n};\n```\n\nFeel free to update this map and rebuild the server if needed.\n\n## Building and Running\n\n1.  **Build the Server:** Compile the TypeScript code to JavaScript:\n    ```bash\n    npm run build\n    ```\n    This creates the compiled output in the `dist` directory.\n\n2.  **Run the Server:**\n    *   **Directly (for testing):**\n        ```bash\n        npm start\n        ```\n        The server will start and listen for MCP requests on standard input/output. Press `Ctrl+C` to stop.\n    *   **Via an MCP Client:** Configure your MCP client (e.g., Cursor, Continue) to run the server using the command `node dist/version_checker_server.js` and provide the `GITHUB_TOKEN` via the `env` configuration as shown in the [Configuration](#configuration) section. The client will manage the server process lifecycle.\n\n## Usage with MCP Clients\n\nOnce configured in your MCP client, you can interact with the server through the client's chat or command interface.\n\n**Example Interactions (Conceptual):**\n\n*   `@ReactNativeExpoHelper check project health` (Invokes the `checkProjectHealth` prompt)\n*   `@ReactNativeExpoHelper assist upgrade expo from 50.0.0 to latest` (Invokes the `assistUpgrade` prompt)\n*   (Client might automatically use resources/tools based on context or prompts)\n    *   Client asking for `package://npm/react-native` resource.\n    *   Client using `findUpgradeChangelog` tool as part of the upgrade prompt execution.\n\nRefer to your specific MCP client's documentation for details on how to interact with configured MCP servers.\n\n## Limitations\n\n*   **GitHub API Rate Limiting:** Without a `GITHUB_TOKEN`, you will likely hit rate limits quickly when using changelog features.\n*   **Changelog Accuracy:** Changelog analysis relies on projects using GitHub Releases with standard semver tags. It may fail or be incomplete for projects with different release processes or non-standard tags. Keyword scanning for breaking changes is heuristic and not guaranteed to be exhaustive.\n*   **Compatibility Data:** The Expo SDK compatibility data is based on a hardcoded map and requires manual updates for accuracy with new SDK releases. Always cross-reference with official Expo documentation.\n*   **`project-file` Security:** The `project-file` resource allows reading local files. This is a potential security risk if the server is exposed or run in an untrusted environment. It's designed primarily for local `stdio` usage.\n\n## Contributing\n\nContributions are welcome! Please feel free to open issues or submit pull requests. "
}