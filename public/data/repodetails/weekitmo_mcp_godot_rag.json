{
  "mcp_name": "weekitmo/mcp_godot_rag",
  "mcp_description": "Facilitates access to Godot documentation for the Godot RAG model through an MCP server.",
  "mcp_id": "weekitmo_mcp_godot_rag",
  "fetch_timestamp": "2025-06-23T09:24:34.248441Z",
  "github_url": "https://github.com/weekitmo/mcp_godot_rag",
  "repository": {
    "name": "mcp_godot_rag",
    "full_name": "weekitmo/mcp_godot_rag",
    "description": "This MCP server is used to provide Godot documentation to the Godot RAG model.",
    "html_url": "https://github.com/weekitmo/mcp_godot_rag",
    "created_at": "2025-04-07T06:58:15Z",
    "updated_at": "2025-06-17T05:44:57Z",
    "pushed_at": "2025-06-17T05:44:53Z",
    "size": 371,
    "stargazers_count": 12,
    "watchers_count": 12,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "weekitmo",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/21186859?v=4",
      "html_url": "https://github.com/weekitmo"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 41768
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# A MCP server for Godot RAG\n\nThis MCP server is used to provide Godot documentation to the Godot RAG model.\n\n# Screenshot\n\n## Before using\n\n![before](screenshots/before.png)\n\n## After using\n\n![after](screenshots/after.png)\n\n# MCP server config\n\n```json\n{\n  \"mcpServers\": {\n    \"godot-rag\": {\n      \"command\": \"python\",\n      \"args\": [\n        \"<path to the server script 'main.py'>\",\n        \"-d\",\n        \"<path to the chroma_db on your computer>\",\n        \"-c\",\n        \"<name of the collection in the chroma_db>\"\n      ]\n    }\n  }\n}\n```\n\n# Setup\n\n```bash\nuv venv --python 3.12\nsource ./.venv/bin/activate\nuv sync\ncp .env.example .env.local\n```\n\n# Initiation steps\n\n```bash\n# clone godot docs\npython download_godot_docs.py\n# convert rst to markdown\npython convert_rst2md.py\n# chunk markdown files\npython chunker.py -i artifacts\n# create vector database\npython vectorizer.py -i artifacts/chunks/artifacts_chunks_SZ_400_O_20.jsonl\n# python vectorizer_api.py -i artifacts/chunks/artifacts_chunks_SZ_400_O_20.jsonl -m BAAI/bge-m3\n# start mcp server\npython main.py -d artifacts/vector_stores/chroma_db -c artifacts_chunks_SZ_400_O_20_all-MiniLM-L6-v2\n# python main_with_api.py -d artifacts/vector_stores/chroma_db -c artifacts_chunks_SZ_400_O_20_BAAI-bge-m3 -k <your openai api key>\n```\n\n# Debug\n\n```bash\nnpx @modelcontextprotocol/inspector \\\n  uv \\\n  --directory . \\\n  run \\\n  main.py \\\n  --chromadb-path artifacts/vector_stores/chroma_db \\\n  --collection-name artifacts_chunks_SZ_400_O_20_all-MiniLM-L6-v2\n```\n\n# Use Another Model\n\n- [all-MiniLM-L6-v2](https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2)\n\n- [bge-m3](https://huggingface.co/BAAI/bge-m3)\n\n- [bge-large-zh-v1.5](https://huggingface.co/BAAI/bge-large-zh-v1.5)\n\n\n# Other\n\nmcp_godot_rag is indexed and certified by [MCP Review](https://mcpreview.com/mcp-servers/weekitmo/mcp_godot_rag)"
}