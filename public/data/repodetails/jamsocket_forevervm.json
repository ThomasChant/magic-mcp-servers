{
  "mcp_name": "ForeverVM",
  "mcp_description": "Run Python in a code sandbox.",
  "mcp_id": "jamsocket_forevervm",
  "fetch_timestamp": "2025-06-23T03:34:08.179182Z",
  "github_url": "https://github.com/jamsocket/forevervm/tree/main/javascript/mcp-server",
  "repository": {
    "name": "forevervm",
    "full_name": "jamsocket/forevervm",
    "description": "Securely run AI-generated code in stateful sandboxes that run forever.",
    "html_url": "https://github.com/jamsocket/forevervm",
    "created_at": "2025-01-18T14:15:35Z",
    "updated_at": "2025-06-23T01:01:39Z",
    "pushed_at": "2025-04-17T07:01:29Z",
    "size": 690,
    "stargazers_count": 202,
    "watchers_count": 202,
    "forks_count": 14,
    "open_issues_count": 2,
    "language": "Rust",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "jamsocket",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/82763442?v=4",
      "html_url": "https://github.com/jamsocket"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 14,
    "subscribers_count": 5,
    "languages": {
      "Rust": 54274,
      "TypeScript": 43695,
      "Python": 17809,
      "JavaScript": 10754
    },
    "language_percentages": {
      "Rust": 42.89,
      "TypeScript": 34.53,
      "Python": 14.07,
      "JavaScript": 8.5
    },
    "pull_requests_count": 137,
    "contributors_count": 6,
    "latest_release": {
      "tag_name": "v0.1.35",
      "name": "v0.1.35",
      "published_at": "2025-04-04T14:55:18Z",
      "body": "## What's Changed\r\n* Misc MCP improvements by @paulgb in https://github.com/jamsocket/forevervm/pull/134\r\n* Add memory limit functionality to Python SDK by @paulgb in https://github.com/jamsocket/forevervm/pull/135\r\n* Add JavaScript memory limits by @paulgb in https://github.com/jamsocket/forevervm/pull/136\r\n* Set permissions on config file by @paulgb in https://github.com/jamsocket/forevervm/pull/137\r\n* v0.1.35 version bump by @paulgb in https://github.com/jamsocket/forevervm/pull/138\r\n\r\n\r\n**Full Changelog**: https://github.com/jamsocket/forevervm/compare/v0.1.32...v0.1.35",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.1.35",
        "commit_sha": "0f1d3c54dce4e937c94c532beb80b7ede9a9c00b"
      },
      {
        "name": "v0.1.32",
        "commit_sha": "41e5b01f8e39316489de0a7570531c6b35ee558e"
      },
      {
        "name": "v0.1.31",
        "commit_sha": "74a1652fe9bf21e06350fae354aa2ecdbc2a3035"
      },
      {
        "name": "v0.1.30",
        "commit_sha": "ca4b2e47b072b9341d5a5157f0f7cc889efecbe3"
      },
      {
        "name": "v0.1.29",
        "commit_sha": "1f9147a61e31cfb040d731b4923e97aa46825bcb"
      },
      {
        "name": "v0.1.28",
        "commit_sha": "b91dfb59cb0b8db8349d77c8468aa5f533316128"
      },
      {
        "name": "v0.1.27",
        "commit_sha": "bed9ca34588cadf16590648797bfc247b85b73e9"
      },
      {
        "name": "v0.1.26",
        "commit_sha": "fe73972a258a3e6b7183ff7e2204eff1e1f32f4c"
      },
      {
        "name": "v0.1.25",
        "commit_sha": "65da6ca0971529b321b7019231be7b58220f02a4"
      },
      {
        "name": "v0.1.24",
        "commit_sha": "50c4bed873d0e41fc959a978bb1826e057bf05f4"
      }
    ],
    "latest_version": "v0.1.35"
  },
  "readme": "[foreverVM](https://forevervm.com)\n==================================\n\n[![GitHub Repo stars](https://img.shields.io/github/stars/jamsocket/forevervm?style=social)](https://github.com/jamsocket/forevervm)\n[![Chat on Discord](https://img.shields.io/discord/939641163265232947?color=404eed&label=discord)](https://discord.gg/N5sEpsuhh9)\n\n| repo                                                | version                     |\n|-----------------------------------------------------|------------------------------|\n| [cli](https://github.com/jamsocket/forevervm) | [![npm](https://img.shields.io/npm/v/forevervm)](https://www.npmjs.com/package/forevervm) |\n| [sdk](https://github.com/jamsocket/forevervm) | [![npm](https://img.shields.io/npm/v/@forevervm/sdk)](https://www.npmjs.com/package/@forevervm/sdk) |\n\nforeverVM provides an API for running arbitrary, stateful Python code securely.\n\nThe core concepts in foreverVM are **machines** and **instructions**.\n\n**Machines** represent a stateful Python process. You interact with a machine by running **instructions**\n(Python statements and expressions) on it, and receiving the results. A machine processes one instruction\nat a time.\n\nGetting started\n---------------\n\nYou will need an API token (if you need one, reach out to [paul@jamsocket.com](mailto:paul@jamsocket.com)).\n\nThe easiest way to try out foreverVM is using the CLI. First, you will need to log in:\n\n```bash\nnpx forevervm login\n```\n\nOnce logged in, you can open a REPL interface with a new machine:\n\n```bash\nnpx forevervm repl\n```\n\nWhen foreverVM starts your machine, it gives it an ID that you can later use to reconnect to it. You can reconnect to a machine like this:\n\n```bash\nnpx forevervm repl [machine_name]\n```\n\nYou can list your machines (in reverse order of creation) like this:\n\n```bash\nnpx forevervm machine list\n```\n\nYou don't need to terminate machines -- foreverVM will automatically swap them from memory to disk when they are idle, and then\nautomatically swap them back when needed. This is what allows foreverVM to run repls “forever”.\n\nUsing the API\n-------------\n\n```typescript\nimport { ForeverVM } from '@forevervm/sdk'\n\nconst token = process.env.FOREVERVM_TOKEN\nif (!token) {\n  throw new Error('FOREVERVM_TOKEN is not set')\n}\n\n// Initialize foreverVM\nconst fvm = new ForeverVM({ token })\n\n// Connect to a new machine.\nconst repl = fvm.repl()\n\n// Execute some code\nlet execResult = repl.exec('4 + 4')\n\n// Get the result\nconsole.log('result:', await execResult.result)\n\n// We can also print stdout and stderr\nexecResult = repl.exec('for i in range(10):\\n  print(i)')\n\nfor await (const output of execResult.output) {\n  console.log(output.stream, output.data)\n}\n\nprocess.exit(0)\n```\n\nWorking with Tags\n----------------\n\nYou can create machines with tags and filter machines by tags:\n\n```typescript\nimport { ForeverVM } from '@forevervm/sdk'\n\nconst fvm = new ForeverVM({ token: process.env.FOREVERVM_TOKEN })\n\n// Create a machine with tags\nconst machineResponse = await fvm.createMachine({\n  tags: { \n    env: 'production', \n    owner: 'user123',\n    project: 'demo'\n  }\n})\n\n// List machines filtered by tags\nconst productionMachines = await fvm.listMachines({\n  tags: { env: 'production' }\n})\n```\n\nMemory Limits\n----------------\n\nYou can create machines with memory limits by specifying the memory size in megabytes:\n\n```typescript\n// Create a machine with 512MB memory limit\nconst machineResponse = await fvm.createMachine({\n  memory_mb: 512,\n})\n```\n"
}