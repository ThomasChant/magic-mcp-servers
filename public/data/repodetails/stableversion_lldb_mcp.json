{
  "mcp_name": "stableversion/lldb_mcp",
  "mcp_description": "A streamlined LLDB MCP server with minimal dependencies, designed for efficient command execution and output capture.",
  "mcp_id": "stableversion_lldb_mcp",
  "fetch_timestamp": "2025-06-23T08:36:50.651045Z",
  "github_url": "https://github.com/stableversion/lldb_mcp",
  "repository": {
    "name": "lldb_mcp",
    "full_name": "stableversion/lldb_mcp",
    "description": "A proper, clean LLDB MCP server with minimal dependencies and all functionality!",
    "html_url": "https://github.com/stableversion/lldb_mcp",
    "created_at": "2025-04-24T09:00:29Z",
    "updated_at": "2025-05-18T12:48:16Z",
    "pushed_at": "2025-05-18T12:48:13Z",
    "size": 8,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [
      "cursor",
      "lldb",
      "mcp",
      "reverse-engineering"
    ],
    "default_branch": "master",
    "owner": {
      "login": "stableversion",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/80986363?v=4",
      "html_url": "https://github.com/stableversion"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 6458
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "## lldb_mcp\n\nA proper, simple lldb mcp server with minimal dependencies and all functionality! There are only two commands ```lldb_init``` and ```lldb```, no need to clutter your tools. Works remarkably well with o4-mini and Gemini 2.5 Pro. You remain fully in control.\n\nThe output is automagically captured, no need to copy paste.\n\n## Setup\n```bash\ngit clone https://github.com/stableversion/lldb_mcp\n```\n```bash\ncd lldb_mcp && python3 -m venv venv && source venv/bin/activate && pip3 install fastmcp\n```\n```json\n{\n  \"mcpServers\": {\n    \"lldb\": {\n      \"command\": \"/path/to/ldb_mcp/venv/bin/python\",\n      \"args\": [\"/path/to/ldb_mcp/lldb_mcp.py\"]\n    }\n  }\n}\n```\n```\n(lldb) command script import /path/to/lldb_mcp/lldb_server.py\n```\n\n## Architecture\nThe entire codebase is less than 200 lines of code, because:\n\n- **Synchronous LLDB:** Calling debugger.SetAsync(False) makes HandleCommand block and capture all output directly. This avoids complex event listeners (SBListener) and polling.\n- **Simple Controller:** The LLDBController just runs commands via HandleCommand and returns the full output/error it receives.\n- **Standard Libraries:** Uses Python's built-in socketserver and json\n\n## Safety\nlldb can execute ANY arbitrary commands, it should be prevented\n- You have to start the server in a lldb session manually\n- Some commands are blacklisted, check lldb_server.py\n- Chaining of commands is not allowed (o4-mini really likes to)\n\n## Notes\n- o4 mini has a tendency to hallucinate --address in memory commands.\n- Some commands \"succeeded\" without output, this is confusing for llms, so it returns \"Executed successfully\" instead.\n- \"Continue\" can run indefinitely until it hits a breakpoint, meaning the mcp can wait forever for output (skip and continue is your friend)\n"
}