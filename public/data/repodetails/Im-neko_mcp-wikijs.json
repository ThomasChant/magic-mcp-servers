{
  "mcp_name": "Im-neko/mcp-wikijs",
  "mcp_description": "Facilitates AI model interaction with WikiJS content through a TypeScript-based MCP server, enabling document search, creation, and management.",
  "mcp_id": "Im-neko_mcp-wikijs",
  "fetch_timestamp": "2025-06-23T04:57:14.017746Z",
  "github_url": "https://github.com/Im-neko/mcp-wikijs",
  "repository": {
    "name": "mcp-wikijs",
    "full_name": "Im-neko/mcp-wikijs",
    "description": null,
    "html_url": "https://github.com/Im-neko/mcp-wikijs",
    "created_at": "2025-04-25T15:06:28Z",
    "updated_at": "2025-06-04T10:16:09Z",
    "pushed_at": "2025-04-26T15:14:49Z",
    "size": 143,
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "Im-neko",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/29516245?v=4",
      "html_url": "https://github.com/Im-neko"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 94119,
      "JavaScript": 85
    },
    "language_percentages": {
      "TypeScript": 99.91,
      "JavaScript": 0.09
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "0.1.0"
  },
  "readme": "# MCP WikiJS\n\nAn MCP (Model Context Protocol) server for [WikiJS](https://js.wiki/) that allows AI models to interact with wiki content.\n\n## Features\n\n- Full implementation of the [Model Context Protocol](https://modelcontextprotocol.io/llms-full.txt) server specification\n- Built with TypeScript for type safety and modern JavaScript features\n- Simple to use - can be started with a single npx command\n- Provides AI models with access to WikiJS content through MCP tools:\n  - Search documents\n  - Read document content\n  - Create new documents\n  - Update existing documents\n  - Delete documents\n- Docker-ready for easy development setup\n\n## Installation\n\n### build\n\n```bash\ncd mcp-wikijs\nnpm run build\n```\n\n### add mcp server \n\n#### for claude \n\n```json\n{\n  \"mcpServers\": {\n    \"wikijs\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/mcp-wikijs/dist/index.js\"],\n      \"env\": {\n        \"WIKIJS_URL\": \"https://example.com\",\n        \"WIKIJS_TOKEN\": \"YOUR_API_TOKEN\"\n      }\n    }\n  }\n}\n```\n\n## Docker Development Environment\n\nFor development purposes, this project includes a Docker Compose setup that starts:\n\n- A PostgreSQL database\n- A WikiJS instance\n- The MCP-WikiJS server with hot-reload\n\nTo start the development environment:\n\n```bash\ndocker-compose up\n```\n\nFor detailed instructions, see the [Docker guide](./DOCKER.md).\n\n## Available Tools\n\n- **search** - Search for wiki pages by query\n- **read** - Read a wiki page by ID or path\n- **create** - Create a new wiki page\n- **update** - Update an existing wiki page\n- **delete** - Delete a wiki page by ID\n\n## Examples\n\nSee the [examples directory](./examples) for detailed usage examples, including:\n\n- Integrating with chat applications\n- Document search and retrieval\n- Content creation and management\n\n## Configuration\n\n### WikiJS Configuration\n\n- `WIKIJS_URL`: URL of your WikiJS instance\n- `WIKIJS_TOKEN`: API token for authentication with WikiJS\n\n### MCP Server Configuration\n\n- `MCP_PORT`: Port for the MCP server (default: 8080)\n- `MCP_HOST`: Host for the MCP server (default: 0.0.0.0)\n- `LOG_LEVEL`: Logging level (debug, info, warn, error)\n\n## Development\n\n### Standard Development\n\n```bash\n# Clone the repository\ngit clone https://github.com/im-neko/mcp-wikijs.git\ncd mcp-wikijs\n\n# Install dependencies\nnpm install\n\n# Build\nnpm run build\n\n# Debug\nnpx @modelcontextprotocol/inspector node dist/index.js \n```\n\n### Docker Development\n\nSee the [Docker guide](./DOCKER.md) for instructions on setting up a complete development environment with Docker.\n\n## Project Documentation\n\n- [Architecture Document](./architecture.md) - Detailed design of the system\n- [Implementation Plan](./implementation-plan.md) - Development phases and schedule\n- [Docker Guide](./DOCKER.md) - Development with Docker\n\n## Architecture\n\nThis project follows a modular architecture with clear separation of concerns:\n\n- **Configuration management**: Environment variables and settings\n- **WikiJS client**: Handles communication with WikiJS GraphQL API\n- **MCP server**: Implements the Model Context Protocol\n- **Tools**: Implements specific operations (search, read, update, etc.)\n\n## License\n\nMIT"
}