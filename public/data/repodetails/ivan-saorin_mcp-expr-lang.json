{
  "mcp_name": "MCP Expr Lang",
  "mcp_description": "MCP Expr-Lang provides a seamless integration between Claude AI and the powerful expr-lang expression evaluation engine.",
  "mcp_id": "ivan-saorin_mcp-expr-lang",
  "fetch_timestamp": "2025-06-23T06:31:08.118205Z",
  "github_url": "https://github.com/ivan-saorin/mcp-expr-lang",
  "repository": {
    "name": "mcp-expr-lang",
    "full_name": "ivan-saorin/mcp-expr-lang",
    "description": "MCP Server around https://expr-lang.org",
    "html_url": "https://github.com/ivan-saorin/mcp-expr-lang",
    "created_at": "2025-05-01T14:56:00Z",
    "updated_at": "2025-05-03T18:09:39Z",
    "pushed_at": "2025-05-01T23:02:10Z",
    "size": 18,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Go",
    "license": "MIT License",
    "topics": [],
    "default_branch": "master",
    "owner": {
      "login": "ivan-saorin",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/1847361?v=4",
      "html_url": "https://github.com/ivan-saorin"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": true,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Go": 3247,
      "Dockerfile": 738
    },
    "language_percentages": {
      "Go": 81.48,
      "Dockerfile": 18.52
    },
    "pull_requests_count": 1,
    "contributors_count": 2
  },
  "readme": "# MCP Expr-Lang\r\n\r\n[![smithery badge](https://smithery.ai/badge/@ivan-saorin/mcp-expr-lang)](https://smithery.ai/server/@ivan-saorin/mcp-expr-lang)\r\n\r\nA powerful expression evaluation tool for Claude Desktop using the Model Context Protocol (MCP).\r\n\r\n## Overview\r\n\r\nMCP Expr-Lang provides a seamless integration between Claude AI and the powerful [expr-lang](https://expr-lang.org/) expression evaluation engine. This tool allows you to perform complex data manipulations, calculations, and transformations directly within your Claude conversations.\r\n\r\nWith MCP Expr-Lang, you can:\r\n\r\n- Evaluate mathematical expressions\r\n- Transform and filter arrays and objects\r\n- Sort complex data structures\r\n- Perform string manipulations\r\n- Use conditional logic\r\n- And much more!\r\n\r\n## Installation\r\n\r\n### Installing via Smithery\r\n\r\nTo install MCP Expr-Lang for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@ivan-saorin/mcp-expr-lang):\r\n\r\n```bash\r\nnpx -y @smithery/cli install @ivan-saorin/mcp-expr-lang --client claude\r\n```\r\n\r\n### Prerequisites\r\n\r\n- Go 1.18 or higher\r\n- Claude Desktop application\r\n- Git\r\n\r\n### Step 1: Clone the Repository\r\n\r\n```bash\r\ngit clone https://github.com/ivan-saorin/mcp-expr-lang.git\r\ncd mcp-expr-lang\r\n```\r\n\r\n### Step 2: Install Dependencies\r\n\r\n```bash\r\ngo mod download\r\n```\r\n\r\n### Step 3: Build the Application\r\n\r\n#### For Windows\r\n\r\n```bash\r\ngo build -o bin/server.exe\r\n```\r\n\r\n#### For macOS/Linux\r\n\r\n```bash\r\ngo build -o bin/server\r\nchmod +x bin/server\r\n```\r\n\r\n### Step 4: Configure Claude Desktop\r\n\r\n1. Open Claude Desktop\r\n2. Go to Settings\r\n3. Navigate to the \"Advanced\" section\r\n4. Add the following configuration to your `config.json`:\r\n\r\n#### For Windows\r\n\r\n```json\r\n{\r\n  \"mcpServers\": {\r\n    \"eval\": {\r\n      \"command\": \"C:\\\\path\\\\to\\\\mcp-expr-lang\\\\bin\\\\server.exe\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### For macOS/Linux\r\n\r\n```json\r\n{\r\n  \"mcpServers\": {\r\n    \"eval\": {\r\n      \"command\": \"/path/to/mcp-expr-lang/bin/server\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n5. Save the configuration and restart Claude Desktop\r\n\r\n## Usage\r\n\r\nOnce installed, you can use the `eval` tool directly in your conversations with Claude. Simply ask Claude to evaluate an expression using the tool.\r\n\r\n### Basic Example\r\n\r\n```\r\nUser: Use eval to calculate \"10 + 5 * 3\"\r\n\r\nClaude: [Uses eval tool]\r\nResult: 10 + 5 * 3 = 25\r\n```\r\n\r\n### Complex Example\r\n\r\n```\r\nUser: We have users = [{\"Name\": \"John\", \"Age\": 30},{\"Name\": \"Ivan\", \"Age\": 51},{\"Name\": \"Eve\", \"Age\": 15}]\r\nUse eval to calculate \"sortBy(users, .Age, \"desc\")\"\r\n\r\nClaude: [Uses eval tool]\r\nResult: The expression returns the users sorted by age in descending order:\r\n[\r\n  {\"Age\": 51, \"Name\": \"Ivan\"},\r\n  {\"Age\": 30, \"Name\": \"John\"},\r\n  {\"Age\": 15, \"Name\": \"Eve\"}\r\n]\r\n```\r\n\r\nFor more examples please see [EXAMPLES](./EXAMPLES.md)\r\n\r\n## Features\r\n\r\nMCP Expr-Lang supports all features of the expr-lang engine, including:\r\n\r\n- **Arithmetic operations**: Addition, subtraction, multiplication, division, modulo, exponentiation\r\n- **String operations**: Concatenation, length, uppercase/lowercase conversion\r\n- **Boolean operations**: AND, OR, NOT, comparison operators\r\n- **Array operations**: Mapping, filtering, reducing, sorting\r\n- **Object manipulation**: Property access, transformation\r\n- **Conditional logic**: Ternary operators, if-else expressions\r\n- **Built-in functions**: Mathematical, string, array, and date functions\r\n\r\nFor a complete guide to the expression language syntax and capabilities, see the [expr-lang documentation](https://expr-lang.org/docs/language-definition).\r\n\r\n## Troubleshooting\r\n\r\n### Common Issues\r\n\r\n1. **Tool not appearing in Claude**: Make sure the path in your `config.json` is correct and Claude Desktop has been restarted.\r\n\r\n2. **Execution errors**: Check that the expression syntax is correct according to the expr-lang documentation.\r\n\r\n3. **Permission issues (macOS/Linux)**: Ensure the server binary has execution permissions (`chmod +x bin/server`).\r\n\r\n### Getting Help\r\n\r\nIf you encounter any issues or have questions:\r\n\r\n1. Check the [Issues](https://github.com/ivan-saorin/mcp-expr-lang/issues) section on GitHub\r\n2. Open a new issue if your problem hasn't been reported\r\n\r\n## Contributing\r\n\r\nContributions are welcome! If you'd like to improve MCP Expr-Lang:\r\n\r\n1. Fork the repository\r\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\r\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\r\n4. Push to the branch (`git push origin feature/amazing-feature`)\r\n5. Open a Pull Request\r\n\r\n## License\r\n\r\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\r\n\r\n## Acknowledgments\r\n\r\n- [expr-lang](https://github.com/expr-lang/expr) for the powerful expression evaluation engine\r\n- [mcp-golang](https://github.com/metoro-io/mcp-golang) for the Model Context Protocol implementation\r\n- [Claude AI](https://claude.ai/) for the AI assistant platform\r\n\r\n---\r\n\r\nMade with ❤️ by [Ivan Saorin](https://github.com/ivan-saorin)\r\n"
}