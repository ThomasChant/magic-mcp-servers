{
  "mcp_name": "ronantakizawa/gis-dataconvertersion-mcp",
  "mcp_description": "Facilitates geographic data conversion across multiple formats, enabling seamless integration with LLMs for spatial data manipulation.",
  "mcp_id": "ronantakizawa_gis-dataconversion-mcp",
  "fetch_timestamp": "2025-06-23T08:03:14.603621Z",
  "github_url": "https://github.com/ronantakizawa/gis-dataconvertersion-mcp",
  "repository": {
    "name": "gis-dataconversion-mcp",
    "full_name": "ronantakizawa/gis-dataconversion-mcp",
    "description": "An MCP server for converting GIS filetypes (100+ Downloads)",
    "html_url": "https://github.com/ronantakizawa/gis-dataconversion-mcp",
    "created_at": "2025-04-26T20:21:27Z",
    "updated_at": "2025-06-12T06:46:16Z",
    "pushed_at": "2025-04-30T19:37:51Z",
    "size": 152,
    "stargazers_count": 7,
    "watchers_count": 7,
    "forks_count": 2,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "ronantakizawa",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/71115970?v=4",
      "html_url": "https://github.com/ronantakizawa"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 2,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 23310,
      "Dockerfile": 392
    },
    "language_percentages": {
      "JavaScript": 98.35,
      "Dockerfile": 1.65
    },
    "pull_requests_count": 1,
    "contributors_count": 2,
    "package_json_version": "1.0.3"
  },
  "readme": "# GIS Data Conversion MCP\n\n[![smithery badge](https://smithery.ai/badge/@ronantakizawa/gis-dataconvertersion-mcp)](https://smithery.ai/server/@ronantakizawa/gis-dataconvertersion-mcp)\n\n<a href=\"https://glama.ai/mcp/servers/@ronantakizawa/gis-dataconvertersion-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@ronantakizawa/gis-dataconvertersion-mcp/badge\" />\n</a>\n\n![Copy of Untitled Design](https://github.com/user-attachments/assets/c143d9f0-710f-4164-ada9-128563746d66)\n\nThe GIS Data Conversion MCP is an MCP (Model Context Protocol) server that gives LLMs access to geographic data conversion tools.\n\nThis server uses various GIS libraries to allow LLMs to convert between different geographic data formats, coordinate systems, and spatial references.\n\n## Features\n\n- **Reverse Geocoding** - Convert coordinates to location information\n- **WKT/GeoJSON Conversion** - Convert between Well-Known Text and GeoJSON formats\n- **CSV/GeoJSON Conversion** - Transform tabular data with coordinates to GeoJSON and vice versa\n- **TopoJSON/GeoJSON Conversion** - Convert between GeoJSON and TopoJSON (topology-preserving format)\n- **KML/GeoJSON Conversion** - Transform KML files to GeoJSON format\n\n## Demo\n### Reverse Geocoding\nhttps://github.com/user-attachments/assets/e21b10c3-bb67-4322-9742-efa8c7d8b332\n\n### TopoJSON to GeoJSON\nhttps://github.com/user-attachments/assets/a5d56051-8aed-48bb-8de1-820df8d34fe3\n\n## Installation\nTo use this server with Claude Desktop, you need to configure it in the MCP settings:\n\n**For macOS:**\nEdit the file at `'~/Library/Application Support/Claude/claude_desktop_config.json'`\n\n```\n{\n  \"mcpServers\": {\n    \"gis-dataconversion-mcp\": {\n    \"command\": \"npx\",\n    \"args\": [\n      \"-y\",\n      \"a11y-mcp-server\"\n    ]\n   }\n  }\n}\n```\n\n**For Windows:**\nEdit the file at `%APPDATA%\\Claude\\settings\\claude_mcp_settings.json`\n\n**For Linux:**\nEdit the file at `~/.config/Claude/settings/claude_mcp_settings.json`\nReplace `/path/to/axe-mcp-server/build/index.js` with the actual path to your compiled server file.\n\n\n## Available Tools\n\n### wkt_to_geojson\nConverts Well-Known Text (WKT) to GeoJSON format.\n\n### geojson_to_wkt\nConverts GeoJSON to Well-Known Text (WKT) format.\n\n### csv_to_geojson\nConverts CSV with geographic data to GeoJSON.\n\n**Parameters:**\n\n- `csv` (required): CSV string to convert\n- `latfield` (required): Field name for latitude\n- `lonfield` (required): Field name for longitude\n- `delimiter` (optional): CSV delimiter (default is comma)\n\n### geojson_to_csv\nConverts GeoJSON to CSV format.\n\n### geojson_to_topojson\nConverts GeoJSON to TopoJSON format (more compact with shared boundaries).\n\n**Parameters:**\n\n- `geojson` (required): GeoJSON object to convert\n- `objectName` (optional): Name of the TopoJSON object to create (default: \"data\")\n- `quantization` (optional): Quantization parameter for simplification (default: 1e4, 0 to disable)\n\n### topojson_to_geojson\nConverts TopoJSON to GeoJSON format.\n\n**Parameters:**\n\n- `geojson` (required): GeoJSON object to convert\n- `objectName` (optional): Name of the TopoJSON object to create (default: \"data\")\n\n### kml_to_geojson\nConverts KML to GeoJSON format.\n\n### geojson_to_kml\nConverts GeoJSON to KML format.\n\n### coordinates_to_location\nConverts latitude/longitude coordinates to location name using reverse geocoding.\n\n\n## Dependencies\n\n- @modelcontextprotocol/sdk\n- wellknown\n- csv2geojson\n- topojson-client\n- topojson-server\n- @tmcw/togeojson\n- xmldom\n"
}