{
  "mcp_name": "Kagi",
  "mcp_description": "TypeScript-based MCP server that integrates the Kagi Search API",
  "mcp_id": "ac3xx_mcp-servers-kagi",
  "fetch_timestamp": "2025-06-23T05:39:34.195463Z",
  "github_url": "https://github.com/ac3xx/mcp-servers-kagi",
  "repository": {
    "name": "mcp-servers-kagi",
    "full_name": "ac3xx/mcp-servers-kagi",
    "description": "A Model Context Protocol server implementation for Kagi's API",
    "html_url": "https://github.com/ac3xx/mcp-servers-kagi",
    "created_at": "2024-11-27T13:54:32Z",
    "updated_at": "2025-06-03T21:21:07Z",
    "pushed_at": "2024-12-13T12:52:50Z",
    "size": 51,
    "stargazers_count": 33,
    "watchers_count": 33,
    "forks_count": 9,
    "open_issues_count": 5,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [
      "kagi",
      "model-context-protocol"
    ],
    "default_branch": "main",
    "owner": {
      "login": "ac3xx",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/325563?v=4",
      "html_url": "https://github.com/ac3xx"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 9,
    "subscribers_count": 2,
    "languages": {
      "TypeScript": 15443,
      "JavaScript": 3802
    },
    "language_percentages": {
      "TypeScript": 80.24,
      "JavaScript": 19.76
    },
    "pull_requests_count": 5,
    "contributors_count": 2,
    "package_json_version": "0.1.0"
  },
  "readme": "# kagi-server MCP Server\n\n[![smithery badge](https://smithery.ai/badge/kagi-server)](https://smithery.ai/protocol/kagi-server)\nMCP server for Kagi API integration\n\nThis is a TypeScript-based MCP server that integrates the Kagi Search API. It demonstrates core MCP concepts by providing:\n\n- Tools for performing web searches and other operations using Kagi's API (currently in private beta)\n\n## Features\n\n### Implemented Tools\n- `kagi_search` - Perform web searches using Kagi\n  - Takes a query string and optional limit as parameters\n  - Returns search results from Kagi's API\n\n### Planned Tools (Not Yet Implemented)\n- `kagi_summarize` - Generate summaries of web pages or text\n- `kagi_fastgpt` - Get quick responses using Kagi's FastGPT\n- `kagi_enrich` - Fetch enriched news results on specific topics\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Environment Setup\n\nCreate a `.env` file in the root directory with your Kagi API key:\n\n```\nKAGI_API_KEY=your_api_key_here\n```\n\nMake sure to add `.env` to your `.gitignore` file to keep your API key secure.\n\n## Installation\n\n### Installing via Smithery\n\nTo install Kagi Server for Claude Desktop automatically via [Smithery](https://smithery.ai/protocol/kagi-server):\n\n```bash\nnpx @smithery/cli install kagi-server --client claude\n```\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"kagi-server\": {\n      \"command\": \"/path/to/kagi-server/build/index.js\",\n      \"env\": {\n        \"KAGI_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## Usage\n\nOnce the server is running and connected to Claude Desktop, you can use it to perform web searches. For example:\n\n1. Ask Claude: \"Can you search for information about the latest advancements in quantum computing?\"\n2. Claude will use the `kagi_search` tool to fetch results from Kagi's API.\n3. Claude will then summarize or analyze the search results for you.\n\nNote: The planned tools (summarize, fastgpt, enrich) are not yet implemented and cannot be used.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request. Some areas for contribution include:\n\n- Implementing the planned tools (summarize, fastgpt, enrich)\n- Improving error handling and input validation\n- Enhancing documentation and usage examples\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Roadmap\n\n- Implement `kagi_summarize` tool for webpage and text summarization\n- Implement `kagi_fastgpt` tool for quick responses\n- Implement `kagi_enrich` tool for fetching enriched news results\n- Improve error handling and add more robust input validation\n- Add more comprehensive usage examples and documentation\n- Publish the package to npm for easy installation and use with Claude Desktop and npx"
}