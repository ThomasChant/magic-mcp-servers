{
  "mcp_name": "Unstructured",
  "mcp_description": "Set up and interact with your unstructured data processing workflows in [Unstructured Platform](https://unstructured.io)",
  "mcp_id": "Unstructured-IO_UNS-MCP",
  "fetch_timestamp": "2025-06-23T09:12:20.368158Z",
  "github_url": "https://github.com/Unstructured-IO/UNS-MCP",
  "repository": {
    "name": "UNS-MCP",
    "full_name": "Unstructured-IO/UNS-MCP",
    "description": null,
    "html_url": "https://github.com/Unstructured-IO/UNS-MCP",
    "created_at": "2025-03-12T17:57:43Z",
    "updated_at": "2025-06-16T02:52:56Z",
    "pushed_at": "2025-05-26T08:50:24Z",
    "size": 1041,
    "stargazers_count": 30,
    "watchers_count": 30,
    "forks_count": 13,
    "open_issues_count": 1,
    "language": "Jupyter Notebook",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "Unstructured-IO",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/108372208?v=4",
      "html_url": "https://github.com/Unstructured-IO"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 13,
    "subscribers_count": 10,
    "languages": {
      "Jupyter Notebook": 1508146,
      "Python": 164594,
      "Makefile": 546
    },
    "language_percentages": {
      "Jupyter Notebook": 90.13,
      "Python": 9.84,
      "Makefile": 0.03
    },
    "pull_requests_count": 56,
    "contributors_count": 9
  },
  "readme": "# Unstructured API MCP Server\n\nAn MCP server implementation for interacting with the Unstructured API. This server provides tools to list sources and workflows.\n\n## Available Tools\n\n| Tool                                | Description                                                                                                      |\n|-------------------------------------|------------------------------------------------------------------------------------------------------------------|\n| `list_sources`                      | Lists available sources from the Unstructured API.                                                               |\n| `get_source_info`                   | Get detailed information about a specific source connector.                                                      |\n| `create_source_connector`           | Create a source connector.)                                                                                      |\n| `update_source_connector`           | Update an existing source connector by params.                                                                   |\n| `delete_source_connector`           | Delete a source connector by source id.                                                                          |\n| `list_destinations`                 | Lists available destinations from the Unstructured API.                                                          |\n| `get_destination_info`              | Get detailed info about a specific destination connector                                                         |\n| `create_destination_connector`      | Create a destination connector by params.                                                                        |\n| `update_destination_connector`      | Update an existing destination connector by destination id.                                                      |\n| `delete_destination_connector`      | Delete a destination connector by destination id.                                                                |\n| `list_workflows`                    | Lists workflows from the Unstructured API.                                                                       |\n| `get_workflow_info`                 | Get detailed information about a specific workflow.                                                              |\n| `create_workflow`                   | Create a new workflow with source, destination id, etc.                                                          |\n| `run_workflow`                      | Run a specific workflow with workflow id                                                                         |\n| `update_workflow`                   | Update an existing workflow by params.                                                                           |\n| `delete_workflow`                   | Delete a specific workflow by id.                                                                                |\n| `list_jobs`                         | Lists jobs for a specific workflow from the Unstructured API.                                                    |\n| `get_job_info`                      | Get detailed information about a specific job by job id.                                                         |\n| `cancel_job`                        | Delete a specific job by id.                                                                                     |\n| `list_workflows_with_finished_jobs` | Lists all workflows that have any completed job, together with information about source and destination details. |\n\nBelow is a list of connectors the `UNS-MCP` server currently supports, please see the full list of source connectors that Unstructured platform supports [here](https://docs.unstructured.io/api-reference/workflow/sources/overview) and destination list [here](https://docs.unstructured.io/api-reference/workflow/destinations/overview). We are planning on adding more!\n\n| Source       | Destination                    |\n|--------------|--------------------------------|\n| S3           | S3                             |\n| Azure        | Weaviate                       |\n| Google Drive | Pinecone                       |\n| OneDrive     | AstraDB                        |\n| Salesforce   | MongoDB                        |\n| Sharepoint   | Neo4j                          |\n|              | Databricks Volumes             |\n|              | Databricks Volumes Delta Table |\n\n\nTo use the tool that creates/updates/deletes a connector, the credentials for that specific connector must be defined in your .env file. Below is the list of `credentials` for the connectors we support:\n\n| Credential Name                                                         | Description                                                                                                                                                                                                                                                     |\n|-------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `ANTHROPIC_API_KEY`                                                     | required to run the `minimal_client` to interact with our server.                                                                                                                                                                                               |\n| `AWS_KEY`, `AWS_SECRET`                                                 | required to create S3 connector via `uns-mcp` server, see how in [documentation](https://docs.unstructured.io/api-reference/workflow/sources/s3) and [here](https://docs.unstructured.io/api-reference/workflow/destinations/s3)                                |\n| `WEAVIATE_CLOUD_API_KEY`                                                | required to create Weaviate vector db connector, see how in [documentation](https://docs.unstructured.io/api-reference/workflow/destinations/weaviate)                                                                                                          |\n| `FIRECRAWL_API_KEY`                                                     | required to use Firecrawl tools in `external/firecrawl.py`, sign up on [Firecrawl](https://www.firecrawl.dev/) and get an API key.                                                                                                                              |\n| `ASTRA_DB_APPLICATION_TOKEN`, `ASTRA_DB_API_ENDPOINT`                   | required to create Astradb connector via `uns-mcp` server, see how in [documentation](https://docs.unstructured.io/ui/destinations/astradb)                                                                                                                     |\n| `AZURE_CONNECTION_STRING`                                               | required option 1 to create Azure connector via ``uns-mcp`` server, see how in [documentation](https://docs.unstructured.io/ui/sources/azure-blob-storage)                                                                                                      |\n| `AZURE_ACCOUNT_NAME`+`AZURE_ACCOUNT_KEY`                                | required option 2 to create Azure connector via `uns-mcp` server, see how in [documentation](https://docs.unstructured.io/ui/sources/azure-blob-storage)                                                                                                        |\n| `AZURE_ACCOUNT_NAME`+`AZURE_SAS_TOKEN`                                  | required option 3 to create Azure connector via `uns-mcp` server, see how in [documentation](https://docs.unstructured.io/ui/sources/azure-blob-storage)                                                                                                        |\n| `NEO4J_PASSWORD`                                                        | required to create Neo4j connector via `uns-mcp` server, see how in [documentation](https://docs.unstructured.io/ui/destinations/neo4j)                                                                                                                         |\n| `MONGO_DB_CONNECTION_STRING`                                            | required to create Mongodb connector via `uns-mcp` server, see how in [documentation](https://docs.unstructured.io/ui/destinations/mongodb)                                                                                                                     |\n| `GOOGLEDRIVE_SERVICE_ACCOUNT_KEY`                                       | a string value. The original server account key (follow [documentation](https://docs.unstructured.io/ui/sources/google-drive)) is in json file, run `base64 < /path/to/google_service_account_key.json` in terminal to get the string value                     |\n| `DATABRICKS_CLIENT_ID`,`DATABRICKS_CLIENT_SECRET`                       | required to create Databricks volume/delta table connector via `uns-mcp` server, see how in [documentation](https://docs.unstructured.io/ui/destinations/databricks-volumes) and [here](https://docs.unstructured.io/ui/destinations/databricks-delta-table)    |\n| `ONEDRIVE_CLIENT_ID`, `ONEDRIVE_CLIENT_CRED`,`ONEDRIVE_TENANT_ID`       | required to create One Drive connector via `uns-mcp` server, see how in [documentation](https://docs.unstructured.io/ui/destinations/onedrive)                                                                                                                  |\n| `PINECONE_API_KEY`                                                      | required to create Pinecone vector DB connector via `uns-mcp` server, see how in [documentation](https://docs.unstructured.io/ui/destinations/pinecone)                                                                                                         |\n| `SALESFORCE_CONSUMER_KEY`,`SALESFORCE_PRIVATE_KEY`                      | required to create salesforce source connector via `uns-mcp` server, see how in [documentation](https://docs.unstructured.io/ingestion/source-connectors/salesforce)                                                                                            |\n| `SHAREPOINT_CLIENT_ID`, `SHAREPOINT_CLIENT_CRED`,`SHAREPOINT_TENANT_ID` | required to create One Drive connector via `uns-mcp` server, see how in [documentation](https://docs.unstructured.io/ui/sources/sharepoint)                                                                                                                     |\n| `LOG_LEVEL`                                                             | Used to set logging level for our `minimal_client`, e.g. set to ERROR to get everything                                                                                                                                                                         |\n| `CONFIRM_TOOL_USE`                                                      | set to true so that `minimal_client` can confirm execution before each tool call                                                                                                                                                                                |\n| `DEBUG_API_REQUESTS`                                                    | set to true so that `uns_mcp/server.py` can output request parameters for better debugging                                                                                                                                                                      |\n\n\n### Firecrawl Source\n\n[Firecrawl](https://www.firecrawl.dev/) is a web crawling API that provides two main capabilities in our MCP:\n\n1. **HTML Content Retrieval**: Using `invoke_firecrawl_crawlhtml` to start crawl jobs and `check_crawlhtml_status` to monitor them\n2. **LLM-Optimized Text Generation**: Using `invoke_firecrawl_llmtxt` to generate text and `check_llmtxt_status` to retrieve results\n\nHow Firecrawl works:\n\n**Web Crawling Process:**\n- Starts with a specified URL and analyzes it to identify links\n- Uses the sitemap if available; otherwise follows links found on the website\n- Recursively traverses each link to discover all subpages\n- Gathers content from every visited page, handling JavaScript rendering and rate limits\n- Jobs can be cancelled with `cancel_crawlhtml_job` if needed\n- Use this if you require all the info extracted into raw HTML, Unstructured's workflow cleans it up really well  :smile:\n\n**LLM Text Generation:**\n- After crawling, extracts clean, meaningful text content from the crawled pages\n- Generates optimized text formats specifically formatted for large language models\n- Results are automatically uploaded to the specified S3 location\n- Note: LLM text generation jobs cannot be cancelled once started. The `cancel_llmtxt_job` function is provided for consistency but is not currently supported by the Firecrawl API.\n\nNote: A `FIRECRAWL_API_KEY` environment variable must be set to use these functions.\n\n## Installation & Configuration\n\nThis guide provides step-by-step instructions to set up and configure the UNS_MCP server using Python 3.12 and the `uv` tool.\n\n## Prerequisites\n- Python 3.12+\n- `uv` for environment management\n- An API key from Unstructured. You can sign up and obtain your API key [here](https://platform.unstructured.io/app/account/api-keys).\n\n### Using `uv` (Recommended)\n\nNo additional installation is required when using `uvx` as it handles execution. However, if you prefer to install the package directly:\n```bash\nuv pip install uns_mcp\n```\n\n#### Configure Claude Desktop\nFor integration with Claude Desktop, add the following content to your `claude_desktop_config.json`:\n\n**Note:** The file is located in the `~/Library/Application Support/Claude/` directory.\n\n**Using `uvx` Command:**\n```json\n{\n   \"mcpServers\": {\n      \"UNS_MCP\": {\n         \"command\": \"uvx\",\n         \"args\": [\"uns_mcp\"],\n         \"env\": {\n           \"UNSTRUCTURED_API_KEY\": \"<your-key>\"\n         }\n      }\n   }\n}\n```\n\n**Alternatively, Using Python Package:**\n```json\n{\n   \"mcpServers\": {\n      \"UNS_MCP\": {\n         \"command\": \"python\",\n         \"args\": [\"-m\", \"uns_mcp\"],\n         \"env\": {\n           \"UNSTRUCTURED_API_KEY\": \"<your-key>\"\n         }\n      }\n   }\n}\n```\n\n### Using Source Code\n1. Clone the repository.\n\n2. Install dependencies:\n    ```bash\n    uv sync\n    ```\n\n3. Set your Unstructured API key as an environment variable. Create a .env file in the root directory with the following content:\n    ````bash\n    UNSTRUCTURED_API_KEY=\"YOUR_KEY\"\n    ````\n    Refer to `.env.template` for the configurable environment variables.\n\nYou can now run the server using one of the following methods:\n\n<details>\n<summary>\nUsing Editable Package Installation\n</summary>\nInstall as an editable package:\n\n```bash\nuvx pip install -e .\n```\n\nUpdate your Claude Desktop config:\n```json\n{\n  \"mcpServers\": {\n    \"UNS_MCP\": {\n      \"command\": \"uvx\",\n      \"args\": [\"uns_mcp\"]\n    }\n  }\n}\n```\n**Note**: Remember to point to the uvx executable in environment where you installed the package\n\n</details>\n\n<details>\n<summary>\nUsing SSE Server Protocol\n</summary>\n\n**Note: Not supported by Claude Desktop.**\n\nFor SSE protocol, you can debug more easily by decoupling the client and server:\n\n1. Start the server in one terminal:\n    ```bash\n    uv run python uns_mcp/server.py --host 127.0.0.1 --port 8080\n    # or\n    make sse-server\n    ```\n\n2. Test the server using a local client in another terminal:\n   ```bash\n   uv run python minimal_client/client.py \"http://127.0.0.1:8080/sse\"\n   # or\n   make sse-client\n   ```\n**Note:** To stop the services, use `Ctrl+C` on the client first, then the server.\n</details>\n\n<details>\n<summary>\nUsing Stdio Server Protocol\n</summary>\n\nConfigure Claude Desktop to use stdio:\n```json\n{\n  \"mcpServers\": {\n    \"UNS_MCP\": {\n      \"command\": \"ABSOLUTE/PATH/TO/.local/bin/uv\",\n      \"args\": [\n        \"--directory\",\n        \"ABSOLUTE/PATH/TO/YOUR-UNS-MCP-REPO/uns_mcp\",\n        \"run\",\n        \"server.py\"\n      ]\n    }\n  }\n}\n```\nAlternatively, run the local client:\n```bash\nuv run python minimal_client/client.py uns_mcp/server.py\n```\n</details>\n\n## Additional Local Client Configuration\nConfigure the minimal client using environmental variables:\n- `LOG_LEVEL=\"ERROR\"`: Set to suppress debug outputs from the LLM, displaying clear messages for users.\n- `CONFIRM_TOOL_USE='false'`: Disable tool use confirmation before execution. **Use with caution**, especially during development, as LLM may execute expensive workflows or delete data.\n\n\n#### Debugging tools\n\nAnthropic provides `MCP Inspector` tool to debug/test your MCP server. Run the following command to spin up a debugging UI. From there, you will be able to add environment variables (pointing to your local env) on the left pane. Include your personal API key there as env var. Go to `tools`, you can test out the capabilities you add to the MCP server.\n```\nmcp dev uns_mcp/server.py\n```\n\nIf you need to log request call parameters to `UnstructuredClient`, set the environment variable `DEBUG_API_REQUESTS=false`.\nThe logs are stored in a file with the format `unstructured-client-{date}.log`, which can be examined to debug request call parameters to `UnstructuredClient` functions.\n\n\n## Add terminal access to minimal client\nWe are going to use [@wonderwhy-er/desktop-commander](https://github.com/wonderwhy-er/DesktopCommanderMCP) to add terminal access to the minimal client. It is built on the MCP Filesystem Server. Be careful, as the client (also LLM) now **has access to private files.**\n\nExecute the following command to install the package:\n```bash\nnpx @wonderwhy-er/desktop-commander setup\n```\n\nThen start client with extra parameter:\n\n```bash\nuv run python minimal_client/client.py \"http://127.0.0.1:8080/sse\" \"@wonderwhy-er/desktop-commander\"\n# or\nmake sse-client-terminal\n```\n\n## Using subset of tools\nIf your client supports using only subset of tools here are the list of things you should be aware:\n- `update_workflow` tool has to be loaded in the context together with `create_workflow` tool, because it contains detailed description on how to create and configure custom node.\n\n## Known issues\n- `update_workflow` - needs to have in context the configuration of the workflow it is updating either by providing it by the user or by calling `get_workflow_info` tool, as this tool doesn't work as `patch` applier, it fully replaces the workflow config.\n\n## CHANGELOG.md\n\nAny new developed features/fixes/enhancements will be added to CHANGELOG.md. 0.x.x-dev pre-release format is preferred before we bump to a stable version.\n\n# Troubleshooting\n- If you encounter issues with `Error: spawn <command> ENOENT` it means `<command>` is not installed or visible in your PATH:\n  - Make sure to install it and add it to your PATH.\n  - or provide absolute path to the command in the `command` field of your config. So for example replace `python` with `/opt/miniconda3/bin/python`\n"
}