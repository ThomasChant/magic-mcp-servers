{
  "mcp_name": "Elvis720/mcp-agent",
  "mcp_description": "Facilitates browser automation for LLMs using Playwright's accessibility tree, enabling structured web interactions without visual models.",
  "mcp_id": "Elvis720_mcp-agent",
  "fetch_timestamp": "2025-06-23T02:51:21.613773Z",
  "github_url": "https://github.com/Elvis720/mcp-agent",
  "repository": {
    "name": "mcp-agent",
    "full_name": "Elvis720/mcp-agent",
    "description": null,
    "html_url": "https://github.com/Elvis720/mcp-agent",
    "created_at": "2025-04-27T09:17:26Z",
    "updated_at": "2025-04-27T09:20:25Z",
    "pushed_at": "2025-04-27T09:20:13Z",
    "size": 669,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "Elvis720",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/72678245?v=4",
      "html_url": "https://github.com/Elvis720"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 119119,
      "JavaScript": 12085,
      "Dockerfile": 593
    },
    "language_percentages": {
      "TypeScript": 90.38,
      "JavaScript": 9.17,
      "Dockerfile": 0.45
    },
    "pull_requests_count": 0,
    "contributors_count": 17,
    "tags": [
      {
        "name": "v0.0.15",
        "commit_sha": "586492a3f061be75b3a773ee396cbdbda7c15785"
      },
      {
        "name": "v0.0.14",
        "commit_sha": "9578a5b2af96e14697db348619868966c578638b"
      },
      {
        "name": "v0.0.13",
        "commit_sha": "bc48600a498aa8e2d672a408637d3375ec8f6c37"
      },
      {
        "name": "v0.0.12",
        "commit_sha": "0f7fd1362f72bb8cc00d10823887494484822cde"
      },
      {
        "name": "v0.0.11",
        "commit_sha": "71e51ea42a9fb2fb9d1e2ed8f369cc2a47ef14e5"
      },
      {
        "name": "v0.0.10",
        "commit_sha": "6b15c7e422b37096122001106b0d80cade32c0cf"
      },
      {
        "name": "v0.0.9",
        "commit_sha": "23f392dd91eedcae2fbfe76592b767514f2134c8"
      },
      {
        "name": "v0.0.8",
        "commit_sha": "128e75b9f42b86bd8095cef4f30f92025b999d1d"
      },
      {
        "name": "v0.0.7",
        "commit_sha": "af522dca5ffdbd37052b335ce0a231b0eadc3363"
      }
    ],
    "latest_version": "v0.0.15",
    "package_json_version": "0.0.15"
  },
  "readme": "## Playwright MCP\n\nA Model Context Protocol (MCP) server that provides browser automation capabilities using [Playwright](https://playwright.dev). This server enables LLMs to interact with web pages through structured accessibility snapshots, bypassing the need for screenshots or visually-tuned models.\n\n### Key Features\n\n- **Fast and lightweight**: Uses Playwright's accessibility tree, not pixel-based input.\n- **LLM-friendly**: No vision models needed, operates purely on structured data.\n- **Deterministic tool application**: Avoids ambiguity common with screenshot-based approaches.\n\n### Use Cases\n\n- Web navigation and form-filling\n- Data extraction from structured content\n- Automated testing driven by LLMs\n- General-purpose browser interaction for agents\n\n### Example config\n\n#### NPX\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/mcp@latest\"\n      ]\n    }\n  }\n}\n```\n\n#### Installation in VS Code\n\nInstall the Playwright MCP server in VS Code using one of these buttons:\n\n<!--\n// Generate using?:\nconst config = JSON.stringify({ name: 'playwright', command: 'npx', args: [\"-y\", \"@playwright/mcp@latest\"] });\nconst urlForWebsites = `vscode:mcp/install?${encodeURIComponent(config)}`;\n// Github markdown does not allow linking to `vscode:` directly, so you can use our redirect:\nconst urlForGithub = `https://insiders.vscode.dev/redirect?url=${encodeURIComponent(urlForWebsites)}`;\n-->\n\n[<img src=\"https://img.shields.io/badge/VS_Code-VS_Code?style=flat-square&label=Install%20Server&color=0098FF\" alt=\"Install in VS Code\">](https://insiders.vscode.dev/redirect?url=vscode%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522-y%2522%252C%2522%2540playwright%252Fmcp%2540latest%2522%255D%257D)  [<img alt=\"Install in VS Code Insiders\" src=\"https://img.shields.io/badge/VS_Code_Insiders-VS_Code_Insiders?style=flat-square&label=Install%20Server&color=24bfa5\">](https://insiders.vscode.dev/redirect?url=vscode-insiders%3Amcp%2Finstall%3F%257B%2522name%2522%253A%2522playwright%2522%252C%2522command%2522%253A%2522npx%2522%252C%2522args%2522%253A%255B%2522-y%2522%252C%2522%2540playwright%252Fmcp%2540latest%2522%255D%257D)\n\nAlternatively, you can install the Playwright MCP server using the VS Code CLI:\n\n```bash\n# For VS Code\ncode --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@playwright/mcp@latest\"]}'\n```\n\n```bash\n# For VS Code Insiders\ncode-insiders --add-mcp '{\"name\":\"playwright\",\"command\":\"npx\",\"args\":[\"@playwright/mcp@latest\"]}'\n```\n\nAfter installation, the Playwright MCP server will be available for use with your GitHub Copilot agent in VS Code.\n\n### CLI Options\n\nThe Playwright MCP server supports the following command-line options:\n\n- `--browser <browser>`: Browser or chrome channel to use. Possible values:\n  - `chrome`, `firefox`, `webkit`, `msedge`\n  - Chrome channels: `chrome-beta`, `chrome-canary`, `chrome-dev`\n  - Edge channels: `msedge-beta`, `msedge-canary`, `msedge-dev`\n  - Default: `chrome`\n- `--caps <caps>`: Comma-separated list of capabilities to enable, possible values: tabs, pdf, history, wait, files, install. Default is all.\n- `--cdp-endpoint <endpoint>`: CDP endpoint to connect to\n- `--executable-path <path>`: Path to the browser executable\n- `--headless`: Run browser in headless mode (headed by default)\n- `--port <port>`: Port to listen on for SSE transport\n- `--host <host>`: Host to bind server to. Default is localhost. Use 0.0.0.0 to bind to all interfaces.\n- `--user-data-dir <path>`: Path to the user data directory\n- `--vision`: Run server that uses screenshots (Aria snapshots are used by default)\n\n### User data directory\n\nPlaywright MCP will launch the browser with the new profile, located at\n\n```\n- `%USERPROFILE%\\AppData\\Local\\ms-playwright\\mcp-chrome-profile` on Windows\n- `~/Library/Caches/ms-playwright/mcp-chrome-profile` on macOS\n- `~/.cache/ms-playwright/mcp-chrome-profile` on Linux\n```\n\nAll the logged in information will be stored in that profile, you can delete it between sessions if you'd like to clear the offline state.\n\n### Running headless browser (Browser without GUI)\n\nThis mode is useful for background or batch operations.\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/mcp@latest\",\n        \"--headless\"\n      ]\n    }\n  }\n}\n```\n\n### Running headed browser on Linux w/o DISPLAY\n\nWhen running headed browser on system w/o display or from worker processes of the IDEs,\nrun the MCP server from environment with the DISPLAY and pass the `--port` flag to enable SSE transport.\n\n```bash\nnpx @playwright/mcp@latest --port 8931\n```\n\nAnd then in MCP client config, set the `url` to the SSE endpoint:\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"url\": \"http://localhost:8931/sse\"\n    }\n  }\n}\n```\n\nWhen running in a remote server, you can use the `--host` flag to bind the server to `0.0.0.0` to make it accessible from outside.\n\n```bash\nnpx @playwright/mcp@latest --port 8931 --host 0.0.0.0\n```\n\nIn MCP client config, `$server-ip` is the IP address of the server:\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"url\": \"http://{$server-ip}:8931/sse\"\n    }\n  }\n}\n```\n\n### Docker\n\n**NOTE:** The Docker implementation only supports headless chromium at the moment.\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"--init\", \"mcp/playwright\"]\n    }\n  }\n}\n```\n\n### Tool Modes\n\nThe tools are available in two modes:\n\n1. **Snapshot Mode** (default): Uses accessibility snapshots for better performance and reliability\n2. **Vision Mode**: Uses screenshots for visual-based interactions\n\nTo use Vision Mode, add the `--vision` flag when starting the server:\n\n```js\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@playwright/mcp@latest\",\n        \"--vision\"\n      ]\n    }\n  }\n}\n```\n\nVision Mode works best with the computer use models that are able to interact with elements using\nX Y coordinate space, based on the provided screenshot.\n\n### Build with Docker\n\nYou can build the Docker image yourself.\n\n```\ndocker build -t mcp/playwright .\n```\n\n### Programmatic usage with custom transports\n\n```js\nimport http from 'http';\n\nimport { createServer } from '@playwright/mcp';\nimport { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js';\n\nhttp.createServer(async (req, res) => {\n  // ...\n\n  // Creates a headless Playwright MCP server with SSE transport\n  const mcpServer = await createServer({ headless: true });\n  const transport = new SSEServerTransport('/messages', res);\n  await mcpServer.connect(transport);\n\n  // ...\n});\n\n```\n\n<!--- Generated by update-readme.js -->\n\n### Snapshot-based Interactions\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_snapshot**\n  - Description: Capture accessibility snapshot of the current page, this is better than screenshot\n  - Parameters: None\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_click**\n  - Description: Perform click on a web page\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_drag**\n  - Description: Perform drag and drop between two elements\n  - Parameters:\n    - `startElement` (string): Human-readable source element description used to obtain the permission to interact with the element\n    - `startRef` (string): Exact source element reference from the page snapshot\n    - `endElement` (string): Human-readable target element description used to obtain the permission to interact with the element\n    - `endRef` (string): Exact target element reference from the page snapshot\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_hover**\n  - Description: Hover over element on page\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_type**\n  - Description: Type text into editable element\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n    - `text` (string): Text to type into the element\n    - `submit` (boolean, optional): Whether to submit entered text (press Enter after)\n    - `slowly` (boolean, optional): Whether to type one character at a time. Useful for triggering key handlers in the page. By default entire text is filled in at once.\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_select_option**\n  - Description: Select an option in a dropdown\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `ref` (string): Exact target element reference from the page snapshot\n    - `values` (array): Array of values to select in the dropdown. This can be a single value or multiple values.\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_take_screenshot**\n  - Description: Take a screenshot of the current page. You can't perform actions based on the screenshot, use browser_snapshot for actions.\n  - Parameters:\n    - `raw` (boolean, optional): Whether to return without compression (in PNG format). Default is false, which returns a JPEG image.\n    - `element` (string, optional): Human-readable element description used to obtain permission to screenshot the element. If not provided, the screenshot will be taken of viewport. If element is provided, ref must be provided too.\n    - `ref` (string, optional): Exact target element reference from the page snapshot. If not provided, the screenshot will be taken of viewport. If ref is provided, element must be provided too.\n\n### Vision-based Interactions\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_screen_capture**\n  - Description: Take a screenshot of the current page\n  - Parameters: None\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_screen_move_mouse**\n  - Description: Move mouse to a given position\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `x` (number): X coordinate\n    - `y` (number): Y coordinate\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_screen_click**\n  - Description: Click left mouse button\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `x` (number): X coordinate\n    - `y` (number): Y coordinate\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_screen_drag**\n  - Description: Drag left mouse button\n  - Parameters:\n    - `element` (string): Human-readable element description used to obtain permission to interact with the element\n    - `startX` (number): Start X coordinate\n    - `startY` (number): Start Y coordinate\n    - `endX` (number): End X coordinate\n    - `endY` (number): End Y coordinate\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_screen_type**\n  - Description: Type text\n  - Parameters:\n    - `text` (string): Text to type into the element\n    - `submit` (boolean, optional): Whether to submit entered text (press Enter after)\n\n### Tab Management\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_tab_list**\n  - Description: List browser tabs\n  - Parameters: None\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_tab_new**\n  - Description: Open a new tab\n  - Parameters:\n    - `url` (string, optional): The URL to navigate to in the new tab. If not provided, the new tab will be blank.\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_tab_select**\n  - Description: Select a tab by index\n  - Parameters:\n    - `index` (number): The index of the tab to select\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_tab_close**\n  - Description: Close a tab\n  - Parameters:\n    - `index` (number, optional): The index of the tab to close. Closes current tab if not provided.\n\n### Navigation\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_navigate**\n  - Description: Navigate to a URL\n  - Parameters:\n    - `url` (string): The URL to navigate to\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_navigate_back**\n  - Description: Go back to the previous page\n  - Parameters: None\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_navigate_forward**\n  - Description: Go forward to the next page\n  - Parameters: None\n\n### Keyboard\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_press_key**\n  - Description: Press a key on the keyboard\n  - Parameters:\n    - `key` (string): Name of the key to press or a character to generate, such as `ArrowLeft` or `a`\n\n### Console\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_console_messages**\n  - Description: Returns all console messages\n  - Parameters: None\n\n### Files and Media\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_file_upload**\n  - Description: Upload one or multiple files\n  - Parameters:\n    - `paths` (array): The absolute paths to the files to upload. Can be a single file or multiple files.\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_pdf_save**\n  - Description: Save page as PDF\n  - Parameters: None\n\n### Utilities\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_close**\n  - Description: Close the page\n  - Parameters: None\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_wait**\n  - Description: Wait for a specified time in seconds\n  - Parameters:\n    - `time` (number): The time to wait in seconds\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_resize**\n  - Description: Resize the browser window\n  - Parameters:\n    - `width` (number): Width of the browser window\n    - `height` (number): Height of the browser window\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_install**\n  - Description: Install the browser specified in the config. Call this if you get an error about the browser not being installed.\n  - Parameters: None\n\n<!-- NOTE: This has been generated via update-readme.js -->\n\n- **browser_handle_dialog**\n  - Description: Handle a dialog\n  - Parameters:\n    - `accept` (boolean): Whether to accept the dialog.\n    - `promptText` (string, optional): The text of the prompt in case of a prompt dialog.\n\n<!--- End of generated section -->\n"
}