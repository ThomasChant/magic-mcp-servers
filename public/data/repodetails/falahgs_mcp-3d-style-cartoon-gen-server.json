{
  "mcp_name": "falahgs/mcp-3d-style-cartoon-gen-server",
  "mcp_description": "A server that combines 3D-style cartoon image generation with secure file system operations, leveraging Google's Gemini AI and MCP SDK.",
  "mcp_id": "falahgs_mcp-3d-style-cartoon-gen-server",
  "fetch_timestamp": "2025-06-23T02:59:54.451027Z",
  "github_url": "https://github.com/falahgs/mcp-3d-style-cartoon-gen-server",
  "repository": {
    "name": "mcp-3d-style-cartoon-gen-server",
    "full_name": "falahgs/mcp-3d-style-cartoon-gen-server",
    "description": null,
    "html_url": "https://github.com/falahgs/mcp-3d-style-cartoon-gen-server",
    "created_at": "2025-04-21T07:25:45Z",
    "updated_at": "2025-04-22T23:40:14Z",
    "pushed_at": "2025-04-21T12:07:09Z",
    "size": 2135,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 1,
    "open_issues_count": 1,
    "language": "JavaScript",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "falahgs",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/5242012?v=4",
      "html_url": "https://github.com/falahgs"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 20557,
      "TypeScript": 20557,
      "PowerShell": 1587
    },
    "language_percentages": {
      "JavaScript": 48.14,
      "TypeScript": 48.14,
      "PowerShell": 3.72
    },
    "pull_requests_count": 1,
    "contributors_count": 1,
    "package_json_version": "0.1.0"
  },
  "readme": "# MCP Combined Server: 3D Cartoon Generator & File System Tools\n\nA professional-grade server that provides two major capabilities: \n1. High-quality 3D-style cartoon image generation using Google's Gemini AI\n2. Secure file system operations for reading, writing, and managing files\n\n![3D Cartoon Generator Demo](./video/mcp-3d-style-server.gif)\n\n## üåü Features\n\n### Image Generation\n- **3D Cartoon Generation**: Creates high-quality 3D-style cartoon images\n- **Child-Friendly Design**: Focuses on colorful, playful, and engaging visuals\n- **Instant Preview**: Automatically opens generated images in your default browser\n- **Local Storage**: Saves images and previews in an organized output directory\n\n### File System Operations\n- **Secure File Access**: Path validation and security checks\n- **Read/Write Files**: Read and write text file contents\n- **Directory Operations**: List, create, and navigate directories\n- **File Search**: Find files matching patterns\n\n### System Features\n- **Professional Configuration**: Robust error handling and controlled logging\n- **Cross-Platform Support**: Intelligent file path handling for Windows, macOS, and Linux\n- **Smart OS Detection**: Automatically finds the best save location for each operating system\n- **Security Controls**: Restricted directory access through configuration\n\n## üõ†Ô∏è Technical Stack\n\n- **Core Framework**: Model Context Protocol (MCP) SDK\n- **AI Integration**: Google Generative AI (Gemini)\n- **Runtime**: Node.js v14+\n- **Language**: TypeScript\n- **Package Manager**: npm\n\n## üìã Prerequisites\n\n- Node.js (v14 or higher)\n- Google Gemini API key\n- TypeScript\n\n## ‚öôÔ∏è Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/falahgs/mcp-3d-style-cartoon-gen-server.git\ncd mcp-3d-style-cartoon-gen-server\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Configure environment:\nCreate a `.env` file in the root directory:\n```env\nGEMINI_API_KEY=your_api_key_here\nALLOWED_DIRECTORIES=/path/to/allowed/dir1,/path/to/allowed/dir2\n```\n\n4. Build the project:\n```bash\nnpm run build\n```\n\n## üîß Configuring Claude Desktop with MCP Server\n\nTo integrate this combined server with Claude Desktop:\n\n1. Locate the Configuration File:\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Linux: `~/.config/Claude/claude_desktop_config.json`\n\n2. Add the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-3d-cartoon-generator\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"path/to/your/build/index.js\"\n      ],\n      \"env\": {\n        \"GEMINI_API_KEY\": \"your_gemini_api_key_here\",\n        \"IS_REMOTE\": \"true\",\n        \"SAVE_TO_DESKTOP\": \"true\",\n        \"DETECT_OS_PATHS\": \"true\",\n        \"ALLOWED_DIRECTORIES\": \"C:\\\\Users\\\\YourUsername\\\\Desktop,C:\\\\Users\\\\YourUsername\\\\Documents\",\n        \"DEBUG\": \"false\"\n      }\n    }\n  }\n}\n```\n\n### Windows PowerShell Helper Script\n\nFor Windows users, you can use the included `fix_claude_config.ps1` script to automatically configure Claude Desktop:\n\n1. Edit the script to update the path to your server build and your Gemini API key\n2. Run the script in PowerShell:\n```powershell\npowershell -ExecutionPolicy Bypass -File .\\fix_claude_config.ps1\n```\n\nThis will create or update the configuration file with proper encoding and settings.\n\n## üöÄ Available Tools\n\n### 1. Image Generation Tool\n\n```json\n{\n  \"name\": \"generate_3d_cartoon\",\n  \"description\": \"Generates a 3D style cartoon image for kids based on the given prompt\",\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"prompt\": {\n        \"type\": \"string\",\n        \"description\": \"The prompt describing the 3D cartoon image to generate\"\n      },\n      \"fileName\": {\n        \"type\": \"string\",\n        \"description\": \"The name of the output file (without extension)\"\n      }\n    },\n    \"required\": [\"prompt\", \"fileName\"]\n  }\n}\n```\n\n### 2. File System Tools\n\n#### Read File\n```json\n{\n  \"name\": \"read_file\",\n  \"description\": \"Read the contents of a file\",\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"path\": {\n        \"type\": \"string\",\n        \"description\": \"Path to the file to read\"\n      }\n    },\n    \"required\": [\"path\"]\n  }\n}\n```\n\n#### Write File\n```json\n{\n  \"name\": \"write_file\",\n  \"description\": \"Write content to a file\",\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"path\": {\n        \"type\": \"string\",\n        \"description\": \"Path to the file to write\"\n      },\n      \"content\": {\n        \"type\": \"string\",\n        \"description\": \"Content to write to the file\"\n      }\n    },\n    \"required\": [\"path\", \"content\"]\n  }\n}\n```\n\n#### List Directory\n```json\n{\n  \"name\": \"list_directory\",\n  \"description\": \"List the contents of a directory\",\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"path\": {\n        \"type\": \"string\",\n        \"description\": \"Path to the directory to list\"\n      }\n    },\n    \"required\": [\"path\"]\n  }\n}\n```\n\n#### Create Directory\n```json\n{\n  \"name\": \"create_directory\",\n  \"description\": \"Create a new directory\",\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"path\": {\n        \"type\": \"string\",\n        \"description\": \"Path to the directory to create\"\n      }\n    },\n    \"required\": [\"path\"]\n  }\n}\n```\n\n#### Search Files\n```json\n{\n  \"name\": \"search_files\",\n  \"description\": \"Search for files matching a pattern\",\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"path\": {\n        \"type\": \"string\",\n        \"description\": \"Base directory to search from\"\n      },\n      \"pattern\": {\n        \"type\": \"string\",\n        \"description\": \"Search pattern (glob format)\"\n      },\n      \"excludePatterns\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        },\n        \"description\": \"Patterns to exclude from search (glob format)\"\n      }\n    },\n    \"required\": [\"path\", \"pattern\"]\n  }\n}\n```\n\n## üìÑ Example Usage\n\n### Image Generation Examples\n\n```javascript\n// Generate a 3D cartoon\n{\n  \"name\": \"generate_3d_cartoon\",\n  \"arguments\": {\n    \"prompt\": \"A friendly robot playing with a cat\",\n    \"fileName\": \"robot_cat_play\"\n  }\n}\n```\n\n### File System Examples\n\n```javascript\n// Read a file\n{\n  \"name\": \"read_file\",\n  \"arguments\": {\n    \"path\": \"C:/Users/YourUsername/Documents/example.txt\"\n  }\n}\n\n// Write a file\n{\n  \"name\": \"write_file\",\n  \"arguments\": {\n    \"path\": \"C:/Users/YourUsername/Documents/new-file.txt\",\n    \"content\": \"This is the content of the file.\"\n  }\n}\n\n// List directory contents\n{\n  \"name\": \"list_directory\",\n  \"arguments\": {\n    \"path\": \"C:/Users/YourUsername/Documents\"\n  }\n}\n\n// Create a directory\n{\n  \"name\": \"create_directory\",\n  \"arguments\": {\n    \"path\": \"C:/Users/YourUsername/Documents/new-folder\"\n  }\n}\n\n// Search for files\n{\n  \"name\": \"search_files\",\n  \"arguments\": {\n    \"path\": \"C:/Users/YourUsername/Documents\",\n    \"pattern\": \"*.txt\",\n    \"excludePatterns\": [\"temp*\", \"*.tmp\"]\n  }\n}\n```\n\n## üîí Security Features\n\nThe server implements several security measures:\n\n1. **Path Validation**: All file paths are validated to ensure they are within allowed directories.\n2. **Allowed Directories**: Only directories explicitly set in the `ALLOWED_DIRECTORIES` environment variable can be accessed.\n3. **Symlink Protection**: Prevents access to directories outside the allowed scope via symlinks.\n4. **Controlled Logging**: Debug logs are disabled by default to prevent information leakage.\n\n## ‚öôÔ∏è Configuration Options\n\n### Environment Variables\n\n| Variable | Description | Default |\n|----------|-------------|---------|\n| `GEMINI_API_KEY` | Google Gemini API key for image generation | (Required) |\n| `ALLOWED_DIRECTORIES` | Comma-separated list of allowed file system paths | User's home dir, current dir |\n| `IS_REMOTE` | Run in remote mode without browser opening | false |\n| `SAVE_TO_DESKTOP` | Force saving to desktop directory | false |\n| `DETECT_OS_PATHS` | Enable OS-specific path detection | true |\n| `DEBUG` | Enable verbose debug logging | false |\n\n## üõ†Ô∏è Troubleshooting\n\n### Common Issues:\n\n1. **JSON Parsing Errors in Claude**:\n   - Ensure `DEBUG` is set to \"false\" to prevent logs from interfering with JSON communication\n   - Check for proper JSON formatting in the Claude configuration\n\n2. **File Access Denied**:\n   - Verify that the paths you're trying to access are included in `ALLOWED_DIRECTORIES`\n   - Check file permissions on the target files/directories\n\n3. **Images Not Saving**:\n   - Set `SAVE_TO_DESKTOP` to \"true\" to ensure images save to the desktop\n   - Check desktop path detection in the server logs (enable DEBUG temporarily)\n\n## üìÑ License\n\n[MIT License](LICENSE)\n\n## ü§ù Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request. "
}