{
  "mcp_name": "tobiassteidle/Spring-Boot-Sample-MCP-Server",
  "mcp_description": "A Spring Boot-based server that facilitates AI model interactions through the Model Context Protocol, offering seamless integration and enhanced capabilities for AI assistants like Claude.",
  "mcp_id": "tobiassteidle_Spring-Boot-Sample-MCP-Server",
  "fetch_timestamp": "2025-06-23T08:59:04.669981Z",
  "github_url": "https://github.com/tobiassteidle/Spring-Boot-Sample-MCP-Server",
  "repository": {
    "name": "Spring-Boot-Sample-MCP-Server",
    "full_name": "tobiassteidle/Spring-Boot-Sample-MCP-Server",
    "description": null,
    "html_url": "https://github.com/tobiassteidle/Spring-Boot-Sample-MCP-Server",
    "created_at": "2025-04-27T04:57:15Z",
    "updated_at": "2025-06-17T15:35:12Z",
    "pushed_at": "2025-04-27T13:05:54Z",
    "size": 22,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "Java",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "tobiassteidle",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/5045128?v=4",
      "html_url": "https://github.com/tobiassteidle"
    },
    "has_issues": true,
    "has_projects": false,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "Java": 8233
    },
    "language_percentages": {
      "Java": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "This is a sample implementation of a Model Context Protocol (MCP) server using Spring Boot. The server is designed to be used with the Model Context Protocol Inspector for testing and debugging. It provides a simple REST API to interact with the server and demonstrates how to set up a basic Spring Boot application. Unit tests are included to verify the functionality of the server.\n## üìã Table of Contents\n- [What is MCP?](#what-is-mcp)\n- [Requirements](#requirements)\n- [Configuration for e.g. Claude Desktop](#configuration-for-eg-claude-desktop)\n- [Development](#development)\n    - [Debugging](#debugging)\n        - [Install MCP Inspector](#install-mcp-inspector)\n        - [Run MCP Inspector for Testing](#run-mcp-inspector-for-testing)\n            - [Build MCP Server](#build-mcp-server)\n            - [Run MCP Inspector](#run-mcp-inspector)\n\n\n## üß† What is MCP?\nModel Context Protocol (MCP) is an open standard that defines how AI models communicate with external tools and data sources. It creates a standardized way for AI assistants like Claude to access:\n- üåê Real-time information\n- üìä Custom databases\n- üîÑ APIs and services\n- üìÅ File systems\n\nThink of MCP as the \"USB standard for AI\" - it provides a common interface that allows any AI model to interact with various tools through a consistent protocol.\nBenefits of using MCP with Spring Boot:\n- üîÑ **Seamless Integration**: Easily expose your application's functionality to AI assistants\n- üõ†Ô∏è **Tool Definition**: Define custom tools using simple annotations\n- üöÄ **Spring Boot Simplicity**: Leverage Spring's dependency injection and configuration management\n- üìà **Enhanced AI Capabilities**: Give AI models access to your organization's real-time data and services\n\n### Requirements\n- Java 17+\n- Maven\n- MCP Inspector (optional for testing)\n\n### Configuration for e.g. Claude Desktop\n``` json\n{\n  \"mcpServers\": {\n    \"sample-mcp-server\": {\n      \"command\": \"java\",\n      \"args\": [\n        \"-jar\",\n        \"sample-mcp-server-0.0.1-SNAPSHOT.jar\",\n        \"--port\",\n        \"8080\",\n        \"--host\",\n        \"localhost\"\n      ],\n      \"env\": {\n        \"JAVA_TOOL_OPTIONS\": \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005\"\n      }\n    }\n  }\n}\n```\nNote: The `JAVA_TOOL_OPTIONS` environment variable is used to set the JVM options for remote debugging. The address and port can be changed as needed.\n## üíª Development\n### Debugging\n#### Install MCP Inspector\n``` bash\nnpm -g install @modelcontextprotocol/inspector\n```\n#### Run MCP Inspector for Testing\n##### Build MCP Server\n``` bash\nmvn clean package\n```\n##### Run MCP Inspector\n``` bash\nnpx @modelcontextprotocol/inspector \\\n    -e JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 \\\n    java -jar target/sample-mcp-server-<version>-SNAPSHOT.jar \\\n    --port 8080 --host localhost\n```\nNote: The `JAVA_TOOL_OPTIONS` environment variable is used to set the JVM options for remote debugging. The address and port can be changed as needed.\nNow you can use the MCP Inspector to test and debug your Spring Boot MCP server. The inspector provides a user-friendly interface (Browser) to interact with the server and visualize the data being exchanged. The inspector can be used to send requests to the server, view the responses, and analyze the data flow between the client and server.\nTo debug the server, you can set breakpoints in your code and use the debugger in your IDE to step through the code and inspect variables. Attach the debugger to the running server using the remote debugging options specified in the `JAVA_TOOL_OPTIONS` environment variable.\n\n\nSpring AI extends the MCP Java SDK with productivity enhancements that make it straightforward to build MCP servers [[1]](https://spring.io/blog/2025/02/14/mcp-java-sdk-released-2).\n## üîß Using This Server with Claude Desktop\nThis sample server can be integrated with Claude Desktop or other AI assistants that support MCP. After [configuring the server](#configuration-for-eg-claude-desktop) in your AI assistant:\n1. Start this Spring Boot MCP server\n2. Open Claude Desktop and enable the server in settings\n3. Ask Claude questions that require the tools provided by this server\n4. Watch as Claude seamlessly uses the server to access data and perform actions\n\n\n"
}