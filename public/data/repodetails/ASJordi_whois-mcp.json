{
  "mcp_name": "ASJordi/whois-mcp",
  "mcp_description": "Provides WHOIS lookup functionality through a standardized interface using the Model Context Protocol.",
  "mcp_id": "ASJordi_whois-mcp",
  "fetch_timestamp": "2025-06-23T01:19:28.093485Z",
  "github_url": "https://github.com/ASJordi/whois-mcp",
  "repository": {
    "name": "whois-mcp",
    "full_name": "ASJordi/whois-mcp",
    "description": "MCP Server for whois lookups",
    "html_url": "https://github.com/ASJordi/whois-mcp",
    "created_at": "2025-04-24T17:26:29Z",
    "updated_at": "2025-05-13T18:53:09Z",
    "pushed_at": "2025-05-13T18:53:05Z",
    "size": 4671,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Java",
    "license": "MIT License",
    "topics": [
      "claude",
      "cursor",
      "mcp",
      "mcp-server",
      "vscode",
      "whois",
      "whois-lookup"
    ],
    "default_branch": "main",
    "owner": {
      "login": "ASJordi",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/48893030?v=4",
      "html_url": "https://github.com/ASJordi"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Java": 44996
    },
    "language_percentages": {
      "Java": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# WHOIS MCP\n\nA WHOIS lookup service implemented as a Model Context Protocol (MCP) server.\n\n## Overview\n\nWHOIS MCP is a Java application that provides WHOIS lookup functionality through the Model Context Protocol. It allows users to query WHOIS information for domains using a standardized interface. The server communicates over standard input/output, making it compatible with MCP clients.\n\n## Demo\n\nhttps://github.com/user-attachments/assets/037a30de-c330-4dd4-93c2-2add936b9caf\n\nhttps://github.com/user-attachments/assets/2a91045a-b922-4832-9500-dc9eacb54ee0\n\nhttps://github.com/user-attachments/assets/befbb1e0-137c-4534-b7f7-433305a41755\n\n## Features\n\n- Domain validation and sanitization\n- Caching of WHOIS server information\n- Fallback to IANA WHOIS server when specific servers are not found\n- Comprehensive error handling\n- Integration with the Model Context Protocol\n\n## Installation\n\n### Prerequisites\n\n- Java 21 or higher\n- Maven 3.6 or higher\n\n### Building the Project\n\n1. Clone the repository:\n   ```\n   git clone https://github.com/asjordi/whois-mcp.git\n   cd whois-mcp\n   ```\n\n2. Build with Maven:\n   ```\n   mvn clean package\n   ```\n   \nThis will create an executable JAR file in the `target` directory.\n\n3. You can open the project in your favorite IDE (e.g., IntelliJ IDEA, Eclipse) for easier development and debugging.\n\n## Debugging the Server\n\nTo debug the server, you can use the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n1. First build the project with:\n\n```\nmvn clean package\n```\n\n2. Run the MCP Inspector with the following command:\n\n```\nnpx @modelcontextprotocol/inspector\n```\n\n3. Set the following values:\n- **Transport**: `STDIO`\n- **Command**: `java`\n- **Arguments**: `-jar PATH\\\\target\\\\whois-mcp-1.0-SNAPSHOT.jar`\n\n4. Click on the **Connect** button to start the MCP Inspector and connect to the server.\n\n## Usage\n\nOnce configured, the WHOIS MCP server will be automatically available to any MCP client that supports the protocol.\n\n### Claude\n\nGo to Menu > File > Settings > Developer > Edit Config and add the following to your `claude_desktop_config.json` file:\n\n```json\n{\n   \"mcpServers\": {\n      \"whois-mcp-server\": {\n         \"command\": \"java\",\n         \"args\": [\n            \"-jar\",\n            \"PATH\\\\target\\\\whois-mcp-1.0-SNAPSHOT.jar\"\n         ]\n      }\n   }\n}\n```\n\nSave the file and restart the application. You can now use the WHOIS MCP server by sending requests to it.\n\n### VSCode\n\nOpen `settings.json` and add the following configuration:\n\n```json\n\"mcp\": {\n \"servers\": {\n   \"whois-mcp-server\": {\n     \"type\": \"stdio\",\n     \"command\": \"java\",\n     \"args\": [\n       \"-jar\",\n       \"PATH\\\\whois-mcp\\\\target\\\\whois-mcp-1.0-SNAPSHOT.jar\"\n     ]\n   }\n }\n}\n```\n\nSave the file and restart the application. Open Copilot and set mode to `Agent` to use the WHOIS MCP server.\n\n## Project Structure\n\nThe project is structured around the following key components:\n\n### Main Components\n\n- **Main**: Entry point of the application that initializes and starts the MCP server.\n- **WhoisService**: Core service that performs WHOIS queries using the Apache Commons Net library.\n- **WhoisCache**: Caches WHOIS server information based on domain extensions.\n- **DomainValidatorUtil**: Validates domain names using the Apache Commons Validator.\n- **DomainSanitizer**: Sanitizes domain names by removing unnecessary characters and ensuring proper formatting.\n- **McpException**: Custom exception class for handling errors specific to the WHOIS MCP server.\n\n### Flow\n\n1. The MCP server receives a request with a domain name.\n2. The domain is validated and sanitized.\n3. The appropriate WHOIS server is determined from the cache based on the domain extension.\n4. A WHOIS query is performed against the server.\n5. The result is returned to the client through the MCP protocol.\n\n### Whois Server Mapping\n\nWHOIS server mappings are configured in the `whois-servers.properties` file, which maps top-level domains to their respective WHOIS servers. If this file is not available, a default set of servers is used.\n\n### Dependencies\n\n- **Model Context Protocol SDK**: For implementing the MCP server\n- **SLF4J**: For logging\n- **Apache Commons Net**: For WHOIS client functionality\n- **Apache Commons Validator**: For domain validation\n- **JUnit Jupiter**: For testing\n\n## Testing\n\nThe project includes comprehensive unit tests for all components. Run the tests with:\n\n```\nmvn test\n```\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Author\n\nJordi Ayala - [asjordi.dev](https://asjordi.dev)\n\n[Root Zone Database](https://www.iana.org/domains/root/db)\n"
}