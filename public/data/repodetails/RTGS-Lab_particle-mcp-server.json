{
  "mcp_name": "zradlicz/particle-mcp-server",
  "mcp_description": "Facilitates AI-driven management of Particle IoT devices through natural language commands.",
  "mcp_id": "RTGS-Lab_particle-mcp-server",
  "fetch_timestamp": "2025-06-23T09:50:16.249850Z",
  "github_url": "https://github.com/zradlicz/particle-mcp-server",
  "repository": {
    "name": "particle-mcp-server",
    "full_name": "RTGS-Lab/particle-mcp-server",
    "description": "An MCP server that connects to Particle IOT API and allows LLMs to use it to do fleet management",
    "html_url": "https://github.com/RTGS-Lab/particle-mcp-server",
    "created_at": "2025-04-23T17:19:35Z",
    "updated_at": "2025-06-10T20:20:18Z",
    "pushed_at": "2025-06-10T20:20:14Z",
    "size": 84,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "master",
    "owner": {
      "login": "RTGS-Lab",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/110062148?v=4",
      "html_url": "https://github.com/RTGS-Lab"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 18878
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 4,
    "contributors_count": 1
  },
  "readme": "[![Python 3.7+](https://img.shields.io/badge/python-3.7+-blue.svg)](https://www.python.org/downloads/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n# Particle MCP Server\n\nA Model Context Protocol server for the Particle IoT platform that enables AI assistants to manage Particle devices using natural language.\n\n## Features/API Endpoints Covered\n\n### Devices\n- list_devices - lists all devices in your account\n- list_product_devices - list all devices in a specified product\n- rename_device - rename the device but keep the node_id the same\n- add_device_notes - add notes to a device\n- ping_device - pings the device to see if it is online\n- call_function - calls a specified function on a particular device\n\n### Diagnostics\n- get_device_vitals - gets the last known vitals from a specific device\n\n### Organizations\n- list_organizations - lists all organizations apart of your account\n- list_organization_products - lists all prodcuts within an organization\n\n### Product Firmware\n- list_product_firmware - lists all firmware versions for a specific product id\n\n## Setup and Installation\n\ncreate a .env file with the sctructure shown\n\n```\n# Particle API credentials\nPARTICLE_ACCESS_TOKEN = your_api_token\n```\n\nto generate a particle api token, make sure the Particle CLI is installed and do this command:\n\n```\nparticle token create\n```\n\n## Usage\n\nClone this repo\n\nOpen Claude Desktop\n\nNavigate to Settings\n\nClick Developer\n\nClick Edit Config\n\nPaste this in:\n```\n{\n    \"mcpServers\": {\n        \"particle\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"DIRECT/PATH/TO/particle-mcp-server\",\n                \"run\",\n                \"particle.py\"\n            ]\n        }\n    }\n}\n```\n\n## Contributing\n\nhttps://docs.particle.io/reference/cloud-apis/api/#postman\n\nFollow along to set up the Particle API environment in Postman, and implement a tool for each API endpoint. Open a PR with your changes for review! Please keep PRs \"small\"\n"
}