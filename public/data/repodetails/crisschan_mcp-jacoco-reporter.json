{
  "mcp_name": "crisschan/mcp-jacoco-reporter",
  "mcp_description": "Transforms JaCoCo code coverage reports into AI-friendly formats for enhanced analysis and insights.",
  "mcp_id": "crisschan_mcp-jacoco-reporter",
  "fetch_timestamp": "2025-06-23T02:19:38.859673Z",
  "github_url": "https://github.com/crisschan/mcp-jacoco-reporter",
  "repository": {
    "name": "mcp-jacoco-reporter",
    "full_name": "crisschan/mcp-jacoco-reporter",
    "description": "read jacoco reporter and response a friendly structure for llm ",
    "html_url": "https://github.com/crisschan/mcp-jacoco-reporter",
    "created_at": "2025-04-08T08:15:25Z",
    "updated_at": "2025-06-04T02:36:25Z",
    "pushed_at": "2025-05-21T10:06:53Z",
    "size": 33,
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks_count": 3,
    "open_issues_count": 0,
    "language": "Python",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "crisschan",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/2927024?v=4",
      "html_url": "https://github.com/crisschan"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 3,
    "subscribers_count": 1,
    "languages": {
      "Python": 3964
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 1,
    "contributors_count": 2
  },
  "readme": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/crisschan-mcp-jacoco-reporter-badge.png)](https://mseep.ai/app/crisschan-mcp-jacoco-reporter)\n\n# MCP-JaCoCo\nMCP-JaCoCo is a server tool that converts JaCoCo code coverage reports into formats optimized for Large Language Models (LLMs), making AI-driven analysis easier and more effective.\n\n# Why It Matters\nAs AI and LLMs play a bigger role in software development, traditional code coverage reports—like those from JaCoCo—need a makeover. While great for humans, their XML format isn’t ideal for AI tools to process or analyze. MCP-JaCoCo bridges this gap by transforming these reports into LLM-friendly formats, unlocking powerful benefits for development teams:\n\n- Quick, meaningful summaries of code coverage\n- Easy identification of untested or poorly tested code\n- Smart suggestions for new test cases\n- Streamlined AI-assisted test planning\n- Automated documentation of coverage results\nWith MCP-JaCoCo, teams can tap into AI’s full potential, boosting efficiency and insight in testing workflows.\n\n# What It Solves\n- **Complex Formats**: Simplifies JaCoCo’s dense XML reports for AI use\n- **Scattered Data**: Pulls coverage metrics into one accessible place\n- **Slow Analysis**: Cuts down on time-consuming manual reviews\n- **Integration Hurdles**: Makes raw data play nicely with AI tools\n\n# Key Features\n- **Smart Conversion**: Transforms JaCoCo XML reports into LLM-friendly JSON format\n- **Flexible Coverage Types**: Supports multiple coverage metrics (instruction, branch, line, etc.)\n- **Efficient Processing**: Fast and lightweight report processing\n- **Structured Output**: Well-organized JSON format for easy AI consumption\n- **Customizable Analysis**: Filter coverage data by specific metrics of interest\n\n# Installation\nInstall MCP-JaCoCo using uv with this configuration:\n```\n{\n  \"mcpServers\": {\n     \"mcp-jacoco-reporter-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--with\",\n        \"mcp[cli]\",\n        \"mcp\",\n        \"run\",\n        \"/Users/crisschan/workspace/pyspace/mcp-jacoco-reporter/mcp-jacoco-reporter-server.py\"\n      ],\n      \"env\": {\n        \"COVERED_TYPES\": \"nocovered, partiallycovered, fullcovered\"\n      },\n      \"alwaysAllow\": [\n        \"jacoco_reporter_server\"\n      ]\n    }\n  }\n}\n```\n\n# Tool\n## jacoco_reporter_server\n\n- Reads JaCoCo XML report and returns coverage data in JSON format\n- Input:\n  - jacoco_xmlreport_path: Path to JaCoCo xml report path(jacoco.xml)\n- Return:\n  - String, formatted JSON data containing coverage metrics\n\nExample output format:\n```json\n[\n    {\n        \"sourcefile\": \"PasswordUtil.java\",\n        \"package\": \"com/cicc/ut/util\",\n        \"lines\": {\n            \"nocovered\": [],\n            \"partiallycovered\": []\n        },\n        \"branch\": {\n            \"nocovered\": [],\n            \"partiallycovered\": []\n        }\n    },\n    {\n        \"sourcefile\": \"UserServiceImpl.java\",\n        \"package\": \"com/cicc/ut/service/impl\",\n        \"lines\": {\n            \"nocovered\": [\n                33,\n                67,\n                69,\n                71,\n                72\n            ],\n            \"partiallycovered\": []\n        },\n        \"branch\": {\n            \"nocovered\": [\n                67\n            ],\n            \"partiallycovered\": [\n                32\n            ]\n        }\n    },\n    {\n        \"sourcefile\": \"Constants.java\",\n        \"package\": \"com/cicc/ut/constants\",\n        \"lines\": {\n            \"nocovered\": [],\n            \"partiallycovered\": []\n        },\n        \"branch\": {\n            \"nocovered\": [],\n            \"partiallycovered\": []\n        }\n    },\n    {\n        \"sourcefile\": \"AuthException.java\",\n        \"package\": \"com/cicc/ut/exceptions\",\n        \"lines\": {\n            \"nocovered\": [],\n            \"partiallycovered\": []\n        },\n        \"branch\": {\n            \"nocovered\": [],\n            \"partiallycovered\": []\n        }\n    },\n    {\n        \"sourcefile\": \"UserService.java\",\n        \"package\": \"com/cicc/ut/service\",\n        \"lines\": {\n            \"nocovered\": [],\n            \"partiallycovered\": []\n        },\n        \"branch\": {\n            \"nocovered\": [],\n            \"partiallycovered\": []\n        }\n    }\n]\n```"
}