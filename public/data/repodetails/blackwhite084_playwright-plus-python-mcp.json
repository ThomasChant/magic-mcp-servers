{
  "mcp_name": "blackwhite084/playwright-plus-python-mcp",
  "mcp_description": "üêç - An MCP python server using Playwright for browser automation,more suitable for llm",
  "mcp_id": "blackwhite084_playwright-plus-python-mcp",
  "fetch_timestamp": "2025-06-23T01:42:38.302803Z",
  "github_url": "https://github.com/blackwhite084/playwright-plus-python-mcp",
  "repository": {
    "name": "playwright-plus-python-mcp",
    "full_name": "blackwhite084/playwright-plus-python-mcp",
    "description": null,
    "html_url": "https://github.com/blackwhite084/playwright-plus-python-mcp",
    "created_at": "2025-01-04T08:23:58Z",
    "updated_at": "2025-06-22T23:44:51Z",
    "pushed_at": "2025-01-07T06:35:52Z",
    "size": 23,
    "stargazers_count": 119,
    "watchers_count": 119,
    "forks_count": 17,
    "open_issues_count": 3,
    "language": "Python",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "master",
    "owner": {
      "login": "blackwhite084",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/53146034?v=4",
      "html_url": "https://github.com/blackwhite084"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 17,
    "subscribers_count": 3,
    "languages": {
      "Python": 15794
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 2,
    "contributors_count": 2
  },
  "readme": "# playwright-server MCP server\n\n\\A MCP server with playwright tools\\\n\n<a href=\"https://glama.ai/mcp/servers/c50bsocgzb\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/c50bsocgzb/badge\" alt=\"Playwright Server MCP server\" /></a>\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements the following tools:\n- `playwright_navigate`: Navigates to a specified URL. This operation will automatically create a new session if there is no active session.\n  - Requires a `url` argument (string).\n- `playwright_screenshot`: Takes a screenshot of the current page or a specific element.\n  - Requires a `name` argument (string) for the screenshot file name.\n  - Optional `selector` argument (string) to specify a CSS selector for the element to screenshot. If no selector is provided, a full-page screenshot is taken.\n- `playwright_click`: Clicks an element on the page using a CSS selector.\n  - Requires a `selector` argument (string) to specify the CSS selector for the element to click.\n- `playwright_fill`: Fills out an input field.\n  - Requires a `selector` argument (string) to specify the CSS selector for the input field.\n  - Requires a `value` argument (string) to specify the value to fill.\n- `playwright_evaluate`: Executes JavaScript code in the browser console.\n  - Requires a `script` argument (string) to specify the JavaScript code to execute.\n- `playwright_click_text`: Clicks an element on the page by its text content.\n  - Requires a `text` argument (string) to specify the text content of the element to click.\n- `playwright_get_text_content`: Get the text content of all visiable elements.\n- `playwright_get_html_content`: Get the HTML content of the page.\n  - Requires a `selector` argument (string) to specify the CSS selector for the element.\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"playwright-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"C:\\Users\\xxxxx\\Documents\\project\\python\\mcp\\playwright-server\",\n        \"run\",\n        \"playwright-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"playwright-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"playwright-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory C:\\Users\\YUNYING\\Documents\\project\\python\\mcp\\playwright-server run playwright-server\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n"
}