{
  "mcp_name": "NomotoK/doris-mcp-server",
  "mcp_description": "Facilitates secure, read-only SQL queries and schema exploration on Apache Doris databases for LLM applications.",
  "mcp_id": "NomotoK_doris-mcp-server",
  "fetch_timestamp": "2025-06-23T07:09:10.788571Z",
  "github_url": "https://github.com/NomotoK/doris-mcp-server",
  "repository": {
    "name": "doris-mcp-server",
    "full_name": "NomotoK/doris-mcp-server",
    "description": "A MCP server that supports Apache Doris for safe relational database queries (read-only)",
    "html_url": "https://github.com/NomotoK/doris-mcp-server",
    "created_at": "2025-04-25T01:25:36Z",
    "updated_at": "2025-05-09T05:00:09Z",
    "pushed_at": "2025-05-14T07:30:09Z",
    "size": 101,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "NomotoK",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/99944622?v=4",
      "html_url": "https://github.com/NomotoK"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "Python": 22244,
      "Shell": 6994
    },
    "language_percentages": {
      "Python": 76.08,
      "Shell": 23.92
    },
    "pull_requests_count": 16,
    "contributors_count": 1,
    "latest_release": {
      "tag_name": "v0.0.2",
      "name": "v0.0.2",
      "published_at": "2025-05-09T04:37:32Z",
      "body": "Promoting `v0.0.2-b1` to a full release.\r\n\r\n## What's Changed\r\n\r\nVersion `0.0.2` introduces important performance improvements and user experience optimization over the previous `0.0.1` version.\r\n\r\n#### Important changes include:\r\n\r\n**1. The database connection URL can now be passed in as a command line argument and can be set in the configuration json of the MCP client**\r\n\r\nExample with Cline:\r\n\r\n```json\r\n{\r\n  \"mcpServers\": {\r\n    \"DorisAnalytics\": {\r\n      \"disabled\": false,\r\n      \"timeout\": 60,\r\n      \"command\": \"uv\",\r\n      \"args\": [\r\n        \"--directory\",\r\n        \"absolute/path/to/mcp/server\",\r\n        \"run\",\r\n        \"server\",\r\n        \"doris://user:pass@localhost:9030/mydb\"\r\n      ],\r\n      \"transportType\": \"stdio\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nPassing database URL in command line arguments when running in terminal:\r\n\r\n```bash\r\nserver doris://user:pass@localhost:9030/mydb\r\n```\r\n\r\nThe `.env` file is now used to store default database connection. You can still override it with setup.sh or manually editing the `.env` file. This way the database connection will be permanently stored without entering the database connection every time when running through command.\r\n\r\n**2. Database connector has switched to connection pool, allowing more robust connection.**\r\n\r\nThe server is now depend on `DBUtils` to implement pooling connection. You can install it by running one of the following commands:\r\n\r\n```bash\r\nuv add DBUtils\r\n```\r\n**3. Update the MCP server with an asynchronous architecture**\r\n\r\nFastMCP is built on FastAPI or compatible asynchronous HTTP frameworks that naturally support asynchronous I/O. Using asynchronous architecture improves concurrency capabilities and save resources, and is in line with FastMCP design.\r\n\r\n**4. A smarter `setup.sh`**\r\n\r\n`setup.sh` can now automatically detect the Python version, automatically install `uv`, and automatically activate the virtual environment during installation. You can also skip the database configuration step during installation and use the default settings.\r\n\r\n#### Minor updates\r\n\r\n- Added a set of prompt for MCP tools.\r\n- Added a multi-round dialogue template to the prompt word module.\r\n- Added a resource function to get the number of table rows.\r\n- Implement the progress reporting mechanism of the `run_select_query` function.\r\n- Added database connection test in `test.py`.\r\n- Setup GitHub Actions.\r\n- Update documents.\r\n\r\n## Breaking Changes\r\n\r\n- The program entry point is now moved to `__init__.py` at the top of the package, which will start the server when you run the module with `python -m doris_mcp_server`. \r\n- The server now requires MCP Python SDK >= 1.8.0.\r\n\r\n* update readme by @NomotoK in https://github.com/NomotoK/doris-mcp-server/pull/9\r\n* perf: connection pool and command line args by @NomotoK in https://github.com/NomotoK/doris-mcp-server/pull/10\r\n* Execute the program using asynchronous functions by @NomotoK in https://github.com/NomotoK/doris-mcp-server/pull/11\r\n* feat: process reporting, tool description and row count by @NomotoK in https://github.com/NomotoK/doris-mcp-server/pull/12\r\n* update: test, docs and setup.sh by @NomotoK in https://github.com/NomotoK/doris-mcp-server/pull/13\r\n* update: INSTALL.md and setup.sh by @NomotoK in https://github.com/NomotoK/doris-mcp-server/pull/14\r\n* update: setup github actions, setup.sh and docs update by @NomotoK in https://github.com/NomotoK/doris-mcp-server/pull/15\r\n\r\n\r\n**Full Changelog**: https://github.com/NomotoK/doris-mcp-server/compare/v0.0.1...v0.0.2",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.0.2",
        "commit_sha": "aca1ec9d1890be116ab07602c4cba148246e2cc8"
      },
      {
        "name": "v0.0.2-b1",
        "commit_sha": "265d88c71a04695a561d53606b8542a7ad555bcb"
      },
      {
        "name": "v0.0.2-a3",
        "commit_sha": "94ac129b9204bd93bdbb99a2418c175c79011c67"
      },
      {
        "name": "v0.0.2-a2",
        "commit_sha": "a143545ed316ba6ee56f9f97cb8bef5524e8a83e"
      },
      {
        "name": "v0.0.2-a1",
        "commit_sha": "253019cefc7e9280d840478fd147d28c6f90ff97"
      },
      {
        "name": "v0.0.1",
        "commit_sha": "c88e251285ee30deb6a530579180010adabe7871"
      },
      {
        "name": "v0.0.1-a1",
        "commit_sha": "7ef8dc889547793d0dbc0c388ca0df25306cbec2"
      }
    ],
    "latest_version": "v0.0.2"
  },
  "readme": "# **üìñ Doris-MCP-Server**\n\nA lightweight **MCP server** designed for connecting to **Apache Doris** or other **MySQL compatible** database schemas, providing tools and prompts for LLM applications.\n\nThis server enables LLMs and MCP clients to explore database schemas, run read-only SQL queries, and leverage pre-built analytical prompts ‚Äî all through a standardized, secure MCP interface.\n\n> [!WARNING]\n> This is an early developer version of doris-mcp-server. Some functions may not operate properly and minor bugs may exist. If you have any quesions, please open an [issue](https://github.com/NomotoK/Doris-MCP-Server/issues).\n\n## **üöÄ Features**\n\n### **üõ†Ô∏è Tools**\n\n- Execute **read-only SQL queries** against your Doris database.\n- Perform **data analysis operations** such as retrieving yearly, monthly, and daily usage data.\n- Query metadata such as **database schemas**, **table structures**, and **resource usage**.\n- Connection Pooling: Efficient **connection management with pooling** to optimize performance.\n- Asynchronous Execution: Support for **asynchronous query** execution to improve responsiveness.\n\n### **üß† Prompts**\n\n- Built-in prompt templates to assist LLMs in asking **analytics questions**.\n- Support for **multi-role prompting** to enhance the interaction between LLMs and the Doris database.\n- Support for **user-defined** and **general-purpose** SQL analysis prompts.\n\n### **üóÇÔ∏è Resources**\n\n- Expose your Doris **database schema** as **structured resources**.\n- Allow LLMs to **contextually access** table and field definitions to improve query understanding.\n\n## **üì¶ Installation Options**\n\nWe recommend using [uv](https://docs.astral.sh/uv/) to manage your Python environment.\n\n### **Option 1: Install via¬†shell script**\n\n> **Recommended for personal and server deployment**\n\nThis is the easiest way to install. Please copy the [`setup.sh`](setup.sh)  file in project and run it locally. For more information please refer: [Doris MCP install guide](INSTALL.md)\n\n1. Copy the [`setup.sh`](setup.sh) to local.\n2. Make the script executable:\n\n```bash\nchmod +x setup.sh\n```\n\n3. Run the script:\n\n```bash\n./setup.sh\n```\n\nThe script will automatically install the server and help you walk through database configuration.\n\n### **Option 2: Install via¬†`pip`**\n\n> **Recommended for production usage**\n\n```bash\npip install doris-mcp-server\n```\n\n‚úÖ After installation, the command-line tool server will be available to launch the MCP server.\n\n### **Option 3: Clone the source and install manually**\n\n> **Recommended if you want to modify the server**\n\n1. Fork and clone the repository:\n\n```bash\ngit clone https://github.com/YOUR_USERNAME/doris-mcp-server.git\ncd doris-mcp-server\n```\n\n1. Set up a local Python environment using [uv](https://github.com/astral-sh/uv):\n\n```bash\nuv venv # Create a virtual environment\nuv sync # Install dependencies\n\n# Activate the virtual environment\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\nuv pip install\n```\n\n1. Add this server to your LLM client or Run the server:\n\n```bash\nuv run server doris://user:pass@localhost:9030/mydb\n```\n\n### **Option 4: Install using uv directly**\n\n> **For local editable installations**\n\n```bash\nuv pip install 'git+https://github.com/NomotoK/doris-mcp-server.git'\nuv sync\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\nuv pip install -e .\n\nuv run server doris://user:pass@localhost:9030/mydb\n```\n\n## **‚öôÔ∏è Post-Installation Setup**\n\n### **Step 1: Configure `.env` file (optional)**\n\nUse the .env file to permanently save your database connection information in the MCP server, so you do not need to enter the database connection every time you run the MCP server with CLI. Of course, **this step is not necessary**, if you are using a MCP-capatible LLM client, you can also **set up a database connection in the configuration file** of the MCP client later (See step2). Please follow these steps to finish configuration:\n\n#### **Configure through shell script**\n\nThis is the most recommended and easiest way to setup. Please refer to [Doris MCP install guide](INSTALL.md).\n\n#### **Configure manually in `.env`**\n\nAfter installing, navigate to the `doris_mcp_server/config/` directory inside your project directory. If you are using pip, your package will be installed in Python site-packages:\n\n- **Mac/Linux:** `/Users/YOUR_USERNAME/.local/lib/python3.x/site-packages/doris_mcp_server/config/`\n\n- **Windows:** `C:\\Users\\YOUR_USERNAME\\AppData\\Local\\Programs\\Python\\Python3x\\Lib\\site-packages\\doris_mcp_server\\config\\`\n\nYou can run the following command to locate pip install location:\n\n```bash\npip show doris-mcp-server\n```\n\nYou will find a `.env.example` file:\n\n1. Copy `.env.example` to `.env`:\n\n```bash\ncp .env.example .env\n```\n\n2. Edit .env to set your **Doris** database connection information:\n\n```bash\nDB_HOST=your-doris-host\nDB_PORT=9030\nDB_USER=your-username\nDB_PASSWORD=your-password\nDB_NAME=your-database\n\nMCP_SERVER_NAME=DorisAnalytics\nDEBUG=false\n```\n\n> [!NOTE]\n> If `.env `is missing, the server will attempt to auto-create it from `.env.example` but you must manually fill in correct credentials.\n\n### **Step 2: Configure MCP Client**\n\nTo connect this server to an MCP-compatible client (e.g., Claude Desktop, CherryStudio, Cline), you need to modify your MCP client configuration JSON.\n\nExample if you are using CherryStudio:\n\n- name: doris-mcp-server\n- type: stdio\n- command: absolute/path/to/your/uv\n- arguments:\n\n```bash\n--directory\n/Users/hailin/dev/Doris-MCP-Server\nrun\nserver\ndoris://user:pass@localhost:9030/mydb\n```\n\n\nExample if you are installing with pip (`mcp_setting.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"DorisAnalytics\": {\n      \"command\": \"server\",\n      \"args\": [\"doris://user:pass@localhost:9030/mydb\"],\n      \"transportType\": \"stdio\"\n    }\n  }\n}\n```\n\nIf you are installing with source code/uv or using [`setup.sh`](setup.sh):\n\n```json\n{\n\"mcpServers\": {\n\t\"DorisAnalytics\": {\n\t\t\"disabled\": false,\n\t\t\"timeout\": 60,\n\t\t\"command\": \"absolute/path/to/uv\",\n\t\t\"args\": [\n\t\t\t\"--directory\",\n\t\t\t\"absolute/path/to/mcp/server\",\n\t\t\t\"run\",\n\t\t\t\"server\"\n\t\t\t\"doris://user:pass@localhost:9030/mydb\"\n\t\t],\n\t\t\"transportType\": \"stdio\"\n\t\t}\n\t}\n\n}\n```\nNote that you can use `uv` and `server` instead of passing absolute path in config file, but you need to make sure that `uv` is in your `PATH`.\n\n**Connection URL**\n\nRemember to replace `doris://user:pass@localhost:9030/mydb` with your actual database connection string.\n\nFor more information on how to configure your client, please refer to :\n\n[For Server Developers - Model Context Protocol - Claude](https://modelcontextprotocol.io/quickstart/server)\n\n[Config and Using MCP | CherryStudio](https://docs.cherry-ai.com/advanced-basic/mcp/config)\n\n‚úÖ Now your LLM client will discover Doris Analytics tools, prompts, and resources through the MCP server.\n\n---\n\n## **üñ•Ô∏è Usage**\n\n### **Testing MCP server (optional)**\n\nBefore you start, you can run the `test.py` in the project `src/doris-mcp-server` directory to directly call the MCP Server functional interface to test database connection, resources, tools, etc. without using LLM (such as Claude, GPT, etc. models). You can control what functions to test by passing arguments through the command line.\n\nTest all resources exposed by the server:\n\n```bash\npython test.py --server server.py --test resources\n```\n\nor test all the tools provided by the server:\n\n```bash\npython test.py --server server.py --test tools\n```\n\nor test database connection:\n\n```bash\npython test.py --server \"doris://user:pass@localhost:9030/mydb\" --test dbconfig\n```\n\nor test all functions of resources, tools, and prompt words at one time:\n\n```bash\npython test.py --server server.py --test all\n```\n\n### **Testing Database connection and run server**\n\nLaunch the MCP server by running the command:\n\n```bash\nserver doris://user:pass@localhost:9030/mydb\n```\n\nOr manually:\n\n```bash\npython -m doris_mcp_server.server doris://user:pass@localhost:9030/mydb\n```\n\nThe server immediately attempts to connect to the database. If the connection is successful, after startup, you should see:\n\n```bash\nüöÄ Doris MCP Server is starting...\n[DorisConnector] Connected to 127.0.0.1:9030\n‚úÖ Database connection successful.\n[DorisConnector] Connection closed.\n```\n\nYou can now use the tools and prompts inside your MCP client.\n\n## **üìö Project Structure Overview**\n\n```bash\nsrc/\n‚îî‚îÄ‚îÄ doris_mcp_server/\n\t‚îú‚îÄ‚îÄ config/             # Configuration files\n\t‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n\t‚îÇ   ‚îú‚îÄ‚îÄ config.py       # Loads environment variables\n\t‚îÇ   ‚îú‚îÄ‚îÄ .env.example    # Environment variables template\n\t‚îÇ   ‚îî‚îÄ‚îÄ .env            # Stores your database credentials\n\t‚îÇ\n\t‚îú‚îÄ‚îÄ db/                 # Database interaction logic\n\t‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n\t‚îÇ   ‚îú‚îÄ‚îÄ db.py           # Doris database connection class\n\t‚îÇ   ‚îî‚îÄ‚îÄ tools.py        # SQL query execution tools\n\t‚îÇ\n\t‚îú‚îÄ‚îÄ res/                # Resource definitions (e.g., schemas)\n\t‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n\t‚îÇ   ‚îî‚îÄ‚îÄ resources.py\n\t‚îÇ\n\t‚îú‚îÄ‚îÄ prompts/            # Prebuilt prompt templates\n\t‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n\t‚îÇ   ‚îú‚îÄ‚îÄ general_prompts.py\n\t‚îÇ   ‚îî‚îÄ‚îÄ customize_prompts.py\n\t‚îÇ\n\t‚îú‚îÄ‚îÄ __init__.py         # Main entry point to start the MCP server\n\t‚îú‚îÄ‚îÄ server.py           # Server launcher\n\t‚îú‚îÄ‚îÄ mcp_app.py          # MCP server instance\n\t‚îî‚îÄ‚îÄ test.py             # Unit test script\nREADME.md                   # Documentation\nINSTALL.md                  # Installation guide\nLISENCE                     # Lisence\nsetup.sh                    # Auto setup wizard\npyproject.toml              # Project build configuration\n.gitignore                  # Git ignore settings\n```\n\n## **üìú License**\n\nThis project is licensed under the [MIT License](LICENSE).\n\n## **üåüAcknowledgements**\n\n- Built using the [MCP Python SDK](https://pypi.org/project/mcp/).\n- Based on: [MCP](https://modelcontextprotocol.io/introduction): The Model Context Protocol, a standard for LLMs to interact with external data sources.\n- [Apache Doris](https://doris.apache.org/): An open-source, high-performance, real-time analytical database.\n- [PyMySQL](https://pypi.org/project/PyMySQL/): A Python MySQL client library for database interaction.\n- Inspired by MCP official examples and best practices.\n---\n\n## **ü§ù Contributions**\n\nContributions are welcome! Feel free to open issues or submit pull requests."
}