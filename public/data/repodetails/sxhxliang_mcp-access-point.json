{
  "mcp_name": "sxhxliang/mcp-access-point",
  "mcp_description": "üìá ‚òÅÔ∏è üè† üçé ü™ü üêß - Turn a web service into an MCP server in one click without making any code changes.",
  "mcp_id": "sxhxliang_mcp-access-point",
  "fetch_timestamp": "2025-06-23T08:44:46.956411Z",
  "github_url": "https://github.com/sxhxliang/mcp-access-point",
  "repository": {
    "name": "mcp-access-point",
    "full_name": "sxhxliang/mcp-access-point",
    "description": "Turn a web server into an MCP server in one click without making any code changes.",
    "html_url": "https://github.com/sxhxliang/mcp-access-point",
    "created_at": "2025-04-06T15:35:00Z",
    "updated_at": "2025-06-23T06:37:17Z",
    "pushed_at": "2025-06-23T06:37:14Z",
    "size": 386,
    "stargazers_count": 49,
    "watchers_count": 49,
    "forks_count": 11,
    "open_issues_count": 0,
    "language": "Rust",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "sxhxliang",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/8338091?v=4",
      "html_url": "https://github.com/sxhxliang"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 11,
    "subscribers_count": 1,
    "languages": {
      "Rust": 586093,
      "Dockerfile": 828,
      "Shell": 811,
      "RenderScript": 1
    },
    "language_percentages": {
      "Rust": 99.72,
      "Dockerfile": 0.14,
      "Shell": 0.14,
      "RenderScript": 0
    },
    "pull_requests_count": 2,
    "contributors_count": 3,
    "latest_release": {
      "tag_name": "v0.1.2",
      "name": "v0.1.2",
      "published_at": "2025-06-22T13:52:23Z",
      "body": "**Full Changelog**: https://github.com/sxhxliang/mcp-access-point/compare/v0.1.1...v0.1.2\r\n\r\n## convert openapi path to mcp tool name\r\n\r\n### ‚úÖ 1. Branch Logic \r\n\r\n1. **HTTP Method Mapping**:\r\n   - Uses `method_mapping` to convert standard methods to semantic actions (e.g., `\"post\"` ‚Üí `\"create\"`)\r\n   - Falls back to original method name if not in mapping (e.g., `\"custom\"` ‚Üí `\"custom\"`)\r\n\r\n2. **Path Processing**:\r\n   - Splits path into segments (`split('/')`)\r\n   - Filters out empty segments\r\n   - For each segment:\r\n     - Converts parameter segments (wrapped in `{}`) to `by_xxx` format (e.g., `{id}` ‚Üí `by_id`)\r\n     - Keeps normal segments unchanged (e.g., `\"users\"` ‚Üí `\"users\"`)\r\n\r\n3. **Result Construction**:\r\n   - Joins method action and path segments with underscores (e.g., `get_users_by_id`)\r\n\r\n---\r\n\r\n### ‚úÖ 2. Case Design\r\n\r\n| Test ID | Input method | Input path         | Expected Output          | Description |\r\n|---------|-------------|-------------------|--------------------------|-------------|\r\n| TC01    | `\"get\"`     | `\"/users/{id}\"`   | `\"get_users_by_id\"`      | GET + path parameter |\r\n| TC02    | `\"post\"`    | `\"/users\"`        | `\"create_users\"`         | POST mapping |\r\n| TC03    | `\"put\"`     | `\"/users/{id}\"`   | `\"update_users_by_id\"`   | PUT mapping |\r\n| TC04    | `\"delete\"`  | `\"/users/{id}\"`   | `\"delete_users_by_id\"`   | DELETE mapping |\r\n| TC05    | `\"head\"`    | `\"/users\"`        | `\"head_users\"`           | HEAD mapping |\r\n| TC06    | `\"patch\"`   | `\"/users/{id}/edit\"` | `\"patch_users_by_id_edit\"` | Multiple path segments |\r\n| TC07    | `\"custom\"`  | `\"/test\"`         | `\"custom_test\"`          | Custom method |\r\n| TC08    | `\"get\"`     | `\"\"`              | `\"get\"`                  | Empty path |\r\n| TC09    | `\"get\"`     | `\"/\"`             | `\"get\"`                  | Root path only |\r\n| TC10    | `\"get\"`     | `\"/{id}\"`         | `\"get_by_id\"`            | Single path parameter |\r\n",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.1.2",
        "commit_sha": "c17a712d293a3df987435917261b76307e5f47a9"
      },
      {
        "name": "v0.1.1",
        "commit_sha": "5620bff54e0cca4170d163e89515b8e49bd6c25c"
      },
      {
        "name": "v0.1.0",
        "commit_sha": "3c8131ebe72c1433be723d17cf7400a908e18ef4"
      },
      {
        "name": "v0.0.1",
        "commit_sha": "4cae533616754511159f054b45265cbe97eeb73a"
      },
      {
        "name": "v0.0.1-alpha",
        "commit_sha": "780a2672ebc4607cd0b24fedad5234d94dd9a873"
      }
    ],
    "latest_version": "v0.1.2"
  },
  "readme": "# MCP Access Point  \r\n\r\n`MCP Access Point` is a lightweight protocol conversion gateway tool designed to establish a communication bridge between traditional `HTTP` services and `MCP` (Model Context Protocol) clients. It enables MCP clients to interact directly with existing HTTP services without requiring any server-side interface modifications.  \r\n<p align=\"center\">\r\n  <a href=\"./README.md\"><img alt=\"README in English\" src=\"https://img.shields.io/badge/English-4578DA\"></a>\r\n  <a href=\"./README_CN.md\"><img alt=\"ÁÆÄ‰Ωì‰∏≠ÊñáÁâà\" src=\"https://img.shields.io/badge/ÁÆÄ‰Ωì‰∏≠Êñá-F40002\"></a>\r\n  <a href=\"https://deepwiki.com/sxhxliang/mcp-access-point\"><img src=\"https://deepwiki.com/badge.svg\" alt=\"Ask DeepWiki\"></a>\r\n</p>\r\n\r\n## Introduction  \r\nThis project is built on `Pingora` - an ultra-high performance gateway proxy library capable of supporting massive-scale request proxy services. Pingora has been used to build services that handle core traffic for the Cloudflare platform, consistently serving over 40 million requests per second across the internet for years. It has become the technical cornerstone supporting a significant proportion of traffic on the Cloudflare platform.\r\n\r\n## HTTP to MCP  \r\nThis mode allows clients like `Cursor Desktop` to communicate with remote HTTP servers through `SSE`, even when the servers themselves don't support the SSE protocol.\r\n\r\n- Example setup includes two services:  \r\n  - Service 1 runs locally at `127.0.0.1:8090`  \r\n  - Service 2 runs remotely at `api.example.com`  \r\n- Through the `MCP Access Point`, both services can be converted to MCP services without any code modifications.  \r\n- Clients communicate with `Service 1` and `Service 2` via the MCP protocol. The MCP Access Point automatically distinguishes MCP requests and forwards them to the appropriate backend services.\r\n\r\n```mermaid\r\ngraph LR\r\n   A[\"Cursor Desktop\"] <--> |SSE| B[\"MCP Access Point\"]\r\n   A2[\"Other Desktop\"] <--> |Streamable Http| B[\"MCP Access Point\"]\r\n   B <--> |http 127.0.0.1:8090| C1[\"Existing API Server\"]\r\n   B <--> |https//api.example.com| C2[\"Existing API Server\"]\r\n  \r\n   style A2 fill:#ffe6f9,stroke:#333,color:black,stroke-width:2px\r\n   style A fill:#ffe6f9,stroke:#333,color:black,stroke-width:2px\r\n   style B fill:#e6e6af,stroke:#333,color:black,stroke-width:2px\r\n   style C1 fill:#e6ffe6,stroke:#333,color:black,stroke-width:2px\r\n   style C2 fill:#e6ffd6,stroke:#333,color:black,stroke-width:2px\r\n```\r\n\r\n### Transport Type (Specification)\r\nCurrently supports `SSE` and `Streamable HTTP` protocols:\r\n- ‚úÖ Streamable HTTP (stateless) 2024-03-26\r\n  - All services: `ip:port/mcp`\r\n  - Single service: `ip:port/api/{service_id}/mcp`\r\n  \r\n- ‚úÖ SSE 2024-11-05\r\n  - All services: `ip:port/sse`\r\n  - Single service: `ip:port/api/{service_id}/sse/`\r\n\r\nuse `IP:PORT/sse` for `SSE` \r\nuse `IP:PORT/mcp` for `Streamable HTTP` \r\n\r\n### Supported MCP clients\r\n- ‚úÖ [MCP Inspector](https://github.com/modelcontextprotocol/inspector)\r\n- ‚úÖ [Cursor Desktop](https://docs.cursor.com/context/model-context-protocol)\r\n\r\n## Core Features  \r\n- **Protocol Conversion**: Seamless conversion between HTTP and MCP protocols  \r\n- **Zero-Intrusive Integration**: Full compatibility with existing HTTP services  \r\n- **Client Empowerment**: Enables MCP clients to directly call standard HTTP services  \r\n- **Lightweight Proxy**: Minimalist architecture with efficient protocol conversion  \r\n- **Multi-tenancy**: Independent configuration and endpoints for each tenant\r\n\r\n## Quick Start  \r\n\r\n### Installation  \r\n```bash\r\n# Install from source\r\ngit clone https://github.com/sxhxliang/mcp-access-point.git\r\ncd mcp-access-point\r\ncargo run -- -c config.yaml\r\n\r\n# Use inspector for debugging (start service first)\r\nnpx @modelcontextprotocol/inspector node build/index.js\r\n# Access http://127.0.0.1:6274/\r\n# Select \"see\" and enter 0.0.0.0:8080/sse, then click connect\r\n# or select \"Streamable HTTP\" and enter 0.0.0.0:8080/mcp\r\n```\r\n\r\n### Multi-tenancy Support\r\nThe MCP Access Gateway supports multi-tenancy, where each tenant can configure multiple MCP services accessible via:\r\n- `/api/{mcp-service-id}/sse` (for SSE)\r\n- `/api/{mcp-service-id}/mcp` (for Streamable HTTP)\r\n\r\nExample configuration:\r\n```yaml\r\n# config.yaml example (supports multiple services)\r\n\r\nmcps:\r\n  - id: service-1 # Access via /api/service-1/sse or /api/service-1/mcp\r\n    ... # Service configuration\r\n  - id: service-2 # Access via /api/service-2/sse or /api/service-2/mcp\r\n    ... # Service configuration\r\n  - id: service-3 # Access via /api/service-3/sse or /api/service-3/mcp\r\n    ... # Service configuration\r\n```\r\n\r\nTo access all services simultaneously, use:\r\n- `0.0.0.0:8080/mcp` (Streamable HTTP)\r\n- `0.0.0.0:8080/sse` (SSE)\r\n\r\n### Configuration Details\r\n1. **`-c config.yaml`**\r\n   - `-c` (or `--config`) specifies the configuration file path (`config.yaml`).\r\n   - This file defines the APIs that the MCP Access Point will proxy and convert.\r\n\r\n### config.yaml Example\r\nThe configuration file supports multi-tenancy, allowing independent configuration of upstream services and routing rules for each MCP service. Key configuration items include:\r\n\r\n1. **mcps** - MCP service list\r\n   - `id`: Unique service identifier used to generate access paths\r\n   - `upstream_id`: Associated upstream service ID\r\n   - `path`: OpenAPI specification file path (local or remote)\r\n   - `routes`: Custom routing configuration (optional)\r\n   - `upstream`: Upstream service specific configuration (optional)\r\n\r\n2. **upstreams** - Upstream service configuration\r\n   - `id`: Upstream service ID\r\n   - `nodes`: Backend node addresses and weights\r\n   - `type`: Load balancing algorithm (roundrobin/random/ip_hash)\r\n   - `scheme`: Upstream protocol (http/https)\r\n   - `pass_host`: HTTP Host header handling\r\n   - `upstream_host`: Override Host header value\r\n\r\nComplete configuration example:\r\n```yaml\r\n# config.yaml example (supports multiple services)\r\nmcps:\r\n  - id: service-1 # Unique identifier, accessible via /api/service-1/sse or /api/service-1/mcp\r\n    upstream_id: 1\r\n    path: config/openapi_for_demo_patch1.json # Local OpenAPI spec path\r\n\r\n  - id: service-2 # Unique identifier\r\n    upstream_id: 2\r\n    path: https://petstore.swagger.io/v2/swagger.json # Remote OpenAPI spec\r\n\r\n  - id: service-3 \r\n    upstream_id: 3\r\n    routes: # Custom routing\r\n      - id: 1\r\n        operation_id: get_weather\r\n        uri: /points/{latitude},{longitude}\r\n        method: GET\r\n        meta:\r\n          name: Get Weather\r\n          description: Retrieve weather information by coordinates\r\n          inputSchema: # Optional input validation\r\n            type: object\r\n            required:\r\n              - latitude\r\n              - longitude\r\n            properties:\r\n              latitude:\r\n                type: number\r\n                minimum: -90\r\n                maximum: 90\r\n              longitude:\r\n                type: number\r\n                minimum: -180\r\n                maximum: 180\r\n\r\nupstreams: # Required upstream configuration\r\n  - id: 1\r\n    headers: # Headers to send to upstream service\r\n      X-API-Key: \"12345-abcdef\"        # API key\r\n      Authorization: \"Bearer token123\" # Bearer token\r\n      User-Agent: \"MyApp/1.0\"          # User agent\r\n      Accept: \"application/json\"       # Accept header\r\n    nodes: # Backend nodes (IP or domain)\r\n      \"127.0.0.1:8090\": 1 # Format: address:weight\r\n\r\n  - id: 2 \r\n    nodes:\r\n      \"127.0.0.1:8091\": 1\r\n\r\n  - id: 3 \r\n    nodes:\r\n      \"api.weather.gov\": 1\r\n    type: roundrobin # Load balancing algorithm\r\n    scheme: https # Protocol\r\n    pass_host: rewrite # Host header handling\r\n    upstream_host: api.weather.gov # Override Host\r\n```\r\n\r\nTo run the MCP Access Gateway with config file:\r\n```bash\r\ncargo run -- -c config.yaml\r\n```\r\n\r\n## Running via Docker  \r\n\r\n### Build Docker Image (Optional)  \r\n```bash\r\n# Clone repository\r\ngit clone https://github.com/sxhxliang/mcp-access-point.git\r\ncd mcp-access-point\r\n\r\n# Build image\r\ndocker build -t liangshihua/mcp-access-point:latest .\r\n```\r\n\r\n### Run Docker Container  \r\n```bash\r\n# Using environment variables (service running on host)\r\n# Note: Replace /path/to/your/config.yaml with actual path\r\n\r\ndocker run -d --name mcp-access-point --rm \\\r\n  -p 8080:8080 \\\r\n  -e port=8080 \\\r\n  -v /path/to/your/config.yaml:/app/config/config.yaml \\\r\n  liangshihua/mcp-access-point:latest\r\n```\r\n\r\n### Environment Variables  \r\n- `port`: MCP Access Point listening port (default: 8080)\r\n\r\n## Typical Use Cases  \r\n\r\n- **Progressive Architecture Migration**: Facilitate gradual transition from HTTP to MCP  \r\n- **Hybrid Architecture Support**: Reuse existing HTTP infrastructure within MCP ecosystem  \r\n- **Protocol Compatibility**: Build hybrid systems supporting both protocols  \r\n\r\n**Example Scenario**:  \r\nWhen MCP-based AI clients need to interface with legacy HTTP microservices, the MCP Access Gateway acts as a middleware layer enabling seamless protocol conversion."
}