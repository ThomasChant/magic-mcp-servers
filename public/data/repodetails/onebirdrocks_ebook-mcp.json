{
  "mcp_name": "eBook-mcp",
  "mcp_description": "A lightweight MCP server that allows LLMs to read and interact with your personal PDF and EPUB ebooks on your local machine. Ideal for building AI reading assistants or chat-based ebook interfaces.",
  "mcp_id": "onebirdrocks_ebook-mcp",
  "fetch_timestamp": "2025-06-23T02:46:13.658666Z",
  "github_url": "https://github.com/onebirdrocks/ebook-mcp",
  "repository": {
    "name": "ebook-mcp",
    "full_name": "onebirdrocks/ebook-mcp",
    "description": "A MCP server that supports mainstream eBook formats including EPUB, PDF and more. Simplify your eBook user experience with LLM.",
    "html_url": "https://github.com/onebirdrocks/ebook-mcp",
    "created_at": "2025-03-19T08:53:23Z",
    "updated_at": "2025-06-22T11:13:21Z",
    "pushed_at": "2025-06-20T16:32:32Z",
    "size": 1730,
    "stargazers_count": 33,
    "watchers_count": 33,
    "forks_count": 7,
    "open_issues_count": 3,
    "language": "Python",
    "license": "Apache License 2.0",
    "topics": [
      "ebook",
      "epub",
      "examples",
      "mcp",
      "mcp-client",
      "mcp-examples",
      "mcp-server",
      "pdf"
    ],
    "default_branch": "main",
    "owner": {
      "login": "onebirdrocks",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/48894887?v=4",
      "html_url": "https://github.com/onebirdrocks"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 7,
    "subscribers_count": 1,
    "languages": {
      "Python": 61136
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 2,
    "contributors_count": 2,
    "tags": [
      {
        "name": "v0.1.5",
        "commit_sha": "efcb8d5b748fe4128c725427dc17060327db6778"
      },
      {
        "name": "v0.1.3",
        "commit_sha": "3407c0e0dd0def28874bfe11639335ad28fff719"
      },
      {
        "name": "v0.1.1",
        "commit_sha": "e224a42c4f61ffe1077c39cd08868622cc7b9c66"
      },
      {
        "name": "v0.1.0",
        "commit_sha": "0d59d882bacf77322341016c95f41ce0dd9a877a"
      }
    ],
    "latest_version": "v0.1.5"
  },
  "readme": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/onebirdrocks-ebook-mcp-badge.png)](https://mseep.ai/app/onebirdrocks-ebook-mcp)\n\n# Ebook-MCP\n\n<img src=\"logo.png\" alt=\"ebook-mcp logo\" width=\"132\" height=\"132\">\n\n\nEnglish | [中文](https://github.com/onebirdrocks/ebook-mcp/blob/main/README-CN.md)\n\nEbook-MCP is a powerful Model Context Protocol (MCP) server for processing electronic books. Built on the [Model Context Protocol](https://github.com/modelcontextprotocol), it provides a set of standardized APIs for seamless integration between LLM applications and e-book processing capabilities. Currently supports EPUB and PDF formats.\n\n## Use Cases & Value\n\nEbook-MCP transforms how you interact with your digital books by enabling natural language conversations with your reading materials. It seamlessly integrates with modern AI-powered IDEs like Cursor and Claude, allowing you to:\n\n- **Smart Library Management**: Simply ask \"Show me all EPUB files in my downloads folder\" or \"Find books about GenAI in my library\"\n- **Interactive Reading Experience**: Have natural conversations about your books:\n  - \"Give me a brief introduction to 'LLM Engineer Handbook'\"\n  - \"What's covered in Chapter 3?\"\n  - \"Summarize the key points about RAG from this book\"\n- **Active Learning Support**: Enhance your learning through AI-powered interactions:\n  - \"Create a quiz based on the RAG concepts from Chapter 5\"\n  - \"Explain the differences between the architectures discussed in this chapter\"\n  - \"Give me practical exercises based on the concepts in this section\"\n- **Content Navigation**: Easily navigate through your books with natural language queries:\n  - \"Find all sections discussing prompt engineering\"\n  - \"Show me the chapters about fine-tuning\"\n  - \"Take me to the part about vector databases\"\n\nBy bridging the gap between traditional e-books and AI capabilities, Ebook-MCP helps readers extract more value from their digital library through intuitive, conversation-based interactions.\n\nQuick demo - Run with Deep Seek (Please check all the example's with Claude/OpenAI under mcp-client-example folder) \n```\nQuery:Please check all the epub books in my download folder. user id is onebird.\n......\n\nQuery: Can you ask me a few questions to test my understanding of this book?\n\n\nAnswer: Sure! Here are 5 questions about Elon Musk by Walter Isaacson to test your understanding of the book. Please answer based on your knowledge — I’ll give feedback and add details after each response.\n\nQuestion 1:\nHow did Musk’s childhood and family background shape his personality and career later in life?\n(Hint: His relationship with his father, growing up in South Africa, etc.)\n\nQuestion 2:\nZip2 and X.com (later PayPal) were Musk’s early startups. What problems did they solve? How did Musk eventually exit from these companies?\n(Hint: Zip2’s business model, X.com’s merger with Confinity, etc.)\n\nQuestion 3:\nIn 2008, both SpaceX and Tesla were on the verge of bankruptcy. How did Musk save these two companies?\n(Hint: Falcon 1’s fourth launch, NASA contract, Tesla’s last-minute rescue, etc.)\n\nQuestion 4:\nWhat controversies surround Musk’s management style? What specific incidents in the book illustrate his “hardcore” or “extreme” work culture?\n(Hint: Fremont factory’s “production hell,” Twitter layoffs, etc.)\n\nQuestion 5:\nWhat is Musk’s attitude toward Artificial Intelligence (AI)? Why did he simultaneously support both OpenAI and Neuralink, which seem to have conflicting goals?\n(Hint: AI as an existential threat, brain-machine interface vision, etc.)\n\nPlease answer each question. I’ll provide feedback and additional details or correct any misunderstandings!\n(If a question isn’t clear, feel free to ask me.)\n\nQuery:\nQuestion 1: His father’s abusive attitude made him less empathetic towards others.\nQuestion 2: Zip2 solved the problem of electronic maps and online yellow pages. X.com solved online payments.\nQuestion 3: He secured a contract with NASA. Tesla solved its production problems by building a factory in China.\nQuestion 4: I don’t know. Please answer for me.\nQuestion 5: He believes open-source technology is necessary to ensure AI is safe and open.\n\nAnswer: Your answers have captured some key points from the book. Let me add details, correct some inaccuracies, and provide further background for Questions 4 and 5:\n\nQuestion 1 — Correction & Supplement\nInfluence of His Father:\nMusk's father, Errol, was indeed extremely harsh — for example, forcing young Elon to kneel and count grains of rice for hours. The book emphasizes that this emotional desensitization shaped Musk into an extremely goal-oriented person — indifferent to others’ suffering but obsessively committed to his goals.\n\nReverse Impact:\nIt’s not that Musk is incapable of empathy — it’s selective. For instance, he may treat employees coldly but personally study medical equipment for his son X’s health issues.\n\nQuestion 2 — Correction & Supplement\nZip2:\nEssentially an online Yellow Pages + map navigation service (helping newspapers go online). Musk wrote much of the early code himself and slept in the office. Eventually, Compaq acquired Zip2 for $307 million (Musk received $22 million).\n\nX.com:\nNot just online payments — it was Musk’s attempt to create a comprehensive financial platform (aiming to replace banks). Later merged with Confinity (the precursor of PayPal). Musk was ousted due to internal conflicts, but when eBay acquired PayPal, Musk earned $180 million.\n(Note: Musk later bought back the domain X.com — it’s now Twitter’s parent company name).\n\nQuestion 3 — Correction & Supplement\nSpaceX:\nIn 2008, Falcon 1 succeeded on its fourth launch (after three failures drained their funds). Right after that, SpaceX secured a $1.6 billion NASA contract for cargo resupply — a lifeline for the company.\n\nTesla:\nIn 2008, Tesla survived through a $50 million investment from Daimler and a loan from the U.S. Department of Energy.\nBuilding the Gigafactory in China (2019) came much later. In the early years, survival depended on the launch of Model S (2012) and Musk’s personal gamble — selling all his real estate to fund Tesla.\n\nQuestion 4 — Explanation: Controversy Around His Management Style\n“Hardcore” Culture:\n\nAt SpaceX/Tesla: Musk demanded employees work 80+ hours per week, even sleeping at the factory. (\"If you’re not here, your replacement is.\")\n\nAfter acquiring Twitter: He immediately laid off 75% of staff and asked the remaining employees to sign a \"hardcore commitment\" — agreeing to long hours and high-intensity output.\n\nExtreme Cases:\n\nAt the Fremont Factory: During the \"production hell\" of the Model 3, Musk slept on the production line and once yelled at employees calling them \"worse than dogs\" (he later apologized).\n\nFiring Executives: Musk once fired a senior Tesla executive on the spot because the font size in their PowerPoint presentation wasn’t big enough.\n\nQuestion 5 — Correction & Supplement\nAI Threat Theory:\nMusk believes that AI could destroy humanity (\"more dangerous than nuclear weapons\"). Therefore:\n\nOpenAI: He initially supported it to promote safe, open-source AI (but left later due to disputes over control).\n\nNeuralink: He aims to use brain-machine interfaces to merge humans with AI — to prevent humans from being left behind.\n\nContradictions:\nWhile warning about AI risks, Musk is simultaneously pushing for Full Self-Driving (FSD) technology at Tesla and has founded xAI to research Artificial General Intelligence (AGI).\n\nOverall Evaluation:\n✅ You have captured the key events accurately, but the details need to be strengthened (such as timelines and specific figures).\n🔍 Recommended areas for further study: Musk's multi-threaded management style (running five companies simultaneously) and his skill in media manipulation (governing through Twitter).\n```\n\n## Features\n\n### EPUB Support\n- Extract metadata (title, author, publication date, etc.)\n- Extract table of contents\n- Extract chapter content (with Markdown output)\n- Batch process EPUB files\n\n### PDF Support\n- Extract metadata (title, author, creation date, etc.)\n- Extract table of contents\n- Extract content by page number\n- Extract content by chapter title\n- Markdown output support\n- Batch process PDF files\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/yourusername/ebook-mcp.git\ncd ebook-mcp\n```\n\n2. Install dependencies using `uv`:\n```bash\nuv pip install -r requirements.txt\n```\n\n## Usage\n\n### Starting the MCP Server in development mode\n\nRun the server in development mode:\n```bash\nuv run mcp dev src/ebook_mcp/main.py\n```\n\nYou can visit http://localhost:5173/ for testing & debuging purpose \nYou can also install the inspector for the test.\n```\nnpx @modelcontextprotocol/inspector uv --directory . run src/ebook_mcp/main.py\n```\n\n### Starting the MCP Server in Prod mode\n\nRun the server:\n```bash\nuv run src/ebook_mcp/main.py\n```\n\n\n#### Config the MCP in Cursor\n\nAdd the following configuration in Cursoe\n```bash\n\"ebook-mcp\":{\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/Users/onebird/github/ebook-mcp/src/ebook_mcp/\",\n                \"run\",\n                \"main.py\"\n            ]\n        }\n```\n\n\n\n\n### EPUB Processing Examples\n\n```python\n# Get all EPUB files in a directory\nepub_files = get_all_epub_files(\"/path/to/books\")\n\n# Get EPUB metadata\nmetadata = get_metadata(\"/path/to/book.epub\")\n\n# Get table of contents\ntoc = get_toc(\"/path/to/book.epub\")\n\n# Get specific chapter content (in Markdown format)\nchapter_content = get_chapter_markdown(\"/path/to/book.epub\", \"chapter_id\")\n```\n\n### PDF Processing Examples\n\n```python\n# Get all PDF files in a directory\npdf_files = get_all_pdf_files(\"/path/to/books\")\n\n# Get PDF metadata\nmetadata = get_pdf_metadata(\"/path/to/book.pdf\")\n\n# Get table of contents\ntoc = get_pdf_toc(\"/path/to/book.pdf\")\n\n# Get specific page content\npage_text = get_pdf_page_text(\"/path/to/book.pdf\", 1)\npage_markdown = get_pdf_page_markdown(\"/path/to/book.pdf\", 1)\n\n# Get specific chapter content\nchapter_content, page_numbers = get_pdf_chapter_content(\"/path/to/book.pdf\", \"Chapter 1\")\n```\n\n## API Reference\n\n### EPUB APIs\n\n#### `get_all_epub_files(path: str) -> List[str]`\nGet all EPUB files in the specified directory.\n\n#### `get_metadata(epub_path: str) -> Dict[str, Union[str, List[str]]]`\nGet metadata from an EPUB file.\n\n#### `get_toc(epub_path: str) -> List[Tuple[str, str]]`\nGet table of contents from an EPUB file.\n\n#### `get_chapter_markdown(epub_path: str, chapter_id: str) -> str`\nGet chapter content in Markdown format.\n\n### PDF APIs\n\n#### `get_all_pdf_files(path: str) -> List[str]`\nGet all PDF files in the specified directory.\n\n#### `get_pdf_metadata(pdf_path: str) -> Dict[str, Union[str, List[str]]]`\nGet metadata from a PDF file.\n\n#### `get_pdf_toc(pdf_path: str) -> List[Tuple[str, int]]`\nGet table of contents from a PDF file.\n\n#### `get_pdf_page_text(pdf_path: str, page_number: int) -> str`\nGet plain text content from a specific page.\n\n#### `get_pdf_page_markdown(pdf_path: str, page_number: int) -> str`\nGet Markdown formatted content from a specific page.\n\n#### `get_pdf_chapter_content(pdf_path: str, chapter_title: str) -> Tuple[str, List[int]]`\nGet chapter content and corresponding page numbers by chapter title.\n\n## Dependencies\n\nKey dependencies include:\n- ebooklib: EPUB file processing\n- PyPDF2: Basic PDF processing\n- PyMuPDF: Advanced PDF processing\n- beautifulsoup4: HTML parsing\n- html2text: HTML to Markdown conversion\n- pydantic: Data validation\n- fastmcp: MCP server framework\n\n## Important Notes\n\n1. PDF processing relies on the document's table of contents. Some features may not work if TOC is not available.\n2. For large PDF files, it's recommended to process by page ranges to avoid loading the entire file at once.\n3. EPUB chapter IDs must be obtained from the table of contents structure.\n\n## Architecture\n\n```\n           ┌────────────────────────────┐\n           │         Agent Layer        │\n           │  - Translation Strategy    │\n           │  - Style Consistency Check │\n           │  - LLM Call & Interaction │\n           └────────────▲─────────────┘\n                        │ Tool Calls\n           ┌────────────┴─────────────┐\n           │        MCP Tool Layer     │\n           │  - extract_chapter        │\n           │  - write_translated_chapter│\n           │  - generate_epub          │\n           └────────────▲─────────────┘\n                        │ System/IO Calls\n           ┌────────────┴─────────────┐\n           │     System Base Layer     │\n           │  - File Reading          │\n           │  - ebooklib Parsing      │\n           │  - File Path Storage/Check│\n           └────────────────────────────┘\n```\n\n\n\n## Contributing\n\nWe welcome Issues and Pull Requests!\n\n\n## Changelog\n\n### v1.0.5\n- Initial release\n- EPUB and PDF format support\n- Basic file processing APIs\n- MCP Client examples - Claude, DeepSeek, OpenAI\n- Support to run the server from PyPI\n"
}