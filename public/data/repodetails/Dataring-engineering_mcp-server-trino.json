{
  "mcp_name": "Dataring-engineering/mcp-server-trino",
  "mcp_description": "üêç ‚òÅÔ∏è - Trino MCP Server to query and access data from Trino Clusters.",
  "mcp_id": "Dataring-engineering_mcp-server-trino",
  "fetch_timestamp": "2025-06-23T02:29:45.556455Z",
  "github_url": "https://github.com/Dataring-engineering/mcp-server-trino",
  "repository": {
    "name": "mcp-server-trino",
    "full_name": "Dataring-engineering/mcp-server-trino",
    "description": "MCP Server for Trino",
    "html_url": "https://github.com/Dataring-engineering/mcp-server-trino",
    "created_at": "2025-03-10T10:10:09Z",
    "updated_at": "2025-05-26T20:38:15Z",
    "pushed_at": "2025-04-22T08:27:47Z",
    "size": 8,
    "stargazers_count": 15,
    "watchers_count": 15,
    "forks_count": 7,
    "open_issues_count": 2,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "Dataring-engineering",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/108348170?v=4",
      "html_url": "https://github.com/Dataring-engineering"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 7,
    "subscribers_count": 1,
    "languages": {
      "Python": 8262
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 1,
    "contributors_count": 1
  },
  "readme": "# Trino MCP Server\n\nThis repository provides an MCP (Model-Control-Protocol) server that allows you to list and query tables via Trino using Python.\n\n## Overview\n\n- MCP: MCP is a protocol for bridging AI models, data, and tools. This example MCP server provides:\n    - A list of Trino tables as MCP resources\n    - Ability to read table contents through MCP\n    - A tool for executing arbitrary SQL queries against Trino\n- Trino: A fast, distributed SQL query engine for big data analytics. This server makes use of Trino‚Äôs Python client (trino.dbapi) to connect to a Trino host, catalog, and schema.\n\n## Requirements\n\n- Python 3.9+ (or a version compatible with mcp, trino, and asyncio)\n- trino (the Python driver for Trino)\n- mcp (the Model-Control-Protocol Python library)\n\n## Configuration\n\nThe server reads Trino connection details from environment variables:\n\n| Variable         | Description                                                          | Default     |\n|------------------|----------------------------------------------------------------------|------------|\n| `TRINO_HOST`     | Trino server hostname or IP                                          | `localhost`|\n| `TRINO_PORT`     | Trino server port                                                    | `8080`     |\n| `TRINO_USER`     | Trino user name                                                      | *required* |\n| `TRINO_PASSWORD` | Trino password (optional, depends on your authentication setup)      | (empty)    |\n| `TRINO_CATALOG`  | Default catalog to use (e.g., `hive`, `tpch`, `postgresql`, etc.)    | *required* |\n| `TRINO_SCHEMA`   | Default schema to use (e.g., `default`, `public`, etc.)             | *required* |\n\n## Usage\n\n``` json\n{\n  \"mcpServers\": {\n    \"trino\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\", \n        \"<path_to_mcp_server_trino>\",\n        \"run\",\n        \"mcp_server_trino\"\n      ],\n      \"env\": {\n        \"TRINO_HOST\": \"<host>\",\n        \"TRINO_PORT\": \"<port>\",\n        \"TRINO_USER\": \"<user>\",\n        \"TRINO_PASSWORD\": \"<password>\",\n        \"TRINO_CATALOG\": \"<catalog>\",\n        \"TRINO_SCHEMA\": \"<schema>\"\n      }\n    }\n  }\n}\n\n```"
}