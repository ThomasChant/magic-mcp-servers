{
  "mcp_name": "Couchbase",
  "mcp_description": "🎖️ 🐍 ☁️ 🏠 - Couchbase MCP server provides unfied access to both Capella cloud and self-managed clusters for document operations, SQL++ queries and natural language data analysis.",
  "mcp_id": "Couchbase-Ecosystem_mcp-server-couchbase",
  "fetch_timestamp": "2025-06-23T02:17:36.176213Z",
  "github_url": "https://github.com/Couchbase-Ecosystem/mcp-server-couchbase",
  "repository": {
    "name": "mcp-server-couchbase",
    "full_name": "Couchbase-Ecosystem/mcp-server-couchbase",
    "description": "MCP Server to interact with data in Couchbase Clusters",
    "html_url": "https://github.com/Couchbase-Ecosystem/mcp-server-couchbase",
    "created_at": "2025-03-26T18:04:52Z",
    "updated_at": "2025-06-02T11:32:53Z",
    "pushed_at": "2025-05-15T18:03:05Z",
    "size": 52,
    "stargazers_count": 10,
    "watchers_count": 10,
    "forks_count": 9,
    "open_issues_count": 2,
    "language": "Python",
    "license": "Apache License 2.0",
    "topics": [
      "couchbase",
      "mcp"
    ],
    "default_branch": "main",
    "owner": {
      "login": "Couchbase-Ecosystem",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/167254978?v=4",
      "html_url": "https://github.com/Couchbase-Ecosystem"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 9,
    "subscribers_count": 3,
    "languages": {
      "Python": 9647,
      "Dockerfile": 747
    },
    "language_percentages": {
      "Python": 92.81,
      "Dockerfile": 7.19
    },
    "pull_requests_count": 17,
    "contributors_count": 7
  },
  "readme": "# Couchbase MCP Server\n\nAn [MCP](https://modelcontextprotocol.io/) server implementation of Couchbase that allows LLMs to directly interact with Couchbase clusters.\n\n## Features\n\n- Get a list of all the scopes and collections in the specified bucket\n- Get the structure for a collection\n- Get a document by ID from a specified scope and collection\n- Upsert a document by ID to a specified scope and collection\n- Delete a document by ID from a specified scope and collection\n- Run a [SQL++ query](https://www.couchbase.com/sqlplusplus/) on a specified scope\n  - There is an option in the MCP server, `READ_ONLY_QUERY_MODE` that is set to true by default to disable running SQL++ queries that change the data or the underlying collection structure. Note that the documents can still be updated by ID.\n\n## Prerequisites\n\n- Python 3.10 or higher.\n- A running Couchbase cluster. The easiest way to get started is to use [Capella](https://docs.couchbase.com/cloud/get-started/create-account.html#getting-started) free tier, which is fully managed version of Couchbase server. You can follow [instructions](https://docs.couchbase.com/cloud/clusters/data-service/import-data-documents.html#import-sample-data) to import one of the sample datasets or import your own.\n- [uv](https://docs.astral.sh/uv/) installed to run the server.\n- An [MCP client](https://modelcontextprotocol.io/clients) such as [Claude Desktop](https://claude.ai/download) installed to connect the server to Claude. The instructions are provided for Claude Desktop and Cursor. Other MCP clients could be used as well.\n\n## Configuration\n\nClone the repository to your local machine.\n\n```bash\ngit clone https://github.com/Couchbase-Ecosystem/mcp-server-couchbase.git\n```\n\n### Server Configuration for MCP Clients\n\nThis is the common configuration for the MCP clients such as Claude Desktop, Cursor, Windsurf Editor.\n\n```json\n{\n  \"mcpServers\": {\n    \"couchbase\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"path/to/cloned/repo/mcp-server-couchbase/\",\n        \"run\",\n        \"src/mcp_server.py\"\n      ],\n      \"env\": {\n        \"CB_CONNECTION_STRING\": \"couchbases://connection-string\",\n        \"CB_USERNAME\": \"username\",\n        \"CB_PASSWORD\": \"password\",\n        \"CB_BUCKET_NAME\": \"bucket_name\"\n      }\n    }\n  }\n}\n```\n\nThe server can be configured using environment variables. The following variables are supported:\n\n- `CB_CONNECTION_STRING`: The connection string to the Couchbase cluster\n- `CB_USERNAME`: The username with access to the bucket to use to connect\n- `CB_PASSWORD`: The password for the username to connect\n- `CB_BUCKET_NAME`: The name of the bucket that the server will access\n- `READ_ONLY_QUERY_MODE`: Setting to configure whether SQL++ queries that allow data to be modified are allowed. It is set to True by default.\n- `path/to/cloned/repo/mcp-server-couchbase/` should be the path to the cloned repository on your local machine. Don't forget the trailing slash at the end!\n\n> Note: If you have other MCP servers in use in the client, you can add it to the existing `mcpServers` object.\n\n### Claude Desktop\n\nFollow the steps below to use Couchbase MCP server with Claude Desktop MCP client\n\n1. The MCP server can now be added to Claude Desktop by editing the configuration file. More detailed instructions can be found on the [MCP quickstart guide](https://modelcontextprotocol.io/quickstart/user).\n\n   - On Mac, the configuration file is located at `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - On Windows, the configuration file is located at `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n   Open the configuration file and add the [configuration](#server-configuration-for-mcp-clients) to the `mcpServers` section.\n\n2. Restart Claude Desktop to apply the changes.\n\n3. You can now use the server in Claude Desktop to run queries on the Couchbase cluster using natural language and perform CRUD operations on documents.\n\n#### Claude Desktop Logs\n\nThe logs for Claude Desktop can be found in the following locations:\n\n- MacOS: ~/Library/Logs/Claude\n- Windows: %APPDATA%\\Claude\\Logs\n\nThe logs can be used to diagnose connection issues or other problems with your MCP server configuration. For more details, refer to the [official documentation](https://modelcontextprotocol.io/quickstart/user#getting-logs-from-claude-for-desktop).\n\n### Cursor\n\nFollow steps below to use Couchbase MCP server with Cursor:\n\n1. Install [Cursor](https://cursor.sh/) on your machine.\n\n2. In Cursor, go to Cursor > Cursor Settings > MCP > Add a new global MCP server. Also, checkout the docs on [setting up MCP server configuration](https://docs.cursor.com/context/model-context-protocol#configuring-mcp-servers) from Cursor.\n\n3. Specify the same [configuration](#server-configuration-for-mcp-clients). You may need to add the server configuration under a parent key of mcpServers.\n\n4. Save the configuration.\n\n5. You will see couchbase as an added server in MCP servers list. Refresh to see if server is enabled.\n\n6. You can now use the Couchbase MCP server in Cursor to query your Couchbase cluster using natural language and perform CRUD operations on documents.\n\nFor more details about MCP integration with Cursor, refer to the [official Cursor MCP documentation](https://docs.cursor.sh/ai-features/mcp-model-context-protocol).\n\n#### Cursor Logs\n\nIn the bottom panel of Cursor, click on \"Output\" and select \"Cursor MCP\" from the dropdown menu to view server logs. This can help diagnose connection issues or other problems with your MCP server configuration.\n\n### Windsurf Editor\n\nFollow the steps below to use the Couchbase MCP server with [Windsurf Editor](https://windsurf.com/).\n\n1. Install [Windsurf Editor](https://windsurf.com/download) on your machine.\n\n2. In Windsurf Editor, navigate to Command Palette > Windsurf MCP Configuration Panel or Windsurf - Settings > Advanced > Cascade > Model Context Protocol (MCP) Servers. For more details on the configuration, please refer to the [official documentation](https://docs.windsurf.com/windsurf/mcp#configuring-mcp).\n\n3. Click on Add Server and then Add custom server. On the configuration that opens in the editor, add the Couchbase MCP Server [configuration](#server-configuration-for-mcp-clients) from above.\n\n4. Save the configuration.\n\n5. You will see couchbase as an added server in MCP Servers list under Advanced Settings. Refresh to see if server is enabled.\n\n6. You can now use the Couchbase MCP server in Windsurf Editor to query your Couchbase cluster using natural language and perform CRUD operations on documents.\n\nFor more details about MCP integration with Windsurf Editor, refer to the official [Windsurf MCP documentation](https://docs.windsurf.com/windsurf/mcp).\n\n### SSE Server Mode\n\nThere is an option to run the MCP server in [Server-Sent Events (SSE)](https://modelcontextprotocol.io/docs/concepts/transports#server-sent-events-sse) transport mode.\n\n#### Usage\n\nBy default, the MCP server will run on port 8080 but this can be configured using the `FASTMCP_PORT` environment variable.\n\n> uv run src/mcp_server.py --connection-string='<couchbase_connection_string>' --username='<database_username>' --password='<database_password>' --bucket-name='<couchbase_bucket_to_use>' --read-only-query-mode=true --transport=sse\n\nThe server will be available on http://localhost:8080/sse. This can be used in MCP clients supporting SSE transport mode.\n\n## Docker Image\n\nThe MCP server can also be built and run as a Docker container. Prebuilt images can be found on [DockerHub](https://hub.docker.com/r/couchbaseecosystem/mcp-server-couchbase).\n\n```bash\ndocker build -t mcp/couchbase .\n```\n\n### Running\n\nThe MCP server can be run with the environment variables being used to configure the Couchbase settings. The environment variables are the same as described in the [Configuration section](#server-configuration-for-mcp-clients)\n\n```bash\ndocker run -i \\\n  -e CB_CONNECTION_STRING='<couchbase_connection_string>' \\\n  -e CB_USERNAME='<database_user>' \\\n  -e CB_PASSWORD='<database_password>' \\\n  -e CB_BUCKET_NAME='<bucket_name>' \\\n  -e MCP_TRANSPORT='stdio/sse' \\\n  -e READ_ONLY_QUERY_MODE=\"true/false\" \\\n  mcp/couchbase\n```\n\n### Risks Associated with LLMs\n\n- The use of large language models and similar technology involves risks, including the potential for inaccurate or harmful outputs.\n- Couchbase does not review or evaluate the quality or accuracy of such outputs, and such outputs may not reflect Couchbase's views.\n- You are solely responsible for determining whether to use large language models and related technology, and for complying with any license terms, terms of use, and your organization's policies governing your use of the same.\n\n### Managed MCP Server\nThe Couchbase MCP server can also be used as a managed server in your agentic applications via [Smithery.ai](https://smithery.ai/server/@Couchbase-Ecosystem/mcp-server-couchbase).\n\n## Troubleshooting Tips\n\n- Ensure the path to your MCP server repository is correct in the configuration.\n- Verify that your Couchbase connection string, database username, password and bucket name are correct.\n- If using Couchbase Capella, ensure that the cluster is [accessible](https://docs.couchbase.com/cloud/clusters/allow-ip-address.html) from the machine where the MCP server is running.\n- Check that the database user has proper permissions to access the specified bucket.\n- Confirm that the uv package manager is properly installed and accessible. You may need to provide absolute path to uv in the `command` field in the configuration.\n- Check the logs for any errors or warnings that may indicate issues with the MCP server. The server logs are under the name, `mcp-server-couchbase.log`.\n\n---\n\n## 📢 Support Policy\n\nWe truly appreciate your interest in this project!  \nThis project is **community-maintained**, which means it's **not officially supported** by our support team.\n\nIf you need help, have found a bug, or want to contribute improvements, the best place to do that is right here — by [opening a GitHub issue](https://github.com/Couchbase-Ecosystem/mcp-server-couchbase/issues).  \nOur support portal is unable to assist with requests related to this project, so we kindly ask that all inquiries stay within GitHub.\n\nYour collaboration helps us all move forward together — thank you!\n"
}