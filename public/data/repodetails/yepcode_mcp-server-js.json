{
  "mcp_name": "YepCode",
  "mcp_description": "Execute any LLM-generated code in the [YepCode](https://yepcode.io) secure and scalable sandbox environment and create your own MCP tools using JavaScript or Python, with full support for NPM and PyPI packages",
  "mcp_id": "yepcode_mcp-server-js",
  "fetch_timestamp": "2025-06-23T09:38:54.991989Z",
  "github_url": "https://github.com/yepcode/mcp-server-js",
  "repository": {
    "name": "mcp-server-js",
    "full_name": "yepcode/mcp-server-js",
    "description": "An MCP (Model Context Protocol) server that enables âœ¨ AI platforms to interact with ðŸ¤– YepCode's infrastructure.  Turn your YepCode processes into powerful tools that AI assistants can use ðŸš€",
    "html_url": "https://github.com/yepcode/mcp-server-js",
    "created_at": "2025-03-26T16:05:56Z",
    "updated_at": "2025-06-12T10:40:39Z",
    "pushed_at": "2025-06-12T10:40:35Z",
    "size": 712,
    "stargazers_count": 21,
    "watchers_count": 21,
    "forks_count": 6,
    "open_issues_count": 1,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [
      "agent",
      "ai",
      "ai-agent",
      "ai-agents",
      "mcp-server",
      "yepcode"
    ],
    "default_branch": "main",
    "owner": {
      "login": "yepcode",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/83984765?v=4",
      "html_url": "https://github.com/yepcode"
    },
    "has_issues": true,
    "has_projects": false,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 6,
    "subscribers_count": 2,
    "languages": {
      "TypeScript": 19657,
      "JavaScript": 1473,
      "Dockerfile": 486
    },
    "language_percentages": {
      "TypeScript": 90.94,
      "JavaScript": 6.81,
      "Dockerfile": 2.25
    },
    "pull_requests_count": 2,
    "contributors_count": 2,
    "latest_release": {
      "tag_name": "v0.8.0",
      "name": "v0.8.0",
      "published_at": "2025-06-12T10:41:01Z",
      "body": "",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.8.0",
        "commit_sha": "15ace0d67497fd25f04f5872c351c28c627fd354"
      },
      {
        "name": "v0.7.0",
        "commit_sha": "ae88d168ebd76c09efa2672fa5b70adc2ecd6a49"
      },
      {
        "name": "v0.6.0",
        "commit_sha": "3e70b738b577a6c8b35a7cb5b0e91a59bee33a34"
      },
      {
        "name": "v0.5.0",
        "commit_sha": "bb676a4d09372a4b25b18e849d89cb50a3f24cb8"
      },
      {
        "name": "v0.4.0",
        "commit_sha": "5a037e604889975e8bce65cac722e3742b2c5a3d"
      },
      {
        "name": "v0.3.1",
        "commit_sha": "a4792edd7e524d1a1c09cec0dca39609d07157aa"
      },
      {
        "name": "v0.3.0",
        "commit_sha": "4d10b47290d8b0548ea55e677a74dd87e6ade4a4"
      },
      {
        "name": "v0.2.0",
        "commit_sha": "beb1974c9a0cdd21f408adee8d0a6a1107e8c1e3"
      },
      {
        "name": "v0.1.1",
        "commit_sha": "7c4b6ef5f07cec2160e8319936c44ea72cce6a25"
      },
      {
        "name": "v0.1.0",
        "commit_sha": "e0ad2777e777d32f47bc83c76e2fefc5fd1d92a2"
      }
    ],
    "latest_version": "v0.8.0",
    "package_json_version": "0.8.0"
  },
  "readme": "![YepCode MCP Server Preview](/readme-assets/cover.png)\n\n<div align=\"center\">\n\n[![NPM version](https://img.shields.io/npm/v/@yepcode/mcp-server.svg)](https://npmjs.org/package/@yepcode/mcp-server)\n[![NPM Downloads](https://img.shields.io/npm/dm/@yepcode/mcp-server)](https://www.npmjs.com/package/@yepcode/mcp-server)\n[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/yepcode/mcp-server-js/ci.yml)](https://github.com/yepcode/mcp-server-js/actions)\n[![smithery badge](https://smithery.ai/badge/@yepcode/mcp-server)](https://smithery.ai/server/@yepcode/mcp-server)\n\n</div>\n\n## What is YepCode MCP Server?\n\nAn MCP ([Model Context Protocol](https://modelcontextprotocol.io/introduction)) server that enables AI platforms to interact with [YepCode](https://yepcode.io)'s infrastructure. Run LLM generated scripts and turn your YepCode processes into powerful tools that AI assistants can use directly.\n\n### Why YepCode MCP Server?\n\n- **Seamless AI Integration**: Convert YepCode processes into AI-ready tools with zero configuration\n- **Real-time Process Control**: Enable direct interaction between AI systems and your workflows\n- **Enterprise-Grade Security**: Execute code in YepCode's isolated, production-ready environments\n- **Universal Compatibility**: Integrate with any AI platform supporting the Model Context Protocol\n\n## Integration Guide\n\nYepCode MCP server can be integrated with AI platforms like [Cursor](https://cursor.sh) or [Claude Desktop](https://www.anthropic.com/news/claude-desktop) using either a remote approach (we offer a hosted version of the MCP server) or a local approach (NPX or Docker installation is required).\n\nFor both approaches, you need to get your YepCode API credentials:\n\n1. Sign up to [YepCode Cloud](https://cloud.yepcode.io)\n2. Visit `Settings` > `API credentials` to create a new API token.\n\n### Remote Approach using SSE Server\n\n- If your MCP Client doesn't support authentication headers, just use the SSE server URL that includes the API Token. Use a configuration similar to the following:\n\n```typescript\n{\n  \"mcpServers\": {\n    \"yepcode-mcp-server\": {\n      \"url\": \"https://cloud.yepcode.io/mcp/sk-c2E....RD/sse\"\n    }\n  }\n}\n```\n\n- If your MCP Client supports authentication headers, you can use the HTTP server URL that includes the API Token. Use a configuration similar to the following:\n\n```typescript\n{\n  \"mcpServers\": {\n    \"yepcode-mcp-server\": {\n      \"url\": \"https://cloud.yepcode.io/mcp/sse\",\n      \"headers\": {\n        \"Authorization\": \"Bearer <sk-c2E....RD>\"\n      }\n    }\n  }\n}\n```\n\n### Local Approach\n\n#### Using NPX\n\nMake sure you have Node.js installed (version 18 or higher), and use a configuration similar to the following:\n\n```typescript\n{\n  \"mcpServers\": {\n    \"yepcode-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@yepcode/mcp-server\"],\n      \"env\": {\n        \"YEPCODE_API_TOKEN\": \"your_api_token_here\"\n      }\n    }\n  }\n}\n```\n\n#### Using Docker\n\n1. Build the container image:\n\n```bash\ndocker build -t yepcode/mcp-server .\n```\n\n2. Use a configuration similar to the following:\n\n```typescript\n{\n  \"mcpServers\": {\n    \"yepcode-mcp-server\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-d\",\n        \"-e\",\n        \"YEPCODE_API_TOKEN=your_api_token_here\",\n        \"yepcode/mcp-server\"\n      ]\n    }\n  }\n}\n```\n\n## Debugging\n\nDebugging MCP servers can be tricky since they communicate over stdio. To make this easier, we recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which you can run with the following command:\n\n```bash\nnpm run inspector\n```\n\nThis will start a server where you can access debugging tools directly in your browser.\n\n## YepCode MCP Tools Reference\n\nThe MCP server provides several tools to interact with YepCode's infrastructure:\n\n### Code Execution\n\n#### run_code\n\nExecutes code in YepCode's secure environment.\n\n```typescript\n// Input\n{\n  code: string;                          // The code to execute\n  options?: {\n    language?: string;                   // Programming language (default: 'javascript')\n    comment?: string;                    // Execution context\n    settings?: Record<string, unknown>;  // Runtime settings\n  }\n}\n\n// Response\n{\n  returnValue?: unknown;                 // Execution result\n  logs?: string[];                       // Console output\n  error?: string;                        // Error message if execution failed\n}\n```\n\n##### MCP Options\n\nYepCode MCP server supports the following options:\n\n- Disable the run_code tool: In some cases, you may want to disable the `run_code` tool. For example, if you want to use the MCP server as a provider only for the existing tools in your YepCode account.\n- Skip the run_code cleanup: By default, run_code processes source code is removed after execution. If you want to keep it for audit purposes, you can use this option.\n\nOptions can be passed as a comma-separated list in the `YEPCODE_MCP_OPTIONS` environment variable or as a query parameter in the MCP server URL.\n\n```typescript\n// SSE server configuration\n{\n  \"mcpServers\": {\n    \"yepcode-mcp-server\": {\n      \"url\": \"https://cloud.yepcode.io/mcp/sk-c2E....RD/sse?mcpOptions=disableRunCodeTool,runCodeCleanup\"\n    }\n  }\n}\n\n// NPX configuration\n{\n  \"mcpServers\": {\n    \"yepcode-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@yepcode/mcp-server\"],\n      \"env\": {\n        \"YEPCODE_API_TOKEN\": \"your_api_token_here\",\n        \"YEPCODE_MCP_OPTIONS\": \"disableRunCodeTool,runCodeCleanup\"\n      }\n    }\n  }\n}\n```\n\n### Environment Management\n\n#### set_env_var\n\nSets an environment variable in the YepCode workspace.\n\n```typescript\n// Input\n{\n  key: string;                           // Variable name\n  value: string;                         // Variable value\n  isSensitive?: boolean;                 // Whether to mask the value in logs (default: true)\n}\n```\n\n#### remove_env_var\n\nRemoves an environment variable from the YepCode workspace.\n\n```typescript\n// Input\n{\n  key: string;                           // Name of the variable to remove\n}\n```\n\n### Process Execution\n\nThe MCP server can expose your YepCode Processes as individual MCP tools, making them directly accessible to AI assistants. This feature is enabled by just adding the `mcp-tool` tag to your process (see our docs to learn more about [process tags](https://yepcode.io/docs/processes/tags)).\n\nThere will be a tool for each exposed process: `run_ycp_<process_slug>` (or `run_ycp_<process_id>` if tool name is longer than 60 characters).\n\n#### run_ycp_<process_slug>\n\n```typescript\n// Input\n{\n  parameters?: any;                      // This should match the input parameters specified in the process\n  options?: {\n    tag?: string;                        // Process version to execute\n    comment?: string;                    // Execution context\n  };\n  synchronousExecution?: boolean;        // Whether to wait for completion (default: true)\n}\n\n// Response (synchronous execution)\n{\n  executionId: string;                   // Unique execution identifier\n  logs: string[];                        // Process execution logs\n  returnValue?: unknown;                 // Process output\n  error?: string;                        // Error message if execution failed\n}\n\n// Response (asynchronous execution)\n{\n  executionId: string;                   // Unique execution identifier\n}\n```\n\n#### get_execution\n\nRetrieves the result of a process execution.\n\n```typescript\n// Input\n{\n  executionId: string;                   // ID of the execution to retrieve\n}\n\n// Response\n{\n  executionId: string;                   // Unique execution identifier\n  logs: string[];                        // Process execution logs\n  returnValue?: unknown;                 // Process output\n  error?: string;                        // Error message if execution failed\n}\n```\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n"
}