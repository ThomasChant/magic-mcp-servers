{
  "mcp_name": "Lee-1024/mcp-glances",
  "mcp_description": "Integrates MCP with LLMs to analyze server monitoring data via Glances API, providing real-time system status feedback.",
  "mcp_id": "Lee-1024_mcp-glances",
  "fetch_timestamp": "2025-06-23T06:06:35.695685Z",
  "github_url": "https://github.com/Lee-1024/mcp-glances",
  "repository": {
    "name": "mcp-glances",
    "full_name": "Lee-1024/mcp-glances",
    "description": "通过 MCP 服务与大语言模型（LLM）结合，调用 Glances API 获取并分析服务器监控数据，实时反馈系统状态。已在 Cursor 和 Cline 客户端测试通过。",
    "html_url": "https://github.com/Lee-1024/mcp-glances",
    "created_at": "2025-04-09T02:06:04Z",
    "updated_at": "2025-04-09T11:16:59Z",
    "pushed_at": "2025-04-09T10:58:32Z",
    "size": 354,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "Lee-1024",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/39609068?v=4",
      "html_url": "https://github.com/Lee-1024"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 23079
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# 🖥️ MCP Glances Monitor\n\n通过 MCP 服务与大语言模型（LLM）结合，调用 Glances API 获取并分析服务器监控数据，实时反馈系统状态。已在 Cursor 和 Cline 客户端测试通过。\n\n---\n\n## 🚀 功能说明\n\n使用 MCP 的 Python SDK 编写的 MCP 服务，利用大模型调用 Glances 的 API，并将返回结果交由大模型分析展示。\n\n---\n## 🖼️ 使用效果展示\n\n以下是通过 MCP 服务与 Glances 获取的系统监控数据结果截图：\n\n![系统监控图](https://github.com/Lee-1024/mcp-glances/blob/main/images/Snipaste_2025-04-09_17-02-24.png)\n\n\n## ⚙️ 配置说明\n\n### 1. 服务端配置（被监控服务器）\n\n- 安装并启动 Glances：\n  ```bash\n  pip install glances\n  glances -w\n  ```\n- 具体查看官网文档\n- 确保放开 61208 端口以允许远程访问\n\n---\n\n### 2. 本地开发环境\n\n- 安装 [uv](https://hellowac.github.io/uv-zh-cn/guides/integration/pytorch/)\n- 按照 [MCP 官方文档](https://modelcontextprotocol.io/quickstart/server) 初始化项目\n- 替换默认的 `main.py` 为你自己的项目文件（如 `glances_info_mcp.py`）\n\n---\n\n### 3. MCP 服务客户端配置\n\n#### 🖥️ Cline 客户端（需以管理员身份运行 VSCode）\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-test\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"E:\\\\code\\\\mcp-glances\\\\\",\n        \"run\",\n        \"glances_info_mcp.py\"\n      ],\n      \"disable\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n#### 💻 Cursor 客户端（不需要管理员权限）\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-test\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"E:\\\\code\\\\mcp-test\\\\\",\n        \"run\",\n        \"glances_info_mcp.py\"\n      ]\n    }\n  }\n}\n```\n\n> ⚠️ 修改配置后需重启 VSCode 并新建会话。\n\n---\n\n### 4. 服务器配置（`servers_configs.json`）\n\n```json\n{\n  \"server1\": {\n    \"name\": \"测试服务器\",\n    \"url\": \"http://192.168.0.1:61208/api/4\",\n    \"description\": \"测试环境主服务器\"\n  },\n  \"server2\": {\n    \"name\": \"生产服务器\",\n    \"url\": \"http://192.168.0.2:61208/api/4\",\n    \"description\": \"生产环境主服务器\"\n  }\n}\n```\n\n---\n\n## ❗ 错误处理\n\n系统会自动处理以下常见错误：\n\n- 服务器未配置或不存在\n- 网络连接失败\n- API 调用超时\n- 数据格式错误\n\n> 所有错误会返回友好的提示信息，便于问题排查。\n\n---\n\n## 📌 注意事项\n\n1. 确保 Glances Web UI 正常启动并监听 61208 端口  \n2. 检查网络连接与防火墙策略  \n3. 定期更新服务器配置文件  \n4. 建议为 API 请求设置合理的超时时间（推荐 ≤10 秒）\n\n---\n\n## 🤝 贡献指南\n\n欢迎通过 Issue 或 Pull Request 参与贡献！\n\n贡献前请确认：\n\n- ✅ 遵循 Python 编码规范（PEP8）\n- 📝 添加必要注释与文档\n- 🧪 所有功能通过测试用例验证\n\n---\n\n## 📄 许可证\n- Apache 2.0\n\n---\n\n## 📬 联系方式\n\n如有问题或建议，请通过 GitHub Issues 提交，或联系项目维护者。"
}