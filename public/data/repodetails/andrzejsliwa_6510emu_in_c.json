{
  "mcp_name": "andrzejsliwa/6510emu_in_c",
  "mcp_description": "A modern C implementation of a 6510/6502 CPU emulator with disassembly support, used in the Commodore 64.",
  "mcp_id": "andrzejsliwa_6510emu_in_c",
  "fetch_timestamp": "2025-06-23T01:06:43.673075Z",
  "github_url": "https://github.com/andrzejsliwa/6510emu_in_c",
  "repository": {
    "name": "6510emu_in_c",
    "full_name": "andrzejsliwa/6510emu_in_c",
    "description": null,
    "html_url": "https://github.com/andrzejsliwa/6510emu_in_c",
    "created_at": "2025-04-14T11:39:24Z",
    "updated_at": "2025-04-14T14:18:34Z",
    "pushed_at": "2025-04-14T14:18:31Z",
    "size": 14,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "C",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "andrzejsliwa",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/9280?v=4",
      "html_url": "https://github.com/andrzejsliwa"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "C": 59656,
      "Makefile": 1117
    },
    "language_percentages": {
      "C": 98.16,
      "Makefile": 1.84
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# 6510 CPU Emulator\n\nA modern C implementation of a 6510/6502 CPU emulator with disassembly support. The 6510 was used in the Commodore 64 and is compatible with the 6502 with some additional I/O port capabilities.\n\n## Features\n\n- Complete implementation of all official 6510/6502 CPU instructions\n- Accurate cycle timing with real-time (1MHz) operation mode\n- High-performance mode for maximum execution speed\n- Built-in disassembler for debugging\n- Register monitoring and execution tracing\n- 6510-specific I/O port handling at addresses 0x0000 and 0x0001\n- Performance metrics (MIPS calculation)\n\n## Requirements\n\n- C compiler (gcc or clang... to meet c11 standard)\n- Standard C libraries\n- make (for building with the provided Makefile)\n\n## Building\n\nClone the repository and build using make:\n\n```bash\ngit clone https://github.com/yourusername/6510-emu.git\ncd 6510-emu\nmake\n```\n\nGetting Help about available make tasks:\n\n```bash\nmake help \nHelp:\n  make all                 Build the 6510 emulator\"\n  make debug               Build with debug symbols\"\n  make run                 Run the emulator\n  make run_disasm          Run with disassembly\n  make run_regs            Run with disassembly and register display\n  make run_fast            Run at maximum speed\n  make run_fast_disasm     Run at maximum speed with disassembly\n  make clean               Clean build artifacts\n```\n\nFor a debug build with symbols:\n\n```bash\nmake debug\n```\n\n## MCP Server Configuration\n\nThe project uses MCP (Make Command Protocol) servers for enhanced development experience. To set up the MCP servers:\n\n1. First, install `uv` (a fast Python package installer and resolver):\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n2. Install the MCP server for make functionality:\n```bash\nuv pip install mcp-server-make\n```\n\n3. The project is configured to use the `mcp-server-make` server through `uvx`. This configuration is stored in `.cursor/mcp.json` and allows for:\n   - Safe execution of make targets with output capture\n   - Better integration with build processes\n   - Enhanced development feedback\n   - Automatic make command handling through the IDE\n\n4. To use with your IDE, ensure your configuration includes:\n```json\n{\n  \"mcpServers\": {\n    \"make\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-server-make\"\n      ]\n    }\n  }\n}\n```\n\n## Usage\n\nRun the emulator with default settings:\n\n```bash\n./emu\n```\n\n### Command-line Options\n\n- `--fast` or `-f`: Run at maximum speed (instead of real-time 1MHz)\n- `--disassemble` or `-d`: Show disassembly of instructions while running\n- `--registers` or `-r`: Show register values alongside disassembly\n\n### Example Commands\n\nRun with disassembly output:\n```bash\n./emu --disassemble\n```\n\nRun with disassembly and register display:\n```bash\n./emu --disassemble --registers\n```\n\nRun at maximum speed:\n```bash\n./emu --fast\n```\n\n### Makefile Shortcuts\n\nThe Makefile provides convenient shortcuts for common commands:\n\n- `make run` - Run the emulator\n- `make run_disasm` - Run with disassembly output\n- `make run_regs` - Run with disassembly and register display\n- `make run_fast` - Run at maximum speed\n- `make run_fast_disasm` - Run at maximum speed with disassembly\n\n## Memory Map\n\nThe emulator provides a full 64K memory space. Special handling is implemented for:\n\n- 0x0000: 6510 I/O Port Direction Register\n- 0x0001: 6510 I/O Port Data Register\n- 0x0100-0x01FF: Stack\n- 0xFFFC-0xFFFD: Reset vector\n\n## Programming the Emulator\n\nTo use the emulator with your own programs, you need to load your code into memory and set up the reset vector to point to your code entry point.\n\nExample:\n```c\n// Load a program that adds 5 and 10, stores result in location 0x200\ncpu.Memory[0xFFFC] = 0x00;  // Reset vector LSB\ncpu.Memory[0xFFFD] = 0x80;  // Reset vector MSB\n   \n// Program at 0x8000\ncpu.Memory[0x8000] = 0xA9;  // LDA #$05\ncpu.Memory[0x8001] = 0x05;\ncpu.Memory[0x8002] = 0x69;  // ADC #$0A\ncpu.Memory[0x8003] = 0x0A;\ncpu.Memory[0x8004] = 0x8D;  // STA $0200\ncpu.Memory[0x8005] = 0x00;\ncpu.Memory[0x8006] = 0x02;\ncpu.Memory[0x8007] = 0x00;  // BRK\n```\n\n## Using the Emulator as a Library\n\nThe emulator is designed to be easily integrated into other programs:\n\n```c\n#include \"emu.h\"\n\nint main() {\n    CPU cpu;\n    \n    // Initialize CPU\n    cpu_init(&cpu);\n    \n    // Load program into memory\n    // ...\n    \n    // Reset CPU to start execution\n    cpu_reset(&cpu);\n    \n    // Main emulation loop\n    while (cpu.IsRunning) {\n        cpu_step(&cpu);\n        \n        // Your custom code here\n        // ...\n    }\n    \n    return 0;\n}\n```\n\n## License\n\n[MIT License](LICENSE)\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n"
}