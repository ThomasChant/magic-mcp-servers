{
  "mcp_name": "XixianLiang/HarmonyOS-mcp-server",
  "mcp_description": "üêç üè† - Control HarmonyOS-next devices with AI through MCP. Support device control and UI automation.",
  "mcp_id": "XixianLiang_HarmonyOS-mcp-server",
  "fetch_timestamp": "2025-06-23T09:33:37.475907Z",
  "github_url": "https://github.com/XixianLiang/HarmonyOS-mcp-server",
  "repository": {
    "name": "HarmonyOS-mcp-server",
    "full_name": "XixianLiang/HarmonyOS-mcp-server",
    "description": "MCP server for manipulating HarmonyOS next devices.",
    "html_url": "https://github.com/XixianLiang/HarmonyOS-mcp-server",
    "created_at": "2025-04-13T11:07:13Z",
    "updated_at": "2025-06-21T15:17:26Z",
    "pushed_at": "2025-04-26T15:25:56Z",
    "size": 710,
    "stargazers_count": 16,
    "watchers_count": 16,
    "forks_count": 4,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "XixianLiang",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/149387586?v=4",
      "html_url": "https://github.com/XixianLiang"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 4,
    "subscribers_count": 2,
    "languages": {
      "Python": 35523
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 2,
    "latest_release": {
      "tag_name": "v0.1.0",
      "name": "v0.1.0",
      "published_at": "2025-04-18T07:18:18Z",
      "body": "## support tool list:\r\n- list_app\r\n- launch_app\r\n- stop_app\r\n- current_app\r\n\r\n- media_play_pause\r\n- media_next\r\n- media_previous\r\n- volume_up\r\n- volume_down\r\n- volume_mute\r\n\r\n- get_uilayout\r\n- get_screenshot\r\n- click\r\n- long_click\r\n- swipe\r\n- input_text",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.1.0",
        "commit_sha": "bc22a22e47352cf1b575d7ec6830ab758853c745"
      }
    ],
    "latest_version": "v0.1.0"
  },
  "readme": "<div align=\"center\">\n<h1>HarmonyOS MCP Server</h1>\n\n <a href='LICENSE'><img src='https://img.shields.io/badge/License-MIT-orange'></a> &nbsp;&nbsp;&nbsp;\n <a><img src='https://img.shields.io/badge/python-3.13-blue'></a>\n</div>\n\n<div align=\"center\">\n    <img style=\"max-width: 500px; width: 60%;\" width=\"1111\" alt=\"image\" src=\"https://github.com/user-attachments/assets/7c2e6879-f583-48d7-b467-c4c6d99c5fab\" />\n</div>\n\n## Intro\n\nThis is a MCP server for manipulating harmonyOS Device.\n\n\nhttps://github.com/user-attachments/assets/7af7f5af-e8c6-4845-8d92-cd0ab30bfe17\n\n\n## Quick Start\n\n### Installation\n\n1. Clone this repo\n   \n```bash\ngit clone https://github.com/XixianLiang/HarmonyOS-mcp-server.git\ncd HarmonyOS-mcp-server\n```\n\n2. Setup the envirnment.\n\n```bash\nuv python install 3.13\nuv sync\n```\n\n### Usage\n\nYou can use [Claude Desktop](https://modelcontextprotocol.io/quickstart/user) to try our tool.\n\n\nYou can also use [openai-agents SDK](https://openai.github.io/openai-agents-python/mcp/) to try the mcp server. Here's an example\n\n```python\n\"\"\"\nExample: Use Openai-agents SDK to call HarmonyOS-mcp-server\n\"\"\"\nimport asyncio\nimport os\n\nfrom agents import Agent, Runner, gen_trace_id, trace\nfrom agents.mcp import MCPServerStdio, MCPServer\n\nasync def run(mcp_server: MCPServer):\n    agent = Agent(\n        name=\"Assistant\",\n        instructions=\"Use the tools to manipulate the HarmonyOS device and finish the task.\",\n        mcp_servers=[mcp_server],\n    )\n\n    message = \"Launch the app `settings` on the phone\"\n    print(f\"Running: {message}\")\n    result = await Runner.run(starting_agent=agent, input=message)\n    print(result.final_output)\n\n\nasync def main():\n\n    # Use async context manager to initialize the server\n    async with MCPServerStdio(\n        params={\n            \"command\": \"<...>/bin/uv\",\n            \"args\": [\n                \"--directory\",\n                \"<...>/harmonyos-mcp-server\",\n                \"run\",\n                \"server.py\"\n            ]\n        }\n    ) as server:\n        trace_id = gen_trace_id()\n        with trace(workflow_name=\"MCP HarmonyOS\", trace_id=trace_id):\n            print(f\"View trace: https://platform.openai.com/traces/trace?trace_id={trace_id}\\n\")\n            await run(server)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n"
}