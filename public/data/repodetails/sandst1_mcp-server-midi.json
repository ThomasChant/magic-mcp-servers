{
  "mcp_name": "sandst1/mcp-server-midi",
  "mcp_description": "Facilitates the transmission of MIDI sequences from an LLM to any MIDI-compatible software, enabling seamless integration with digital audio workstations and hardware synthesizers.",
  "mcp_id": "sandst1_mcp-server-midi",
  "fetch_timestamp": "2025-06-23T08:09:25.844958Z",
  "github_url": "https://github.com/sandst1/mcp-server-midi",
  "repository": {
    "name": "mcp-server-midi",
    "full_name": "sandst1/mcp-server-midi",
    "description": "A MCP Server for sending MIDI sequences to any program that supports MIDI input",
    "html_url": "https://github.com/sandst1/mcp-server-midi",
    "created_at": "2025-04-15T20:59:20Z",
    "updated_at": "2025-06-02T14:22:50Z",
    "pushed_at": "2025-04-16T15:54:55Z",
    "size": 5,
    "stargazers_count": 6,
    "watchers_count": 6,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "sandst1",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/492196?v=4",
      "html_url": "https://github.com/sandst1"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "Python": 8306
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# MCP MIDI Server\n\nA FastMCP Server which allows an LLM to send MIDI sequences into any software that supports MIDI input.\n\n## Features\n\n- Creates a virtual MIDI output port\n- Sends MIDI Note On/Off messages\n- Sends Control Change (CC) messages\n- Sequences MIDI events with precise timing\n- Can be used as a MIDI input device in any application that supports MIDI\n\n## Requirements\n\n- Python 3.7+\n- rtmidi\n- fastmcp\n- python-dotenv\n- asyncio\n\n## Installation\n\n1. Clone the repository:\n   ```\n   git clone <repository-url>\n   cd mcp-server-midi\n   ```\n\n2. Create a virtual env, activate it and install dependencies:\n   ```\n   python -m venv .venv\n   source .venv/bin/activate\n\n   pip install -r requirements.txt\n   ```\n\n3. Create a `.env` file with your configuration:\n   ```\n   PORT=8123\n   ```\n\n## Usage\n\nRun the server:\n\n```\npython mcp_midi_server.py\n```\n\nThe server creates a virtual MIDI port named \"MCP MIDI Out\" that can be used as a MIDI input device in other applications. This means you can:\n\n- Connect digital audio workstations (DAWs) like Ableton Live, Logic Pro, or FL Studio to receive MIDI from this server\n- Use the server to control hardware synthesizers through your computer's MIDI interface\n- Connect to any other software that accepts MIDI input (virtual instruments, lighting controllers, etc.)\n\nSimply select \"MCP MIDI Out\" as a MIDI input device in your preferred MIDI-compatible application.\n\n## MCP Config\n\nThe server uses Server-Sent Events (SSE), this is how to config it in Cursor:\n```\n{\n  \"mcpServers\": {\n      \"midi\": {\n          \"url\": \"http://localhost:8123/sse\"\n      }\n   }\n}\n```\n\n## API Methods\n\n### Send Note On\n\nSends a MIDI Note On message.\n\nParameters:\n- `note`: MIDI note number (0-127)\n- `velocity`: Note velocity (0-127, default 127)\n- `channel`: MIDI channel (0-15, default 0)\n\n### Send Note Off\n\nSends a MIDI Note Off message.\n\nParameters:\n- `note`: MIDI note number (0-127)\n- `velocity`: Note off velocity (0-127, default 64)\n- `channel`: MIDI channel (0-15, default 0)\n\n### Send Control Change\n\nSends a MIDI Control Change (CC) message.\n\nParameters:\n- `controller`: CC controller number (0-127)\n- `value`: CC value (0-127)\n- `channel`: MIDI channel (0-15, default 0)\n\n### Send MIDI Sequence\n\nSends a sequence of MIDI Note On/Off messages with specified durations.\n\nParameters:\n- `events`: A list of event dictionaries. Each dictionary must contain:\n  - `note`: MIDI note number (0-127)\n  - `velocity`: Note velocity (0-127, default 127)\n  - `channel`: MIDI channel (0-15, default 0)\n  - `duration`: Time in seconds to hold the note before sending Note Off\n  - `start_time`: Time in seconds when to start the note, relative to sequence start (default 0)\n\n## Example\n\nUsing the API to play a C major chord:\n\n```python\nevents = [\n    {\"note\": 60, \"velocity\": 100, \"duration\": 1.0, \"start_time\": 0.0},  # C4\n    {\"note\": 64, \"velocity\": 100, \"duration\": 1.0, \"start_time\": 0.0},  # E4\n    {\"note\": 67, \"velocity\": 100, \"duration\": 1.0, \"start_time\": 0.0},  # G4\n]\n# Send to the MCP MIDI Server API\n```\n\n## License\n\nMIT"
}