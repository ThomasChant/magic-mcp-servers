{
  "mcp_name": "Markermav/ProxmoxMCP-advance",
  "mcp_description": "Manage and automate Proxmox virtual machines and clusters with advanced features like VM provisioning, command execution, and resource monitoring.",
  "mcp_id": "Markermav_ProxmoxMCP-advance",
  "fetch_timestamp": "2025-06-23T06:26:15.378759Z",
  "github_url": "https://github.com/Markermav/ProxmoxMCP-advance",
  "repository": {
    "name": "ProxmoxMCP-advance",
    "full_name": "Markermav/ProxmoxMCP-advance",
    "description": "ProxmoxMCP (advance): MCP for Proxmox integration in Claude, Goose, Cline, any client.",
    "html_url": "https://github.com/Markermav/ProxmoxMCP-advance",
    "created_at": "2025-04-16T20:01:22Z",
    "updated_at": "2025-04-16T20:07:13Z",
    "pushed_at": "2025-04-16T20:06:00Z",
    "size": 33,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "Markermav",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/107068436?v=4",
      "html_url": "https://github.com/Markermav"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 96595
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# 🦸 Proxmox MCP Server Manager (Advanced Edition)\n\n<!-- **🎬 Demo Video:**  \nSee `ProxmoxMCP/Proxmox-adv-demo.webm` for a full demonstration of advanced features. -->\n\n---\n\n## ✨ What's New in This Release\n\n**Advanced Features Recently Added:**\n\n- 🟢 **Start/Stop/Manage VMs:** Instantly start, stop, or reboot any VM in your cluster.\n- 🖥️ **In-VM Command Execution:** Run system updates, install packages (e.g., nginx), and patch VMs directly from the MCP interface.\n- ⚡ **Automated VM Provisioning:** Spin up new VMs from any ISO with default or custom resources in a single command.\n- 📊 **Cluster Resource Overview:** List all nodes, VMs, and storage pools with real-time status and resource usage.\n- 🔒 **Secure Configuration:** All sensitive credentials are managed via config files and environment variables, never hardcoded.\n- 🧑‍💻 **Rich CLI/VSCode Integration:** Seamless operation with Cline and VSCode for automated workflows.\n- 🎬 **Demo Video:** See `ProxmoxMCP/Proxmox-adv-demo.webm` for a walkthrough of these features.\n\n---\n\n## 🖥️ Setting Up Proxmox on a Virtual Machine Manager\n\n**📝 Step-by-step guide to install Proxmox using the official ISO:**\n\n1. 📥 **Download the Proxmox ISO:**\n   - Visit the [Proxmox Downloads page](https://www.proxmox.com/en/downloads) and download the latest Proxmox VE ISO (e.g., `proxmox-ve_8.x.iso`).\n\n2. 🆕 **Create a New Virtual Machine:**\n   - Open your Virtual Machine Manager (e.g., virt-manager, VMware, VirtualBox).\n   - Create a new VM and select the downloaded Proxmox ISO as the installation media.\n   - Assign at least 2 CPU cores, 4GB RAM, and 32GB disk (recommended for testing).\n   - Configure networking (bridged or NAT as needed).\n\n3. 💿 **Install Proxmox:**\n   - Boot the VM from the ISO and follow the on-screen instructions to install Proxmox VE.\n   - Set a secure password and note the IP address assigned to the VM.\n\n4. ⚙️ **Initial Configuration:**\n   - Access the Proxmox web UI at `https://<proxmox-vm-ip>:8006` from your browser.\n   - Complete the setup wizard, configure storage, and create an admin user if needed.\n\n5. 🔑 **API Token Setup:**\n   - In the Proxmox web UI, go to Datacenter → Permissions → API Tokens.\n   - Create a new API token for your user (e.g., `Markermav@pam`). #Example user here!\n   - Save the token name and value securely.\n\n6. 🛰️ **Enable QEMU Guest Agent (for VM command execution):**\n   - For each VM you want to manage, install the QEMU Guest Agent:\n     ```\n     apt-get update\n     apt-get install -y qemu-guest-agent\n     systemctl enable --now qemu-guest-agent\n     ```\n   - Ensure the agent is enabled in the VM's options settings in Proxmox.\n   - Right click on VM → Options → enable QEMU Guest Agent. (**without this agent will not start)\n\n---\n\n## 🗂️ Configuration Example\n\n**proxmox-config/config.json** (with sensitive info replaced):\n\n```json\n{\n    \"proxmox\": {\n        \"host\": \"proxmox.example.local\",\n        \"port\": 8006,\n        \"verify_ssl\": false,\n        \"service\": \"PVE\"\n    },\n    \"auth\": {\n        \"user\": \"Markermav@pam\", #Example user here!\n        \"token_name\": \"mcp-token\",\n        \"token_value\": \"your-token-value\"\n    },\n    \"logging\": {\n        \"level\": \"DEBUG\",\n        \"format\": \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n        \"file\": \"proxmox_mcp.log\"\n    }\n}\n```\n\n---\n\n## 📦 Installation\n\n### 🛠️ Prerequisites\n\n- 🐍 Python 3.10+\n- 🧬 Git\n- 📦 UV package manager (`pip install uv`)\n- 🔗 Access to a Proxmox server with API token credentials\n\n### ⚡ Quick Install\n\n```bash\ngit clone https://github.com/Markermav/ProxmoxMCP.git\ncd ProxmoxMCP\nuv venv\nsource .venv/bin/activate\nuv pip install -e \".[dev]\"\nmkdir -p proxmox-config\ncp config/config.example.json proxmox-config/config.json\n# Edit proxmox-config/config.json with your Proxmox details\n```\n\n---\n\n## 🚀 Running the Server\n\n**Development Mode:**\n\n```bash\nsource .venv/bin/activate\npython -m proxmox_mcp.server\n```\n\n**Cline Desktop Integration:**\n\nAdd this to your MCP settings (replace paths and sensitive info):\n\n```json\n{\n  \"mcpServers\": {\n    \"github.com/Markermav/ProxmoxMCP\": {\n      \"command\": \"/home/Markermav/ProxmoxMCP/.venv/bin/python\",\n      \"args\": [\"-m\", \"proxmox_mcp.server\"],\n      \"cwd\": \"/home/Markermav/ProxmoxMCP\",\n      \"env\": {\n        \"PYTHONPATH\": \"/home/Markermav/ProxmoxMCP/src\",\n        \"PROXMOX_MCP_CONFIG\": \"/home/Markermav/ProxmoxMCP/proxmox-config/config.json\",\n        \"PROXMOX_HOST\": \"proxmox.example.local\",\n        \"PROXMOX_USER\": \"Markermav@pam\", #Example user here!\n        \"PROXMOX_TOKEN_NAME\": \"mcp-token\",\n        \"PROXMOX_TOKEN_VALUE\": \"your-token-value\",\n        \"PROXMOX_PORT\": \"8006\",\n        \"PROXMOX_VERIFY_SSL\": \"false\",\n        \"PROXMOX_SERVICE\": \"PVE\",\n        \"LOG_LEVEL\": \"DEBUG\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n---\n\n## 🧰 Available Tools\n\n- 🖥️ **List Nodes:** View all nodes in the cluster with status and resource usage.\n- 📡 **Node Status:** Get detailed info for any node.\n- 🗃️ **List VMs:** See all VMs, their status, and resources.\n- 🔄 **VM State Management:** Start, stop, reboot, suspend, or reset VMs.\n- 🛰️ **In-VM Command Execution:** Run any shell command in a VM (requires QEMU Guest Agent).\n- 💾 **Storage Overview:** List all storage pools and usage.\n- 🏥 **Cluster Health:** Get overall cluster status and health.\n\n---\n\n## 🏗️ Project Structure\n\n```\nproxmox-mcp/\n├── src/\n│   └── proxmox_mcp/\n│       ├── server.py\n│       ├── config/\n│       ├── core/\n│       ├── formatting/\n│       ├── tools/\n│       │   └── console/\n│       └── utils/\n├── tests/\n├── proxmox-config/\n│   └── config.example.json\n├── pyproject.toml\n└── LICENSE\n```\n\n---\n\n## 📄 License\n\nMIT License\n"
}