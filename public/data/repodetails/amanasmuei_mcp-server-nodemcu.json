{
  "mcp_name": "amanasmuei/mcp-server-nodemcu",
  "mcp_description": "Manage and control NodeMCU IoT devices with real-time communication and AI integration using the Model Context Protocol.",
  "mcp_id": "amanasmuei_mcp-server-nodemcu",
  "fetch_timestamp": "2025-06-23T01:03:53.202365Z",
  "github_url": "https://github.com/amanasmuei/mcp-server-nodemcu",
  "repository": {
    "name": "mcp-server-nodemcu",
    "full_name": "amanasmuei/mcp-server-nodemcu",
    "description": null,
    "html_url": "https://github.com/amanasmuei/mcp-server-nodemcu",
    "created_at": "2025-03-23T01:52:19Z",
    "updated_at": "2025-04-04T00:39:55Z",
    "pushed_at": "2025-04-03T08:18:19Z",
    "size": 44,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 2,
    "open_issues_count": 1,
    "language": "JavaScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "amanasmuei",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/25909625?v=4",
      "html_url": "https://github.com/amanasmuei"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 2,
    "subscribers_count": 0,
    "languages": {
      "JavaScript": 30885,
      "HTML": 1932,
      "Dockerfile": 436
    },
    "language_percentages": {
      "JavaScript": 92.88,
      "HTML": 5.81,
      "Dockerfile": 1.31
    },
    "pull_requests_count": 2,
    "contributors_count": 2,
    "package_json_version": "1.0.0"
  },
  "readme": "# NodeMCU MCP (Model Context Protocol) Service\n\n<p align=\"center\">\n  <img src=\"assets/nodemcu-logo.svg\" alt=\"NodeMCU MCP Logo\" width=\"200\" />\n</p>\n\n\n[![GitHub license](https://img.shields.io/github/license/amanasmuei/nodemcu-mcp)](https://github.com/amanasmuei/nodemcu-mcp/blob/main/LICENSE)\n[![npm version](https://badge.fury.io/js/nodemcu-mcp.svg)](https://badge.fury.io/js/nodemcu-mcp)\n[![smithery badge](https://smithery.ai/badge/@amanasmuei/nodemcu-mcp)](https://smithery.ai/server/@amanasmuei/nodemcu-mcp)\n\n\nA Model Context Protocol (MCP) service for managing NodeMCU devices. This service provides both a standard RESTful API/WebSocket interface and implements the [Model Context Protocol](https://modelcontextprotocol.io) for integration with AI tools like Claude Desktop.\n\n## Overview\n\nNodeMCU MCP provides a management solution for ESP8266/NodeMCU IoT devices with these key capabilities:\n- Monitor device status and telemetry\n- Send commands to devices remotely\n- Update device configurations\n- Integration with AI assistants through MCP protocol\n\n## Visualizations\n\n<p align=\"center\">\n  <img src=\"assets/architecture-diagram.svg\" alt=\"NodeMCU MCP Architecture\" width=\"600\" />\n  <br><em>System Architecture Overview</em>\n</p>\n\n<p align=\"center\">\n  <img src=\"assets/dataflow-diagram.svg\" alt=\"NodeMCU MCP Data Flow\" width=\"600\" />\n  <br><em>Data Flow Between Components</em>\n</p>\n\n<p align=\"center\">\n  <img src=\"assets/mcp-workflow.svg\" alt=\"Claude + NodeMCU MCP Workflow\" width=\"600\" />\n  <br><em>How Claude Desktop Interacts with NodeMCU Devices</em>\n</p>\n\n## Features\n\n- üîå **Device Management**: Register, monitor, and control NodeMCU devices\n- üìä **Real-time Communication**: WebSocket interface for real-time updates\n- ‚öôÔ∏è **Configuration Management**: Update device settings remotely\n- üîÑ **Command Execution**: Send restart, update, status commands remotely\n- üì° **Telemetry Collection**: Gather sensor data and device metrics\n- üîê **Authentication**: Secure API access with JWT authentication\n- üß† **AI Integration**: Work with Claude Desktop and other MCP-compatible AI tools\n\n## Quick Start\n\n### Prerequisites\n\n- Node.js 16.x or higher\n- npm or yarn\n- For the NodeMCU client: Arduino IDE with ESP8266 support\n\n### Installation\n\n#### Installing via Smithery\n\nTo install NodeMCU Manager for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@amanasmuei/nodemcu-mcp):\n\n```bash\nnpx -y @smithery/cli install @amanasmuei/nodemcu-mcp --client claude\n```\n\n#### From npm (once published)\n\n```bash\n# Global installation (recommended for MCP integration)\nnpm install -g nodemcu-mcp\n\n# Local installation\nnpm install nodemcu-mcp\n```\n\n#### From source\n\n```bash\n# Clone the repository\ngit clone https://github.com/amanasmuei/nodemcu-mcp.git\ncd nodemcu-mcp\n\n# Install dependencies\nnpm install\n\n# Optional: Install globally for MCP integration\nnpm install -g .\n```\n\n### Configuration\n\n1. Create a `.env` file based on the example:\n   ```\n   cp .env.example .env\n   ```\n\n2. Update the `.env` file with your settings:\n   ```\n   # Server Configuration\n   PORT=3000\n   HOST=localhost\n\n   # Security\n   JWT_SECRET=your_strong_random_secret_key\n\n   # Log Level (error, warn, info, debug)\n   LOG_LEVEL=info\n   ```\n\n## Usage\n\n### Running as API Server\n\nDevelopment mode with auto-restart:\n```bash\nnpm run dev\n```\n\nProduction mode:\n```bash\nnpm start\n```\n\n### Running as MCP Server\n\nFor integration with Claude Desktop or other MCP clients:\n```bash\nnpm run mcp\n```\n\nIf installed globally:\n```bash\nnodemcu-mcp --mode=mcp\n```\n\n### Command Line Options\n\n```\nUsage: nodemcu-mcp [options]\n\nOptions:\n  -m, --mode   Run mode (mcp, api, both)  [string] [default: \"both\"]\n  -p, --port   Port for API server        [number] [default: 3000]\n  -h, --help   Show help                  [boolean]\n  --version    Show version number        [boolean]\n```\n\n## MCP Integration\n\nThis project now uses the official Model Context Protocol (MCP) TypeScript SDK to provide integration with Claude for Desktop and other MCP clients.\n\n### MCP Tools\n\nThe following tools are available through the MCP interface:\n\n- **list-devices**: List all registered NodeMCU devices and their status\n- **get-device**: Get detailed information about a specific NodeMCU device\n- **send-command**: Send a command to a NodeMCU device\n- **update-config**: Update the configuration of a NodeMCU device\n\n### Using with Claude for Desktop\n\nTo use this server with Claude for Desktop:\n\n1. Install Claude for Desktop from [https://claude.ai/desktop](https://claude.ai/desktop)\n2. Configure Claude for Desktop by editing `~/Library/Application Support/Claude/claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"nodemcu\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/ABSOLUTE/PATH/TO/YOUR/PROJECT/mcp_server_sdk.js\"\n      ]\n    }\n  }\n}\n```\n\n3. Restart Claude for Desktop\n4. You should now see the NodeMCU tools in the Claude for Desktop interface\n\n### Running the MCP Server Standalone\n\nTo run the MCP server directly:\n\n```bash\nnpm run mcp\n```\n\nOr using the CLI:\n\n```bash\n./bin/cli.js --mode=mcp\n```\n\n## API Documentation\n\n### Authentication\n\n- **POST /api/auth/login** - Login and get JWT token\n  ```json\n  {\n    \"username\": \"admin\",\n    \"password\": \"admin123\"\n  }\n  ```\n  \n  Response:\n  ```json\n  {\n    \"message\": \"Login successful\",\n    \"token\": \"your.jwt.token\",\n    \"user\": {\n      \"id\": 1,\n      \"username\": \"admin\",\n      \"role\": \"admin\"\n    }\n  }\n  ```\n\n- **POST /api/auth/validate** - Validate JWT token\n  ```json\n  {\n    \"token\": \"your.jwt.token\"\n  }\n  ```\n\n### Devices API\n\nAll device endpoints require authentication with a JWT token:\n```\nAuthorization: Bearer your.jwt.token\n```\n\n#### List Devices\n\n```\nGET /api/devices\n```\n\nResponse:\n```json\n{\n  \"count\": 1,\n  \"devices\": [\n    {\n      \"id\": \"nodemcu-001\",\n      \"name\": \"Living Room Sensor\",\n      \"type\": \"ESP8266\",\n      \"status\": \"online\",\n      \"ip\": \"192.168.1.100\",\n      \"firmware\": \"1.0.0\",\n      \"lastSeen\": \"2023-05-15T14:30:45.123Z\"\n    }\n  ]\n}\n```\n\n#### Get Device Details\n\n```\nGET /api/devices/:id\n```\n\nResponse:\n```json\n{\n  \"id\": \"nodemcu-001\",\n  \"name\": \"Living Room Sensor\",\n  \"type\": \"ESP8266\",\n  \"status\": \"online\",\n  \"ip\": \"192.168.1.100\",\n  \"firmware\": \"1.0.0\",\n  \"lastSeen\": \"2023-05-15T14:30:45.123Z\",\n  \"config\": {\n    \"reportInterval\": 30,\n    \"debugMode\": false,\n    \"ledEnabled\": true\n  },\n  \"lastTelemetry\": {\n    \"temperature\": 23.5,\n    \"humidity\": 48.2,\n    \"uptime\": 3600,\n    \"heap\": 35280,\n    \"rssi\": -68\n  }\n}\n```\n\n#### Send Command to Device\n\n```\nPOST /api/devices/:id/command\n```\n\nRequest:\n```json\n{\n  \"command\": \"restart\",\n  \"params\": {}\n}\n```\n\nResponse:\n```json\n{\n  \"message\": \"Command sent to device\",\n  \"command\": \"restart\",\n  \"params\": {},\n  \"response\": {\n    \"success\": true,\n    \"message\": \"Device restarting\"\n  }\n}\n```\n\n## WebSocket Protocol\n\nThe WebSocket server is available at the root path: `ws://your-server:3000/`\n\nFor details on the WebSocket protocol messages, refer to the code or the examples directory.\n\n## NodeMCU Client Setup\n\nRefer to the Arduino sketch in the `examples` directory for a complete client implementation.\n\n### Key Steps\n\n1. Install required libraries in Arduino IDE:\n   - ESP8266WiFi\n   - WebSocketsClient\n   - ArduinoJson\n\n2. Configure the sketch with your WiFi and server settings:\n   ```cpp\n   // WiFi credentials\n   const char* ssid = \"YOUR_WIFI_SSID\";\n   const char* password = \"YOUR_WIFI_PASSWORD\";\n\n   // MCP Server settings\n   const char* mcpHost = \"your-server-ip\";\n   const int mcpPort = 3000;\n   ```\n\n3. Upload the sketch to your NodeMCU device\n\n## Development\n\n### Project Structure\n\n```\nnodemcu-mcp/\n‚îú‚îÄ‚îÄ assets/             # Logo and other static assets\n‚îú‚îÄ‚îÄ bin/                # CLI scripts\n‚îú‚îÄ‚îÄ examples/           # Example client code\n‚îú‚îÄ‚îÄ middleware/         # Express middleware\n‚îú‚îÄ‚îÄ routes/             # API routes\n‚îú‚îÄ‚îÄ services/           # Business logic\n‚îú‚îÄ‚îÄ .env.example        # Environment variables example\n‚îú‚îÄ‚îÄ index.js            # API server entry point\n‚îú‚îÄ‚îÄ mcp_server.js       # MCP protocol implementation\n‚îú‚îÄ‚îÄ mcp-manifest.json   # MCP manifest\n‚îî‚îÄ‚îÄ package.json        # Project configuration\n```\n\n### Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\nMIT License is a permissive license that allows you to:\n- Use the software commercially\n- Modify the software\n- Distribute the software\n- Use and modify the software privately\n\nThe only requirement is that the license and copyright notice must be included with the software.\n\n## Acknowledgments\n\n- [Model Context Protocol](https://modelcontextprotocol.io) for the integration specification\n- [NodeMCU](https://nodemcu.com) for the amazing IoT platform\n- [Anthropic](https://anthropic.com) for Claude Desktop "
}