{
  "mcp_name": "dandacompany/webhook-trigger",
  "mcp_description": "Facilitates dynamic webhook transmission using FastMCP framework with support for various HTTP methods and custom headers.",
  "mcp_id": "dandacompany_webhook-trigger",
  "fetch_timestamp": "2025-06-23T02:26:07.200331Z",
  "github_url": "https://github.com/dandacompany/webhook-trigger",
  "repository": {
    "name": "webhook-trigger",
    "full_name": "dandacompany/webhook-trigger",
    "description": null,
    "html_url": "https://github.com/dandacompany/webhook-trigger",
    "created_at": "2025-04-12T00:01:47Z",
    "updated_at": "2025-04-12T00:03:58Z",
    "pushed_at": "2025-04-12T00:03:54Z",
    "size": 5,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "master",
    "owner": {
      "login": "dandacompany",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/128420625?v=4",
      "html_url": "https://github.com/dandacompany"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 5196,
      "Shell": 1046
    },
    "language_percentages": {
      "Python": 83.24,
      "Shell": 16.76
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# FastMCP 웹훅 서버\n\nFastMCP 프레임워크를 사용한 동적 웹훅 전송 MCP 서버입니다.\n\n## 기능\n\n- GET 방식 웹훅 전송\n- POST 방식 웹훅 전송\n- 커스텀 HTTP 메서드 지원 (PUT, DELETE, PATCH 등)\n- 사용자 정의 헤더 및 페이로드 지원\n- 헤더 인증 지원\n\n## 설치 및 실행\n\n1. 가상환경 설정 및 종속성 설치:\n\n```bash\n# 가상환경 활성화\nsource venv/bin/activate\n\n# 종속성 설치\npip install -r requirements.txt\n```\n\n2. 서버 실행:\n\n```bash\n# 방법 1: 개발 모드 (웹 인터페이스 제공)\nfastmcp dev main.py\n\n# 방법 2: 직접 실행\npython main.py\n\n# 방법 3: Claude Desktop에 설치\nfastmcp install main.py --name \"Webhook Server\"\n```\n\n## Claude Desktop에 MCP 서버 설정하기\n\n### 전제 조건\n\n- Claude Desktop 설치 (<https://claude.ai/desktop>)\n- FastMCP 설치 (`pip install fastmcp`)\n- uv 설치 (macOS에서는 `brew install uv`)\n\n### 설치 과정\n\n1. 터미널에서 다음 명령어를 실행하여 MCP 서버를 Claude Desktop에 설치합니다:\n\n```bash\ncd dante@webhook_trigger\nfastmcp install main.py --name \"Webhook Server\"\n```\n\n2. 환경 변수가 필요한 경우 다음과 같이 설정할 수 있습니다:\n\n```bash\n# .env 파일에서 불러오기\nfastmcp install main.py --name \"Webhook Server\" -f .env\n```\n\n3. 설치 성공 메시지가 표시되면, Claude Desktop을 실행합니다.\n\n4. Claude Desktop 앱에서:\n   - 좌측 하단의 설정 아이콘(⚙️)을 클릭합니다.\n   - \"Extension & Tools\" 메뉴로 이동합니다.\n   - \"Installed Tools\" 섹션에서 \"Webhook Server\"가 표시되는지 확인합니다.\n   - 필요한 경우 토글 스위치로 활성화합니다.\n\n### claude_desktop_config.json 수동 설정 방법\n\nFastMCP의 설치 명령어는 자동으로 Claude Desktop의 설정 파일을 업데이트합니다. 하지만 수동으로 설정하거나 문제가 발생한 경우 다음 방법을 사용할 수 있습니다:\n\n1. **claude_desktop_config.json 파일 위치**:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `C:\\Users\\YourUsername\\AppData\\Roaming\\Claude\\claude_desktop_config.json`\n   - Linux: `~/.config/Claude/claude_desktop_config.json`\n\n2. **웹훅 MCP 서버를 위한 설정 추가 (가상환경 사용)**:\n\n```json\n{\n  \"mcpServers\": {\n    \"webhook-server\": {\n      \"command\": \"/absolute/path/to/dante@webhook_trigger/venv/bin/python\",\n      \"args\": [\n        \"/absolute/path/to/dante@webhook_trigger/main.py\"\n      ],\n      \"env\": {\n        \"DEBUG\": \"true\"\n      }\n    }\n  }\n}\n```\n\n3. **쉘 스크립트를 통한 실행 방식 (권장)**:\n\n```json\n{\n  \"mcpServers\": {\n    \"webhook-server\": {\n      \"command\": \"/bin/bash\",\n      \"args\": [\n        \"/absolute/path/to/dante@webhook_trigger/mcp_run.sh\"\n      ],\n      \"env\": {\n        \"DEBUG\": \"true\"\n      }\n    }\n  }\n}\n```\n\n4. **uv를 사용한 실행 방식**:\n\n```json\n{\n  \"mcpServers\": {\n    \"Webhook Server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"python\",\n        \"/absolute/path/to/dante@webhook_trigger/main.py\"\n      ],\n      \"env\": {\n        \"DEBUG\": \"true\"\n      }\n    }\n  }\n}\n```\n\n5. **uv와 가상환경을 사용한 실행 방식 (권장)**:\n\n```json\n{\n  \"mcpServers\": {\n    \"Webhook Server\": {\n      \"command\": \"/bin/bash\",\n      \"args\": [\n        \"-c\",\n        \"cd /absolute/path/to/dante@webhook_trigger && uv run python main.py\"\n      ],\n      \"env\": {\n        \"DEBUG\": \"true\"\n      }\n    }\n  }\n}\n```\n\n6. **설정 파일 구성 요소**:\n   - `mcpServers`: MCP 서버 목록이 포함된 객체\n   - `webhook-server`: 서버의 식별자(이름)로, Claude에 표시됩니다\n   - `command`: 서버를 실행할 명령어 (가상환경의 Python 경로 사용)\n   - `args`: 명령어에 전달할 인수 배열\n   - `env`: 환경 변수 설정 (선택 사항)\n\n7. **macOS에서 경로 설정 주의사항**:\n   - 절대 경로 사용을 권장합니다\n   - 가상환경의 Python 경로를 정확히 지정해야 합니다\n   - 홈 디렉토리(~)는 명시적으로 전체 경로로 변경해야 합니다\n   - 경로에 공백이 있는 경우 적절하게 처리해야 합니다\n\n8. **설정 적용**:\n   - 설정 파일을 저장한 후 Claude Desktop을 재시작합니다\n   - Tools 섹션에서 웹훅 서버가 표시되는지 확인합니다\n\n### 설치 확인 및 테스트\n\n1. Claude Desktop에서 새 대화를 시작합니다.\n\n2. 다음과 같은 프롬프트를 입력하여 MCP 서버가 제대로 작동하는지 테스트합니다:\n\n```\n\"Webhook Server\"를 사용하여 https://httpbin.org/get에 GET 요청을 보내줄래?\n```\n\n3. Claude가 MCP 서버의 도구를 사용하여 요청을 처리하고 결과를 반환하는지 확인합니다.\n\n### 문제 해결\n\n- **서버가 보이지 않는 경우**:\n\n  ```bash\n  fastmcp list\n  ```\n\n  명령어로 설치된 서버 목록을 확인하고, 필요한 경우 재설치합니다.\n\n- **Claude가 도구를 인식하지 못하는 경우**:\n  Claude Desktop을 재시작하고, 설정에서 도구가 활성화되어 있는지 확인합니다.\n\n- **macOS에서 uv 관련 오류**:\n\n  ```bash\n  brew install uv\n  ```\n\n  를 실행하여 uv가 시스템 경로에 올바르게 설치되었는지 확인합니다.\n\n- **config.json 설정 문제**:\n  - 경로가 올바른지 확인합니다\n  - JSON 형식에 오류가 없는지 확인합니다\n  - 명령어와 실행 파일의 권한이 적절한지 확인합니다\n\n- **Python 가상환경 문제**:\n  - 가상환경의 Python 경로가 올바른지 확인합니다\n  - 필요한 패키지가 가상환경에 설치되어 있는지 확인합니다\n  - 쉘 스크립트를 통한 실행 방식을 사용해보세요\n\n## MCP 서버 사용 방법\n\n### 1. MCP 개발 인터페이스 (Inspector) 사용\n\n개발 모드에서는 웹 인터페이스를 통해 다음 작업을 수행할 수 있습니다:\n\n- 도구 목록 확인\n- 도구 테스트\n- 로그 확인\n\n### 2. Claude에서 사용\n\nClaude Desktop에 설치한 후 다음과 같이 자연어로 요청할 수 있습니다:\n\n#### GET 요청 예시\n\n```\nhttps://example.com/api에 GET 요청을 보내줘.\n```\n\n```\n다음 정보로 GET 웹훅을 보내줘:\n- URL: https://api.example.com/users\n- 헤더: {\"Accept\": \"application/json\"}\n- 인증 토큰: \"Bearer token123\"\n```\n\n#### POST 요청 예시\n\n```\nhttps://example.com/api에 {\"name\": \"테스트\"}라는 데이터를 POST로 보내줘.\n```\n\n```\n다음 정보로 POST 웹훅을 보내줘:\n- URL: https://api.example.com/webhook\n- 헤더: {\"Content-Type\": \"application/json\", \"X-API-Key\": \"key123\"}\n- 페이로드: {\"name\": \"테스트\", \"value\": 123}\n- 인증 토큰: \"Bearer token456\"\n```\n\n#### 커스텀 HTTP 메서드 예시\n\n```\nhttps://example.com/api/user/1에 DELETE 요청을 보내줘.\n```\n\n```\n다음 정보로 PUT 요청을 보내줘:\n- URL: https://api.example.com/users/123\n- 페이로드: {\"name\": \"수정된 이름\", \"email\": \"new@example.com\"}\n- 인증: \"Bearer my-token\"\n```\n\n## 사용 가능한 MCP 도구\n\n### 1. `send_get_webhook`\n\nGET 방식으로 웹훅을 전송합니다.\n\n매개변수:\n\n- `url`: 호출할 웹훅 URL (필수)\n- `auth_token`: 인증에 사용할 토큰 (선택 사항)\n- `custom_headers`: 추가 요청 헤더 (선택 사항)\n\n### 2. `send_post_webhook`\n\nPOST 방식으로 웹훅을 전송합니다.\n\n매개변수:\n\n- `url`: 호출할 웹훅 URL (필수)\n- `payload`: 전송할 JSON 페이로드 (선택 사항)\n- `headers`: 요청 헤더 (선택 사항)\n- `auth_token`: 인증에 사용할 토큰 (선택 사항)\n\n### 3. `send_custom_webhook`\n\n사용자 지정 HTTP 메서드로 웹훅을 전송합니다.\n\n매개변수:\n\n- `method`: HTTP 메서드 (GET, POST, PUT, DELETE, PATCH 등) (필수)\n- `url`: 호출할 웹훅 URL (필수)\n- `payload`: 전송할 JSON 페이로드 (선택 사항)\n- `headers`: 요청 헤더 (선택 사항)\n- `auth_token`: 인증에 사용할 토큰 (선택 사항)\n\n## 프로젝트 구조\n\n```\ndante@webhook_trigger/\n├── main.py                # MCP 서버 및 도구 정의\n├── requirements.txt       # 종속성\n├── run.sh                 # 실행 스크립트\n├── mcp_run.sh             # MCP 서버 실행 스크립트 \n└── .env                   # 환경 변수\n```\n"
}