{
  "mcp_name": "openlink/mcp-server-sqlalchemy",
  "mcp_description": "üêç üè† - An MCP server for generic Database Management System (DBMS) Connectivity via SQLAlchemy using Python ODBC (pyodbc)",
  "mcp_id": "OpenLinkSoftware_mcp-sqlalchemy-server",
  "fetch_timestamp": "2025-06-23T07:20:19.253040Z",
  "github_url": "https://github.com/OpenLinkSoftware/mcp-sqlalchemy-server",
  "repository": {
    "name": "mcp-sqlalchemy-server",
    "full_name": "OpenLinkSoftware/mcp-sqlalchemy-server",
    "description": "A simple MCP ODBC server using FastAPI, ODBC and SQLAlchemy.",
    "html_url": "https://github.com/OpenLinkSoftware/mcp-sqlalchemy-server",
    "created_at": "2025-03-21T23:22:23Z",
    "updated_at": "2025-06-09T20:56:47Z",
    "pushed_at": "2025-05-23T16:12:57Z",
    "size": 110,
    "stargazers_count": 14,
    "watchers_count": 14,
    "forks_count": 6,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "OpenLinkSoftware",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/30477123?v=4",
      "html_url": "https://github.com/OpenLinkSoftware"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 6,
    "subscribers_count": 5,
    "languages": {
      "Python": 27541
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 8,
    "contributors_count": 2
  },
  "readme": "---\n\n# MCP Server ODBC via SQLAlchemy\n\nA lightweight MCP (Model Context Protocol) server for ODBC built with **FastAPI**, **pyodbc**, and **SQLAlchemy**. This server is compatible with Virtuoso DBMS and other DBMS backends that implement a SQLAlchemy provider.\n\n![mcp-client-and-servers|648x499](https://www.openlinksw.com/data/gifs/mcp-client-and-servers.gif)\n\n---\n\n## Features\n\n- **Get Schemas**: Fetch and list all schema names from the connected database.\n- **Get Tables**: Retrieve table information for specific schemas or all schemas.\n- **Describe Table**: Generate a detailed description of table structures, including:\n  - Column names and data types\n  - Nullable attributes\n  - Primary and foreign keys\n- **Search Tables**: Filter and retrieve tables based on name substrings.\n- **Execute Stored Procedures**: In the case of Virtuoso, execute stored procedures and retrieve results.\n- **Execute Queries**:\n  - JSONL result format: Optimized for structured responses.\n  - Markdown table format: Ideal for reporting and visualization.\n\n---\n\n## Prerequisites\n\n1. **Install uv**:\n   ```bash\n   pip install uv\n   ```\n   Or use Homebrew:\n   ```bash\n   brew install uv\n   ```\n\n2. **unixODBC Runtime Environment Checks**:\n\n1. Check installation configuration (i.e., location of key INI files) by running: `odbcinst -j`\n2. List available data source names by running: `odbcinst -q -s`\n   \n3. **ODBC DSN Setup**: Configure your ODBC Data Source Name (`~/.odbc.ini`) for the target database. Example for Virtuoso DBMS:\n   ```\n   [VOS]\n   Description = OpenLink Virtuoso\n   Driver = /path/to/virtodbcu_r.so\n   Database = Demo\n   Address = localhost:1111\n   WideAsUTF16 = Yes\n   ```\n\n3. **SQLAlchemy URL Binding**: Use the format:\n   ```\n   virtuoso+pyodbc://user:password@VOS\n   ```\n\n---\n\n## Installation\n\nClone this repository:\n```bash\ngit clone https://github.com/OpenLinkSoftware/mcp-sqlalchemy-server.git\ncd mcp-sqlalchemy-server\n```\n## Environment Variables \nUpdate your `.env`by overriding the defaults to match your preferences\n```\nODBC_DSN=VOS\nODBC_USER=dba\nODBC_PASSWORD=dba\nAPI_KEY=xxx\n```\n---\n\n## Configuration\n\nFor **Claude Desktop** users:\nAdd the following to `claude_desktop_config.json`:\n```json\n{\n  \"mcpServers\": {\n    \"my_database\": {\n      \"command\": \"uv\",\n      \"args\": [\"--directory\", \"/path/to/mcp-sqlalchemy-server\", \"run\", \"mcp-sqlalchemy-server\"],\n      \"env\": {\n        \"ODBC_DSN\": \"dsn_name\",\n        \"ODBC_USER\": \"username\",\n        \"ODBC_PASSWORD\": \"password\",\n        \"API_KEY\": \"sk-xxx\"\n      }\n    }\n  }\n}\n```\n---\n# Usage \n## Database Management System (DBMS) Connection URLs \nHere are the pyodbc URL examples for connecting to DBMS systems that have been tested using this mcp-server.\n\n| Database      | URL Format                                    |\n|---------------|-----------------------------------------------|\n| Virtuoso DBMS | `virtuoso+pyodbc://user:password@ODBC_DSN`    |\n| PostgreSQL    | `postgresql://user:password@localhost/dbname` |\n| MySQL         | `mysql+pymysql://user:password@localhost/dbname` |\n| SQLite        | `sqlite:///path/to/database.db`               |\nOnce connected, you can interact with your WhatsApp contacts through Claude, leveraging Claude's AI capabilities in your WhatsApp conversations.\n\n## Tools Provided\n\n### Overview\n|name|description|\n|---|---|\n|podbc_get_schemas|List database schemas accessible to connected database management system (DBMS).|\n|podbc_get_tables|List tables associated with a selected database schema.|\n|podbc_describe_table|Provide the description of a table associated with a designated database schema. This includes information about column names, data types, nulls handling, autoincrement, primary key, and foreign keys|\n|podbc_filter_table_names|List tables, based on a substring pattern from the `q` input field, associated with a selected database schema.|\n|podbc_query_database|Execute a SQL query and return results in JSONL format.|\n|podbc_execute_query|Execute a SQL query and return results in JSONL format.|\n|podbc_execute_query_md|Execute a SQL query and return results in Markdown table format.|\n|podbc_spasql_query|Execute a SPASQL query and return results.|\n|podbc_sparql_query|Execute a SPARQL query and return results.|\n|podbc_virtuoso_support_ai|Interact with the Virtuoso Support Assistant/Agent -- a Virtuoso-specific feature for interacting with LLMs|\n\n### Detailed Description\n\n- **podbc_get_schemas**\n  - Retrieve and return a list of all schema names from the connected database.\n  - Input parameters:\n    - `user` (string, optional): Database username. Defaults to \"demo\".\n    - `password` (string, optional): Database password. Defaults to \"demo\".\n    - `dsn` (string, optional): ODBC data source name. Defaults to \"Local Virtuoso\".\n  - Returns a JSON string array of schema names.\n\n- **podbc_get_tables**\n  - Retrieve and return a list containing information about tables in a specified schema. If no schema is provided, uses the connection's default schema.\n  - Input parameters:\n    - `schema` (string, optional): Database schema to filter tables. Defaults to connection default.\n    - `user` (string, optional): Database username. Defaults to \"demo\".\n    - `password` (string, optional): Database password. Defaults to \"demo\".\n    - `dsn` (string, optional): ODBC data source name. Defaults to \"Local Virtuoso\".\n  - Returns a JSON string containing table information (e.g., TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE).\n\n- **podbc_filter_table_names**\n  - Filters and returns information about tables whose names contain a specific substring.\n  - Input parameters:\n    - `q` (string, required): The substring to search for within table names.\n    - `schema` (string, optional): Database schema to filter tables. Defaults to connection default.\n    - `user` (string, optional): Database username. Defaults to \"demo\".\n    - `password` (string, optional): Database password. Defaults to \"demo\".\n    - `dsn` (string, optional): ODBC data source name. Defaults to \"Local Virtuoso\".\n  - Returns a JSON string containing information for matching tables.\n\n- **podbc_describe_table**\n  - Retrieve and return detailed information about the columns of a specific table.\n  - Input parameters:\n    - `schema` (string, required): The database schema name containing the table.\n    - `table` (string, required): The name of the table to describe.\n    - `user` (string, optional): Database username. Defaults to \"demo\".\n    - `password` (string, optional): Database password. Defaults to \"demo\".\n    - `dsn` (string, optional): ODBC data source name. Defaults to \"Local Virtuoso\".\n  - Returns a JSON string describing the table's columns (e.g., COLUMN_NAME, TYPE_NAME, COLUMN_SIZE, IS_NULLABLE).\n\n- **podbc_query_database**\n  - Execute a standard SQL query and return the results in JSON format.\n  - Input parameters:\n    - `query` (string, required): The SQL query string to execute.\n    - `user` (string, optional): Database username. Defaults to \"demo\".\n    - `password` (string, optional): Database password. Defaults to \"demo\".\n    - `dsn` (string, optional): ODBC data source name. Defaults to \"Local Virtuoso\".\n  - Returns query results as a JSON string.\n\n- **podbc_query_database_md**\n  - Execute a standard SQL query and return the results formatted as a Markdown table.\n  - Input parameters:\n    - `query` (string, required): The SQL query string to execute.\n    - `user` (string, optional): Database username. Defaults to \"demo\".\n    - `password` (string, optional): Database password. Defaults to \"demo\".\n    - `dsn` (string, optional): ODBC data source name. Defaults to \"Local Virtuoso\".\n  - Returns query results as a Markdown table string.\n\n- **podbc_query_database_jsonl**\n  - Execute a standard SQL query and return the results in JSON Lines (JSONL) format (one JSON object per line).\n  - Input parameters:\n    - `query` (string, required): The SQL query string to execute.\n    - `user` (string, optional): Database username. Defaults to \"demo\".\n    - `password` (string, optional): Database password. Defaults to \"demo\".\n    - `dsn` (string, optional): ODBC data source name. Defaults to \"Local Virtuoso\".\n  - Returns query results as a JSONL string.\n\n- **podbc_spasql_query**\n  - Execute a SPASQL (SQL/SPARQL hybrid) query return results. This is a Virtuoso-specific feature.\n  - Input parameters:\n    - `query` (string, required): The SPASQL query string.\n    - `max_rows` (number, optional): Maximum number of rows to return. Defaults to 20.\n    - `timeout` (number, optional): Query timeout in milliseconds. Defaults to 30000.\n    - `user` (string, optional): Database username. Defaults to \"demo\".\n    - `password` (string, optional): Database password. Defaults to \"demo\".\n    - `dsn` (string, optional): ODBC data source name. Defaults to \"Local Virtuoso\".\n  - Returns the result from the underlying stored procedure call (e.g., `Demo.demo.execute_spasql_query`).\n\n- **podbc_sparql_query**\n  - Execute a SPARQL query and return results. This is a Virtuoso-specific feature.\n  - Input parameters:\n    - `query` (string, required): The SPARQL query string.\n    - `format` (string, optional): Desired result format. Defaults to 'json'.\n    - `timeout` (number, optional): Query timeout in milliseconds. Defaults to 30000.\n    - `user` (string, optional): Database username. Defaults to \"demo\".\n    - `password` (string, optional): Database password. Defaults to \"demo\".\n    - `dsn` (string, optional): ODBC data source name. Defaults to \"Local Virtuoso\".\n  - Returns the result from the underlying function call (e.g., `\"UB\".dba.\"sparqlQuery\"`).\n\n- **podbc_virtuoso_support_ai**\n  - Utilizes a Virtuoso-specific AI Assistant function, passing a prompt and optional API key. This is a Virtuoso-specific feature.\n  - Input parameters:\n    - `prompt` (string, required): The prompt text for the AI function.\n    - `api_key` (string, optional): API key for the AI service. Defaults to \"none\".\n    - `user` (string, optional): Database username. Defaults to \"demo\".\n    - `password` (string, optional): Database password. Defaults to \"demo\".\n    - `dsn` (string, optional): ODBC data source name. Defaults to \"Local Virtuoso\".\n  - Returns the result from the AI Support Assistant function call (e.g., `DEMO.DBA.OAI_VIRTUOSO_SUPPORT_AI`).\n\n---\n\n## Troubleshooting\n\nFor easier troubleshooting:\n1. Install the MCP Inspector:\n   ```bash\n   npm install -g @modelcontextprotocol/inspector\n   ```\n\n2. Start the inspector:\n   ```bash\n   npx @modelcontextprotocol/inspector uv --directory /path/to/mcp-sqlalchemy-server run mcp-sqlalchemy-server\n   ```\n\nAccess the provided URL to troubleshoot server interactions.\n\n"
}