{
  "mcp_name": "freema/mcp-gsheets",
  "mcp_description": "üìá ‚òÅÔ∏è - MCP server for Google Sheets API integration with comprehensive reading, writing, formatting, and sheet management capabilities.",
  "mcp_id": "freema_mcp-gsheets",
  "fetch_timestamp": "2025-06-23T03:35:39.083837Z",
  "github_url": "https://github.com/freema/mcp-gsheets",
  "repository": {
    "name": "mcp-gsheets",
    "full_name": "freema/mcp-gsheets",
    "description": "MCP server for Google Sheets - Read, write and manipulate spreadsheets through Claude Desktop",
    "html_url": "https://github.com/freema/mcp-gsheets",
    "created_at": "2025-05-24T17:43:01Z",
    "updated_at": "2025-06-19T11:19:07Z",
    "pushed_at": "2025-06-20T06:43:06Z",
    "size": 99,
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks_count": 3,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [
      "automation",
      "google-sheets-api",
      "mcp",
      "nodejs",
      "typescript"
    ],
    "default_branch": "main",
    "owner": {
      "login": "freema",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/2912985?v=4",
      "html_url": "https://github.com/freema"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 3,
    "subscribers_count": 0,
    "languages": {
      "TypeScript": 158827,
      "JavaScript": 24879,
      "Dockerfile": 1106
    },
    "language_percentages": {
      "TypeScript": 85.94,
      "JavaScript": 13.46,
      "Dockerfile": 0.6
    },
    "pull_requests_count": 20,
    "contributors_count": 1,
    "latest_release": {
      "tag_name": "1.2",
      "name": "1.2",
      "published_at": "2025-06-04T04:50:27Z",
      "body": "## What's Changed\r\n* docs: Update cloning instructions in README to include HTTPS and SSH ‚Ä¶ by @freema in https://github.com/freema/mcp-gsheets/pull/2\r\n* Ref imports by @freema in https://github.com/freema/mcp-gsheets/pull/8\r\n* feat: Update README and package.json with author and repository details by @freema in https://github.com/freema/mcp-gsheets/pull/9\r\n\r\n\r\n**Full Changelog**: https://github.com/freema/mcp-gsheets/compare/1.1...1.2",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "1.2",
        "commit_sha": "71195d9d019bf388b012f75f43a21f76e9c59f9f"
      },
      {
        "name": "1.1",
        "commit_sha": "a7311376d0530c0a50b3e41fc68cd102a14ff46a"
      },
      {
        "name": "1.0",
        "commit_sha": "6914b546ab0e12315dd564dc3c9dba0f6943f98d"
      }
    ],
    "latest_version": "1.2",
    "package_json_version": "1.0.0"
  },
  "readme": "# MCP Google Sheets Server\n\n<a href=\"https://glama.ai/mcp/servers/@freema/mcp-gsheets\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@freema/mcp-gsheets/badge\" />\n</a>\n\n[![npm version](https://badge.fury.io/js/mcp-gsheets.svg)](https://www.npmjs.com/package/mcp-gsheets)\n![CI](https://github.com/freema/mcp-gsheets/workflows/CI/badge.svg)\n![Coverage](https://codecov.io/gh/freema/mcp-gsheets/branch/main/graph/badge.svg)\n![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)\n![TypeScript](https://img.shields.io/badge/TypeScript-5.0%2B-007ACC?logo=typescript&logoColor=white)\n![Node](https://img.shields.io/badge/Node.js-18%2B-339933?logo=node.js&logoColor=white)\n![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?logo=prettier&logoColor=white)\n\nA Model Context Protocol (MCP) server for Google Sheets API integration. Enables reading, writing, and managing Google Sheets documents directly from your MCP client (e.g., Claude Desktop).\n\n## üöÄ Quick Start\n\n### 1. Prerequisites\n\n- Node.js v18 or higher\n- Google Cloud Project with Sheets API enabled\n- Service Account with JSON key file\n\n### 2. Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/freema/mcp-gsheets.git\n# Or using SSH\n# git clone git@github.com:freema/mcp-gsheets.git\ncd mcp-gsheets\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n### 3. Google Cloud Setup\n\n1. Go to [Google Cloud Console](https://console.cloud.google.com)\n2. Create a new project or select existing\n3. Enable Google Sheets API:\n   - Navigate to \"APIs & Services\" ‚Üí \"Library\"\n   - Search for \"Google Sheets API\" and click \"Enable\"\n4. Create Service Account:\n   - Go to \"APIs & Services\" ‚Üí \"Credentials\"\n   - Click \"Create Credentials\" ‚Üí \"Service Account\"\n   - Download the JSON key file\n5. Share your spreadsheets:\n   - Open your Google Sheet\n   - Click Share and add the service account email (from JSON file)\n   - Grant \"Editor\" permissions\n\n### 4. Configure MCP Client\n\n#### Easy Setup (Recommended)\n\nRun the interactive setup script:\n\n```bash\nnpm run setup\n```\n\nThis will:\n- Guide you through the configuration\n- Automatically detect your Node.js installation (including nvm)\n- Find your Claude Desktop config\n- Create the proper JSON configuration\n- Optionally create a .env file for development\n\n#### Manual Setup\n\nIf you prefer manual configuration, add to your Claude Desktop config:\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n- Linux: `~/.config/claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-gsheets\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/mcp-gsheets/dist/index.js\"],\n      \"env\": {\n        \"GOOGLE_PROJECT_ID\": \"your-project-id\",\n        \"GOOGLE_APPLICATION_CREDENTIALS\": \"/absolute/path/to/service-account-key.json\"\n      }\n    }\n  }\n}\n```\n\nRestart Claude Desktop after adding the configuration.\n\n## üì¶ Build & Development\n\n### Development Commands\n\n```bash\n# Development mode with hot reload\nnpm run dev\n\n# Build for production\nnpm run build\n\n# Type checking\nnpm run typecheck\n\n# Clean build artifacts\nnpm run clean\n\n# Run MCP inspector for debugging\nnpm run inspector\n\n# Run MCP inspector in development mode\nnpm run inspector:dev\n```\n\n### Task Runner (Alternative)\n\nIf you have [Task](https://taskfile.dev) installed:\n\n```bash\n# Install dependencies\ntask install\n\n# Build the project\ntask build\n\n# Run in development mode\ntask dev\n\n# Run linter\ntask lint\n\n# Format code\ntask fmt\n\n# Run all checks\ntask check\n```\n\n### Development Setup\n\n1. Create `.env` file for testing:\n```bash\ncp .env.example .env\n# Edit .env with your credentials:\n# GOOGLE_PROJECT_ID=your-project-id\n# GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json\n# TEST_SPREADSHEET_ID=your-test-spreadsheet-id\n```\n\n2. Run in development mode:\n```bash\nnpm run dev  # Watch mode with auto-reload\n```\n\n## üìã Available Tools\n\n### Reading Data\n- `sheets_get_values` - Read from a range\n- `sheets_batch_get_values` - Read from multiple ranges\n- `sheets_get_metadata` - Get spreadsheet info\n- `sheets_check_access` - Check access permissions\n\n### Writing Data\n- `sheets_update_values` - Write to a range\n- `sheets_batch_update_values` - Write to multiple ranges\n- `sheets_append_values` - Append rows to a table\n- `sheets_clear_values` - Clear cell contents\n\n### Sheet Management\n- `sheets_insert_sheet` - Add new sheet\n- `sheets_delete_sheet` - Remove sheet\n- `sheets_duplicate_sheet` - Copy sheet\n- `sheets_copy_to` - Copy to another spreadsheet\n- `sheets_update_sheet_properties` - Update sheet settings\n\n### Cell Formatting\n- `sheets_format_cells` - Format cells (colors, fonts, alignment, number formats)\n- `sheets_update_borders` - Add or modify cell borders\n- `sheets_merge_cells` - Merge cells together\n- `sheets_unmerge_cells` - Unmerge previously merged cells\n- `sheets_add_conditional_formatting` - Add conditional formatting rules\n\n## üîß Code Quality\n\n### Linting\n\n```bash\n# Run ESLint\nnpm run lint\n\n# Fix auto-fixable issues\nnpm run lint:fix\n```\n\n### Formatting\n\n```bash\n# Check formatting with Prettier\nnpm run format:check\n\n# Format code\nnpm run format\n```\n\n### Type Checking\n\n```bash\n# Run TypeScript type checking\nnpm run typecheck\n```\n\n## ‚ùó Troubleshooting\n\n### Common Issues\n\n**\"Authentication failed\"**\n- Verify JSON key path is absolute and correct\n- Check GOOGLE_PROJECT_ID matches your project\n- Ensure Sheets API is enabled\n\n**\"Permission denied\"**\n- Share spreadsheet with service account email\n- Service account needs \"Editor\" role\n- Check email in JSON file (client_email field)\n\n**\"Spreadsheet not found\"**\n- Verify spreadsheet ID from URL\n- Format: `https://docs.google.com/spreadsheets/d/[SPREADSHEET_ID]/edit`\n\n**MCP Connection Issues**\n- Ensure you're using the built version (`dist/index.js`)\n- Check that Node.js path is correct in Claude Desktop config\n- Look for errors in Claude Desktop logs\n- Use `npm run inspector` to debug\n\n## üîç Finding IDs\n\n### Spreadsheet ID\nFrom the URL:\n```\nhttps://docs.google.com/spreadsheets/d/1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms/edit\n                                        ‚Üë This is the spreadsheet ID\n```\n\n### Sheet ID\nUse `sheets_get_metadata` to list all sheets with their IDs.\n\n## üìù Tips\n\n1. Always test with a copy of your data\n2. Use batch operations for better performance\n3. Set appropriate permissions (read-only vs edit)\n4. Check rate limits for large operations\n5. Use `sheets_check_access` to verify permissions before operations\n\n## ü§ù Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Run tests and linting (`npm run check`)\n4. Commit your changes (`git commit -m 'Add some amazing feature'`)\n5. Push to the branch (`git push origin feature/amazing-feature`)\n6. Open a Pull Request\n\n## üìÑ License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details."
}