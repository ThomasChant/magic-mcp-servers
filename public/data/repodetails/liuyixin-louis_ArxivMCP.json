{
  "mcp_name": "liuyixin-louis/ArxivMCP",
  "mcp_description": "Facilitates academic paper searches on arXiv with MCP client integration for seamless retrieval.",
  "mcp_id": "liuyixin-louis_ArxivMCP",
  "fetch_timestamp": "2025-06-23T06:13:48.392757Z",
  "github_url": "https://github.com/liuyixin-louis/ArxivMCP",
  "repository": {
    "name": "ArxivMCP",
    "full_name": "liuyixin-louis/ArxivMCP",
    "description": null,
    "html_url": "https://github.com/liuyixin-louis/ArxivMCP",
    "created_at": "2025-04-15T17:03:06Z",
    "updated_at": "2025-04-15T17:11:13Z",
    "pushed_at": "2025-04-15T17:11:09Z",
    "size": 17,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "liuyixin-louis",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/53036760?v=4",
      "html_url": "https://github.com/liuyixin-louis"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 3498
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# ArxivMCP\n\nA tool for searching and retrieving academic papers from arXiv.\n\n## Prerequisites\n\n- Python 3.10 or higher\n- [uv](https://github.com/astral-sh/uv) (Python package installer)\n\nIf you don't have `uv` installed, you can install it via pip:\n```bash\npip install uv\n```\nOr follow the official [installation guide](https://github.com/astral-sh/uv#installation).\n\n## Installation\n\n1.  **Clone the repository:**\n    ```bash\n    git clone <repository-url> # Replace with the actual URL\n    cd paper-search\n    ```\n\n2.  **Set up the Python environment using `uv`:**\n    This command creates a virtual environment (`.venv`) if it doesn't exist and installs the dependencies listed in `pyproject.toml`.\n    ```bash\n    uv sync\n    ```\n\n3.  **Activate the virtual environment:**\n    ```bash\n    source .venv/bin/activate\n    ```\n    (On Windows, use: `.venv\\Scripts\\activate`)\n\n## Usage\n\nTo run the main script:\n```bash\npython main.py\n```\n\n## IDE Configuration (Cursor/MCP)\n\nTo configure an MCP-enabled client (like Cursor or Claude Desktop) to use this paper search server, you need to modify the client's configuration file. For example, in Claude Desktop, the file is typically located at `~/Library/Application Support/Claude/claude_desktop_config.json` (Mac/Linux) or `$env:AppData\\Claude\\claude_desktop_config.json` (Windows).\n\nAdd an entry for this server under the `mcpServers` key like this:\n\n```json\n{\n    \"mcpServers\": {\n        \"paper-search\": { // You can name this server entry\n            \"command\": \"uv\", // Or provide the full path from `which uv` / `where uv`, something you might adjust it like '/opt/homebrew/bin/uv'\n            \"args\": [\n                \"--directory\",\n                \"/ABSOLUTE/PATH/TO/THIS/PROJECT/paper-search\", // <-- IMPORTANT: Use the absolute path here\n                \"run\",\n                \"search.py\"\n            ]\n        }\n        // ... other servers can be listed here\n    }\n}\n```\n\n**Key points:**\n\n- Replace `/ABSOLUTE/PATH/TO/THIS/PROJECT/paper-search` with the actual **absolute path** to this project's directory on your system.\n- If the client cannot find `uv`, replace `\"uv\"` in the `\"command\"` field with the full path to your `uv` executable (found using `which uv` on MacOS/Linux or `where uv` on Windows).\n- After saving the configuration file, **restart your MCP client** (e.g., Claude Desktop).\n\nOnce configured and restarted, the client should recognize the server and its tools (often indicated by an icon, like a hammer ðŸ”¨ in Claude Desktop).\n\n## Dependencies\n\nThis project relies on the following main libraries:\n\n- `beautifulsoup4`: For parsing HTML content.\n- `httpx`: For making asynchronous HTTP requests.\n- `mcp[cli]`: For MCP tooling integration.\n\nDependencies are managed using `uv` and defined in the `pyproject.toml` file.\n\n\n\n## TODO: Backend Code \n"
}