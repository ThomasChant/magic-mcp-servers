{
  "mcp_name": "ralf-boltshauser/sbb-mcp-server",
  "mcp_description": "A TypeScript starter project for building MCP servers with an echo server implementation, supporting both STDIO and SSE communication modes.",
  "mcp_id": "ralf-boltshauser_sbb-mcp-server",
  "fetch_timestamp": "2025-06-23T07:51:30.003201Z",
  "github_url": "https://github.com/ralf-boltshauser/sbb-mcp-server",
  "repository": {
    "name": "sbb-mcp-server",
    "full_name": "ralf-boltshauser/sbb-mcp-server",
    "description": null,
    "html_url": "https://github.com/ralf-boltshauser/sbb-mcp-server",
    "created_at": "2025-04-15T19:58:04Z",
    "updated_at": "2025-04-17T14:35:34Z",
    "pushed_at": "2025-04-16T11:23:40Z",
    "size": 215,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "HTML",
    "license": "MIT License",
    "topics": [],
    "default_branch": "master",
    "owner": {
      "login": "ralf-boltshauser",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/44221621?v=4",
      "html_url": "https://github.com/ralf-boltshauser"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "HTML": 11643,
      "TypeScript": 8727,
      "Dockerfile": 1137,
      "Shell": 615
    },
    "language_percentages": {
      "HTML": 52.63,
      "TypeScript": 39.45,
      "Dockerfile": 5.14,
      "Shell": 2.78
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "0.1.0"
  },
  "readme": "# MCP TypeScript Server Starter\n\nA starter project for building Model Context Protocol (MCP) servers in TypeScript. This project provides a simple echo server implementation that demonstrates the core features of MCP.\n\n## Quick Start Checklists\n\n### 📥 Installation\n\n- [ ] Clone the repository:\n  ```bash\n  git clone https://github.com/ralf-boltshauser/mcp-typescript-server-starter.git\n  cd mcp-typescript-server-starter\n  ```\n- [ ] Install dependencies:\n  ```bash\n  pnpm install\n  ```\n\n### 🛠️ Local Development\n\n- [ ] Start the development server:\n  ```bash\n  pnpm dev\n  ```\n- [ ] Access the inspector at http://localhost:6274\n- [ ] Test your MCP server:\n  1. Click on \"Connect\" in the inspector\n  2. Navigate to \"Tools\" section\n  3. Click \"List Tools\"\n  4. Select \"echo\" tool\n  5. Write a test message\n  6. Click \"Submit\"\n- [ ] Open `src/index.ts` to add your own:\n  - Tools (functions your AI can call)\n  - Resources (data your AI can access)\n  - Prompts (templates for AI interactions)\n- [ ] Update `src/index.html` with your server's description and documentation\n\n### 🚀 Deployment (Coolify Example)\n\n- [ ] Set up on Coolify:\n  1. Connect your repository\n  2. In advanced settings:\n     - [ ] Disable GZIP compression (required for SSE)\n  3. Configure domain:\n     - [ ] Add your domain as: `https://subdomain.yourdomain.com:3001`\n       - The `:3001` is crucial - it tells traefik to bind to your internal port\n- [ ] Verify deployment:\n  1. Visit `subdomain.yourdomain.com` to see your index.html\n  2. Test SSE connection at `https://subdomain.yourdomain.com/sse`\n\n### 🔌 Connecting to Your Deployed Server\n\nUse this command to connect to your server:\n```bash\nnpx -y mcp-remote https://subdomain.yourdomain.com/sse\n```\n\nExample configuration for Cursor/Claude Desktop:\n```json\n{\n  \"mcpServers\": {\n    \"your-server-name\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-remote\", \"https://subdomain.yourdomain.com/sse\"]\n    },\n  }\n}\n```\n\n## Features\n\n- Simple echo server implementation\n- Support for tools, resources, and prompts\n- TypeScript support\n- Development server with hot reloading\n- Built-in inspector for testing and debugging\n- Support for both STDIO and SSE communication modes\n\n## Prerequisites\n\n- Node.js (v16 or later)\n- pnpm (recommended) or npm\n\n## Usage Modes\n\nThis server supports two main communication modes:\n\n1. **STDIO Mode**\n   - Ideal for local development and basic testing\n   - Direct process communication\n   - Used by most MCP clients by default\n   - Perfect for running servers locally\n   - Simple to set up and use\n\n2. **SSE Mode**\n   - Better for production deployments\n   - HTTP/SSE communication\n   - Can be converted to STDIO using npm packages (covered later)\n   - Enables remote access to your server\n   - More scalable and production-ready\n\nChoose STDIO for local development and SSE when you need to deploy your server for remote access.\n\n### STDIO Mode (Direct Process Communication)\n\nThis mode is ideal for direct integration with tools like Cursor or Claude Desktop.\n\n1. **Configure the Server**\n   - In `src/index.ts`:\n     - Comment out the Express/SSE code at (the bottom)\n     - Uncomment the STDIO code (above it)\n\n2. **Build and Run**\n   ```bash\n   pnpm build\n   node dist/index.cjs\n   ```\n  or \n  ```bash\n  pnpm dev # starts the server and the inspector\n  ```\n\n3. **Integration with Claude Desktop**\n   ```bash\n   pnpm add-claude\n   ```\n   ⚠️ **Note**: This will overwrite your existing Claude Desktop configuration.\n\n   This way of configuring claude desktop is standard. The json that is generated can also be used in cursor and so on!\n\n4. **Manual Integration**\n   For other tools, use the command:\n   ```bash\n   node /path/to/your/project/dist/index.cjs\n   ```\n\n   or \n   ```bash\n   pnpm cmd # this gives you the node .../dist/index.cjs command directly with pwd\n   ```\n\n### SSE Mode (HTTP/SSE Communication)\n\nThis mode is ideal for web-based tools and remote deployments.\n\n1. **Configure the Server**\n   - In `src/index.ts`:\n     - Keep the Express/SSE code enabled (at the bottom)\n     - Comment out the STDIO code (above it)\n\n2. **Local Development**\n   ```bash\n   pnpm dev\n   ```\n   The server will be available at:\n   - Main endpoint: http://127.0.0.1:3001\n   - SSE endpoint: http://127.0.0.1:3001/sse\n   - Test endpoint: http://127.0.0.1:3001/test\n   - Inspector: http://127.0.0.1:6274\n\n3. **Local Docker Testing**\n  The docker compose override is needed to actually expose the ports. When deploying to stuff like coolify you don't want it because traefik will handle it.\n   ```bash\n   docker compose -f docker-compose.yaml -f docker-compose.local.yaml up\n   ```\n\n4. **Production Deployment (e.g., Coolify)**\n   - Ask your IDE to update src/index.html to match your servers description.\n   - Deploy the server to your preferred platform\n   - **Important**: In Coolify's advanced settings:\n     - Disable GZIP compression (this kills the SSE stream)\n     - Ensure port 3001 is properly exposed -> when setting a domain do it like this: https://your-domain.com:3001 this tells traefik to bind to port 3001.\n     - Configure the server to listen on all interfaces (0.0.0.0) (already done)\n\n5. **Using the Remote Server**\n   Once deployed, you can connect to the server using:\n   ```bash\n   npx -y mcp-remote https://your-domain.com/sse\n   ```\n   You can paste this as command and replace the \"node .../dist/index.cjs\" with this.\n\n## Project Structure\n\n- `src/index.ts` - Main server implementation\n- `src/low-level-index.ts` - Alternative implementation using the low-level API\n- `dist/` - Compiled output directory\n\n## Server Features\n\n### Echo Tool\nA simple tool that echoes back the input message:\n```typescript\nserver.tool(\"echo\", { message: z.string() }, async ({ message }) => ({\n  content: [{ type: \"text\", text: `Tool echo: ${message}` }],\n}));\n```\n\n### Echo Resource\nA resource that can be accessed via URI:\n```typescript\nserver.resource(\n  \"echo\",\n  new ResourceTemplate(\"echo://{message}\", { list: undefined }),\n  async (uri, { message }) => ({\n    contents: [\n      {\n        uri: uri.href,\n        text: `Resource echo: ${message}`,\n      },\n    ],\n  })\n);\n```\n\n### Echo Prompt\nA prompt template for processing messages:\n```typescript\nserver.prompt(\"echo\", { message: z.string() }, ({ message }) => ({\n  messages: [\n    {\n      role: \"user\",\n      content: {\n        type: \"text\",\n        text: `Please process this message: ${message}`,\n      },\n    },\n  ],\n}));\n```\n\n## Implementation Recommendations\n\n### Debug Messages\n\nDebug messages can be sent using the `server.server.sendLoggingMessage` method to provide visibility into server operations.\n\n#### Basic Usage\n```typescript\nserver.server.sendLoggingMessage({\n  level: \"info\",\n  data: \"Starting server...\",\n});\n```\n\nThis allows you to:\n- Track server operations in real-time\n- Debug issues during development\n- Monitor server state in production\n\nYou can see them in the inspector on the bottom right!\n\n### Environment Variables\n\nFor server-side environment variables (developer-provided, not user-specific):\n\n1. **Using Docker Compose**\n   ```yaml\n   # docker-compose.yaml\n   services:\n     mmcp-server:\n       environment:\n         - API_KEY=${API_KEY}\n         - DATABASE_URL=${DATABASE_URL}\n   ```\n   This allows you to:\n   - Set variables in your shell: `export API_KEY=your-key`\n   - Use a `.env` file that Docker Compose will automatically load\n\n2. **Accessing in Code**\n   ```typescript\n   const apiKey = process.env.API_KEY;\n   const dbUrl = process.env.DATABASE_URL;\n   ```\n\n3. **Local Development**\n   - Create a `.env` file in your project root:\n     ```\n     API_KEY=sk-123\n     ```\n   - Add `.env` to `.gitignore` to keep secrets secure\n   - Run the development server with environment variables:\n     ```sh\n     pnpm dev\n     ```\n\n4. **Production Deployment**\n   - Set environment variables in your deployment platform (e.g., Coolify)\n   - Never commit sensitive values to version control\n\n### Best Practices\n\n1. **Error Handling**\n   - Always implement proper error handling for environment variables\n   - Provide meaningful error messages for missing required variables\n\n2. **Type Safety**\n   - Use TypeScript to define environment variable types\n   - Consider using a validation library like `zod` for runtime checks\n\n3. **Security**\n   - Never expose sensitive environment variables to the client\n   - Use different sets of variables for development and production\n\n## License\n\n[MIT](LICENSE) "
}