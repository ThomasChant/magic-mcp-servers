{
  "mcp_name": "deepanshu-rawat6/Spring_MCP_Server",
  "mcp_description": "A Spring Boot application serving as an MCP server to expose information about Deepanshu Rawat through AI-powered tools.",
  "mcp_id": "deepanshu-rawat6_Spring_MCP_Server",
  "fetch_timestamp": "2025-06-23T02:33:53.587809Z",
  "github_url": "https://github.com/deepanshu-rawat6/Spring_MCP_Server",
  "repository": {
    "name": "Spring_MCP_Server",
    "full_name": "deepanshu-rawat6/Spring_MCP_Server",
    "description": "A basic implementation of MCP server using Spring Boot",
    "html_url": "https://github.com/deepanshu-rawat6/Spring_MCP_Server",
    "created_at": "2025-04-27T03:00:57Z",
    "updated_at": "2025-04-27T03:04:41Z",
    "pushed_at": "2025-04-27T03:04:38Z",
    "size": 393,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Java",
    "license": "MIT License",
    "topics": [
      "java",
      "mcp-server",
      "spring-boot"
    ],
    "default_branch": "master",
    "owner": {
      "login": "deepanshu-rawat6",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/83383871?v=4",
      "html_url": "https://github.com/deepanshu-rawat6"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Java": 2257
    },
    "language_percentages": {
      "Java": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# Spring MCP Server\n\nThe Model Context Protocol is an open standard that enables developers to build secure, two-way connections between their data sources and AI-powered tools. \nThe architecture is straightforward: developers can either expose their data through MCP servers or build AI applications (MCP clients) that connect to these servers.\n\n## Prerequisites\n\n- Java 21\n- Maven 3.9.9\n- Spring Boot 3.4.4\n- Spring AI 0.4.0\n- Spring Model Context Protocol Server\n- Claude Desktop Application\n\n## Getting Started\n\nIn this example, we will create a simple Spring Boot application that serves as an MCP server.\n\n### 1. Create a Spring Boot Application\n\nCreate a new Spring Boot application using the Spring Initializr or your preferred method.\nYou can use the following dependencies:\n\n- Spring Model Context Protocol Server\n\n#### Creating record\n\nCreate a record class that will represent the information you want to expose through the MCP server.\n\n```java\npackage org.sehn.spring_mcp;\n\npublic record Info(String title, String url) {\n}\n```\n\n#### Creating services\n\nCreate a service class that will provide the information you want to expose through the MCP server.\n\n```java\npackage org.sehn.spring_mcp;\n\nimport jakarta.annotation.PostConstruct;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.ai.tool.annotation.Tool;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Service\npublic class InfoService {\n\n    private static final Logger logger = LoggerFactory.getLogger(InfoService.class);\n\n    private List<Info> information = new ArrayList<>();\n\n    @Tool(name = \"dr_get_information\", description = \"Get a list of information about Deepanshu Rawat\")\n    public List<Info> getInformation() {\n        return information;\n    }\n\n    @Tool(name = \"dr_get_info\", description = \"Get a specific information about Deepanshu Rawat\")\n    public Info getInfo(String title) {\n        return information.stream().filter(info -> info.title().equals(title)).findFirst().orElse(null);\n    }\n\n    @PostConstruct\n    public void init() {\n        information.addAll(List.of(\n                new Info(\"Portfolio\", \"https://bento.me/deepanshu-rawat6\"),\n                new Info(\"GitHub\", \"https://github.com/deepanshu-rawat6\"),\n                new Info(\"LinkedIn\", \"https://www.linkedin.com/in/deepanshu-rawat6/\"),\n                new Info(\"Twitter\", \"https://twitter.com/deepanshuurawat\")\n        ));\n\n\n    }\n}\n```\n\n#### Creating a Tool Callback\n\nIn the `SpringMCPApplication` or your main application class, create a tool callback that will handle the requests from the MCP server.\n\n```java\n    @Bean\n    public List<ToolCallback> deepanshuTools(InfoService infoService) {\n        return List.of(ToolCallbacks.from(infoService));\n    }\n```\n\n#### Adding Configuration\n\nCreate a configuration class that will configure the MCP server.\n\n```properties\nspring.application.name=spring_mcp\nspring.main.web-application-type=none\nspring.ai.mcp.server.name=spring_mcp\nspring.ai.mcp.server.version=0.0.1\n\n\nspring.main.banner-mode=off\nlogging.pattern.console=\n```\n\n### 2. Build the Application\n\nSimply run the following command to build the application:\n\n```bash\nmvn clean package -DskipTests\n```\n\n### 3. Further configuration\n\nNow, in order to use the MCP server, you need to add the following configuration in your `claude_desktop_config.json`:\n\n```json\n{\n    \"mcpServers\": {\n        \"<name_of_the_mcp_server>\": {\n            \"command\": \"java\",\n            \"args\": [\n                \"-jar\",\n                \"<Path_of_the_jar_file_created_after_building>\"\n            ]\n        }\n    }\n}\n```\nReplace `<name_of_the_mcp_server>` with the name of your MCP server and `<Path_of_the_jar_file_created_after_building>` with the path to the jar file created after building the application. \n\nFor example, name of my MCP server is `spring_mcp`.\n\n### 4. Testing the MCP Server\n\nNow, start `Claude Desktop` and a few new things will appear underneath the prompt area:\n\n#### Installed MCP Servers\n\n![Share_context_with_Claude](./img/Share_context_with_Claude.png)\n\n#### Available MCP tools\n\n![Available_MCP_tools](./img/Available_MCP_tools.png)\n\nNow, upon hitting a prompt, say for example: `Get me the information about Deepanshu Rawat`, you will get a alert about `third-party` tools being used, simply accept the alert for the current chat.\nAnd then you will get a response, like this:\n\n![response_from_server](./img/response_from_server.png)\n\n"
}