{
  "mcp_name": "Hizuki1030/visa-mcp",
  "mcp_description": "Facilitates the control of oscilloscopes using the VISA architecture through an MCP server, enabling seamless integration and automation of various measurement tasks.",
  "mcp_id": "Hizuki1030_visa-mcp",
  "fetch_timestamp": "2025-06-23T04:47:56.062362Z",
  "github_url": "https://github.com/Hizuki1030/visa-mcp",
  "repository": {
    "name": "visa-mcp",
    "full_name": "Hizuki1030/visa-mcp",
    "description": null,
    "html_url": "https://github.com/Hizuki1030/visa-mcp",
    "created_at": "2025-04-26T10:06:00Z",
    "updated_at": "2025-06-11T09:39:54Z",
    "pushed_at": "2025-04-26T15:07:27Z",
    "size": 17,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "HTML",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "Hizuki1030",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/45566778?v=4",
      "html_url": "https://github.com/Hizuki1030"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": true,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "HTML": 18428,
      "Python": 10358
    },
    "language_percentages": {
      "HTML": 64.02,
      "Python": 35.98
    },
    "pull_requests_count": 2,
    "contributors_count": 1
  },
  "readme": "# VISA-MCP: オシロスコープ制御ツール\n\nVISA-MCPは、VISA（Virtual Instrument Software Architecture）を使用してオシロスコープなどの測定器を制御するためのMCP（Model-Command-Protocol）サーバーです。このツールを使用することで、さまざまなメーカーのオシロスコープをプログラムで簡単に制御できます。\n\n## 主な機能\n\n- **機器検出**: 接続されたVISA対応機器の自動検出と識別\n- **波形取得**: チャンネルからの波形データの取得と解析\n- **測定制御**: タイムベース、垂直スケール、トリガーなどの設定\n- **測定値取得**: Vpp、周波数、立ち上がり時間などの自動測定\n- **汎用コマンド**: 任意のSCPIコマンドをオシロスコープに送信可能\n\n## 必要条件\n\n- Python 3.13以上\n- PyVISA\n- PyVISA-py（バックエンド）\n- MCPプロトコル対応クライアント\n\n## インストール\n\n```bash\n# リポジトリをクローン\ngit clone https://github.com/Hizuki1030/visa-mcp.git\ncd visa-mcp\n\n# 依存関係をインストール\nuv pip install -e .\n```\n\n## 使用方法\n\n### MCPサーバーの設定\n\n以下のような設定をMCPクライアントの設定ファイルに追加してください：\n\n```json\n{\n\"mcpServers\": {\n  \"visa-oscilloscope\": {\n    \"command\": \"/Users/user_name/.local/bin/uv\",\n    \"args\": [\n      \"--directory\",\n      \"/Users/user_name/Documents/GitHub/visa-mcp\",\n      \"run\",\n      \"server.py\"\n    ],\n    \"alwaysAllow\": [\n      \"list_instruments\",\n      \"get_oscilloscope_status\"\n    ],\n    \"disabled\": false\n  }\n}\n}\n```\n\n※ uvコマンドのパスはフルパスで指定する必要があります。\n\n### APIリファレンス\n\n#### 機器接続管理\n\n- `list_instruments()`: 利用可能なVISA機器の一覧を取得\n- `connect_oscilloscope(resource)`: オシロスコープに接続\n- `disconnect_oscilloscope()`: 接続を切断\n- `get_oscilloscope_status()`: 接続状態を確認\n\n#### 波形操作\n\n- `get_waveform(channel)`: 指定チャンネルの波形データを取得\n- `set_timebase(scale)`: 時間スケール設定\n- `set_channel_scale(channel, scale)`: 垂直スケール設定\n- `auto_scale()`: オートスケール実行\n\n#### 測定機能\n\n- `get_measurement(channel, measurement_type)`: 各種測定値の取得\n  - 対応測定タイプ: vpp, freq, period, duty, rise, fall, max, min, vamp, vtop, vbase\n\n#### 汎用制御\n\n- `send_command(command)`: 任意のSCPIコマンドを送信\n\n## ライセンス\n\nMITライセンスの下で公開されています。\n\n## 貢献\n\nバグ報告や機能リクエストは、GitHubのIssueトラッカーを使用してください。プルリクエストも歓迎します。"
}