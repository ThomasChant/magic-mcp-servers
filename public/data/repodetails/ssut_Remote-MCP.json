{
  "mcp_name": "Remote MCP",
  "mcp_description": "Solution to Remote MCP Communication, enabling effortless integration for centralized management of Model Context",
  "mcp_id": "ssut_Remote-MCP",
  "fetch_timestamp": "2025-06-23T07:56:36.721101Z",
  "github_url": "https://github.com/ssut/Remote-MCP",
  "repository": {
    "name": "Remote-MCP",
    "full_name": "ssut/Remote-MCP",
    "description": "A type-safe solution to remote MCP communication, enabling effortless integration for centralized management of Model Context.",
    "html_url": "https://github.com/ssut/Remote-MCP",
    "created_at": "2024-12-30T15:20:34Z",
    "updated_at": "2025-06-20T14:39:42Z",
    "pushed_at": "2025-03-27T02:45:12Z",
    "size": 157,
    "stargazers_count": 186,
    "watchers_count": 186,
    "forks_count": 27,
    "open_issues_count": 9,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [
      "ai",
      "claude",
      "llm",
      "mcp",
      "mcp-client",
      "mcp-server",
      "model-context-protocol"
    ],
    "default_branch": "main",
    "owner": {
      "login": "ssut",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/2366668?v=4",
      "html_url": "https://github.com/ssut"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 27,
    "subscribers_count": 4,
    "languages": {
      "TypeScript": 21492,
      "JavaScript": 708
    },
    "language_percentages": {
      "TypeScript": 96.81,
      "JavaScript": 3.19
    },
    "pull_requests_count": 5,
    "contributors_count": 2,
    "latest_release": {
      "tag_name": "v0.1.0",
      "name": "v0.1.0",
      "published_at": "2024-12-31T15:26:24Z",
      "body": "The first release.",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.1.0",
        "commit_sha": "1963f01140b822f3125fb1ee2e0bc8137c8d297b"
      }
    ],
    "latest_version": "v0.1.0"
  },
  "readme": "# Remote-MCP: Remote Model Context Protocol\n\nA **type-safe, bidirectional and simple** solution for **remote MCP communication**, allowing remote access and centralized management of model contexts.\n\n![preview](https://github.com/user-attachments/assets/a16804b9-8378-493c-8ca8-f61839458cde)\n\n\n## Architecture\n\n```mermaid\n%%{init: {\"flowchart\": {\"htmlLabels\": false}} }%%\ngraph TD\n    %% Modern, Bright Color Styling with white text\n    classDef client fill:#22c55e,stroke:#059669,stroke-width:2px,color:#ffffff\n    classDef gateway fill:#06b6d4,stroke:#0891b2,stroke-width:2px,color:#ffffff\n    classDef backend fill:#f97316,stroke:#ea580c,stroke-width:2px,color:#ffffff\n    classDef resource fill:#8b5cf6,stroke:#7c3aed,stroke-width:2px,color:#ffffff\n    classDef server fill:#06b6d4,stroke:#0891b2,stroke-width:2px,color:#ffffff\n\n    linkStyle default stroke:#64748b,stroke-width:1.5px,stroke-dasharray: 5 5\n\n    %% Current MCP Setup (Multiple Local Servers)\n    subgraph Current[\"Current Setup (Local)\"]\n        direction LR\n        subgraph ClientGroup[\"Client\"]\n            A[Client]:::client\n        end\n\n        subgraph Servers[\"Local MCP Servers\"]\n            direction TB\n            B1[\"Local MCP Server (DB)\"]:::server -->|\"DB Access\"| C1[DB]:::resource\n            B2[\"Local MCP Server (API 1)\"]:::server -->|\"API Access\"| C2[\"Web API 1\"]:::resource\n            B3[\"Local MCP Server (API 2)\"]:::server -->|\"API Access\"| C3[\"Web API 2\"]:::resource\n        end\n\n        A -->|\"MCP Protocol\"| B1\n        A -->|\"MCP Protocol\"| B2\n        A -->|\"MCP Protocol\"| B3\n    end\n\n    %% Vertical separator\n    Current --> Proposed\n\n    %% Proposed MCP Architecture (Decoupled)\n    subgraph Proposed[\"Proposed Architecture (Remote)\"]\n        direction LR\n        D[Client/Host]:::client -->|\"MCP Protocol\"| E[\"Local MCP Server (@remote-mcp/client)\"]:::server\n        E <-->|\"tRPC(HTTP)\"| F[\"Remote MCP Server (@remote-mcp/server)\"]:::backend\n\n        %% Separated Resources\n        F -->|\"DB Access\"| G1[DB]:::resource\n        F -->|\"API Access\"| G2[\"Web API 1\"]:::resource\n        F -->|\"API Access\"| G3[\"Web API 2\"]:::resource\n    end\n```\n\n## Why I Made This (Now)\n\nYes, I know that the official MCP roadmap includes remote MCP support in the first quarter of 2025. However, the need for remote access was *immediate* for me, and likely for many others. This library was created to bridge that gap, providing a way to connect to a remote MCP server from a local MCP client *right now*, without waiting for future official implementations.\n\nNote: I don't want this to be a sophisticated or overcomplicated thing. This way **just works right now**.\n\n## Getting Started\n\n> *Note: This project is currently under active development and is considered experimental. Expect breaking changes and potential issues.*\n\n## Client Usage\n\n### Use Publicly Published Package\n\nJust put the following code in your MCP client settings, in here I'm using Claude as an example:\n\n```json\n{\n  \"mcpServers\": {\n    \"remote-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@remote-mcp/client\"],\n      \"env\": {\n        \"REMOTE_MCP_URL\": \"http://localhost:9512\",\n        \"HTTP_HEADER_Authorization\": \"Bearer <token>\"\n      }\n    }\n  }\n}\n```\n\n### Code Your Own Local MCP Server\n\nInstall requirements:\n\n```sh\n$ npm install @remote-mcp/client @trpc/client@next zod\n```\n\nthen write your own code like the following:\n\n```ts\nimport { RemoteMCPClient } from \"@remote-mcp/client\";\n\nconst client = new RemoteMCPClient({\n  remoteUrl: \"http://localhost:9512\",\n\n  onError: (method, error) => console.error(`Error in ${method}:`, error)\n});\n\nvoid client.start();\n```\n\n## Server Usage (Remote MCP Implementation)\n\nYou can see some examples in the `examples` directory.\n\n- [Cloudflare Workers](examples/cloudflare-workers)\n- [Standalone Node.js](examples/simple-server)\n\n### Code Your Own Remote MCP Server\n\nAfter `npm install @remote-mcp/server`, you can your own remote MCP server like the following:\n\n```typescript\nimport { MCPRouter, LogLevel } from \"@remote-mcp/server\";\nimport { createHTTPServer } from '@trpc/server/adapters/standalone';\n\nimport { z } from \"zod\";\n\n// Create router instance\nconst mcpRouter = new MCPRouter({\n  logLevel: LogLevel.DEBUG,\n  name: \"example-server\",\n  version: \"1.0.0\",\n  capabilities: {\n    logging: {},\n  },\n});\n\n// Add example tool\nmcpRouter.addTool(\n  \"calculator\",\n  {\n    description:\n      \"Perform basic calculations. Add, subtract, multiply, divide. Invoke this every time you need to perform a calculation.\",\n    schema: z.object({\n      operation: z.enum([\"add\", \"subtract\", \"multiply\", \"divide\"]),\n      a: z.string(),\n      b: z.string(),\n    }),\n  },\n  async (args) => {\n    const a = Number(args.a);\n    const b = Number(args.b);\n\n    let result: number;\n    switch (args.operation) {\n      case \"add\":\n        result = Number(a) + b;\n        break;\n      case \"subtract\":\n        result = a - b;\n        break;\n      case \"multiply\":\n        result = a * b;\n        break;\n      case \"divide\":\n        if (b === 0) throw new Error(\"Division by zero\");\n        result = a / b;\n        break;\n    }\n\n    return {\n      content: [{ type: \"text\", text: `${result}` }],\n    };\n  },\n);\n\nconst appRouter = mcpRouter.createTRPCRouter();\n\nvoid createHTTPServer({\n  router: appRouter,\n  createContext: () => ({}),\n}).listen(Number(process.env.PORT || 9512));\n```\n\nThen you can see like the following in your MCP client:\n\n<img src=\"https://github.com/user-attachments/assets/86cf500e-b937-47fc-9ac1-db106ab7a6a3\" width=\"450\">\n\n## Packages\n\nThis repository contains:\n\n*   `@remote-mcp/client`: Client library acting as a local MCP server, connecting to a remote implementation.\n*   `@remote-mcp/server`: Server library for creating remotely accessible MCP services (used as the remote implementation).\n\n## Roadmap\n\n### Core Features\n\n- [x] Basic *Type-safe* Client/Server Communication\n  - [x] Basic MCP Command Support\n  - [x] Basic MCP Tool Support\n  - [x] Basic MCP Prompt Support\n  - [ ] Crash-Safe Handling (WIP, top priority)\n- [ ] Complete Event Subscription System\n  - [ ] Resource change notifications\n  - [ ] Tool/Prompt list change notifications\n- [ ] HTTP Header Support\n  - [x] Custom Headers\n  - [ ] Authentication Middleware\n- [ ] Basic error handling improvements\n- [ ] Basic middleware support\n\n### Framework Support\n\n- [ ] Nest.js Integration (`@remote-mcp/nestjs`)\n\n### Advanced Features\n\n- [ ] Bidirectional communication\n  - [ ] Server-to-client requests\n  - [ ] Resource sharing between server/client\n- [ ] Basic monitoring & logging\n\n## Contribute\n\nContributions are welcome. See [CONTRIBUTING.md](CONTRIBUTING.md) for details.\n\n## Disclaimer\n\nThis library is a complementary extension, not part of the official MCP specification, built upon existing MCP concepts.\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n## References\n\n*   [Model Context Protocol](https://modelcontextprotocol.org/)\n"
}