{
  "mcp_name": "acambitsis/mcp-investec-sapb-simple",
  "mcp_description": "Facilitates seamless interaction with Investec SA Private Banking API through a streamlined MCP server implementation.",
  "mcp_id": "acambitsis_mcp-investec-sapb-simple",
  "fetch_timestamp": "2025-06-23T00:12:41.212443Z",
  "github_url": "https://github.com/acambitsis/mcp-investec-sapb-simple",
  "repository": {
    "name": "mcp-investec-sapb-simple",
    "full_name": "acambitsis/mcp-investec-sapb-simple",
    "description": null,
    "html_url": "https://github.com/acambitsis/mcp-investec-sapb-simple",
    "created_at": "2025-04-27T17:37:10Z",
    "updated_at": "2025-04-30T07:35:13Z",
    "pushed_at": "2025-04-28T16:48:13Z",
    "size": 38,
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "acambitsis",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/6691818?v=4",
      "html_url": "https://github.com/acambitsis"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 17084
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# Investec API MCP Server\n\nThis is a Model Context Protocol (MCP) server that provides tools for interacting with the Investec SA Private Banking [API](https://developer.investec.com/za/getting-started).\n\n## Design Philosophy\n\nThis MCP server has been intentionally designed with simplicity in mind. The entire implementation is contained in a single file (`server.py`) without unnecessary abstractions or layers. This approach was deliberately chosen for security reasons to make it easy to audit and review the full codebase without exessive effort.\n\n## Installation\n\n1. Clone this repository\n2. Install dependencies using the `uv` package manager:\n   ```bash\n   # Install uv if you don't have it yet\n   curl -sSf https://astral.sh/uv/install.sh | bash\n   \n   # Create virtual environment and activate it\n   uv venv\n   source .venv/bin/activate\n   \n   # Install dependencies\n   uv sync\n   ```\n3. Create your environment file from the example:\n   ```bash\n   cp .env.example .env\n   ```\n4. Edit the `.env` file and add your Investec API credentials:\n   ```\n   CLIENT_ID=your-client-id\n   CLIENT_SECRET=your-client-secret\n   API_KEY=your-api-key\n   USE_SANDBOX=true # or false for production\n   TIMEOUT=30 # seconds\n   ```\n\n## Running the Server\n\nTest the server by running it using:\n\n```bash\npython server.py\n```\n\n## Compatible MCP Clients\n\nThis server implements the Model Context Protocol (MCP) and can be used with any compatible client. Some recommended clients include:\n\n- [Claude Desktop App](https://claude.ai/download) - Anthropic's desktop client with full MCP support\n- [Cursor](https://cursor.com) - An AI-native code editor with MCP tools support\n\nFor a full list of compatible clients, visit the [MCP Clients page](https://modelcontextprotocol.io/clients).\n\n## Connecting to Claude Desktop\n\nTo connect this MCP server to Claude Desktop:\n\n1. Download and install [Claude Desktop](https://claude.ai/download)\n2. Configure Claude Desktop to use this MCP server by editing the configuration file:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%AppData%\\Claude\\claude_desktop_config.json`\n   - Add the server configuration:\n\n```json\n{\n    \"mcpServers\": {\n        \"investec-banking\": {\n            \"command\": \"~/.local/bin/uv\",\n            \"args\": [\n                \"--directory\",\n                \"/path/to/mcp-investec-sapb-simple\",\n                \"run\",\n                \"server.py\"\n            ]\n        }\n    }\n}\n```\n\nFor macOS users, this configuration:\n- Uses the uv CLI tool to run the Python script\n- Specifies the project directory with `--directory`\n- Runs the server directly with `run server.py`\n\n3. Save the file and restart Claude Desktop\n4. You should now see the Investec tools available in Claude\n\nFor more detailed instructions, see the [MCP Quickstart Guide](https://modelcontextprotocol.io/quickstart/user).\n\n## Connecting to Cursor\n\nAlternatively, you can use Cursor as your MCP client:\n\n1. Download and install [Cursor](https://cursor.com)\n2. Open Cursor and follow their MCP integration [instructions](https://docs.cursor.com/context/model-context-protocol)\n\n## Available Tools\n\nThe server provides the following tools:\n\n### Account Information\n- `get_accounts`: Get a list of accounts\n- `get_account_balance`: Get the balance of a specific account\n- `get_account_transactions`: Get transactions for a specific account\n- `get_pending_transactions`: Get pending transactions for a specific account\n- `get_profiles`: Get a list of profiles\n- `get_profile_accounts`: Get accounts for a specific profile\n\n### Beneficiaries\n- `get_beneficiaries`: Get a list of beneficiaries\n- `get_beneficiary_categories`: Get a list of beneficiary categories\n- `get_profile_beneficiaries`: Get beneficiaries for a specific profile and account\n- `get_authorisation_setup_details`: Get authorisation setup details\n\n### Transfers\n- `transfer_multiple`: Transfer funds to one or multiple accounts\n- `pay_multiple`: Pay funds to one or multiple beneficiaries\n\n### Documents\n- `get_documents`: Get a list of documents for a specific account\n- `get_document`: Get a specific document\n\n## Contributing\n\nContributions are welcome to improve this MCP server. Beyond bug fixes, key areas for enhancement include:\n\n- Error handling refinements\n- Logging improvements\n- Test coverage expansion\n- Documentation enhancements\n- Supporting credential retrieval from keyvaults or other secure sources\n- Anything else that you consider to be needed or valuable\n\nPlease submit a pull request with your improvements. \n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details. "
}