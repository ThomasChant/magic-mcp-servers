{
  "mcp_name": "Coreflux MQTT",
  "mcp_description": "MCP server for the Coreflux MQTT broker, enabling AI agents to transfom the broker into a automation hub and interact with IoT devices and messaging systems through the MQTT protocol.",
  "mcp_id": "CorefluxCommunity_Coreflux-MQTT-MCP-Server",
  "fetch_timestamp": "2025-06-23T02:17:01.558751Z",
  "github_url": "https://github.com/CorefluxCommunity/CorefluxMCPServer",
  "repository": {
    "name": "Coreflux-MQTT-MCP-Server",
    "full_name": "CorefluxCommunity/Coreflux-MQTT-MCP-Server",
    "description": "Coreflux MQTT MCP Server",
    "html_url": "https://github.com/CorefluxCommunity/Coreflux-MQTT-MCP-Server",
    "created_at": "2025-04-07T09:45:49Z",
    "updated_at": "2025-06-06T14:13:10Z",
    "pushed_at": "2025-04-29T16:47:18Z",
    "size": 165,
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "CorefluxCommunity",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/66228869?v=4",
      "html_url": "https://github.com/CorefluxCommunity"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 0,
    "languages": {
      "Python": 66601
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 2
  },
  "readme": "# Coreflux MQTT MCP Server\r\n\r\nThis is a Model Context Protocol (MCP) server that connects to a Coreflux MQTT broker and makes Coreflux and MQTT actions available as tools for Claude and other MCP-compatible AI assistants.\r\n\r\n## Features\r\n\r\n- Connects to Coreflux MQTT broker \r\n- Provides tools for all Coreflux commands (models, actions, rules, routes)\r\n- Discovers and lists available actions\r\n- Includes LOT language documentation as resources\r\n- Built with the official MCP SDK for seamless Claude integration\r\n- Standalone setup assistant for configuration\r\n\r\n## Setup Assistant\r\n\r\nThe server includes a standalone setup assistant that can be run separately from the main server. Run the setup assistant when:\r\n\r\n- You need to create an initial configuration (.env file)\r\n- You want to update your existing configuration\r\n- You're experiencing connection issues and need to reconfigure\r\n\r\nTo run the setup assistant:\r\n\r\n```bash\r\npython setup_assistant.py\r\n```\r\n\r\nThe setup assistant helps you:\r\n\r\n- Create or update the `.env` file with your configuration\r\n- Configure MQTT broker settings (host, port, credentials)\r\n- Set up TLS configuration if needed\r\n- Configure logging options\r\n\r\nAfter configuration is complete, you can run the server normally.\r\n\r\n## Connecting Claude to the MCP Server\r\n\r\n### Using Claude Desktop Config\r\n\r\n1. Create or edit `~/Library/Application Support/Claude/claude_desktop_config.json` (macOS/Linux) or `%USERPROFILE%\\AppData\\Roaming\\Claude\\claude_desktop_config.json` (Windows)\r\n2. Add the following configuration (adjust the paths accordingly):\r\n   ```json\r\n   {\r\n     \"mcpServers\": {\r\n       \"coreflux\": {\r\n         \"command\": \"python\",\r\n         \"args\": [\r\n           \"/PATH/TO/server.py\",\r\n           \"--mqtt-host\", \"localhost\", \r\n           \"--mqtt-port\", \"1883\",\r\n           \"--mqtt-user\", \"root\",\r\n           \"--mqtt-password\", \"coreflux\",\r\n           \"--mqtt-client-id\", \"claude-coreflux-client\"\r\n         ],\r\n         \"description\": \"Coreflux MQTT Broker Control\",\r\n         \"icon\": \"ðŸ”„\",\r\n         \"env\": {}\r\n       }\r\n     }\r\n   }\r\n   ```\r\n3. Restart Claude Desktop\r\n\r\n### Command-Line Arguments\r\n\r\nThe server accepts the following command-line arguments. These settings can also be configured via the `.env` file using the setup assistant:\r\n\r\n| Argument | Description | Default |\r\n|----------|-------------|---------|\r\n| `--mqtt-host` | MQTT broker address | localhost |\r\n| `--mqtt-port` | MQTT broker port | 1883 |\r\n| `--mqtt-user` | MQTT username | - |\r\n| `--mqtt-password` | MQTT password | - |\r\n| `--mqtt-client-id` | MQTT client ID | claude-mcp-client |\r\n| `--mqtt-use-tls` | Enable TLS for MQTT connection | false |\r\n| `--mqtt-ca-cert` | Path to CA certificate file | - |\r\n| `--mqtt-client-cert` | Path to client certificate file | - |\r\n| `--mqtt-client-key` | Path to client key file | - |\r\n| `--log-level` | Logging level (DEBUG/INFO/WARNING/ERROR/CRITICAL) | INFO |\r\n\r\n## Available Tools\r\n\r\nThe server provides tools for common Coreflux commands:\r\n\r\n- `add_rule`: Add a new permission rule\r\n- `remove_rule`: Remove a permission rule\r\n- `add_route`: Add a new route connection\r\n- `remove_route`: Remove a route connection\r\n- `add_model`: Add a new model structure\r\n- `remove_model`: Remove a model structure\r\n- `add_action`: Add a new action event/function\r\n- `remove_action`: Remove an action event/function\r\n- `run_action`: Run an action event/function\r\n- `remove_all_models`: Remove all models\r\n- `remove_all_actions`: Remove all actions\r\n- `remove_all_routes`: Remove all routes\r\n- `list_discovered_actions`: List all discovered Coreflux actions\r\n- `request_lot_code`: Generate LOT code based on natural language prompts\r\n\r\n## Debugging and Troubleshooting\r\n\r\nIf you encounter issues:\r\n\r\n1. Verify your MQTT broker credentials in your Claude configuration\r\n2. Ensure the broker is accessible \r\n3. Run the setup assistant to verify or update your configuration:\r\n   ```bash\r\n   python setup_assistant.py\r\n   ```\r\n4. Check Claude Desktop logs:\r\n   ```bash\r\n   # Check Claude's logs for errors (macOS/Linux)\r\n   tail -n 20 -f ~/Library/Logs/Claude/mcp*.log\r\n   # Windows PowerShell\r\n   Get-Content -Path \"$env:USERPROFILE\\AppData\\Roaming\\Claude\\Logs\\mcp*.log\" -Tail 20 -Wait\r\n   ```\r\n5. Run the server with debug logging:\r\n   ```bash\r\n   # Direct execution with debug logging\r\n   python server.py --mqtt-host localhost --mqtt-port 1883 --log-level DEBUG\r\n   ```\r\n\r\n## References\r\n\r\n- [MCP Quickstart for Server Developers](https://modelcontextprotocol.io/quickstart/server)\r\n- [MCP Official Documentation](https://modelcontextprotocol.io/)\r\n"
}