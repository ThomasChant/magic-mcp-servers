{
  "mcp_name": "theWDY/office-editor-mcp",
  "mcp_description": "Enhance productivity by seamlessly integrating comprehensive Microsoft Office document processing capabilities into MCP Clients, enabling creation, editing, and management of Word, Excel, and PowerPoint documents without leaving the client environment.",
  "mcp_id": "theWDY_office-editor-mcp",
  "fetch_timestamp": "2025-06-23T08:53:17.449201Z",
  "github_url": "https://github.com/theWDY/office-editor-mcp",
  "repository": {
    "name": "office-editor-mcp",
    "full_name": "theWDY/office-editor-mcp",
    "description": "基于MCP(Model Context Protocol)的Office文档处理助手，支持在MCP Client中创建和编辑Word、Excel、Powerpoint文档。",
    "html_url": "https://github.com/theWDY/office-editor-mcp",
    "created_at": "2025-03-25T13:05:26Z",
    "updated_at": "2025-06-13T10:04:14Z",
    "pushed_at": "2025-04-16T12:34:57Z",
    "size": 145,
    "stargazers_count": 59,
    "watchers_count": 59,
    "forks_count": 12,
    "open_issues_count": 4,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "theWDY",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/186907275?v=4",
      "html_url": "https://github.com/theWDY"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 12,
    "subscribers_count": 2,
    "languages": {
      "Python": 292069
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# Office Document Processing MCP Server\n\n[![EN](https://img.shields.io/badge/Language-English-blue)](README.md)\n[![CN](https://img.shields.io/badge/语言-中文-red)](README_CN.md)\n\n![MCP Server](https://img.shields.io/badge/MCP-Server-blue)\n![Python](https://img.shields.io/badge/Python-3.7+-green)\n![License](https://img.shields.io/badge/License-MIT-yellow)\n\nAn MCP (Model Context Protocol) server for Office document processing, enabling creation and editing of Word, Excel, and PowerPoint documents within MCP Clients without leaving the AI assistant environment.\n\n## Overview\n\nOffice-Editor-MCP implements the [Model Context Protocol](https://modelcontextprotocol.io/) standard to expose Office document operations as tools and resources. It serves as a bridge between AI assistants and Microsoft Office documents, allowing you to create, edit, format, and analyze various Office documents through AI assistants.\n\n<!-- Suggestion: Add usage screenshots here -->\n\n## Features\n\n### Word Document Operations\n\n#### Document Management\n- Create new Word documents with metadata (title, author, etc.)\n- Extract text content and analyze document structure\n- View document properties and statistics\n- List available documents in a directory\n- Create document copies\n\n#### Content Creation\n- Add headings with different levels\n- Insert paragraphs with optional styling\n- Create tables with custom data\n- Add images with proportional scaling\n- Insert page breaks\n\n#### Text Formatting\n- Format specific text sections (bold, italic, underline)\n- Change text color and font properties\n- Apply custom styles to text elements\n- Search and replace text throughout documents\n\n### Excel Operations\n\n#### Workbook Management\n- Create new Excel workbooks\n- Open existing Excel files\n- Add/delete/rename worksheets\n\n#### Data Processing\n- Read and write cell contents\n- Insert/delete rows and columns\n- Sort and filter data\n- Apply formulas and functions\n\n### PowerPoint Operations\n\n#### Presentation Management\n- Create new PowerPoint presentations\n- Add/delete/rearrange slides\n- Set slide themes and backgrounds\n\n#### Content Editing\n- Add text and graphic elements\n- Insert tables and charts\n- Add animations and transitions\n\n### Advanced Features\n\n- OCR recognition (extract text from images)\n- Document comparison (compare differences between documents)\n- Document translation\n- Document encryption and decryption\n- Table data import/export (database interaction)\n\n## Installation Guide\n\n### Prerequisites\n- Python 3.7 or higher\n- pip package manager\n- Microsoft Office or compatible components (such as python-docx, openpyxl)\n\n### Basic Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/theWDY/office-editor-mcp.git\ncd office-editor-mcp\n\n# Install dependencies\npip install -r requirements.txt\n```\n\n## Configuration\n\n### Configuration in Cursor\n\n#### Method 1: UI Configuration\n\n1. Open Cursor\n2. Go to Settings > Features > MCP\n3. Click \"+ Add New MCP Server\"\n4. Fill in the configuration information:\n   - Name: `Office Assistant` (modify as preferred)\n   - Type: Select `stdio`\n   - Command: Enter the full path to run the server, for example:\n     ```\n     python /path/to/office_server.py\n     ```\n     Note: Replace with your actual file path\n\n#### Method 2: JSON Configuration File (Recommended)\n\n1. Create a `.cursor` folder in the project directory (if it doesn't exist)\n2. Create an `mcp.json` file in that folder with the following content:\n\n```json\n{\n  \"mcpServers\": {\n    \"office-assistant\": {\n      \"command\": \"python\",\n      \"args\": [\"/path/to/office_server.py\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\n### Configuration in Claude for Desktop\n\n1. Edit the Claude configuration file:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n2. Add the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"office-document-server\": {\n      \"command\": \"python\",\n      \"args\": [\n        \"/path/to/office_server.py\"\n      ]\n    }\n  }\n}\n```\n\n3. Restart Claude to apply the configuration.\n\n## Usage Examples\n\nAfter configuration, you can issue commands to your AI assistant like:\n\n### Word Document Operations\n- \"Create a new document called 'quarterly_report.docx' with a title page\"\n- \"Add a heading and three paragraphs to the document\"\n- \"Insert a 4x4 table with sales data\"\n- \"Make the word 'important' in paragraph 2 bold and red\"\n- \"Search and replace all instances of 'old term' with 'new term'\"\n\n### Excel Operations\n- \"Create a new Excel workbook named 'financial_analysis.xlsx'\"\n- \"Insert 'Quarterly Sales' as a title in cell A1\"\n- \"Create a table with department sales data and calculate the sum\"\n- \"Create a bar chart for the sales data\"\n- \"Sort the data in column B in descending order\"\n\n### PowerPoint Operations\n- \"Create a presentation named 'project_presentation.pptx'\"\n- \"Add a new slide with the title 'Project Overview'\"\n- \"Insert the company logo in slide 2\"\n- \"Add a fly-in animation to the title\"\n\n## API Reference\n\n### Word Document Operations\n\n```python\n# Document Creation and Properties\ncreate_document(filename, title=None, author=None)\nget_document_info(filename)\nget_document_text(filename)\nget_document_outline(filename)\nlist_available_documents(directory=\".\")\ncopy_document(source_filename, destination_filename=None)\n\n# Content Addition\nadd_heading(filename, text, level=1)\nadd_paragraph(filename, text, style=None)\nadd_table(filename, rows, cols, data=None)\nadd_picture(filename, image_path, width=None)\nadd_page_break(filename)\n\n# Text Formatting\nformat_text(filename, paragraph_index, start_pos, end_pos, bold=None, \n            italic=None, underline=None, color=None, font_size=None, font_name=None)\nsearch_and_replace(filename, find_text, replace_text)\ndelete_paragraph(filename, paragraph_index)\ncreate_custom_style(filename, style_name, bold=None, italic=None, \n                    font_size=None, font_name=None, color=None, base_style=None)\n```\n\n### Excel Operations\n\n```python\n# Workbook Operations\ncreate_workbook(filename)\nopen_workbook(filename)\nsave_workbook(filename, new_filename=None)\nadd_worksheet(filename, sheet_name=None)\nlist_worksheets(filename)\n\n# Cell Operations\nread_cell(filename, sheet_name, cell_reference)\nwrite_cell(filename, sheet_name, cell_reference, value)\nformat_cell(filename, sheet_name, cell_reference, **format_args)\n```\n\n### PowerPoint Operations\n\n```python\n# Presentation Operations\ncreate_presentation(filename)\nopen_presentation(filename)\nsave_presentation(filename, new_filename=None)\nadd_slide(filename, layout=None)\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Missing Styles**\n   - Some documents may lack required styles for heading and table operations\n   - The server will attempt to create missing styles or use direct formatting\n   - For best results, use templates with standard Office styles\n\n2. **Permission Issues**\n   - Ensure the server has permission to read/write to document paths\n   - Use the `copy_document` function to create editable copies of locked documents\n   - Check file ownership and permissions if operations fail\n\n3. **Image Insertion Problems**\n   - Use absolute paths for image files\n   - Verify image format compatibility (JPEG, PNG recommended)\n   - Check image file size and permissions\n\n### Debugging\n\nEnable detailed logging by setting the environment variable:\n\n```bash\nexport MCP_DEBUG=1  # Linux/macOS\nset MCP_DEBUG=1     # Windows\n```\n\n## Implementation Progress\n\n- ✅ Build MCP server basic framework\n- ✅ Successful integration with AI assistants\n- ✅ Basic Word document operations\n- ✅ Basic Excel workbook operations\n- ✅ Basic PowerPoint presentation operations\n- ✅ Advanced features enhancement\n- ✅ Performance optimization\n- ✅ Cross-platform compatibility testing\n\n## Contributing\n\nContributions are welcome! Feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- [Model Context Protocol](https://modelcontextprotocol.io/) for protocol specification\n- [python-docx](https://python-docx.readthedocs.io/) for Word document processing\n- [openpyxl](https://openpyxl.readthedocs.io/) for Excel processing\n- [python-pptx](https://python-pptx.readthedocs.io/) for PowerPoint processing\n\n---\n\n*Note: This server interacts with document files on your system. Always verify that requested operations are appropriate before confirming them in AI assistants or other MCP clients.*\n"
}