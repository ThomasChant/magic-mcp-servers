{
  "mcp_name": "ioehub/ioehub-mqtt-mcp-server",
  "mcp_description": "Facilitates IoT device communication via MQTT for temperature sensing and LED control using FastMCP framework.",
  "mcp_id": "ioehub_ioehub-mqtt-mcp-server",
  "fetch_timestamp": "2025-06-23T05:01:21.076393Z",
  "github_url": "https://github.com/ioehub/ioehub-mqtt-mcp-server",
  "repository": {
    "name": "ioehub-mqtt-mcp-server",
    "full_name": "ioehub/ioehub-mqtt-mcp-server",
    "description": null,
    "html_url": "https://github.com/ioehub/ioehub-mqtt-mcp-server",
    "created_at": "2025-04-10T00:40:00Z",
    "updated_at": "2025-04-15T20:56:05Z",
    "pushed_at": "2025-04-15T20:56:00Z",
    "size": 20,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "C++",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "ioehub",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/204632860?v=4",
      "html_url": "https://github.com/ioehub"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "C++": 10024,
      "Python": 4478,
      "C": 548
    },
    "language_percentages": {
      "C++": 66.6,
      "Python": 29.75,
      "C": 3.64
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "﻿# IoEHub MQTT MCP 서버\r\n\r\n## 1. 개요\r\n\r\n이 문서는 MQTT를 통해 온도 센서 데이터를 읽고 LED를 제어하는 MCP(Model Context Protocol) 서버를 설명합니다. 이 서버는 FastMCP 프레임워크를 기반으로 하며, JSON-RPC 프로토콜을 사용하여 통신합니다.\r\n\r\n\r\n### 1.1 구조도\r\n<svg viewBox=\"0 0 800 600\" xmlns=\"http://www.w3.org/2000/svg\">\r\n  <!-- MCP Client Box -->\r\n  <rect x=\"50\" y=\"100\" width=\"200\" height=\"120\" rx=\"5\" ry=\"5\" fill=\"white\" stroke=\"black\" stroke-width=\"2\"/>\r\n  <text x=\"150\" y=\"140\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"16\" font-weight=\"bold\">MCP Client</text>\r\n  <text x=\"150\" y=\"165\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"14\">(Claude AI)</text>\r\n\r\n  <!-- MCP Server Box -->\r\n  <rect x=\"550\" y=\"100\" width=\"200\" height=\"120\" rx=\"5\" ry=\"5\" fill=\"white\" stroke=\"black\" stroke-width=\"2\"/>\r\n  <text x=\"650\" y=\"140\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"16\" font-weight=\"bold\">MCP Server</text>\r\n  <text x=\"650\" y=\"165\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"14\">(Python/FastMCP)</text>\r\n\r\n  <!-- Arrow definitions -->\r\n  <defs>\r\n    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"9\" refY=\"3.5\" orient=\"auto\">\r\n      <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"black\"/>\r\n    </marker>\r\n  </defs>\r\n\r\n  <!-- JSON-RPC Arrow -->\r\n  <line x1=\"250\" y1=\"135\" x2=\"550\" y2=\"135\" stroke=\"black\" stroke-width=\"2\" marker-end=\"url(#arrowhead)\" stroke-dasharray=\"5,5\"/>\r\n  <line x1=\"550\" y1=\"165\" x2=\"250\" y2=\"165\" stroke=\"black\" stroke-width=\"2\" marker-end=\"url(#arrowhead)\"/>\r\n  \r\n  <!-- Labels for JSON-RPC -->\r\n  <text x=\"400\" y=\"120\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"14\" font-weight=\"bold\">JSON-RPC</text>\r\n  <text x=\"400\" y=\"140\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"12\">(stdio)</text>\r\n  <text x=\"400\" y=\"185\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"12\">Request/Response</text>\r\n  \r\n  <!-- MQTT Broker Box -->\r\n  <rect x=\"300\" y=\"300\" width=\"200\" height=\"120\" rx=\"5\" ry=\"5\" fill=\"white\" stroke=\"black\" stroke-width=\"2\"/>\r\n  <text x=\"400\" y=\"340\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"16\" font-weight=\"bold\">MQTT Broker</text>\r\n  <text x=\"400\" y=\"365\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"14\">(172.30.1.100)</text>\r\n\r\n  <!-- Bidirectional arrows for MQTT connections -->\r\n  <!-- Between Server and Broker -->\r\n  <line x1=\"650\" y1=\"220\" x2=\"500\" y2=\"280\" stroke=\"black\" stroke-width=\"2\"/>\r\n  <line x1=\"500\" y1=\"280\" x2=\"520\" y2=\"273\" stroke=\"black\" stroke-width=\"2\"/>\r\n  <line x1=\"500\" y1=\"280\" x2=\"507\" y2=\"295\" stroke=\"black\" stroke-width=\"2\"/>\r\n  \r\n  <line x1=\"500\" y1=\"340\" x2=\"650\" y2=\"220\" stroke=\"black\" stroke-width=\"2\"/>\r\n  <line x1=\"650\" y1=\"220\" x2=\"635\" y2=\"230\" stroke=\"black\" stroke-width=\"2\"/>\r\n  <line x1=\"650\" y1=\"220\" x2=\"640\" y2=\"212\" stroke=\"black\" stroke-width=\"2\"/>\r\n  \r\n  <!-- MQTT Label for Server-Broker -->\r\n  <text x=\"550\" y=\"250\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"14\" font-weight=\"bold\">MQTT (JSON)</text>\r\n\r\n  <!-- IoT Device Box -->\r\n  <rect x=\"300\" y=\"500\" width=\"200\" height=\"100\" rx=\"5\" ry=\"5\" fill=\"white\" stroke=\"black\" stroke-width=\"2\"/>\r\n  <text x=\"400\" y=\"535\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"16\" font-weight=\"bold\">IoT Device</text>\r\n  <text x=\"400\" y=\"560\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"14\">(Temperature/LED)</text>\r\n\r\n  <!-- Bidirectional arrows for MQTT connections -->\r\n  <!-- Between Broker and Device -->\r\n  <line x1=\"385\" y1=\"420\" x2=\"385\" y2=\"500\" stroke=\"black\" stroke-width=\"2\"/>\r\n  <line x1=\"385\" y1=\"500\" x2=\"378\" y2=\"480\" stroke=\"black\" stroke-width=\"2\"/>\r\n  <line x1=\"385\" y1=\"500\" x2=\"392\" y2=\"480\" stroke=\"black\" stroke-width=\"2\"/>\r\n  \r\n  <line x1=\"415\" y1=\"500\" x2=\"415\" y2=\"420\" stroke=\"black\" stroke-width=\"2\"/>\r\n  <line x1=\"415\" y1=\"420\" x2=\"408\" y2=\"440\" stroke=\"black\" stroke-width=\"2\"/>\r\n  <line x1=\"415\" y1=\"420\" x2=\"422\" y2=\"440\" stroke=\"black\" stroke-width=\"2\"/>\r\n  \r\n  <!-- MQTT Label for Broker-Device -->\r\n  <text x=\"470\" y=\"460\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"14\" font-weight=\"bold\">MQTT (JSON)</text>\r\n</svg>\r\n\r\n\r\n### 1.2 Key Components:\r\n\r\n1. MCP Client (Claude AI)\r\n\r\n- Provides user interface\r\n\r\n- Sends JSON-RPC requests to MCP Server\r\n\r\n- Displays results to user\r\n\r\n1. MCP Server (Python/FastMCP)\r\n\r\n- Processes client requests\r\n\r\n- Communicates with MQTT Broker\r\n\r\n- Translates between JSON-RPC and MQTT protocols\r\n\r\n1. MQTT Broker (172.30.1.100)\r\n\r\n- Central hub for MQTT messages\r\n\r\n- Routes messages between server and devices\r\n\r\n- Handles publish/subscribe message pattern\r\n\r\n1. IoT Device (Temperature Sensor/LED)\r\n\r\n- Physical hardware devices\r\n\r\n- Provides temperature data\r\n\r\n- Controls LED states based on commands\r\n\r\n### Data Flow:\r\n\r\n1. Client → Server: Function call ioehub_mqtt_get_temperature() or ioehub_mqtt_set_led()\r\n\r\n2. Server → Broker: Publishes MQTT message (topic: ioehub/mcp/command)\r\n\r\n3. Broker → Device: Forwards command to appropriate device\r\n\r\n4. Device → Broker: Publishes response with data (topic: ioehub/mcp/response)\r\n\r\n5. Broker → Server: Delivers response to subscribed server\r\n\r\n6. Server → Client: Returns function call result with processed data\r\n\r\nThis vertical layout clearly shows the hierarchical flow of communication from client through server and broker to the IoT devices.\r\n\r\n\r\n## 2. 시스템 구성\r\n\r\n- **프레임워크**: FastMCP\r\n- **통신 프로토콜**: MQTT, JSON-RPC 2.0\r\n- **구현 언어**: Python\r\n- **지원 기능**: 온도 측정, LED 제어\r\n\r\n## 3. MQTT 설정\r\n\r\n```\r\nMQTT_BROKER = \"172.30.1.100\"\r\nMQTT_PORT = 1883\r\nMQTT_USERNAME = \"ioehub\"\r\nMQTT_PASSWORD = \"password\"\r\nMQTT_PUBLISH_TOPIC = \"ioehub/mcp/command\"\r\nMQTT_SUBSCRIBE_TOPIC = \"ioehub/mcp/response\"\r\n```\r\n\r\n## 4. 구현된 기능\r\n\r\n### 4.1 온도 측정 (`ioehub_mqtt_get_temperature`)\r\n\r\n- **설명**: MQTT를 통해 온도 센서에서 현재 온도 데이터를 읽어옵니다.\r\n- **반환 값**: 현재 온도(섭씨)를 문자열로 반환\r\n- **기본 핀**: 13번\r\n\r\n### 4.2 LED 제어 (`ioehub_mqtt_set_led`)\r\n\r\n- **설명**: MQTT를 통해 지정된 핀의 LED 상태를 제어합니다.\r\n- **파라미터**:\r\n  - `pin` (정수): LED 핀 번호 (기본값: 0)\r\n  - `state` (정수): LED 상태 (1=켜짐, 0=꺼짐)\r\n- **반환 값**: 작업 성공 여부(True/False)\r\n\r\n## 5. 메시지 형식\r\n\r\n### 5.1 온도 측정 요청\r\n\r\n```json\r\n{\r\n  \"function\": \"ioehub_mqtt_get_temperature\",\r\n  \"params\": {\r\n    \"pin\": 13\r\n  }\r\n}\r\n```\r\n\r\n### 5.2 온도 측정 응답\r\n\r\n```json\r\n{\r\n  \"function\": \"ioehub_mqtt_get_temperature\",\r\n  \"result\": 26.5,\r\n  \"timestamp\": \"749817\"\r\n}\r\n```\r\n\r\n### 5.3 LED 제어 요청\r\n\r\n```json\r\n{\r\n  \"function\": \"ioehub_mqtt_set_led\",\r\n  \"params\": {\r\n    \"pin\": 0,\r\n    \"state\": 1\r\n  }\r\n}\r\n```\r\n\r\n### 5.4 LED 제어 응답\r\n\r\n```json\r\n{\r\n  \"function\": \"ioehub_mqtt_set_led\",\r\n  \"result\": true,\r\n  \"timestamp\": \"749820\"\r\n}\r\n```\r\n\r\n## 6. 작동 방식\r\n\r\n1. **서버 초기화**:\r\n   - MQTT 클라이언트 생성 및 설정\r\n   - 구독 토픽 설정 (ioehub/mcp/response)\r\n   - FastMCP 인스턴스 생성\r\n\r\n2. **연결 프로세스**:\r\n   - MQTT 브로커에 연결\r\n   - 백그라운드 스레드에서 메시지 수신 대기\r\n\r\n3. **함수 호출 처리**:\r\n   - MCP 도구 호출 시 해당 함수 실행\r\n   - MQTT를 통해 요청 전송\r\n   - 응답 대기 (최대 5초)\r\n   - 결과 반환\r\n\r\n4. **메시지 수신 처리**:\r\n   - 구독 토픽에서 메시지 수신\r\n   - JSON 파싱 및 데이터 추출\r\n   - 응답 플래그 설정\r\n\r\n## 7. 오류 처리\r\n\r\n- **응답 타임아웃**: 5초 이내에 응답이 없으면 기본값 반환\r\n- **JSON 파싱 오류**: 잘못된 형식의 메시지 처리\r\n- **MQTT 연결 오류**: 연결 실패 시 오류 메시지 출력\r\n\r\n## 8. 사용 방법\r\n\r\n### 8.1 서버 실행\r\n\r\n```bash\r\npython mcp_server.py\r\n```\r\n\r\n### 8.2 클라이언트에서 함수 호출\r\n\r\n```python\r\n# MCP 클라이언트 예시\r\ntemperature = client.invoke(\"ioehub_mqtt_get_temperature\")\r\nprint(f\"현재 온도: {temperature}°C\")\r\n\r\n# LED 켜기\r\nresult = client.invoke(\"ioehub_mqtt_set_led\", {\"pin\": 0, \"state\": 1})\r\nprint(f\"LED 켜기 결과: {'성공' if result else '실패'}\")\r\n```\r\n\r\n## 9. mcp server 설정 (windows claude desktop)\r\n```\r\n{\r\n  \"mcpServers\": {\r\n    \"IoEHubMqttMcpServer\": {\r\n        \"command\": \r\n           \"Your project path\\\\.venv\\\\Scripts\\\\python.exe\",\r\n\r\n        \"args\": [\r\n\t        \"Your project path\\\\mcp_server.py\"\r\n\t        ]\r\n\r\n    }    \r\n  }\r\n}\r\n```\r\n\r\n## 10. python 환경 구축(windows)\r\n```\r\ncd \"your project path\"\r\nuv venv .venv\r\nuv pip install mcp\r\nuv pip install paho-mqtt \r\n```\r\n\r\n## 11. 제한 사항 및 참고사항\r\n\r\n- MQTT 브로커가 실행 중이어야 합니다.\r\n- 응답 처리 시 'function' 필드를 확인하여 적절한 응답을 식별합니다.\r\n- 모든 디버그 메시지는 stdout이 아닌 stderr로 출력되어야 합니다.\r\n- 실제 하드웨어와 통신하기 위해서는 해당 장치에서 MQTT 클라이언트가 실행되어야 합니다.\r\n\r\n"
}