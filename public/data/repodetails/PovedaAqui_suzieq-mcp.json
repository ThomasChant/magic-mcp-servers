{
  "mcp_name": "PovedaAqui/suzieq-mcp",
  "mcp_description": "Facilitates interaction with SuzieQ network observability via MCP tools for querying and summarizing network state data.",
  "mcp_id": "PovedaAqui_suzieq-mcp",
  "fetch_timestamp": "2025-06-23T07:35:27.042506Z",
  "github_url": "https://github.com/PovedaAqui/suzieq-mcp",
  "repository": {
    "name": "suzieq-mcp",
    "full_name": "PovedaAqui/suzieq-mcp",
    "description": null,
    "html_url": "https://github.com/PovedaAqui/suzieq-mcp",
    "created_at": "2025-04-04T21:11:15Z",
    "updated_at": "2025-04-10T12:17:24Z",
    "pushed_at": "2025-04-10T12:17:21Z",
    "size": 25,
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks_count": 1,
    "open_issues_count": 1,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "PovedaAqui",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/9494679?v=4",
      "html_url": "https://github.com/PovedaAqui"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "Python": 7557,
      "Dockerfile": 562
    },
    "language_percentages": {
      "Python": 93.08,
      "Dockerfile": 6.92
    },
    "pull_requests_count": 2,
    "contributors_count": 2
  },
  "readme": "# MCP Server for SuzieQ\n[![smithery badge](https://smithery.ai/badge/@PovedaAqui/suzieq-mcp)](https://smithery.ai/server/@PovedaAqui/suzieq-mcp)\n\n<a href=\"https://glama.ai/mcp/servers/@PovedaAqui/suzieq-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@PovedaAqui/suzieq-mcp/badge\" />\n</a>\n\nThis project provides a Model Context Protocol (MCP) server that allows language models and other MCP clients to interact with a SuzieQ network observability instance via its REST API.\n\n## Overview\n\nThe server exposes SuzieQ's commands as MCP tools:\n- `run_suzieq_show`: Access the 'show' command to query detailed network state tables\n- `run_suzieq_summarize`: Access the 'summarize' command to get aggregated statistics and summaries\n\nThese tools enable clients (like Claude Desktop) to query various network state tables (e.g., interfaces, BGP, routes) and apply filters, retrieving the results directly from your SuzieQ instance.\n\n## Prerequisites\n\n* **Python:** Version 3.8 or higher is recommended.\n* **uv:** A fast Python package installer and resolver. ([Installation guide](https://docs.astral.sh/uv/install/))\n* **SuzieQ Instance:** A running SuzieQ instance with its REST API enabled and accessible.\n* **SuzieQ API Endpoint & Key:** You need the URL for the SuzieQ API (e.g., `http://your-suzieq-host:8000/api/v2`) and a valid API key (`access_token`).\n\n## Installation & Setup\n\n### Installing via Smithery\n\nTo install suzieq-mcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@PovedaAqui/suzieq-mcp):\n\n```bash\nnpx -y @smithery/cli install @PovedaAqui/suzieq-mcp --client claude\n```\n\n### Installing Manually\n1. **Get the Code:** Clone this repository or download the `main.py` and `server.py` files into a dedicated project directory.\n\n2. **Create Virtual Environment:** Navigate to your project directory in the terminal and create a virtual environment using `uv`:\n   ```bash\n   uv venv\n   ```\n\n3. **Activate Environment:**\n   * On macOS/Linux:\n     ```bash\n     source .venv/bin/activate\n     ```\n   * On Windows:\n     ```bash\n     .venv\\Scripts\\activate\n     ```\n   *(You should see `(.venv)` preceding your prompt)*\n\n4. **Install Dependencies:** Install the required Python packages using `uv`:\n   ```bash\n   uv pip install mcp httpx python-dotenv\n   ```\n   * `mcp`: The Model Context Protocol SDK.\n   * `httpx`: An asynchronous HTTP client used to communicate with the SuzieQ API.\n   * `python-dotenv`: Used to load environment variables from a `.env` file for configuration.\n\n## Configuration\n\nThe server needs your SuzieQ API endpoint and API key. Use a `.env` file for secure and easy configuration:\n\n1. **Create `.env` file:** In the **root of your project directory** (the same place as `main.py`), create a file named `.env`.\n\n2. **Add Credentials:** Add your SuzieQ endpoint and key to the `.env` file. **Ensure there are no quotes around the values unless they are part of the key/endpoint itself.**\n   ```dotenv\n   # .env\n   SUZIEQ_API_ENDPOINT=http://your-suzieq-host:8000/api/v2\n   SUZIEQ_API_KEY=your_actual_api_key\n   ```\n   *Replace the placeholder values with your actual endpoint and key.*\n\n3. **Secure `.env` file:** Add `.env` to your `.gitignore` file to prevent accidentally committing secrets.\n   ```bash\n   echo \".env\" >> .gitignore\n   ```\n\n4. **Code Integration:** The provided `server.py` automatically uses `python-dotenv` to load these variables when the server starts.\n\n## Running the Server\n\nMake sure your virtual environment is activated. The server will load configuration from the `.env` file in the current directory.\n\n### 1. Directly\n\nRun the server directly from your terminal:\n\n```bash\nuv run python main.py\n```\n\nThe server will start, print `Starting SuzieQ MCP Server...`, and listen for MCP connections on standard input/output (stdio). You should see `[INFO]` logs if it successfully queries the API via the tool. Press `Ctrl+C` to stop it.\n\n### 2. With MCP Inspector (for Debugging)\n\nThe MCP Inspector is useful for testing the tool directly. If you have the mcp CLI tools installed (via `uv pip install \"mcp[cli]\"`), run:\n\n```bash\nuv run mcp dev main.py\n```\n\nThis launches an interactive debugger. Go to the \"Tools\" tab, select `run_suzieq_show`, enter parameters (e.g., table: \"device\"), and click \"Call Tool\" to test.\n\n## Using with Claude Desktop\n\nIntegrate the server with Claude Desktop for seamless use:\n\n1. **Find Claude Desktop Config:** Locate the `claude_desktop_config.json` file.\n   * macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   * Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   * Create the file and the Claude directory if they don't exist.\n\n2. **Edit Config File:** Add an entry for this server. Use the absolute path to `main.py`. The server loads secrets from `.env`, so they don't need to be in this config.\n\n```json\n{\n  \"mcpServers\": {\n    \"suzieq-server\": {\n      // Use 'uv' if it's in the system PATH Claude uses,\n      // otherwise provide the full path to the uv executable.\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"python\",\n        // --- VERY IMPORTANT: Use the ABSOLUTE path below ---\n        \"/full/path/to/your/project/mcp-suzieq-server/main.py\"\n      ],\n      // 'env' block is not needed here if .env is in the project directory above\n      \"workingDirectory\": \"/full/path/to/your/project/mcp-suzieq-server/\" // Optional, but recommended\n    }\n    // Add other servers here if needed\n  }\n}\n```\n\n* Replace `/full/path/to/your/project/mcp-suzieq-server/main.py` with the correct absolute path on your system.\n* Replace `/full/path/to/your/project/mcp-suzieq-server/` with the absolute path to the directory containing `main.py` and `.env`. Setting `workingDirectory` helps ensure the `.env` file is found.\n* If `uv` isn't found by Claude, replace `\"uv\"` with its absolute path (find via `which uv` or `where uv`).\n* On Windows, you might need `\"env\": { \"PYTHONUTF8\": \"1\" }` if you encounter text encoding issues.\n\n3. **Restart Claude Desktop:** Completely close and reopen Claude Desktop.\n\n4. **Verify:** Look for the MCP tool indicator (hammer icon ðŸ”¨) in Claude Desktop. Clicking it should show both the `run_suzieq_show` and `run_suzieq_summarize` tools.\n\n## Tool Usage (run_suzieq_show)\n\n```\nrun_suzieq_show(table: str, filters: Optional[Dict[str, Any]] = None) -> str\n```\n\n* **table**: (String, Required) The SuzieQ table name (e.g., \"device\", \"interface\", \"bgp\").\n* **filters**: (Dictionary, Optional) Key-value pairs for filtering (e.g., `\"hostname\": \"leaf01\"`). Omit or use `{}` for no filters.\n* **Returns**: A JSON string with the results or an error.\n\n### Example Invocations (Conceptual):\n\nShow all devices:\n```json\n{ \"table\": \"device\" }\n```\n\nShow BGP neighbors for hostname 'spine01':\n```json\n{ \"table\": \"bgp\", \"filters\": { \"hostname\": \"spine01\" } }\n```\n\nShow 'up' interfaces in VRF 'default':\n```json\n{ \"table\": \"interface\", \"filters\": { \"vrf\": \"default\", \"state\": \"up\" } }\n```\n\n## Tool Usage (run_suzieq_summarize)\n\n```\nrun_suzieq_summarize(table: str, filters: Optional[Dict[str, Any]] = None) -> str\n```\n\n* **table**: (String, Required) The SuzieQ table name to summarize (e.g., \"device\", \"interface\", \"bgp\").\n* **filters**: (Dictionary, Optional) Key-value pairs for filtering (e.g., `\"hostname\": \"leaf01\"`). Omit or use `{}` for no filters.\n* **Returns**: A JSON string with the summarized results or an error.\n\n### Example Invocations (Conceptual):\n\nSummarize all devices:\n```json\n{ \"table\": \"device\" }\n```\n\nSummarize BGP sessions by hostname 'spine01':\n```json\n{ \"table\": \"bgp\", \"filters\": { \"hostname\": \"spine01\" } }\n```\n\nSummarize interface states in VRF 'default':\n```json\n{ \"table\": \"interface\", \"filters\": { \"vrf\": \"default\" } }\n```\n\n## Troubleshooting\n\n### Error: \"SuzieQ API endpoint or key not configured...\":\n* Ensure the `.env` file is in the same directory as `main.py`.\n* Verify `SUZIEQ_API_ENDPOINT` and `SUZIEQ_API_KEY` are correctly spelled and have valid values in `.env`.\n* If using Claude Desktop, ensure the `workingDirectory` in `claude_desktop_config.json` points to the directory containing `.env`.\n\n### HTTP Errors (4xx, 5xx):\n* Check the SuzieQ API key (`SUZIEQ_API_KEY`) is correct (401/403 errors).\n* Verify the `SUZIEQ_API_ENDPOINT` is correct and the API server is running.\n"
}