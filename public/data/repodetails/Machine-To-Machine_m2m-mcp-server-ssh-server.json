{
  "mcp_name": "Machine-To-Machine/m2m-mcp-server-ssh-server",
  "mcp_description": "A secure SSH server enabling remote access and interaction with multiple MCP tools through a unified interface.",
  "mcp_id": "Machine-To-Machine_m2m-mcp-server-ssh-server",
  "fetch_timestamp": "2025-06-23T06:20:14.531040Z",
  "github_url": "https://github.com/Machine-To-Machine/m2m-mcp-server-ssh-server",
  "repository": {
    "name": "m2m-mcp-server-ssh-server",
    "full_name": "Machine-To-Machine/m2m-mcp-server-ssh-server",
    "description": null,
    "html_url": "https://github.com/Machine-To-Machine/m2m-mcp-server-ssh-server",
    "created_at": "2025-04-09T07:28:12Z",
    "updated_at": "2025-06-22T00:10:06Z",
    "pushed_at": "2025-04-10T19:06:54Z",
    "size": 212,
    "stargazers_count": 6,
    "watchers_count": 6,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "Machine-To-Machine",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/200778560?v=4",
      "html_url": "https://github.com/Machine-To-Machine"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 0,
    "languages": {
      "Python": 81384,
      "HTML": 6401
    },
    "language_percentages": {
      "Python": 92.71,
      "HTML": 7.29
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "latest_release": {
      "tag_name": "v0.1.2",
      "name": "v0.1.2",
      "published_at": "2025-04-10T19:08:28Z",
      "body": "**Full Changelog**: https://github.com/Machine-To-Machine/m2m-mcp-server-ssh-server/compare/v0.1.1...v0.1.2",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.1.2",
        "commit_sha": "8aa13cc4f7afbaa650ce48919dcef3d873f3cdcd"
      },
      {
        "name": "v0.1.1",
        "commit_sha": "3f10c25b4e4c7c644af737b3405fd4de031380b6"
      },
      {
        "name": "v0.1.0",
        "commit_sha": "fbd9cca4e0e26af80856438e82cecfd46907ad80"
      }
    ],
    "latest_version": "v0.1.2"
  },
  "readme": "# MCP Server SSH Server\n\n[![PyPI version](https://img.shields.io/pypi/v/m2m-mcp-server-ssh-server.svg)](https://pypi.org/project/m2m-mcp-server-ssh-server/)\n[![Python Versions](https://img.shields.io/pypi/pyversions/m2m-mcp-server-ssh-server.svg)](https://pypi.org/project/m2m-mcp-server-ssh-server/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nA secure SSH server for accessing and interacting with MCP (Model Context Protocol) tools installed remotely. This server allows clients to connect to multiple MCP tool providers through a unified secure interface.\n\n## Features\n\n- **Secure Remote Access**: Access MCP tools remotely over SSH\n- **Key-Based Authentication**: Support for key-based authentication\n- **Key Management API**: Optional HTTP API for managing SSH keys\n- **Server Aggregation**: Proxy and merge multiple MCP servers into a unified interface\n- **MCP Support**: Compatible with MCP capabilities including:\n  - Prompts\n  - Resources\n  - Tools\n  - Logging\n- **Dynamic Configuration**: Configure available MCP servers through a simple JSON configuration\n\n## Authentication Flow\n\n```mermaid\n%%{init: {'theme':'default', 'themeVariables': { 'primaryColor': '#5D8AA8', 'primaryTextColor': '#fff', 'primaryBorderColor': '#1F456E', 'lineColor': '#5D8AA8', 'secondaryColor': '#006400', 'tertiaryColor': '#fff' }}}%%\n\nsequenceDiagram\n    participant Host as MCP Host<br>(Claude/Cursor)\n    participant Client as MCP SSH Client\n    participant KeySrv as Key Server<br>(HTTP API)\n    participant SSHSrv as MCP SSH Server\n    participant MCP as MCP Servers\n\n    Note over Client,SSHSrv: Initial Key Exchange & Authentication\n    \n    Client->>Client: Generate SSH key pair<br>if does not exist\n    Client->>KeySrv: GET /server_pub_key\n    KeySrv->>Client: Return server's public key\n    Client->>Client: Store server key in<br>temporary known_hosts\n    Client->>KeySrv: POST /register<br>{client_pub_key: \"ssh-ed25519 AAAA...\"}\n    KeySrv->>SSHSrv: Store client public key<br>in authorized keys\n    KeySrv->>Client: {status: \"success\"}\n    \n    Note over Client,SSHSrv: Secure SSH Connection\n    \n    Client->>SSHSrv: SSH handshake with<br>client key authentication\n    SSHSrv->>SSHSrv: Verify client key<br>against authorized keys\n    SSHSrv->>Client: Authentication successful\n    \n    Note over Client,SSHSrv: MCP Communication\n    \n    Host->>Client: JSONRPC request\n    Client->>SSHSrv: Forward request<br>over SSH tunnel\n    SSHSrv->>MCP: Route request to<br>appropriate MCP server\n    MCP->>SSHSrv: Process and return results\n    SSHSrv->>Client: Send response over SSH\n    Client->>Host: Return JSONRPC response\n    \n    Note over Client,SSHSrv: Session Management\n    \n    alt Session Termination\n        Host->>Client: Close connection\n        Client->>SSHSrv: Terminate SSH session\n        SSHSrv->>SSHSrv: Clean up resources\n    end\n```\n\n## Installation\n\nIn a `uv` managed python project, add to dependencies by:\n\n```bash\nuv add m2m-mcp-server-ssh-server\n# For key server functionality, include the optional dependency:\nuv add m2m-mcp-server-ssh-server[key-server]\n```\n\nAlternatively, for projects using `pip` for dependencies:\n```bash\npip install m2m-mcp-server-ssh-server\n# Or with key server functionality\npip install m2m-mcp-server-ssh-server[key-server]\n```\n\nTo install directly from the source:\n\n```bash\ngit clone https://github.com/Machine-To-Machine/m2m-mcp-server-ssh-server.git\ncd m2m-mcp-server-ssh-server\npip install -e .\n```\n\nTo run the server inside your project:\n\n```\nuv run m2m-mcp-server-ssh-server\n```\n\n## Common Use Cases\n\n### 1. Local Development Environment\n\nQuickly set up a local server with your preferred MCP tools:\n\n1. Create a configuration file (`servers_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"HackerNews\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-hn\"]\n    },\n    \"major-league-baseball\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp_mlb_statsapi\"]\n    }\n  }\n}\n```\n\n2. Start the server with the key management API for easier client connection:\n\n```bash\nuv run m2m-mcp-server-ssh-server --run-key-server\n```\n\n3. Connect using the client:\n\n```bash\nuv run m2m-mcp-server-ssh-client --host localhost --port 8022 --use-key-server\n```\n\n### 2. Remote Hosting (Quick Setup)\n\nTo make your MCP tools available remotely:\n\n1. Install on your server:\n\n```bash\nuv add m2m-mcp-server-ssh-server[key-server]\n```\n\n2. Create your configuration file with desired MCP tools\n\n3. Start the server binding to all interfaces:\n\n```bash\nuv run m2m-mcp-server-ssh-server --host 0.0.0.0 --run-key-server --key-server-host 0.0.0.0\n```\n\n4. Connect from client machines:\n\n```bash\nuv run m2m-mcp-server-ssh-client --host your-server.example.com --port 8022 --use-key-server\n```\n\nFor more detailed deployment instructions, see [Cloud Deployment Guide](docs/examples/cloud_deployment.md).\n\n## Usage\n\n### Command Line Options\n\n- `--host`: SSH server host address to bind to (default: 127.0.0.1)\n- `--port`: SSH server port to listen on (default: 8022)\n- `--authorized-clients`: Path to authorized keys file (default: ~/.ssh/authorized_keys)\n- `--server-key`: Path to server private key file (default: ~/.ssh/m2m_mcp_server_ssh_server)\n- `--passphrase`: Passphrase for the private key (optional)\n- `--servers-config`: Path to server configurations JSON (default: servers_config.json)\n- `--log-level`: Set logging level (default: INFO)\n- `--run-key-server`: Run the HTTP key management server\n- `--key-server-port`: Port for the HTTP key management server (default: 8000)\n- `--key-server-host`: Host for the HTTP key management server (default: 127.0.0.1)\n- `--version`: Show version information and exit\n\n**Security Note**: When binding to all interfaces (0.0.0.0), your server will be accessible from any machine that can reach your system. Make sure to use strong authentication and consider additional security measures like firewalls.\n\n## Key Management Server\n\nYou can optionally run a key management HTTP server alongside the SSH server to simplify client key registration:\n\n```bash\nuv run m2m-mcp-server-ssh-server --run-key-server\n```\n\nThis starts:\n- SSH server on port 8022\n- Key management HTTP server on port 8000 (localhost only by default)\n\n### Key Management API\n\nThe key management server provides the following endpoints:\n\n1. `POST /register` - Register a client's public key\n   - Request body: `{\"client_pub_key\": \"ssh-rsa AAAA...\"}`\n   - Response: `{\"status\": \"success\"}` or error message\n\n2. `GET /server_pub_key` - Get the server's public key\n   - Response: `{\"server_pub_key\": \"ssh-ed25519 AAAA...\"}`\n\n3. `GET /health` - Check server health status\n   - Response: `{\"status\": \"healthy\"}`\n\nExample client key registration:\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" \\\n  -d '{\"client_pub_key\": \"ssh-rsa AAAA...\"}' \\\n  http://localhost:8000/register\n```\n\n## Security Considerations\n\n- Default binding is to localhost (127.0.0.1) for improved security\n- Keys are automatically generated with secure permissions if not provided\n- Default key location is `~/.ssh/m2m_mcp_server_ssh_server`\n- Private keys use 0o600 permissions (readable only by owner)\n- Public keys use 0o644 permissions (readable by all, writable by owner)\n- Key server uses rate limiting for API endpoints\n- Input validation protects against malicious inputs\n\n## Dependencies\n\n- anyio (>=4.5.0)\n- asyncssh (>=2.20.0)\n- mcp (>=1.1.3)\n- pydantic (>=2.0.0)\n- aiohttp (>=3.11.16) - Optional, for key server functionality\n\n## Development\n\n### Setup Development Environment\n\n```bash\ngit clone https://github.com/Machine-To-Machine/m2m-mcp-server-ssh-server.git\ncd m2m-mcp-server-ssh-server\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\nuv pip install -e \".[dev]\"\n```\n\n### Code Quality\n\n```bash\n# Run linting\nuv run ruff check .\n\n# Run formatting check\nuv run ruff format --check .\n\n# Run security checks\nuv run bandit -r src/\n```\n\n## Contributing\n\nWe welcome contributions to help expand and improve `m2m-mcp-server-ssh-server`. Whether you want to add new features, enhance existing functionality, or improve documentation, your input is valuable.\n\nPull requests are welcome! Feel free to contribute new ideas, bug fixes, or enhancements.\n\n### Contribution Guidelines\n\n1. Fork the repository\n2. Create a feature branch: `git checkout -b feature-name`\n3. Commit your changes: `git commit -am 'Add some feature'`\n4. Push to the branch: `git push origin feature-name`\n5. Submit a pull request\n\n## License\n\nMIT License - See LICENSE file for details.\n\n## Authors\n\n- **Machine To Machine**\n"
}