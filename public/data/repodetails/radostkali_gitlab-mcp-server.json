{
  "mcp_name": "radostkali/gitlab-mcp-server",
  "mcp_description": "Facilitates GitLab integration using FastMCP for streamlined code review and repository management.",
  "mcp_id": "radostkali_gitlab-mcp-server",
  "fetch_timestamp": "2025-06-23T07:48:30.075565Z",
  "github_url": "https://github.com/radostkali/gitlab-mcp-server",
  "repository": {
    "name": "gitlab-mcp-server",
    "full_name": "radostkali/gitlab-mcp-server",
    "description": null,
    "html_url": "https://github.com/radostkali/gitlab-mcp-server",
    "created_at": "2025-04-16T18:57:32Z",
    "updated_at": "2025-05-02T12:10:35Z",
    "pushed_at": "2025-04-16T19:04:29Z",
    "size": 13,
    "stargazers_count": 8,
    "watchers_count": 8,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "master",
    "owner": {
      "login": "radostkali",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/47239534?v=4",
      "html_url": "https://github.com/radostkali"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 6044,
      "Dockerfile": 441
    },
    "language_percentages": {
      "Python": 93.2,
      "Dockerfile": 6.8
    },
    "pull_requests_count": 0,
    "contributors_count": 2
  },
  "readme": "# GitLab MCP Server (in Python)\n\nModel Context Protocol (MCP) server for GitLab integration, built on FastMCP.\n\nThis server is implemented in Python, with fastmcp.\n\n## Quick Start\n\n1. Build the Docker image:\n```bash\ndocker build -t gitlab-mcp-server .\n```\n\n## Integration with Cursor/Claude\n\nIn MCP Settings -> Add MCP server, add this config:\n\n```json\n{\n  \"mcpServers\": {\n    \"gitlab\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\",\n        \"GITLAB_TOKEN\",\n        \"-e\",\n        \"GITLAB_URL\",\n        \"gitlab-mcp-server:latest\"\n      ],\n      \"env\": {\n        \"GITLAB_TOKEN\": \"token\",\n        \"GITLAB_URL\": \"https://gitlab.com/\"\n      }\n    }\n  }\n}\n```\n\nNote: Don't forget to replace `GITLAB_TOKEN` and `GITLAB_URL` values with your actual GitLab credentials and instance URL.\n\n## Getting GitLab Token\n\n1. Log in to your GitLab account\n2. Go to Settings -> Access Tokens\n3. Create a new token:\n   - Scopes: select the necessary permissions:\n     - `api` - for API access\n     - `read_repository` - for reading repositories\n     - `write_repository` - for writing to repositories\n4. Click \"Create personal access token\"\n5. Copy the generated token (it will be shown only once!)\n\n## Prompt (rule) for review\n\nHere are some suggestions to improve and clarify your review.mdc rules for code review:\n\n---\n\n**review.mdc (Improved Version)**\n\n**Purpose:**  \nGuidelines for conducting code reviews in the current branch, focusing on diffs with the origin/master branch, and integrating with the MCP GitLab server.\n\n---\n\n### 1. Review Scope\n\n- Review only the changes in the current branch compared to the origin/master branch.\n- Locate the corresponding Merge Request (MR) for this branch in GitLab using MCP tools.\n\n---\n\n### 2. Review Structure\n\n- **Summary of Changes:**  \n  - Provide a concise summary divided into two sections:\n    - **Business Changes:** Describe the impact on business logic, user experience, or requirements.\n    - **Code Changes:** Summarize technical modifications, refactoring, or architectural shifts.\n\n- **Logical Breakdown:**  \n  - Divide the changes into logical blocks (e.g., features, bug fixes, refactoring).\n  - List these blocks clearly.\n\n- **Detailed Review:**  \n  - For each block, provide:\n    - A brief description.\n    - Suggestions for improvement (code quality, readability, maintainability, performance, etc.).\n    - Identification of potential bugs or issues.\n    - Illustrate type of suggestion with emoji.\n    - Link to line in code.\n  - If the terms of reference (requirements/spec) are not provided, request them to ensure accurate review.\n\n---\n\n### 3. Suggestions and Comments\n\n- Propose to post line comments with suggestions directly in the Merge Request using the MCP GitLab server.\n- All line comments in Merge Request must:\n  - Begin with \"[AI]\".\n  - Be specific, actionable, and reference the relevant code line(s).\n  - Do not write a lot of text. Smaller is better.\n\n---\n\n### 4. Additional Guidelines\n\n- Prioritize clarity, conciseness, and constructiveness in all feedback.\n- Focus on both business logic and code quality.\n- Ensure all suggestions are justified and, where possible, reference best practices or project standards.\n- If you identify a bug, explain the reasoning and potential impact.\n\n## Contributing\n\nFeel free to:\n- Add new GitLab integration tools and features\n- Improve existing functionality\n- Fix bugs\n- Enhance documentation\n- Suggest improvements\n\nTo contribute:\n1. Fork the repository\n2. Create your feature branch\n3. Commit your changes\n4. Open a Pull Request\n\nAll contributions, big or small, are appreciated!\n"
}