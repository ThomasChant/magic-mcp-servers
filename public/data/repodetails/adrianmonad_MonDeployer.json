{
  "mcp_name": "adrianmonad/MonDeployer",
  "mcp_description": "Facilitates the deployment of Solidity contracts to the Monad testnet using AI and MCP integration.",
  "mcp_id": "adrianmonad_MonDeployer",
  "fetch_timestamp": "2025-06-23T00:15:59.058532Z",
  "github_url": "https://github.com/adrianmonad/MonDeployer",
  "repository": {
    "name": "MonDeployer",
    "full_name": "adrianmonad/MonDeployer",
    "description": "Deploy Monad contracts using AI + MCP",
    "html_url": "https://github.com/adrianmonad/MonDeployer",
    "created_at": "2025-04-25T04:33:59Z",
    "updated_at": "2025-04-27T11:35:39Z",
    "pushed_at": "2025-04-27T11:35:35Z",
    "size": 45522,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "adrianmonad",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/208130290?v=4",
      "html_url": "https://github.com/adrianmonad"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 201912,
      "TypeScript": 13354,
      "Solidity": 388
    },
    "language_percentages": {
      "JavaScript": 93.63,
      "TypeScript": 6.19,
      "Solidity": 0.18
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "1.0.0"
  },
  "readme": "# MonDeployer - Monad Contract Deployment Tool\n\nThis repository provides tools for compiling and deploying Solidity contracts to the Monad testnet.\n\n## ‚ö†Ô∏è Solidity Version Note\n\nUse Solidity `0.8.x` & up only. Monad is compatible with standard EVM 0.8.x series. For best results, keep your contracts simple and tested.\n\n## üõ† Getting Started\n\n1. Create a file named `env.js` in the root directory and add your private key like this:\n\n```js\n// env.js\nexports.PRIVATE_KEY = 'your_private_key_here';\n```\n\n2. Write your contract using the correct pragma:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\ncontract YourContract {\n  // ...\n}\n```\n\n## üîß Solution to JSON Parsing Errors\n\nIf you see errors like:\n\n```\nMCP monad-mcp: Unexpected token 'L', \"Looking fo\"... is not valid JSON\nMCP monad-mcp: Unexpected token 'D', \"Deploying \"... is not valid JSON\nMCP monad-mcp: Unexpected token 'M', \"Monad MCP \"... is not valid JSON\n```\n\nWe have multiple solutions for you:\n\n### 1. Ultra-Simple Mock MCP Plugin (Most Reliable)\n\nFor fastest debugging, use our ultra-simple MCP plugin that always returns a mock success:\n\n```bash\nnpm run start-simple-mcp\n```\n\nThis plugin ignores your contract and always returns a successful deployment response.\n\n**üß† Claude MCP Integration**\n\n```json\n{\n  \"mcpServers\": {\n    \"monad-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/yourfiles/monad-mcp/multi-tool-plugin-v2.cjs\"\n      ]\n    }\n  }\n}\n```\n\nTo start the MCP server manually:\n\n```bash\ncd monad-mcp && node multi-tool-plugin-v2.cjs\n```\n\n### 2. Strict MCP Plugin (Auto-Fixes Solidity Version)\n\nFor actual contract deployment with version auto-fixing:\n\n```bash\nnpm run start-strict-mcp\n```\n\nThis plugin automatically fixes ANY Solidity version to 0.8.28 and redirects all non-JSON output to stderr.\n\nConfigure Claude Desktop with:\n\n```json\n{\n  \"mcpServers\": {\n    \"monad-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/DropFlow/monad-mcp/strict-mcp-plugin.js\"\n      ]\n    }\n  }\n}\n```\n\n## üöÄ Fastest Option: Just Deploy a Simple Contract\n\nSkip Claude entirely and deploy a simple storage contract directly:\n\n```bash\nnpm run simple-deploy\n```\n\nThis deploys a pre-configured SimpleStorage contract using Solidity 0.8.28.\n\n## Example Deployments\n\nThe repository includes several examples:\n\n```bash\n# Deploy the SimpleStorage contract (simplest)\nnpm run deploy-storage\n\n# Deploy the SimpleToken contract\nnpm run deploy-token\n\n# Alternative clean deployment script with better error handling\nnpm run deploy-token-clean\n```\n\n## Custom Contract Deployment\n\nTo deploy a custom contract:\n\n1. Create your contract file with `pragma solidity 0.8.28`\n2. Use the deployment utility in your script:\n\n```js\nconst { compileAndDeploy } = require('./src/utils/contract-deployer');\nconst fs = require('fs');\nconst { PRIVATE_KEY } = require('./env.js');\n\nconst contractSource = fs.readFileSync('path/to/your/contract.sol', 'utf8');\n\nasync function deploy() {\n  const result = await compileAndDeploy(\n    contractSource,\n    PRIVATE_KEY,\n    [], // constructor args\n    { solcVersion: '0.8.28', saveArtifacts: true }\n  );\n\n  console.log(`Contract deployed at: ${result.address}`);\n}\n\ndeploy();\n```\n\n## Troubleshooting\n\nIf you encounter JSON parsing errors like:\n\n```\nMCP monad-mcp: Unexpected token 'S', \"Starting c\"... is not valid JSON\n```\n\nTry these solutions in order:\n\n1. Use the ultra-simple MCP plugin: `npm run start-simple-mcp` (always succeeds with mock data)\n2. Use the strict MCP plugin: `npm run start-strict-mcp` (fixes version issues automatically)\n3. Check your contract's pragma version: `npm run check-solidity examples/YourContract.sol`\n4. Use the clean deployment script: `npm run deploy-token-clean`\n5. Fix your contract's Solidity version: `npm run fix-solidity YourContract.sol`\n6. Deploy directly without Claude: `npm run simple-deploy`\n\nAlways check your contract's pragma version first:\n\n```solidity\npragma solidity 0.8.x;  // Must be exact version ^0.8.0 or similar\n```\n\n## Template Contract\n\nA template contract is available at `monad-mcp/solidity-template.sol` that you can use as a starting point for any new contracts.\n\n## Security Note\n\n- Always keep your `env.js` file secure and never commit it to version control.\n- The private key is never hardcoded, printed, or exposed in logs or code.\n\n# MonDeployer\n"
}