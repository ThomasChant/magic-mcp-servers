{
  "mcp_name": "TimLukaHorstmann/mcp-weather",
  "mcp_description": "üìá ‚òÅÔ∏è  - Accurate weather forecasts via the AccuWeather API (free tier available).",
  "mcp_id": "TimLukaHorstmann_mcp-weather",
  "fetch_timestamp": "2025-06-23T08:57:16.030178Z",
  "github_url": "https://github.com/TimLukaHorstmann/mcp-weather",
  "repository": {
    "name": "mcp-weather",
    "full_name": "TimLukaHorstmann/mcp-weather",
    "description": "A Model Context Protocol (MCP) server that provides hourly and daily weather forecasts using the AccuWeather API.",
    "html_url": "https://github.com/TimLukaHorstmann/mcp-weather",
    "created_at": "2025-05-04T20:46:57Z",
    "updated_at": "2025-06-12T20:43:04Z",
    "pushed_at": "2025-06-12T20:43:53Z",
    "size": 1063,
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks_count": 3,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "TimLukaHorstmann",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/75019799?v=4",
      "html_url": "https://github.com/TimLukaHorstmann"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 3,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 19746,
      "JavaScript": 3975
    },
    "language_percentages": {
      "TypeScript": 83.24,
      "JavaScript": 16.76
    },
    "pull_requests_count": 1,
    "contributors_count": 2,
    "tags": [
      {
        "name": "v0.4.1",
        "commit_sha": "7919ac99929b5c5be9193e869050bb0e0bf6acae"
      },
      {
        "name": "v0.4.0",
        "commit_sha": "032fc1c7f0cfd3ea7d2ff83053c181f09fed8a7c"
      },
      {
        "name": "v0.3.0",
        "commit_sha": "be1e40ba6516c77dbb33cdcbd455656f7a37abf0"
      },
      {
        "name": "v0.1.5",
        "commit_sha": "4ba52618d6fa3f383b8c950facb0614cd8b6770a"
      },
      {
        "name": "v0.1.4",
        "commit_sha": "3ca210c10f807577750c223269d6a477061d3bad"
      },
      {
        "name": "v0.1.3",
        "commit_sha": "c6646852380dea4fa0514486e25f1e74164dc127"
      },
      {
        "name": "v0.1.1",
        "commit_sha": "b7687378f7c60b1e75489c86851c168064b7a8d6"
      }
    ],
    "latest_version": "v0.4.1",
    "package_json_version": "0.4.0"
  },
  "readme": "# MCP Weather Server\n\n[![npm version](https://img.shields.io/npm/v/@timlukahorstmann/mcp-weather)](https://www.npmjs.com/package/@timlukahorstmann/mcp-weather)\n[![license](https://img.shields.io/github/license/TimLukaHorstmann/mcp-weather)](https://github.com/TimLukaHorstmann/mcp-weather/blob/main/LICENSE)\n[![node version](https://img.shields.io/node/v/@timlukahorstmann/mcp-weather)](https://www.npmjs.com/package/@timlukahorstmann/mcp-weather)\n[![issues](https://img.shields.io/github/issues/TimLukaHorstmann/mcp-weather)](https://github.com/TimLukaHorstmann/mcp-weather/issues)\n[![weekly downloads](https://img.shields.io/npm/dm/@timlukahorstmann/mcp-weather)](https://www.npmjs.com/package/@timlukahorstmann/mcp-weather)\n\n<p align=\"center\">\n  <img src=\"logo.png\" alt=\"MCP Weather Server Logo\" width=\"250\"/>\n  <a href=\"https://glama.ai/mcp/servers/@TimLukaHorstmann/mcp-weather\">\n    <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@TimLukaHorstmann/mcp-weather/badge\" alt=\"Weather MCP server\" />\n  </a>\n</p>\n\nA Model Context Protocol (MCP) server that provides hourly and daily weather forecasts using the AccuWeather API.\n\n---\n\n## Quick Start\n\nYou need an AccuWeather API key (free tier available).  \n[Sign up here](https://developer.accuweather.com/) and create an app to get your key.\n\nExport your API key as an environment variable:\n\n```bash\nexport ACCUWEATHER_API_KEY=your_api_key_here\n```\n\nThen run the MCP Weather server directly with:\n\n```bash\nnpx -y @timlukahorstmann/mcp-weather\n```\n\nOr, for HTTP/REST access via [supergateway](https://github.com/supercorp-ai/supergateway):\n\n```bash\nnpx -y supergateway --stdio \"npx -y @timlukahorstmann/mcp-weather\" \\\n  --port 4004 \\\n  --baseUrl http://127.0.0.1:4004 \\\n  --ssePath /messages \\\n  --messagePath /message \\\n  --cors \"*\" \\\n  --env ACCUWEATHER_API_KEY=\"$ACCUWEATHER_API_KEY\"\n```\n\n---\n\n## MCP Server Config Example\n\nFor integration with Claude Desktop or other MCP-compatible clients, add this to your config (e.g. `claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"weather\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@timlukahorstmann/mcp-weather\"],\n      \"env\": {\n        \"ACCUWEATHER_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n---\n\n## Overview\n\nThis MCP server allows large language models (like Claude) to access real-time weather data. When integrated with an LLM, it enables the model to:\n\n- Fetch accurate, up-to-date weather forecasts\n- Provide hourly weather data for the next 12 hours\n- Access daily weather forecasts for up to 15 days\n- Display data in both metric (¬∞C) and imperial (¬∞F) units\n- View temperature, conditions, precipitation information, and other weather details\n\n## Available Tools\n\n### Hourly Weather Forecast\n- Tool name: `weather-get_hourly`\n- Provides hourly forecasts for the next 12 hours\n- Parameters:\n  - `location` (required): City or location name\n  - `units` (optional): \"metric\" (Celsius, default) or \"imperial\" (Fahrenheit)\n\n### Daily Weather Forecast\n- Tool name: `weather-get_daily`\n- Provides daily forecasts for up to 15 days\n- Parameters:\n  - `location` (required): City or location name\n  - `days` (optional): Number of forecast days (1, 5, 10, or 15; default is 5)\n  - `units` (optional): \"metric\" (Celsius, default) or \"imperial\" (Fahrenheit)\n\n## Prerequisites\n\n- Node.js ‚â•18  \n- An AccuWeather API key (set via `.env` or your shell)\n\n## Setup\n\n1. **Clone this repository:**\n   ```bash\n   git clone https://github.com/TimLukaHorstmann/mcp-weather.git\n   cd mcp-weather\n   ```\n\n2. **Install dependencies:**\n   ```bash\n   npm install\n   ```\n\n3. **Get an AccuWeather API key:**\n   - Register at [AccuWeather API](https://developer.accuweather.com/)\n   - Create a new app and obtain an API key\n\n4. **Create a `.env` file with your API key:**\n   ```\n   ACCUWEATHER_API_KEY=your_api_key_here\n   ```\n\n5. **Build the project:**\n   ```bash\n   npm run build\n   ```\n\n## Usage with Claude Desktop\n\n1. Configure Claude Desktop to use this MCP server:\n   - Open Claude Desktop\n   - Go to Settings > Developer > Edit Config\n   - Add the following to your `claude_desktop_config.json`:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"weather\": {\n         \"command\": \"npx\",\n         \"args\": [\"-y\", \"@timlukahorstmann/mcp-weather\"],\n         \"env\": {\n           \"ACCUWEATHER_API_KEY\": \"your_api_key_here\"\n         }\n       }\n     }\n   }\n   ```\n\n2. Restart Claude Desktop\n\n3. In a new conversation, enable the MCP server by clicking the plug icon and selecting \"weather\"\n\n4. Now you can ask Claude for weather forecasts, such as:\n   - \"What's the hourly weather forecast for New York City?\"\n   - \"Give me the 5-day forecast for London.\"\n   - \"What will the weather be like in Tokyo this week in Fahrenheit?\"\n   - \"Will it rain in San Francisco tomorrow?\"\n\n## Development\n\n- Install dev dependencies: `npm install`\n- Lint your code:           `npm run lint`  \n- Build:                    `npm run build`  \n- Run tests:                `npm test`\n- Start in dev mode:        `npm run dev`\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## Future Enhancements\n\nWe're always looking to improve the MCP Weather Server. Here are some features we're considering for future releases:\n\n- **Extended Hourly Forecasts:** Beyond 12 hours, e.g., 24 or 48 hours.\n- **Weather Alerts:** Integration with AccuWeather's severe weather alerts API.\n- **Location Autocomplete:** Improved location searching with autocomplete suggestions.\n- **Historical Weather Data:** Access to past weather conditions.\n\nIf you have ideas for other features, feel free to open an issue!\n\n## Changelog\n\n### 0.4.0\n- Removed `sessionId` requirement from all tools as it was not used for anything internally\n- This simplifies integrations and reduces confusion for LLM usage\n\n### 0.3.0 and earlier\n- Initial releases with basic functionality\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n"
}