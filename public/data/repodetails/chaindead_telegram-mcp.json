{
  "mcp_name": "chaindead/telegram-mcp",
  "mcp_description": "🏎️ 🏠 - Telegram API integration for accessing user data, managing dialogs (chats, channels, groups), retrieving messages, and handling read status",
  "mcp_id": "chaindead_telegram-mcp",
  "fetch_timestamp": "2025-06-23T02:00:46.988097Z",
  "github_url": "https://github.com/chaindead/telegram-mcp",
  "repository": {
    "name": "telegram-mcp",
    "full_name": "chaindead/telegram-mcp",
    "description": "Telegram MCP for managing dialogs, messages, drafts, read statuses, and more.",
    "html_url": "https://github.com/chaindead/telegram-mcp",
    "created_at": "2025-04-01T14:43:04Z",
    "updated_at": "2025-06-22T16:19:11Z",
    "pushed_at": "2025-04-29T23:43:17Z",
    "size": 82,
    "stargazers_count": 95,
    "watchers_count": 95,
    "forks_count": 12,
    "open_issues_count": 4,
    "language": "Go",
    "license": "MIT License",
    "topics": [
      "mcp",
      "mcp-server",
      "mtproto",
      "telegram",
      "telegram-api"
    ],
    "default_branch": "main",
    "owner": {
      "login": "chaindead",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/190544799?v=4",
      "html_url": "https://github.com/chaindead"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 12,
    "subscribers_count": 3,
    "languages": {
      "Go": 38341
    },
    "language_percentages": {
      "Go": 100
    },
    "pull_requests_count": 3,
    "contributors_count": 2,
    "latest_release": {
      "tag_name": "v0.1.22",
      "name": "v0.1.22",
      "published_at": "2025-04-17T21:50:14Z",
      "body": "## Changelog\n* 911e761430a0758ed04f0c1f2611cf301956a49c: feat: add chat support, fix issue #1 (@chaindead)\n\n",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.1.22",
        "commit_sha": "911e761430a0758ed04f0c1f2611cf301956a49c"
      },
      {
        "name": "v0.1.21",
        "commit_sha": "178969b8d8be6a698323b6dd433beec7d6ac4e3f"
      },
      {
        "name": "v0.1.20",
        "commit_sha": "ddfa17718a21fcc37830dd357f4c90c501b9e8f0"
      },
      {
        "name": "v0.1.19",
        "commit_sha": "7e71f09572375f49b92574122f6bfe3345b57ffe"
      },
      {
        "name": "v0.1.18",
        "commit_sha": "05752d225193ec131e8c8362437dd9e73dc2abfa"
      },
      {
        "name": "v0.1.17",
        "commit_sha": "174d5a2beb8a0b94bda39eb6dcc63ffe81d0e70a"
      },
      {
        "name": "v0.1.16",
        "commit_sha": "765a6c303af167bd863930fcf023c7c2bb122054"
      },
      {
        "name": "v0.1.15",
        "commit_sha": "765a6c303af167bd863930fcf023c7c2bb122054"
      },
      {
        "name": "v0.1.14",
        "commit_sha": "59a2970951d006a6b8b374216aceb5e965df14d0"
      },
      {
        "name": "v0.1.13",
        "commit_sha": "59e8d90b89e0603f3817957a80fe55084d399018"
      }
    ],
    "latest_version": "v0.1.22"
  },
  "readme": "[![](https://badge.mcpx.dev?type=server 'MCP Server')](https://github.com/punkpeye/awesome-mcp-servers?tab=readme-ov-file#communication)\n[![](https://img.shields.io/badge/OS_Agnostic-Works_Everywhere-purple)](https://github.com/chaindead/telegram-mcp?tab=readme-ov-file#installation)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Visitors](https://api.visitorbadge.io/api/visitors?path=https%3A%2F%2Fgithub.com%2Fchaindead%2Ftelegram-mcp&label=Visitors&labelColor=%23d9e3f0&countColor=%23697689&style=flat&labelStyle=none)](https://visitorbadge.io/status?path=https%3A%2F%2Fgithub.com%2Fchaindead%2Ftelegram-mcp)\n\n# Telegram MCP server\n\nThe server is a bridge between the Telegram API and the AI assistants and is based on the [Model Context Protocol](https://modelcontextprotocol.io).\n\n> [!IMPORTANT]\n> Ensure that you have read and understood the [Telegram API Terms of Service](https://core.telegram.org/api/terms) before using this server.\n> Any misuse of the Telegram API may result in the suspension of your account.\n\n## Table of Contents\n- [What is MCP?](#what-is-mcp)\n- [What does this server do?](#what-does-this-server-do)\n  - [Capabilities](#capabilities)\n  - [Prompt examples](#prompt-examples)\n    - [Message Management](#message-management)\n    - [Organization](#organization)\n    - [Communication](#communication)\n- [Installation](#installation)\n  - [Homebrew](#homebrew)\n  - [NPX](#npx)\n  - [From Releases](#from-releases)\n    - [MacOS](#macos)\n    - [Linux](#linux)\n    - [Windows](#windows)\n  - [From Source](#from-source)\n- [Configuration](#configuration)\n  - [Authorization](#authorization)\n  - [Client Configuration](#client-configuration)\n- [Star History](#star-history)\n\n## What is MCP?\n\nThe Model Context Protocol (MCP) is a system that lets AI apps, like Claude Desktop or Cursor, connect to external tools and data sources. It gives a clear and safe way for AI assistants to work with local services and APIs while keeping the user in control.\n\n## What does this server do?\n\n### Capabilities\n\n- [x] Get current account information (`tool: tg_me`)\n- [x] List dialogs with optional unread filter (`tool: tg_dialogs`)\n- [x] Mark dialog as read (`tool: tg_read`)\n- [x] Retrieve messages from specific dialog (`tool: tg_dialog`)\n- [x] Send draft messages to any dialog (`tool: tg_send`)\n\n### Prompt examples\n\nHere are some example prompts you can use with AI assistants:\n\n#### Message Management\n- \"Check for any unread important messages in my Telegram\"\n- \"Summarize all my unread Telegram messages\"\n- \"Read and analyze my unread messages, prepare draft responses where needed\"\n- \"Check non-critical unread messages and give me a brief overview\"\n\n#### Organization\n- \"Analyze my Telegram dialogs and suggest a folder structure\"\n- \"Help me categorize my Telegram chats by importance\"\n- \"Find all work-related conversations and suggest how to organize them\"\n\n#### Communication\n- \"Monitor specific chat for updates about [topic]\"\n- \"Draft a polite response to the last message in [chat]\"\n- \"Check if there are any unanswered questions in my chats\"\n\n## Installation\n\n### Homebrew\n\nYou can install a binary release on macOS/Linux using brew:\n\n```bash\n# Install\nbrew install chaindead/tap/telegram-mcp\n\n# Update\nbrew upgrade chaindead/tap/telegram-mcp\n```\n\n### NPX\n\nYou can run the latest version directly using npx (supports macOS, Linux, and Windows):\n\n```bash\nnpx -y @chaindead/telegram-mcp\n```\n\nWhen using NPX, modify the standard commands and configuration as follows:\n\n- [Authentication command](#authorization) becomes:\n```bash\nnpx -y @chaindead/telegram-mcp auth ...\n```\n\n- [Claude MCP server configuration](#client-configuration) becomes:\n```json\n{\n  \"mcpServers\": {\n    \"telegram\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@chaindead/telegram-mcp\"],\n      \"env\": {\n        \"TG_APP_ID\": \"<your-api-id>\",\n        \"TG_API_HASH\": \"<your-api-hash>\"\n      }\n    }\n  }\n}\n```\n\nFor complete setup instructions, see [Authorization](#authorization) and [Client Configuration](#client-configuration).\n\n### From Releases\n\n#### MacOS\n\n<details>\n\n> **Note:** The commands below install to `/usr/local/bin`. To install elsewhere, replace `/usr/local/bin` with your preferred directory in your PATH.\n\nFirst, download the archive for your architecture:\n\n```bash\n# For Intel Mac (x86_64)\ncurl -L -o telegram-mcp.tar.gz https://github.com/chaindead/telegram-mcp/releases/latest/download/telegram-mcp_Darwin_x86_64.tar.gz\n\n# For Apple Silicon (M1/M2)\ncurl -L -o telegram-mcp.tar.gz https://github.com/chaindead/telegram-mcp/releases/latest/download/telegram-mcp_Darwin_arm64.tar.gz\n```\n\nThen install the binary:\n\n```bash\n# Extract the binary\nsudo tar xzf telegram-mcp.tar.gz -C /usr/local/bin\n\n# Make it executable\nsudo chmod +x /usr/local/bin/telegram-mcp\n\n# Clean up\nrm telegram-mcp.tar.gz\n```\n</details>\n\n#### Linux\n<details>\n\n> **Note:** The commands below install to `/usr/local/bin`. To install elsewhere, replace `/usr/local/bin` with your preferred directory in your PATH.\n\nFirst, download the archive for your architecture:\n\n```bash\n# For x86_64 (64-bit)\ncurl -L -o telegram-mcp.tar.gz https://github.com/chaindead/telegram-mcp/releases/latest/download/telegram-mcp_Linux_x86_64.tar.gz\n\n# For ARM64\ncurl -L -o telegram-mcp.tar.gz https://github.com/chaindead/telegram-mcp/releases/latest/download/telegram-mcp_Linux_arm64.tar.gz\n```\n\nThen install the binary:\n\n```bash\n# Extract the binary\nsudo tar xzf telegram-mcp.tar.gz -C /usr/local/bin\n\n# Make it executable\nsudo chmod +x /usr/local/bin/telegram-mcp\n\n# Clean up\nrm telegram-mcp.tar.gz\n```\n</details>\n\n#### Windows\n\n<details>\n\n#### Windows\n1. Download the latest release for your architecture:\n   - [Windows x64](https://github.com/chaindead/telegram-mcp/releases/latest/download/telegram-mcp_Windows_x86_64.zip)\n   - [Windows ARM64](https://github.com/chaindead/telegram-mcp/releases/latest/download/telegram-mcp_Windows_arm64.zip)\n2. Extract the `.zip` file\n3. Add the extracted directory to your PATH or move `telegram-mcp.exe` to a directory in your PATH\n</details>\n\n### From Source\n\nRequirements:\n- Go 1.24 or later\n- GOBIN in PATH\n\n```bash\ngo install github.com/chaindead/telegram-mcp@latest\n```\n\n## Configuration\n\n### Authorization\n\nBefore you can use the server, you need to connect to the Telegram API.\n\n1. Get the API ID and hash from [Telegram API](https://my.telegram.org/auth)\n2. Run the following command:\n   > __Note:__\n   > If you have 2FA enabled: add --password <2fa_password>\n\n   >  __Note:__\n   > If you want to override existing session: add --new\n\n   ```bash\n   telegram-mcp auth --app-id <your-api-id> --api-hash <your-api-hash> --phone <your-phone-number>\n   ```\n\n   📩 Enter the code you received from Telegram to connect to the API.\n\n3. Done! Please give this project a ⭐️ to support its development.\n\n### Client Configuration\n\nExample of Configuring Claude Desktop to recognize the Telegram MCP server.\n\n1. Open the Claude Desktop configuration file:\n    - in MacOS, the configuration file is located at `~/Library/Application Support/Claude/claude_desktop_config.json`\n    - in Windows, the configuration file is located at `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n   > __Note:__\n   > You can also find claude_desktop_config.json inside the settings of Claude Desktop app\n\n2. Add the server configuration\n   \n   for Claude desktop:\n   ```json\n    {\n      \"mcpServers\": {\n        \"telegram\": {\n          \"command\": \"telegram-mcp\",\n          \"env\": {\n            \"TG_APP_ID\": \"<your-app-id>\",\n            \"TG_API_HASH\": \"<your-api-hash>\",\n            \"PATH\": \"<path_to_telegram-mcp_binary_dir>\",\n            \"HOME\": \"<path_to_your_home_directory\"\n          }\n        }\n      }\n    }\n   ```\n\n   for Cursor:\n    ```json\n    {\n      \"mcpServers\": {\n        \"telegram-mcp\": {\n          \"command\": \"telegram-mcp\",\n          \"env\": {\n            \"TG_APP_ID\": \"<your-app-id>\",\n            \"TG_API_HASH\": \"<your-api-hash>\"\n          }\n        }\n      }\n    }\n    ```\n\n## Star History\n\n<a href=\"https://www.star-history.com/#chaindead/telegram-mcp&Date\">\n <picture>\n   <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=chaindead/telegram-mcp&type=Date&theme=dark\" />\n   <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=chaindead/telegram-mcp&type=Date\" />\n   <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=chaindead/telegram-mcp&type=Date\" />\n </picture>\n</a>"
}