{
  "mcp_name": "KarakuriAgent/karakuri_git_mcp",
  "mcp_description": "Facilitates Git repository interaction and automation through a Model Context Protocol server, enabling operations like reading, searching, and manipulating repositories via Large Language Models.",
  "mcp_id": "KarakuriAgent_karakuri_git_mcp",
  "fetch_timestamp": "2025-06-23T05:40:51.654471Z",
  "github_url": "https://github.com/KarakuriAgent/karakuri_git_mcp",
  "repository": {
    "name": "karakuri_git_mcp",
    "full_name": "KarakuriAgent/karakuri_git_mcp",
    "description": null,
    "html_url": "https://github.com/KarakuriAgent/karakuri_git_mcp",
    "created_at": "2025-04-05T13:32:51Z",
    "updated_at": "2025-04-05T13:39:36Z",
    "pushed_at": "2025-04-05T15:18:32Z",
    "size": 28,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "KarakuriAgent",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/192982473?v=4",
      "html_url": "https://github.com/KarakuriAgent"
    },
    "has_issues": false,
    "has_projects": false,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 12772,
      "Dockerfile": 1274
    },
    "language_percentages": {
      "Python": 90.93,
      "Dockerfile": 9.07
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# mcp-server-git: A git MCP server\n\n## Overview\n\nA Model Context Protocol server for Git repository interaction and automation. This server provides tools to read, search, and manipulate Git repositories via Large Language Models.\n\nPlease note that mcp-server-git is currently in early development. The functionality and available tools are subject to change and expansion as we continue to develop and improve the server.\n\n### Tools\n\n1. `git_status`\n   - Shows the working tree status\n   - Input:\n     - `repo_path` (string): Path to Git repository\n   - Returns: Current status of working directory as text output\n\n2. `git_diff_unstaged`\n   - Shows changes in working directory not yet staged\n   - Input:\n     - `repo_path` (string): Path to Git repository\n   - Returns: Diff output of unstaged changes\n\n3. `git_diff_staged`\n   - Shows changes that are staged for commit\n   - Input:\n     - `repo_path` (string): Path to Git repository\n   - Returns: Diff output of staged changes\n\n4. `git_diff`\n   - Shows differences between branches or commits\n   - Inputs:\n     - `repo_path` (string): Path to Git repository\n     - `target` (string): Target branch or commit to compare with\n   - Returns: Diff output comparing current state with target\n\n5. `git_commit`\n   - Records changes to the repository\n   - Inputs:\n     - `repo_path` (string): Path to Git repository\n     - `message` (string): Commit message\n   - Returns: Confirmation with new commit hash\n\n6. `git_add`\n   - Adds file contents to the staging area\n   - Inputs:\n     - `repo_path` (string): Path to Git repository\n     - `files` (string[]): Array of file paths to stage\n   - Returns: Confirmation of staged files\n\n7. `git_reset`\n   - Unstages all staged changes\n   - Input:\n     - `repo_path` (string): Path to Git repository\n   - Returns: Confirmation of reset operation\n\n8. `git_log`\n   - Shows the commit logs\n   - Inputs:\n     - `repo_path` (string): Path to Git repository\n     - `max_count` (number, optional): Maximum number of commits to show (default: 10)\n   - Returns: Array of commit entries with hash, author, date, and message\n\n9. `git_create_branch`\n   - Creates a new branch\n   - Inputs:\n     - `repo_path` (string): Path to Git repository\n     - `branch_name` (string): Name of the new branch\n     - `start_point` (string, optional): Starting point for the new branch\n   - Returns: Confirmation of branch creation\n10. `git_checkout`\n   - Switches branches\n   - Inputs:\n     - `repo_path` (string): Path to Git repository\n     - `branch_name` (string): Name of branch to checkout\n   - Returns: Confirmation of branch switch\n11. `git_show`\n   - Shows the contents of a commit\n   - Inputs:\n     - `repo_path` (string): Path to Git repository\n     - `revision` (string): The revision (commit hash, branch name, tag) to show\n   - Returns: Contents of the specified commit\n12. `git_init`\n   - Initializes a Git repository\n   - Inputs:\n     - `repo_path` (string): Path to directory to initialize git repo\n   - Returns: Confirmation of repository initialization\n\n## Installation\n\n### Using uv (recommended)\n\nWhen using [`uv`](https://docs.astral.sh/uv/) no specific installation is needed. We will\nuse [`uvx`](https://docs.astral.sh/uv/guides/tools/) to directly run *mcp-server-git*.\n\n### Using PIP\n\nAlternatively you can install `mcp-server-git` via pip:\n\n```\npip install mcp-server-git\n```\n\nAfter installation, you can run it as a script using:\n\n```\npython -m mcp_server_git\n```\n\n## Configuration\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n<details>\n<summary>Using uvx</summary>\n\n```json\n\"mcpServers\": {\n  \"git\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-git\", \"--repository\", \"path/to/git/repo\"]\n  }\n}\n```\n</details>\n\n<details>\n<summary>Using docker</summary>\n\n* Note: replace '/Users/username' with the a path that you want to be accessible by this tool\n\n```json\n\"mcpServers\": {\n  \"git\": {\n    \"command\": \"docker\",\n    \"args\": [\"run\", \"--rm\", \"-i\", \"--mount\", \"type=bind,src=/Users/username,dst=/Users/username\", \"mcp/git\"]\n  }\n}\n```\n</details>\n\n<details>\n<summary>Using pip installation</summary>\n\n```json\n\"mcpServers\": {\n  \"git\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_git\", \"--repository\", \"path/to/git/repo\"]\n  }\n}\n```\n</details>\n\n### Usage with [Zed](https://github.com/zed-industries/zed)\n\nAdd to your Zed settings.json:\n\n<details>\n<summary>Using uvx</summary>\n\n```json\n\"context_servers\": [\n  \"mcp-server-git\": {\n    \"command\": {\n      \"path\": \"uvx\",\n      \"args\": [\"mcp-server-git\"]\n    }\n  }\n],\n```\n</details>\n\n<details>\n<summary>Using pip installation</summary>\n\n```json\n\"context_servers\": {\n  \"mcp-server-git\": {\n    \"command\": {\n      \"path\": \"python\",\n      \"args\": [\"-m\", \"mcp_server_git\"]\n    }\n  }\n},\n```\n</details>\n\n## Debugging\n\nYou can use the MCP inspector to debug the server. For uvx installations:\n\n```\nnpx @modelcontextprotocol/inspector uvx mcp-server-git\n```\n\nOr if you've installed the package in a specific directory or are developing on it:\n\n```\ncd path/to/servers/src/git\nnpx @modelcontextprotocol/inspector uv run mcp-server-git\n```\n\nRunning `tail -n 20 -f ~/Library/Logs/Claude/mcp*.log` will show the logs from the server and may\nhelp you debug any issues.\n\n## Development\n\nIf you are doing local development, there are two ways to test your changes:\n\n1. Run the MCP inspector to test your changes. See [Debugging](#debugging) for run instructions.\n\n2. Test using the Claude desktop app. Add the following to your `claude_desktop_config.json`:\n\n### Docker\n\n```json\n{\n  \"mcpServers\": {\n    \"git\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"--mount\", \"type=bind,src=/Users/username/Desktop,dst=/projects/Desktop\",\n        \"--mount\", \"type=bind,src=/path/to/other/allowed/dir,dst=/projects/other/allowed/dir,ro\",\n        \"--mount\", \"type=bind,src=/path/to/file.txt,dst=/projects/path/to/file.txt\",\n        \"mcp/git\"\n      ]\n    }\n  }\n}\n```\n\n### UVX\n```json\n{\n\"mcpServers\": {\n  \"git\": {\n    \"command\": \"uv\",\n    \"args\": [ \n      \"--directory\",\n      \"/<path to mcp-servers>/mcp-servers/src/git\",\n      \"run\",\n      \"mcp-server-git\"\n    ]\n  }\n}\n```\n\n## Build\n\nDocker build:\n\n```bash\ncd src/git\ndocker build -t mcp/git .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n"
}