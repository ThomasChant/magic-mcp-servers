{
  "mcp_name": "tumf/fastmcp-gsuite",
  "mcp_description": "Facilitates seamless interaction with Gmail and Google Calendar through a fastmcp-based server, supporting multiple accounts and advanced email and calendar management.",
  "mcp_id": "tumf_fastmcp-gsuite",
  "fetch_timestamp": "2025-06-23T09:07:07.944240Z",
  "github_url": "https://github.com/tumf/fastmcp-gsuite",
  "repository": {
    "name": "fastmcp-gsuite",
    "full_name": "tumf/fastmcp-gsuite",
    "description": null,
    "html_url": "https://github.com/tumf/fastmcp-gsuite",
    "created_at": "2025-04-15T14:01:16Z",
    "updated_at": "2025-05-17T16:58:13Z",
    "pushed_at": "2025-05-20T05:46:12Z",
    "size": 440,
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks_count": 1,
    "open_issues_count": 2,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "tumf",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/69994?v=4",
      "html_url": "https://github.com/tumf"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "Python": 373034,
      "Makefile": 3968,
      "Dockerfile": 1168,
      "Shell": 1054
    },
    "language_percentages": {
      "Python": 98.37,
      "Makefile": 1.05,
      "Dockerfile": 0.31,
      "Shell": 0.28
    },
    "pull_requests_count": 8,
    "contributors_count": 7,
    "tags": [
      {
        "name": "v1.0.0-beta",
        "commit_sha": "39e44ac4df6e292e22b150eeb439154851e57976"
      }
    ],
    "latest_version": "v1.0.0-beta"
  },
  "readme": "# fastmcp-gsuite MCP server (using fastmcp)\n\n[![codecov](https://codecov.io/gh/tumf/fastmcp-gsuite/branch/main/graph/badge.svg)](https://codecov.io/gh/tumf/fastmcp-gsuite)\n\nMCP server to interact with Google products, rewritten using the `fastmcp` library.\n\nThis project is a fork of [mcp-gsuite](https://github.com/MarkusPfundstein/mcp-gsuite).\n\n## Example prompts\n\nRight now, this MCP server supports Gmail and Calendar integration with the following capabilities:\n\n1. General\n* Multiple google accounts\n\n2. Gmail\n* Get your Gmail user information\n* Query emails with flexible search (e.g., unread, from specific senders, date ranges, with attachments)\n* Retrieve complete email content by ID\n* Create new draft emails with recipients, subject, body and CC options\n* Delete draft emails\n* Reply to existing emails (can either send immediately or save as draft)\n* Retrieve multiple emails at once by their IDs.\n* Save multiple attachments from emails to your local system.\n\n3. Calendar\n* Manage multiple calendars\n* Get calendar events within specified time ranges\n* Create calendar events with:\n  + Title, start/end times\n  + Optional location and description\n  + Optional attendees\n  + Custom timezone support\n  + Notification preferences\n* Delete calendar events\n\nExample prompts you can try:\n\n* Retrieve my latest unread messages\n* Search my emails from the Scrum Master\n* Retrieve all emails from accounting\n* Take the email about ABC and summarize it\n* Write a nice response to Alice's last email and upload a draft.\n* Reply to Bob's email with a Thank you note. Store it as draft\n\n* What do I have on my agenda tomorrow?\n* Check my private account's Family agenda for next week\n* I need to plan an event with Tim for 2hrs next week. Suggest some time slots.\n\n## Quickstart\n\n### Install\n\n#### Oauth 2\n\nGoogle Workspace (G Suite) APIs require OAuth2 authorization. Follow these steps to set up authentication:\n\n1. Create OAuth2 Credentials:\n   - Go to the [Google Cloud Console](https://console.cloud.google.com/)\n   - Create a new project or select an existing one\n   - Enable the Gmail API and Google Calendar API for your project\n   - Go to \"Credentials\" → \"Create Credentials\" → \"OAuth client ID\"\n   - Select \"Desktop app\" or \"Web application\" as the application type\n   - Configure the OAuth consent screen with required information\n   - Add authorized redirect URIs (include `http://localhost:4100/code` for local development)\n\n2. Required OAuth2 Scopes:\n\n```json\n   [\n     \"openid\",\n     \"https://mail.google.com/\",\n     \"https://www.googleapis.com/auth/calendar\",\n     \"https://www.googleapis.com/auth/userinfo.email\"\n   ]\n```\n\n3. Then create a `.gauth.json` in your working directory with client\n\n```json\n{\n    \"web\": {\n        \"client_id\": \"$your_client_id\",\n        \"client_secret\": \"$your_client_secret\",\n        \"redirect_uris\": [\"http://localhost:4100/code\"],\n        \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n        \"token_uri\": \"https://oauth2.googleapis.com/token\"\n    }\n}\n```\n\n4. Create a `.accounts.json` file with account information\n\n```json\n{\n    \"accounts\": [\n        {\n            \"email\": \"alice@bob.com\",\n            \"account_type\": \"personal\",\n            \"extra_info\": \"Additional info that you want to tell Claude: E.g. 'Contains Family Calendar'\"\n        }\n    ]\n}\n```\n\nYou can specify multiple accounts. Make sure they have access in your Google Auth app. The `extra_info` field is especially interesting as you can add info here that you want to tell the AI about the account (e.g. whether it has a specific agenda)\n\nNote: **Initial Authentication Required:** Before running the server for the first time with a new account, you need to perform an initial OAuth2 authentication. This server does not yet include a built-in command for this. You may need to adapt the authentication logic from the previous version or use a separate script to generate the initial `.oauth2.{email}.json` credential file by completing the Google OAuth flow (which involves opening a browser, logging in, and granting permissions). Once the credential file exists, the server will use it and attempt to refresh the token automatically when needed.\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"gsuite\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<dir_to>/fastmcp-gsuite\",\n        \"run\",\n        \"fastmcp-gsuite\"\n      ]\n    }\n  }\n}\n```\n\nNote: Configuration is now primarily handled via environment variables or a `.env` file in the working directory, using `pydantic-settings` . See the Configuration Options section below.\n\n```json\n{\n  \"mcpServers\": {\n    \"fastmcp-gsuite\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<dir_to>/fastmcp-gsuite\",\n        \"run\",\n        \"fastmcp-gsuite\" # Use the new entry point\n        # Configuration via .env or environment variables is preferred now\n      ]\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"fastmcp-gsuite\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"fastmcp-gsuite\" # Use the new entry point\n        # Configuration via .env or environment variables is preferred now\n      ]\n    }\n  }\n}\n```\n\n</details>\n\n### Configuration Options (via `.env` file or Environment Variables)\n\nConfiguration is now managed using `pydantic-settings` . Create a `.env` file in the directory where you run the server, or set environment variables:\n\n* `GAUTH_FILE`: Path to the `.gauth.json` file containing OAuth2 client configuration. Default: `./.gauth.json`\n* `ACCOUNTS_FILE`: Path to the `.accounts.json` file containing Google account information. Default: `./.accounts.json`\n* `CREDENTIALS_DIR`: Directory to store the generated `.oauth2.{email}.json` credential files. Default: `.` (current directory)\n\nExample `.env` file:\n\n```dotenv\nGAUTH_FILE=/path/to/your/.gauth.json\nACCOUNTS_FILE=/path/to/your/.accounts.json\nCREDENTIALS_DIR=/path/to/your/credentials\n```\n\nThis allows for flexible configuration without command-line arguments when running the server.\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n\n```bash\nuv sync\n```\n\n2. Build package distributions:\n\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n* Token: `--token` or `UV_PUBLISH_TOKEN`\n* Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Automatic PyPI Publishing with Tag Push\n\nThis project is configured to automatically publish to PyPI when a tag is pushed to the repository. The publishing process is handled by a GitHub Actions workflow.\n\nTo publish a new version:\n\n1. Update the version in `pyproject.toml`\n2. Commit the changes\n3. Tag the commit with a version tag (e.g., `v0.4.2`)\n4. Push the tag to GitHub\n\n```bash\n# Example workflow to release a new version\ngit add pyproject.toml\ngit commit -m \"Bump version to 0.4.2\"\ngit tag -a v0.4.2 -m \"Version 0.4.2\"\ngit push && git push --tags\n```\n\nThe GitHub Actions workflow will automatically build and publish the package to PyPI. Make sure to set the following secrets in your GitHub repository:\n\n* `PYPI_API_TOKEN`: Your PyPI API token\n\nYou can also use the version bumping commands in the Makefile:\n\n```bash\n# Bump patch version (0.4.1 -> 0.4.2)\nmake bump-patch\n\n# Bump minor version (0.4.1 -> 0.5.0)\nmake bump-minor\n\n# Bump major version (0.4.1 -> 1.0.0)\nmake bump-major\n```\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [ `npm` ](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /path/to/fastmcp-gsuite run fastmcp-gsuite\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\nYou can also watch the server logs with this command:\n\n```bash\ntail -n 20 -f ~/Library/Logs/Claude/mcp-server-fastmcp-gsuite.log # Log filename might change based on the server name\n```\n\n## E2E Testing\n\n### Standard E2E Tests\n\nTo run the standard E2E tests, you need to set up the necessary environment variables with valid Google credentials:\n\n```bash\n# Make sure valid Google credentials are set in your environment variables\ndotenvx run -f .env.local -- uv run make e2e-tests\n```\n\nThese tests use the Google API libraries directly to authenticate and test the functionality.\n\n### MCP-Based E2E Tests\n\nThere are also MCP-based E2E tests that test the functionality through the MCP protocol, simulating how Claude or other clients would interact with the MCP server:\n\n```bash\n# Specify the environment file containing your Google credentials\nmake mcp-e2e-tests ENV_FILE=.env.local\n```\n\nThis will run tests that:\n1. Start the MCP G-Suite server\n2. Connect to it using the chuk-mcp client\n3. Test various tools like Gmail message listing and Calendar event retrieval\n\nThe environment file should contain the following variables:\n- `GSUITE_CREDENTIALS_JSON` - Base64 encoded JSON credentials\n- `GOOGLE_ACCOUNT_EMAIL` - Your Google account email\n- `GOOGLE_PROJECT_ID` - Your Google Cloud project ID\n- `GOOGLE_CLIENT_ID` - Your OAuth client ID\n- `GOOGLE_CLIENT_SECRET` - Your OAuth client secret\n\nBoth types of E2E tests are excluded from CI pipelines and should only be run locally with valid credentials.\n\n### E2E Test Execution Guide\n\nThis project implements end-to-end (E2E) tests using real Google accounts. You can run the E2E tests using the following steps.\n\n#### Prerequisites\n\nTo run E2E tests, you need:\n\n1. A `.env.local` file with the following environment variables:\n   - `GSUITE_CREDENTIALS_JSON` : Base64 encoded Google credentials\n   - `GOOGLE_ACCOUNT_EMAIL` : Google account email for testing\n   - `GOOGLE_PROJECT_ID` : Google project ID\n   - `GOOGLE_CLIENT_ID` : Google client ID\n   - `GOOGLE_CLIENT_SECRET` : Google client secret\n\n2. E2E test dependencies installed:\n\n```bash\nuv pip install -e \".[e2e]\"\n```\n\n#### Test Execution Commands\n\n- Run all E2E tests:\n\n```bash\ndotenvx run -f .env.local -- uv run make mcp-all-e2e-tests\n```\n\n- Run tests for individual services:\n\n```bash\n# Gmail tests\ndotenvx run -f .env.local -- uv run make mcp-e2e-tests\n\n# Google Calendar tests\ndotenvx run -f .env.local -- uv run make mcp-google-e2e-tests\n\n# Google Drive tests\ndotenvx run -f .env.local -- uv run make mcp-gdrive-e2e-tests\n\n# Google Tasks tests\ndotenvx run -f .env.local -- uv run make mcp-tasks-e2e-tests\n\n# Google Contacts tests\ndotenvx run -f .env.local -- uv run make mcp-contacts-e2e-tests\n```\n\n#### Important Notes\n\n- E2E tests access real Google accounts, so be careful not to affect production environments\n- E2E tests are automatically skipped in CI environments\n- Temporary authentication files are created during test execution but are automatically deleted afterward\n\n## License\n\n# Test push hook\n\n# Test push hook\n"
}