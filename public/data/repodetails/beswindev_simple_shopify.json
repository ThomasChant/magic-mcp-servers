{
  "mcp_name": "beswindev/simple_shopify",
  "mcp_description": "Facilitates seamless interaction with Shopify store data via GraphQL API, offering comprehensive management of products, customers, and orders.",
  "mcp_id": "beswindev_simple_shopify",
  "fetch_timestamp": "2025-06-23T01:36:48.116682Z",
  "github_url": "https://github.com/beswindev/simple_shopify",
  "repository": {
    "name": "simple_shopify",
    "full_name": "beswindev/simple_shopify",
    "description": null,
    "html_url": "https://github.com/beswindev/simple_shopify",
    "created_at": "2025-04-18T11:42:51Z",
    "updated_at": "2025-04-18T11:44:09Z",
    "pushed_at": "2025-04-18T11:44:05Z",
    "size": 72,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "beswindev",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/195607791?v=4",
      "html_url": "https://github.com/beswindev"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 34620,
      "JavaScript": 6982
    },
    "language_percentages": {
      "TypeScript": 83.22,
      "JavaScript": 16.78
    },
    "pull_requests_count": 0,
    "contributors_count": 2,
    "package_json_version": "1.0.5"
  },
  "readme": "# Shopify MCP Server\n\n(please leave a star if you like!)\n\nMCP Server for Shopify API, enabling interaction with store data through GraphQL API. This server provides tools for managing products, customers, orders, and more.\n\n<a href=\"https://glama.ai/mcp/servers/@GeLi2001/shopify-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@GeLi2001/shopify-mcp/badge\" alt=\"Shopify MCP server\" />\n</a>\n\n## Features\n\n- **Product Management**: Search and retrieve product information\n- **Customer Management**: Load customer data and manage customer tags\n- **Order Management**: Advanced order querying and filtering\n- **GraphQL Integration**: Direct integration with Shopify's GraphQL Admin API\n- **Comprehensive Error Handling**: Clear error messages for API and authentication issues\n\n## Prerequisites\n\n1. Node.js (version 16 or higher)\n2. Shopify Custom App Access Token (see setup instructions below)\n\n## Setup\n\n### Shopify Access Token\n\nTo use this MCP server, you'll need to create a custom app in your Shopify store:\n\n1. From your Shopify admin, go to **Settings** > **Apps and sales channels**\n2. Click **Develop apps** (you may need to enable developer preview first)\n3. Click **Create an app**\n4. Set a name for your app (e.g., \"Shopify MCP Server\")\n5. Click **Configure Admin API scopes**\n6. Select the following scopes:\n   - `read_products`, `write_products`\n   - `read_customers`, `write_customers`\n   - `read_orders`, `write_orders`\n7. Click **Save**\n8. Click **Install app**\n9. Click **Install** to give the app access to your store data\n10. After installation, you'll see your **Admin API access token**\n11. Copy this token - you'll need it for configuration\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"shopify\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"shopify-mcp\",\n        \"--accessToken\",\n        \"<YOUR_ACCESS_TOKEN>\",\n        \"--domain\",\n        \"<YOUR_SHOP>.myshopify.com\"\n      ]\n    }\n  }\n}\n```\n\nLocations for the Claude Desktop config file:\n\n- MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n### Alternative: Run Locally with Environment Variables\n\nIf you prefer to use environment variables instead of command-line arguments:\n\n1. Create a `.env` file with your Shopify credentials:\n\n   ```\n   SHOPIFY_ACCESS_TOKEN=your_access_token\n   MYSHOPIFY_DOMAIN=your-store.myshopify.com\n   ```\n\n2. Run the server with npx:\n   ```\n   npx shopify-mcp-server\n   ```\n\n### Direct Installation (Optional)\n\nIf you want to install the package globally:\n\n```\nnpm install -g shopify-mcp-server\n```\n\nThen run it:\n\n```\nshopify-mcp-server --accessToken=<YOUR_ACCESS_TOKEN> --domain=<YOUR_SHOP>.myshopify.com\n```\n\n## Available Tools\n\n### Product Management\n\n1. `get-products`\n\n   - Get all products or search by title\n   - Inputs:\n     - `searchTitle` (optional string): Filter products by title\n     - `limit` (number): Maximum number of products to return\n\n2. `get-product-by-id`\n   - Get a specific product by ID\n   - Inputs:\n     - `productId` (string): ID of the product to retrieve\n\n### Customer Management\n\n1. `get-customers`\n\n   - Get customers or search by name/email\n   - Inputs:\n     - `searchQuery` (optional string): Filter customers by name or email\n     - `limit` (optional number, default: 10): Maximum number of customers to return\n\n2. `update-customer`\n\n   - Update a customer's information\n   - Inputs:\n     - `id` (string, required): Shopify customer ID (numeric ID only, like \"6276879810626\")\n     - `firstName` (string, optional): Customer's first name\n     - `lastName` (string, optional): Customer's last name\n     - `email` (string, optional): Customer's email address\n     - `phone` (string, optional): Customer's phone number\n     - `tags` (array of strings, optional): Tags to apply to the customer\n     - `note` (string, optional): Note about the customer\n     - `taxExempt` (boolean, optional): Whether the customer is exempt from taxes\n     - `metafields` (array of objects, optional): Customer metafields for storing additional data\n\n3. `get-customer-orders`\n   - Get orders for a specific customer\n   - Inputs:\n     - `customerId` (string, required): Shopify customer ID (numeric ID only, like \"6276879810626\")\n     - `limit` (optional number, default: 10): Maximum number of orders to return\n\n### Order Management\n\n1. `get-orders`\n\n   - Get orders with optional filtering\n   - Inputs:\n     - `status` (optional string): Filter by order status\n     - `limit` (optional number, default: 10): Maximum number of orders to return\n\n2. `get-order-by-id`\n\n   - Get a specific order by ID\n   - Inputs:\n     - `orderId` (string, required): Full Shopify order ID (e.g., \"gid://shopify/Order/6090960994370\")\n\n3. `update-order`\n\n   - Update an existing order with new information\n   - Inputs:\n     - `id` (string, required): Shopify order ID\n     - `tags` (array of strings, optional): New tags for the order\n     - `email` (string, optional): Update customer email\n     - `note` (string, optional): Order notes\n     - `customAttributes` (array of objects, optional): Custom attributes for the order\n     - `metafields` (array of objects, optional): Order metafields\n     - `shippingAddress` (object, optional): Shipping address information\n\n## Debugging\n\nIf you encounter issues, check Claude Desktop's MCP logs:\n\n```\ntail -n 20 -f ~/Library/Logs/Claude/mcp*.log\n```\n\n## License\n\nMIT\n"
}