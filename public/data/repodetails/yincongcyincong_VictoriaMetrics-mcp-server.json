{
  "mcp_name": "yincongcyincong/VictoriaMetrics-mcp-server",
  "mcp_description": "Facilitates interaction with VictoriaMetrics through an MCP server interface.",
  "mcp_id": "yincongcyincong_VictoriaMetrics-mcp-server",
  "fetch_timestamp": "2025-06-23T09:39:13.138211Z",
  "github_url": "https://github.com/yincongcyincong/VictoriaMetrics-mcp-server",
  "repository": {
    "name": "VictoriaMetrics-mcp-server",
    "full_name": "yincongcyincong/VictoriaMetrics-mcp-server",
    "description": "MCP Server for the VictoriaMetrics.",
    "html_url": "https://github.com/yincongcyincong/VictoriaMetrics-mcp-server",
    "created_at": "2025-04-12T06:38:23Z",
    "updated_at": "2025-06-04T09:18:17Z",
    "pushed_at": "2025-05-16T02:18:53Z",
    "size": 47,
    "stargazers_count": 5,
    "watchers_count": 5,
    "forks_count": 3,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": null,
    "topics": [
      "mcp",
      "mcp-server",
      "metrics",
      "victoriametrics"
    ],
    "default_branch": "main",
    "owner": {
      "login": "yincongcyincong",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/24344673?v=4",
      "html_url": "https://github.com/yincongcyincong"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 3,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 8990,
      "Dockerfile": 516
    },
    "language_percentages": {
      "JavaScript": 94.57,
      "Dockerfile": 5.43
    },
    "pull_requests_count": 2,
    "contributors_count": 3,
    "package_json_version": "1.0.7"
  },
  "readme": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/yincongcyincong-victoriametrics-mcp-server-badge.png)](https://mseep.ai/app/yincongcyincong-victoriametrics-mcp-server)\n\n# VictoriaMetrics MCP Server\n[![smithery badge](https://smithery.ai/badge/@yincongcyincong/victoriametrics-mcp-server)](https://smithery.ai/server/@yincongcyincong/victoriametrics-mcp-server)\n\n\nMCP Server for the VictoriaMetrics.\n\n### Installing via Smithery\n\nTo install VictoriaMetrics Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@yincongcyincong/victoriametrics-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @yincongcyincong/victoriametrics-mcp-server --client claude\n```\n\n## Debug\n```\nnpx @modelcontextprotocol/inspector -e VM_URL=http://127.0.0.1:8428  node src/index.js\n\n```\n\n### NPX\n\n```json\n{\n    \"mcpServers\": {\n        \"victoriametrics\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"-y\",\n                \"@yincongcyincong/victoriametrics-mcp-server\"\n            ],\n            \"env\": {\n                \"VM_URL\": \"\",\n                \"VM_SELECT_URL\": \"\",\n                \"VM_INSERT_URL\": \"\"\n            }\n        }\n    }\n}\n```\n\n### üìä VictoriaMetrics Tools API Documentation\n\n## 1. `vm_data_write`\n\n**Description**: Write data to the VictoriaMetrics database.\n\n**Input Parameters**:\n\n| Parameter     | Type        | Description                                | Required |\n|---------------|-------------|--------------------------------------------|----------|\n| `metric`      | `object`    | Tags of the metric                         | ‚úÖ        |\n| `values`      | `number[]`  | Array of metric values                     | ‚úÖ        |\n| `timestamps`  | `number[]`  | Array of timestamps in Unix seconds        | ‚úÖ        |\n\n---\n\n## 2. `vm_prometheus_write`\n\n**Description**: Import Prometheus exposition format data into VictoriaMetrics.\n\n**Input Parameters**:\n\n| Parameter | Type     | Description                                     | Required |\n|-----------|----------|-------------------------------------------------|----------|\n| `data`    | `string` | Metrics in Prometheus exposition format         | ‚úÖ        |\n\n---\n\n## 3. `vm_query_range`\n\n**Description**: Query time series data over a specific time range.\n\n**Input Parameters**:\n\n| Parameter | Type     | Description                                     | Required |\n|-----------|----------|-------------------------------------------------|----------|\n| `query`   | `string` | PromQL expression                               | ‚úÖ        |\n| `start`   | `number` | Start timestamp in Unix seconds                 | ‚õîÔ∏è        |\n| `end`     | `number` | End timestamp in Unix seconds                   | ‚õîÔ∏è        |\n| `step`    | `string` | Query resolution step width (e.g., `10s`, `1m`) | ‚õîÔ∏è        |\n\n> Only `query` is required; the other fields are optional.\n\n---\n\n## 4. `vm_query`\n\n**Description**: Query the current value of a time series.\n\n**Input Parameters**:\n\n| Parameter | Type     | Description                             | Required |\n|-----------|----------|-----------------------------------------|----------|\n| `query`   | `string` | PromQL expression to evaluate           | ‚úÖ        |\n| `time`    | `number` | Evaluation timestamp in Unix seconds    | ‚õîÔ∏è        |\n\n---\n\n## 5. `vm_labels`\n\n**Description**: Get all unique label names.\n\n**Input Parameters**: None\n\n---\n\n## 6. `vm_label_values`\n\n**Description**: Get all unique values for a specific label.\n\n**Input Parameters**:\n\n| Parameter | Type     | Description                  | Required |\n|-----------|----------|------------------------------|----------|\n| `label`   | `string` | Label name to get values for | ‚úÖ        |\n\n---\n"
}