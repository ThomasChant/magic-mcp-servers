{
  "mcp_name": "bobtista/honeybadger-mcp",
  "mcp_description": "Facilitates AI-driven error analysis by bridging AI agents with the Honeybadger error monitoring service.",
  "mcp_id": "bobtista_honeybadger-mcp",
  "fetch_timestamp": "2025-06-23T01:44:04.150139Z",
  "github_url": "https://github.com/bobtista/honeybadger-mcp",
  "repository": {
    "name": "honeybadger-mcp",
    "full_name": "bobtista/honeybadger-mcp",
    "description": null,
    "html_url": "https://github.com/bobtista/honeybadger-mcp",
    "created_at": "2025-04-09T17:33:56Z",
    "updated_at": "2025-04-14T22:43:47Z",
    "pushed_at": "2025-04-14T22:43:44Z",
    "size": 132,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "bobtista",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/7005288?v=4",
      "html_url": "https://github.com/bobtista"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 2,
    "languages": {
      "Python": 25324,
      "Dockerfile": 335
    },
    "language_percentages": {
      "Python": 98.69,
      "Dockerfile": 1.31
    },
    "pull_requests_count": 0,
    "contributors_count": 2
  },
  "readme": "# Honeybadger MCP Server\n\nA Model Context Protocol (MCP) server implementation for interacting with the Honeybadger API. This server allows AI agents to fetch and analyze error data from your Honeybadger projects.\n\n## Overview\n\nThis MCP server provides a bridge between AI agents and the Honeybadger error monitoring service. It follows the best practices laid out by Anthropic for building MCP servers, allowing seamless integration with any MCP-compatible client.\n\n## Features\n\nThe server provides two essential tools for interacting with Honeybadger:\n\n1. **`list_faults`**: List and filter faults from your Honeybadger project\n\n   - Search by text query\n   - Filter by creation or occurrence timestamps\n   - Sort by frequency or recency\n   - Paginate results\n\n2. **`get_fault_details`**: Get detailed information about specific faults\n   - Filter notices by creation time\n   - Paginate through notices\n   - Results ordered by creation time descending\n\n## Prerequisites\n\n- Python 3.10+\n- Honeybadger API key and Project ID\n- Docker if running the MCP server as a container (recommended)\n\n## Installation\n\n### Using uv\n\n1. Install uv if you don't have it:\n\n   ```bash\n   pip install uv\n   ```\n\n2. Clone this repository:\n\n   ```bash\n   git clone https://github.com/bobtista/honeybadger-mcp.git\n   cd honeybadger-mcp\n   ```\n\n3. Install dependencies:\n\n   ```bash\n   uv pip install -e .\n   ```\n\n4. Install development dependencies (optional):\n\n   ```bash\n   uv pip install -e \".[dev]\"\n   ```\n\n5. Create your environment file:\n\n   ```bash\n   cp .env.example .env\n   # Edit .env with your configuration\n   ```\n\n### Using Docker (Recommended)\n\n1. Build the Docker image:\n\n   ```bash\n   docker build -t honeybadger/mcp --build-arg PORT=8050 .\n   ```\n\n2. Create a `.env` file and configure your environment variables\n\n## Configuration\n\nYou can configure the server using either environment variables or command-line arguments:\n\n| Option     | Env Variable           | CLI Argument | Default   | Description                                |\n| ---------- | ---------------------- | ------------ | --------- | ------------------------------------------ |\n| API Key    | HONEYBADGER_API_KEY    | --api-key    | Required  | Your Honeybadger API key                   |\n| Project ID | HONEYBADGER_PROJECT_ID | --project-id | Required  | Your Honeybadger project ID                |\n| Transport  | TRANSPORT              | --transport  | sse       | Transport protocol (sse or stdio)          |\n| Host       | HOST                   | --host       | 127.0.0.1 | Host to bind to when using SSE transport   |\n| Port       | PORT                   | --port       | 8050      | Port to listen on when using SSE transport |\n| Log Level  | LOG_LEVEL              | --log-level  | INFO      | Logging level (INFO, DEBUG, etc.)          |\n\n## Running the Server\n\n### Running with uv (Development)\n\n#### SSE Transport (Default)\n\n```bash\n# Using environment variables:\nHONEYBADGER_API_KEY=your-key HONEYBADGER_PROJECT_ID=your-project uv run src/honeybadger_mcp_server/server.py\n\n# Using CLI arguments:\nuv run src/honeybadger_mcp_server/server.py --api-key your-key --project-id your-project\n```\n\n#### Using Stdio\n\n```bash\nuv run src/honeybadger_mcp_server/server.py --transport stdio --api-key your-key --project-id your-project\n```\n\n### Running Installed Package\n\n#### SSE Transport (Default)\n\n```bash\n# Using environment variables:\nHONEYBADGER_API_KEY=your-key HONEYBADGER_PROJECT_ID=your-project honeybadger-mcp-server\n\n# Using CLI arguments:\nhoneybadger-mcp-server --api-key your-key --project-id your-project\n```\n\n#### Using Stdio\n\n```bash\nhoneybadger-mcp-server --transport stdio --api-key your-key --project-id your-project\n```\n\n### Using Docker\n\n#### Run with SSE\n\n```bash\ndocker run --env-file .env -p 8050:8050 honeybadger/mcp\n```\n\n#### Using Stdio\n\nWith stdio, the MCP client itself can spin up the MCP server container, so nothing to run at this point.\n\n## Integration with MCP Clients\n\n### SSE Configuration\n\nOnce you have the server running with SSE transport, you can connect to it using this configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"honeybadger\": {\n      \"transport\": \"sse\",\n      \"url\": \"http://localhost:8050/sse\"\n    }\n  }\n}\n```\n\n### Claude Desktop Configuration\n\n#### Using SSE Transport (Recommended)\n\nFirst, start the server:\n\n```bash\nhoneybadger-mcp-server --api-key your-key --project-id your-project\n```\n\nThen add to your Claude Desktop config:\n\n```json\n{\n  \"mcpServers\": {\n    \"honeybadger\": {\n      \"transport\": \"sse\",\n      \"url\": \"http://localhost:8050/sse\"\n    }\n  }\n}\n```\n\n#### Using Stdio Transport\n\nAdd to your Claude Desktop config:\n\n```json\n{\n  \"mcpServers\": {\n    \"honeybadger\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--project\",\n        \"/path/to/honeybadger-mcp\",\n        \"src/honeybadger_mcp_server/server.py\",\n        \"--transport\",\n        \"stdio\",\n        \"--api-key\",\n        \"YOUR-API-KEY\",\n        \"--project-id\",\n        \"YOUR-PROJECT-ID\"\n      ]\n    }\n  }\n}\n```\n\n### Docker Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"honeybadger\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"honeybadger/mcp\",\n        \"--transport\",\n        \"stdio\",\n        \"--api-key\",\n        \"YOUR-API-KEY\",\n        \"--project-id\",\n        \"YOUR-PROJECT-ID\"\n      ]\n    }\n  }\n}\n```\n\n## Tool Usage Examples\n\n### List Faults\n\n```python\nresult = await client.call_tool(\"list_faults\", {\n    \"q\": \"RuntimeError\",           # Optional search term\n    \"created_after\": 1710806400,  # Unix timestamp (2024-03-19T00:00:00Z)\n    \"occurred_after\": 1710806400, # Filter by occurrence time\n    \"limit\": 10,                  # Max 25 results\n    \"order\": \"recent\"             # 'recent' or 'frequent'\n})\n```\n\n### Get Fault Details\n\n```python\nresult = await client.call_tool(\"get_fault_details\", {\n    \"fault_id\": \"abc123\",\n    \"created_after\": 1710806400,  # Unix timestamp\n    \"created_before\": 1710892800, # Optional end time\n    \"limit\": 5                    # Number of notices (max 25)\n})\n```\n\n## Development\n\n### Running Tests\n\n```bash\n# Install dev dependencies\nuv pip install -e \".[dev]\"\n\n# Run tests\npytest\n```\n\n### Code Quality\n\n```bash\n# Run type checker\npyright\n\n# Run linter\nruff check .\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n"
}