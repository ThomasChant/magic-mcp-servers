{
  "mcp_name": "lpigeon/ros-mcp-server",
  "mcp_description": "üêç üè† üçé ü™ü üêß - The ROS MCP Server supports robot control by converting user-issued natural language commands into ROS or ROS2 control commands.",
  "mcp_id": "lpigeon_ros-mcp-server",
  "fetch_timestamp": "2025-06-23T06:16:14.550503Z",
  "github_url": "https://github.com/lpigeon/ros-mcp-server",
  "repository": {
    "name": "ros-mcp-server",
    "full_name": "lpigeon/ros-mcp-server",
    "description": "The ROS/ROS2 MCP Server is designed to support robots in performing complex tasks and adapting effectively to various environments by providing a set of functions that transform natural language commands, entered by a user through an LLM, into ROS/ROS2 commands for robot control.",
    "html_url": "https://github.com/lpigeon/ros-mcp-server",
    "created_at": "2025-04-11T05:40:09Z",
    "updated_at": "2025-06-22T15:34:53Z",
    "pushed_at": "2025-05-27T04:28:56Z",
    "size": 53651,
    "stargazers_count": 111,
    "watchers_count": 111,
    "forks_count": 19,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [
      "mcp",
      "mcp-server",
      "modelcontextprotocol",
      "ros",
      "ros-mcp-server",
      "ros2",
      "ros2-mcp-server"
    ],
    "default_branch": "main",
    "owner": {
      "login": "lpigeon",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/69760395?v=4",
      "html_url": "https://github.com/lpigeon"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 19,
    "subscribers_count": 6,
    "languages": {
      "Python": 10357,
      "Dockerfile": 368
    },
    "language_percentages": {
      "Python": 96.57,
      "Dockerfile": 3.43
    },
    "pull_requests_count": 3,
    "contributors_count": 2
  },
  "readme": "## Overview\n![Static Badge](https://img.shields.io/badge/ROS-Available-green)\n![Static Badge](https://img.shields.io/badge/ROS2-Available-green)\n[![smithery badge](https://smithery.ai/badge/@lpigeon/ros-mcp-server)](https://smithery.ai/server/@lpigeon/ros-mcp-server)\n![Static Badge](https://img.shields.io/badge/License-MIT-blue)\n\n<center><img src=\"https://github.com/lpigeon/ros-mcp-server/blob/main/img/framework.png\"/></center>\n\nThe ROS MCP Server is designed to support robots in performing complex tasks and adapting effectively to various environments by providing a set of functions that transform natural language commands, entered by a user through an LLM, into ROS commands for robot control. Furthermore, by utilizing ``rosbridge``, it is configured to operate with both ``ROS`` and ``ROS2`` systems, and its WebSocket-based communication enables broad applicability across diverse platforms.\n\nResearch based on this project can be found in the video linked below.  \n- [An Efficient Robot Control Framework Using the Model Context Protocol](https://www.youtube.com/watch?v=7ut4eqTxwHA)\n\n## Supported Types\n\n- geometry_msgs/Twist\n- sensor_msgs/Image\n- sensor_msgs/JointState\n\n## Features\n\n- **WebSocket-based universal compatibility**: Communicates with both ROS and ROS2 systems using rosbridge, enabling seamless integration regardless of ROS version.\n- **Cross-platform support**: Works on Linux, Windows, and MacOS, making it suitable for diverse development and deployment environments.\n- **Easy integration with LLMs and AI systems**: Natural language commands can be directly translated into robot actions via MCP functions.\n- **Extensible function set**: Easily add new robot control or sensor functions by extending the MCP tool interface.\n- **No ROS node modification required**: Interacts with existing ROS/ROS2 topics and services without changing your robot's core code.\n- **Native ROS/ROS2 command compatibility**: Optionally supports using local ROS/ROS2 libraries, so you can run native ROS commands and tools alongside WebSocket-based control. \n\n## Contributing\nContributions are welcome!  \nWhether you're fixing a typo, adding a new function, or suggesting improvements, your help is appreciated.  \nPlease follow the [contributing guidelines](CONTRIBUTING.md) for more details on how to contribute to this project.\n\n## Installation\n\n### Installing via Smithery\n\nTo install ``ros-mcp-server`` for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@lpigeon/ros-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @lpigeon/ros-mcp-server --client claude\n```\n\n### Installing Locally\n\n### `uv` Installation\n- To install `uv`, you can use the following command:\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\nor\n```bash\npip install uv\n```\n\n- Create virtual environment and activate it (Optional)\n```bash\nuv venv\nsource .venv/bin/activate\n```\n\n### MCP Server Configuration\nSet MCP setting to mcp.json.\n\n```bash\n{\n  \"mcpServers\": {\n    \"ros-mcp-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/ros-mcp-server\",,\n        \"run\",\n        \"server.py\"\n      ]\n    }\n  }\n}\n```\n\nIf you use Claude Desktop, you can find mcp.json using the following command:\n\n- MacOS\n```bash\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n- Linux(Ubuntu)\n  \nYou can install Claude Desktop to use [claude-desktop-debian](https://github.com/aaddrick/claude-desktop-debian).\n\n```bash\ncode ~/.config/Claude/claude_desktop_config.json\n```\n\n- Windows\n```bash\ncode $env:AppData\\Claude\\claude_desktop_config.json\n```\n\n## MCP Functions\n\nYou can find the list of functions in the [MCPFUNCTIONS.md](MCPFUNCTIONS.md).\n\n## How To Use\n### 1. Set IP and Port to connect rosbridge.\n- Open `server.py` and change your `LOCAL_IP`, `ROSBRIDGE_IP` and `ROSBRIDGE_PORT`. (`ROSBRIDGE_PORT`'s default value is `9090`)\n\n### 2. Run rosbridge server.\nROS 1\n```bash\nroslaunch rosbridge_server rosbridge_websocket.launch\n```\nROS 2\n```bash\nros2 launch rosbridge_server rosbridge_websocket_launch.xml\n```\n\n### 3. Run any AI system that has imported ``ros-mcp-server``.\n\n### 4. Type \"Make the robot move forward.\".\n<center><img src=\"https://github.com/lpigeon/ros-mcp-server/blob/main/img/how_to_use_1.png\" width=\"500\"/></center>\n\n### 5. Check `rosbridge_server` and `ros topic`.\n- `rosbridge_server`\n<center><img src=\"https://github.com/lpigeon/ros-mcp-server/blob/main/img/how_to_use_2.png\" /></center>\n\n- `ros topic`\n<center><img src=\"https://github.com/lpigeon/ros-mcp-server/blob/main/img/how_to_use_3.png\" /></center>\n\n## Simulation Test\nMCP-based control using the MOCA mobile manipulator within the NVIDIA Isaac Sim simulation environment. \n\n<center><img src=\"https://github.com/lpigeon/ros-mcp-server/blob/main/img/result.gif\" /></center>\n"
}