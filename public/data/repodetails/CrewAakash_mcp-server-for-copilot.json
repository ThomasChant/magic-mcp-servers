{
  "mcp_name": "CrewAakash/mcp-server-for-copilot",
  "mcp_description": "Facilitates seamless integration of Microsoft Copilot Studio agents with MCP-compatible clients, maintaining conversation context and supporting stateful interactions.",
  "mcp_id": "CrewAakash_mcp-server-for-copilot",
  "fetch_timestamp": "2025-06-23T02:19:08.018869Z",
  "github_url": "https://github.com/CrewAakash/mcp-server-for-copilot",
  "repository": {
    "name": "mcp-server-for-copilot",
    "full_name": "CrewAakash/mcp-server-for-copilot",
    "description": "MCP server wrapper for the agents built using MSFT Copilot studio",
    "html_url": "https://github.com/CrewAakash/mcp-server-for-copilot",
    "created_at": "2025-04-28T06:47:36Z",
    "updated_at": "2025-05-06T11:02:27Z",
    "pushed_at": "2025-05-06T11:02:23Z",
    "size": 365,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "CrewAakash",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/149993059?v=4",
      "html_url": "https://github.com/CrewAakash"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 2,
    "languages": {
      "Python": 22918,
      "Dockerfile": 504
    },
    "language_percentages": {
      "Python": 97.85,
      "Dockerfile": 2.15
    },
    "pull_requests_count": 1,
    "contributors_count": 4
  },
  "readme": "# ü§ñ MCP Server for Copilot Studio Agents\n\nAn [MCP (Model Context Protocol)](https://modelcontextprotocol.io/introduction) server implementation that connects to Microsoft Copilot Studio agents, allowing seamless integration of Copilot Studio agents with any MCP-compatible client.\n\nhttps://github.com/user-attachments/assets/19fdd17b-2837-4797-8653-fe9439de355f\n\n## ‚ú® Features\n\n- üîå Connect to Copilot Studio agents through [DirectLine API](https://learn.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-api-reference?view=azure-bot-service-4.0)\n- üß† Maintain conversation context across multiple queries\n- üîÑ Easy integration with any MCP-compatible client\n- üí¨ Stateful conversations with conversation ID and watermark tracking\n- ‚öôÔ∏è Configurable agent definitions\n\n## üõ†Ô∏è Tools\n\nThis MCP server exposes the following tools:\n\n- üìÆ `query_agent`: Send queries to a Copilot Studio agent and receive responses\n  - üîÑ Maintains conversation context across multiple queries using conversation IDs and watermarks\n  - üìä Returns structured responses with success/error status\n\n## üîß Configuration\n\n### Pre-requisites\n - üîê Ensure you have a Copilot Studio agent set up and configure [direct line channel security](https://learn.microsoft.com/en-us/microsoft-copilot-studio/configure-web-security#use-secrets-or-tokens).\n - üìù Update the `agent_definitions` in the `src/main.py` file to include your agent's details.\n- The `agent_definitions` should include the following fields:\n  - üìõ `name`: The name of the agent\n  - üìÑ `description`: A brief description of the agent for the MCP client to identify the responsibility of the agent.\n  \n### Environment Variables\n\nThe server requires the following environment variables:\n\n- üîó `DIRECTLINE_ENDPOINT`: The DirectLine API endpoint for your Copilot Studio agent\n- üîë `COPILOT_AGENT_SECRET`: Bot key for authenticating with the Copilot Studio agent via the DirectLine API\n\nYou can set these variables in a `.env` file in the project root directory or configure them through your system's environment variables.\n\n## üì¶ Installation\n\n### Prerequisites\n\n- üêç Python 3.12 or higher\n- üöÄ `uv` package manager (recommended) or pip\n\n#### Python Setup\n\n```bash\n# Setup environment with uv\nuv venv\n.venv\\Scripts\\activate  # On Windows\nsource .venv/bin/activate  # On macOS/Linux\n\n# Install dependencies\nuv sync\n```\n\nIf you prefer using pip:\n\n```bash\n# Create a virtual environment\npython -m venv .venv\n.venv\\Scripts\\activate  # On Windows\nsource .venv/bin/activate  # On macOS/Linux\n\n# Install dependencies\npip install -e .\n```\n\n#### Testing with MCP Inspector\n\nOnce you activate your environment, you can run the MCP server locally using [`MCP Inspector`](https://modelcontextprotocol.io/docs/tools/inspector#python).\n\n1. Run the MCP server using the following command:\n\n  ```bash\n  mcp dev src/main.py\n  ```\n\n2. You will be prompted to install the `@modelcontextprotocol/inspector` package. Choose `y` to install it.  \n  ![Install MCP Inspector](./images/run_mcp_server_locally.png)\n\n3. Launch the MCP Inspector and connect to the MCP server.\n4. Navigate to `Tools` and click `List Tools` to view all the available tools in the MCP server.\n5. Select the `query_agent` tool to send queries to your Copilot Studio agent.  \n  ![MCP Inspector](./images/mcp_inspector.png)\n  ![Result](./images/mcp_inspector_result.png)\n\n\n### Usage with Claude Desktop\n\nTo use with Claude Desktop, add the following to your configuration file:\n\n1. Download [Claude Desktop](https://claude.ai/download) and install it, if you haven't already.\n2. Navigate to `File` > `Settings` > `Developer` > `Edit Config`.\n3. Open the `claude_desktop_config.json` file and add the following configurations to the `mcpServers` section. You can use either `uv`, `python`, or `docker` to run the server.  \n  ![Claude Desktop Config](./images/claude_desktop_config.png)\n4. Save the configuration file and restart Claude Desktop.\n5. Once the MCP server is added to Claude Desktop, you can view it under the tools section.\n  ![Claude Desktop Tools](./images/claude_desktop_mcp_server.png)\n\n### MCP Server Configurations for Claude Desktop\n\n#### Run via `uv`\n\n```json\n{\n  \"mcpServers\": {\n    \"agent-name\": {\n      \"command\": \"uv\", // you might need to use the full path to uv if it's not in your PATH. use `which uv` to find the path.\n      \"args\": [\n        \"--directory\",\n        \"<PATH_TO_THE_PARENT_FOLDER>\",\n        \"run\",\n        \"mcp\",\n        \"run\",\n        \"<PATH_TO_THE_PARENT_FOLDER>/src/main.py\"\n      ],\n      \"env\": {\n        \"DIRECTLINE_ENDPOINT\": \"endpoint-url\",\n        \"COPILOT_AGENT_SECRET\": \"secret-key\"\n      }\n    }\n  }\n}\n```\n\n#### Run via `python`\n\nPost setup of virtual environment and installing the necessary packages, you can run the server using the following command:\n\n\n```json\n{\n  \"mcpServers\": {\n    \"agent-name\": {\n      \"command\": \"<PATH_TO_VENV>/bin/python\",\n      \"args\": [\n        \"<PATH_TO_THE_PARENT_FOLDER>/src/main.py\"\n      ],\n      \"env\": {\n        \"DIRECTLINE_ENDPOINT\": \"endpoint-url\",\n        \"COPILOT_AGENT_SECRET\": \"secret-key\"\n      }\n    }\n  }\n}\n```\n\nAlternatively you can install the server to Claude Desktop by running the following command (inside the virtual environment):\n\n```bash\nmcp install src/main.py -f .env\n```\n\n#### Run via `docker`\nYou can run the MCP server as a container using Docker. Ensure you have Docker installed and running on your machine.\n\nBuild the Docker image:\n\n```bash\ndocker build -t mcp-server-copilot-agent .\n```\n\nAdd the following to your Claude Desktop configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"agent-name\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-p\", \"8000:8000\",\n        \"--env-file\", \"<PATH_TO_THE_PARENT_FOLDER>/.env\",\n        \"mcp-server-copilot-agent\"\n      ]\n    }\n  }\n}\n```\n\nOnce you have configured Claude Desktop with the \n\n### üåê Usage with Other MCP Clients\n\nThis server follows the MCP protocol specification and can be used with any MCP-compatible client. Refer to your client's documentation for specific instructions on how to connect to external MCP servers.\n\n## üë©‚Äçüíª Development\n\nTo contribute to this project, set up a development environment:\n\n```bash\n# Install development dependencies\nuv sync -e dev\n```\n\nThe project uses Ruff for linting:\n\n```bash\n# Run linter\nruff check .\n```\n"
}