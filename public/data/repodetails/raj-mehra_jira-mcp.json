{
  "mcp_name": "raj-mehra/jira-mcp",
  "mcp_description": "Integrates Jira with MCP to fetch and search ticket details using a flexible framework.",
  "mcp_id": "raj-mehra_jira-mcp",
  "fetch_timestamp": "2025-06-23T07:50:22.163867Z",
  "github_url": "https://github.com/raj-mehra/jira-mcp",
  "repository": {
    "name": "jira-mcp",
    "full_name": "raj-mehra/jira-mcp",
    "description": null,
    "html_url": "https://github.com/raj-mehra/jira-mcp",
    "created_at": "2025-04-28T18:40:19Z",
    "updated_at": "2025-05-07T04:12:35Z",
    "pushed_at": "2025-04-28T18:40:21Z",
    "size": 7,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "raj-mehra",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/6382916?v=4",
      "html_url": "https://github.com/raj-mehra"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Python": 8092,
      "Shell": 2441
    },
    "language_percentages": {
      "Python": 76.83,
      "Shell": 23.17
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# Jira MCP Server\n\nA Jira integration server that provides tools for fetching ticket details and searching tickets using the MCP (Model Control Protocol) framework.\n\n## Setup\n\n1. Install the required dependencies:\nFor local env use: \n\n```bash\n    ./setup.sh\n```\n\nAlternatively\n\n```bash\npip install -r requirements.txt\n```\n\n2. Create a `.env` file in the project root with your Jira credentials:\n```\nJIRA_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token\n```\n\n## Running the Application\n\nThe server can be run in two modes:\n\n1. **Standard I/O Mode** (default):\n```bash\npython main.py\n```\n\n2. **SSE Mode for Cursor**:\n\n```bash\n./run.sh --transport sse --port 8000  \n\n```\nOR \n\n```bash\npython main.py --transport sse --port 8000\n```\n\nOnce the server has started Go to Cursor Settings > MCP > Add new Global MCP Server\n\nPaste the following in the JSON\n```\n{\n  \"mcpServers\": {\n    \"jira\": {\n      \"url\": \"http://localhost:8000/sse\",\n      \"env\": {\n        \"JIRA_URL\": \"YOUR_JIRA_URL\",\n        \"JIRA_USERNAME\": \"YOUR_JIRA_USERNAME\",\n        \"JIRA_API_TOKEN\": \"YOUR_JIRA_API_TOKEN\"\n      }\n    }\n  }\n}\n```\n\n## Available Tools\n\n### 1. Fetch Ticket Details\n\nFetches detailed information about a Jira ticket.\n\n**Input Schema:**\n```json\n{\n    \"ticketKey\": \"string\",  // Required: Jira ticket key (e.g., PROJ-123)\n    \"includeComments\": \"boolean\",  // Optional: Whether to include comments, default true\n    \"includeAttachments\": \"boolean\"  // Optional: Whether to include attachments, default true\n}\n```\n\n**Response:**\nReturns a JSON object containing:\n- Basic ticket information (key, summary, description, status, etc.)\n- Custom fields\n- Comments (if requested)\n- Attachments (if requested)\n\n### 2. Search Tickets\n\nSearches for Jira tickets using JQL (Jira Query Language).\n\n**Input Schema:**\n```json\n{\n    \"jql\": \"string\",  // Required: JQL query string\n    \"maxResults\": \"integer\"  // Optional: Maximum number of results (default: 50)\n}\n```\n\n**Response:**\nReturns an array of ticket summaries containing:\n- Ticket key\n- Summary\n- Status\n- Assignee\n- Priority\n\n## Features\n\n- Comprehensive Jira ticket data retrieval\n- Support for custom fields\n- JQL-based ticket searching\n- Optional inclusion of comments and attachments\n- Error handling and validation\n- Multiple transport options (stdio/SSE) "
}