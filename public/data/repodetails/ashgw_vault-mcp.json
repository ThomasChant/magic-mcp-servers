{
  "mcp_name": "ashgw/vault-mcp",
  "mcp_description": "Facilitates secure interaction with HashiCorp Vault for secret and policy management through a Model Context Protocol server.",
  "mcp_id": "ashgw_vault-mcp",
  "fetch_timestamp": "2025-06-23T01:19:09.190613Z",
  "github_url": "https://github.com/ashgw/vault-mcp",
  "repository": {
    "name": "vault-mcp",
    "full_name": "ashgw/vault-mcp",
    "description": "Model Context Protocol (MCP) Server for HashiCorp Vault secret management",
    "html_url": "https://github.com/ashgw/vault-mcp",
    "created_at": "2025-04-12T18:00:03Z",
    "updated_at": "2025-04-29T09:19:19Z",
    "pushed_at": "2025-04-16T00:34:19Z",
    "size": 1533,
    "stargazers_count": 2,
    "watchers_count": 2,
    "forks_count": 0,
    "open_issues_count": 1,
    "language": "TypeScript",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "ashgw",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/126174609?v=4",
      "html_url": "https://github.com/ashgw"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "TypeScript": 12319,
      "Dockerfile": 166
    },
    "language_percentages": {
      "TypeScript": 98.67,
      "Dockerfile": 1.33
    },
    "pull_requests_count": 1,
    "contributors_count": 1,
    "package_json_version": "1.0.0"
  },
  "readme": "# HashiCorp Vault MCP Server\n\nA Model Context Protocol (MCP) server implementation that provides a secure interface to HashiCorp Vault which enables LLMs and other MCP clients to interact with Vault's secret and policy management features.\n\n## Overview\n\nThis allows you to prompt an LLM to:\n\n- Secure secret management through structured API\n- Policy creation and management\n- Resource discovery and listing\n- Automated policy generation\n\n## Installation\n\nThere are multiple ways to use this server depending on your setup.\n\n### Cursor (recommended)\n\nAdd this to your Cursor MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"Vault MCP\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"VAULT_ADDR=https://your-vault-server:8200\",\n        \"-e\",\n        \"VAULT_TOKEN=hvs.your-vault-token\",\n        \"ashgw/vault-mcp:latest\"\n      ]\n    }\n  }\n}\n```\n\n> If you prefer pinning to a specific docker image build (e.g. 20250413-165732), use that tag instead of latest. Browse available versions on [Docker Hub](https://hub.docker.com/r/ashgw/vault-mcp/tags).\n\nOnce added, you can use prompts like:\n\n> \"Read the secret at path `apps/myapp/config` from Vault\"\n\nCursor will route that request through the MCP server automatically.\n\nCheck if it works, it should be green\n\n![image](https://github.com/user-attachments/assets/74bb2f65-99ce-46b9-944f-c10a365ab53f)\n\n---\n\n### Docker (manual)\n\nYou can run Vault MCP manually via Docker:\n\n```bash\ndocker run -d \\\n  --name vault-mcp \\\n  -e VAULT_ADDR=https://your-vault-server:8200 \\\n  -e VAULT_TOKEN=hvs.your-vault-token \\\n  -p 3000:3000 \\\n  ashgw/vault-mcp\n```\n\nThis uses the pre-built image published at [ashgw/vault-mcp](https://hub.docker.com/repository/docker/ashgw/vault-mcp).\n\n---\n\n### Repo\n\nClone the repository and `cd` into it, then build with\n\n```\ndocker build -t vault-mcp .\n```\n\nThen run with\n\n```\ndocker run --rm -e VAULT_ADDR=localhost:8200 -e VAULT_TOKEN=hsv.yourtoken vault-mcp\n```\n\n### Environment Variables\n\nThese are required to run the MCP Vault server:\n\n- `VAULT_ADDR`: Your HashiCorp Vault server address\n- `VAULT_TOKEN`: A valid Vault token with read/write permissions\n- `MCP_PORT`: Optional. Defaults to 3000. Not required for Cursor.\n\n---\n\n## Features in Detail\n\n### Secret Management Tools\n\n#### `secret_create`\n\nCreates or updates a secret at specified path.\n\n```ts\nawait tool(\"secret_create\", {\n  path: \"apps/myapp/config\",\n  data: {\n    apiKey: \"secret-key-123\",\n    environment: \"production\",\n  },\n});\n```\n\n#### `secret_read`\n\nRetrieves a secret from specified path.\n\n```ts\nawait tool(\"secret_read\", {\n  path: \"apps/myapp/config\",\n});\n```\n\n#### `secret_delete`\n\nSoft-deletes a secret (versioned delete in KV v2).\n\n```ts\nawait tool(\"secret_delete\", {\n  path: \"apps/myapp/config\",\n});\n```\n\n---\n\n### Policy Management\n\n#### `policy_create`\n\nCreates a new Vault policy with specified permissions.\n\n```ts\nawait tool(\"policy_create\", {\n  name: \"app-readonly\",\n  policy: `\n    path \"secret/data/apps/myapp/*\" {\n      capabilities = [\"read\", \"list\"]\n    }\n  `,\n});\n```\n\n---\n\n### Resources\n\n#### `vault://secrets`\n\nLists all available secret paths in the KV store.\n\n```json\n{\n  \"keys\": [\"apps/\", \"databases/\", \"certificates/\"]\n}\n```\n\n#### `vault://policies`\n\nLists all available Vault policies.\n\n```json\n{\n  \"policies\": [\"default\", \"app-readonly\", \"admin\"]\n}\n```\n\n---\n\n### Prompts\n\n#### `generate_policy`\n\nGenerates a Vault policy from path and capabilities.\n\n```ts\nawait prompt(\"generate_policy\", {\n  path: \"secret/data/apps/*\",\n  capabilities: \"read,list\",\n});\n```\n\nReturns:\n\n```json\n{\n  \"path\": {\n    \"secret/data/apps/*\": {\n      \"capabilities\": [\"read\", \"list\"]\n    }\n  }\n}\n```\n\n---\n\n## License\n\n[MIT](/LICENSE)\n"
}