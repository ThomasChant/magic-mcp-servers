{
  "mcp_name": "isseikz/mcp-adb",
  "mcp_description": "Facilitates AI assistant interaction with Android devices via ADB, enabling screenshot capture, key event control, and device management.",
  "mcp_id": "isseikz_mcp-adb",
  "fetch_timestamp": "2025-06-23T05:03:07.600909Z",
  "github_url": "https://github.com/isseikz/mcp-adb",
  "repository": {
    "name": "mcp-adb",
    "full_name": "isseikz/mcp-adb",
    "description": "MCP (Model Context Protocol) Server to control Android TV",
    "html_url": "https://github.com/isseikz/mcp-adb",
    "created_at": "2025-04-09T16:55:50Z",
    "updated_at": "2025-04-12T04:58:10Z",
    "pushed_at": "2025-04-12T04:58:06Z",
    "size": 24,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 1,
    "language": "JavaScript",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "isseikz",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/14265239?v=4",
      "html_url": "https://github.com/isseikz"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 11076
    },
    "language_percentages": {
      "JavaScript": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "1.0.0"
  },
  "readme": "[日本語](README.ja.md)\n\n# MCP-ADB\n\nA Model Context Protocol (MCP) server that provides integration with Android Debug Bridge (ADB) for AI assistants to interact with Android devices.\n\n## Features\n\n- **Screenshot Capture**: Take screenshots of connected Android devices with automatic resizing\n- **Base64 Image Data**: Receive screenshot data directly as base64-encoded strings\n- **Key Event Control**: Send key events to Android devices (navigation, back, home)\n- **Multiple Device Support**: Target specific devices when multiple devices are connected\n- **Device Listing**: List all connected Android devices as resources\n- **Resource Access**: Access screenshots and device information via resource URIs\n\n## Prerequisites\n\n- [Node.js](https://nodejs.org/) (v16 or higher recommended)\n- [Android Debug Bridge (ADB)](https://developer.android.com/studio/command-line/adb) installed and available in PATH or configured via ADB_PATH environment variable\n- Connected Android device(s) with USB debugging enabled\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/isseikz/mcp-adb.git\ncd mcp-adb\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Usage\n\n### Using with Claude Desktop\n\nTo use this MCP server with Claude Desktop add mcp-adb into claude_desktop_config.json, which can be found in the Claude Desktop installation directory or Claude - Settings - Developer - Edit Config\n\nHere is an example of how to configure the `claude_desktop_config.json` file:\n\n````json\n{\n  \"mcpServers\": {\n    \"mcp-adb\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/mcp-adb/build/index.js\"],\n      \"env\": {\n        \"ADB_PATH\": \"/path/to/adb\"\n      }\n    }\n  }\n}\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-adb\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/mcp-adb/build/index.js\"],\n      \"env\": {\n        \"ADB_PATH\": \"/path/to/adb\"\n      }\n    }\n  }\n}\n````\n\n### Available Tools\n\n#### Screenshot Tool\n\nCaptures a screenshot from a connected Android device and automatically resizes it to 640px width.\n\nParameters:\n\n- `deviceId` (optional): Target a specific device when multiple devices are connected\n\nResponse:\n\n- Base64-encoded image data (PNG format) directly in the response\n\nExample:\n\n```json\n{\n  \"name\": \"screenshot\",\n  \"arguments\": {\n    \"deviceId\": \"emulator-5554\"\n  }\n}\n```\n\n#### Press Key Tool\n\nSends a key event to a connected Android device.\n\nParameters:\n\n- `keycode`: The Android key code to send (see list below)\n- `deviceId` (optional): Target a specific device when multiple devices are connected\n\nAvailable keycodes:\n\n- `KEYCODE_DPAD_CENTER` - Center/OK button\n- `KEYCODE_DPAD_DOWN` - Down navigation\n- `KEYCODE_DPAD_UP` - Up navigation\n- `KEYCODE_DPAD_LEFT` - Left navigation\n- `KEYCODE_DPAD_RIGHT` - Right navigation\n- `KEYCODE_DPAD_UP_LEFT` - Diagonal up-left\n- `KEYCODE_DPAD_UP_RIGHT` - Diagonal up-right\n- `KEYCODE_DPAD_DOWN_LEFT` - Diagonal down-left\n- `KEYCODE_DPAD_DOWN_RIGHT` - Diagonal down-right\n- `KEYCODE_BACK` - Back button\n- `KEYCODE_HOME` - Home button\n\nExample:\n\n```json\n{\n  \"name\": \"pressKey\",\n  \"arguments\": {\n    \"keycode\": \"KEYCODE_DPAD_DOWN\",\n    \"deviceId\": \"emulator-5554\"\n  }\n}\n```\n\n### Resources\n\n#### Connected Devices\n\nList all connected Android devices:\n\n```\nadb://devices\n```\n\nResponse:\n\n- A list of connected device IDs\n\n#### Screenshots\n\nAccess a specific screenshot by filename:\n\n```\nadb://screenshots/{filename}\n```\n\nFor example:\n\n```\nadb://screenshots/screenshot-2025-04-10T16-30-48-931Z.png\n```\n\n## Development\n\n### Project Structure\n\n```\nmcp-adb/\n├── src/\n│   └── index.ts    # Main server implementation\n├── build/          # Compiled JavaScript files\n├── temp/           # Temporary directory for screenshots\n├── package.json    # Project dependencies and scripts\n└── tsconfig.json   # TypeScript configuration\n```\n\n### Building\n\n```bash\nnpm run build\n```\n\nThis will compile the TypeScript code to JavaScript in the `build` directory.\n\n## Requirements\n\nThis project uses the following dependencies:\n\n- `@modelcontextprotocol/sdk`: MCP server implementation\n- `fs-extra`: Enhanced file system methods\n- `sips`: Used for image resizing (built into macOS) to reduce context comsumption\n\n## License\n\nMIT\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n"
}