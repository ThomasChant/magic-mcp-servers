{
  "mcp_name": "chigwell/telegram-mcp",
  "mcp_description": "üêç üè† - Telegram API integration for accessing user data, managing dialogs (chats, channels, groups), retrieving messages, sending messages and handling read status.",
  "mcp_id": "chigwell_telegram-mcp",
  "fetch_timestamp": "2025-06-23T02:04:40.050585Z",
  "github_url": "https://github.com/chigwell/telegram-mcp",
  "repository": {
    "name": "telegram-mcp",
    "full_name": "chigwell/telegram-mcp",
    "description": null,
    "html_url": "https://github.com/chigwell/telegram-mcp",
    "created_at": "2025-03-20T14:06:35Z",
    "updated_at": "2025-06-22T22:48:25Z",
    "pushed_at": "2025-05-13T19:04:24Z",
    "size": 1120,
    "stargazers_count": 197,
    "watchers_count": 197,
    "forks_count": 74,
    "open_issues_count": 6,
    "language": "Python",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "chigwell",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/36392751?v=4",
      "html_url": "https://github.com/chigwell"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 74,
    "subscribers_count": 4,
    "languages": {
      "Python": 94607,
      "Dockerfile": 1774
    },
    "language_percentages": {
      "Python": 98.16,
      "Dockerfile": 1.84
    },
    "pull_requests_count": 8,
    "contributors_count": 2,
    "latest_release": {
      "tag_name": "v2.0.2",
      "name": "v2.0.2: Dockerization & CI Enhancements into Telegram MCP Mainline",
      "published_at": "2025-04-24T16:43:09Z",
      "body": "## ‚ú® Key Changes:\r\n- **Dockerfile Added:** A `Dockerfile` has been created using the `python:3.13-alpine` base image, ensuring minimal vulnerabilities and a lightweight build.\r\n- **Docker Compose Integration:** A `docker-compose.yml` file has been included to enable simplified local development setups with support for `.env` configuration.\r\n- **GitHub Actions Workflow:** A new GitHub Actions workflow (`docker-build.yml`) has been implemented to automate Docker image builds and validate `docker-compose.yml` configurations on push/pull requests to `main`.\r\n- **Docker Best Practices:** Updates to the `Dockerfile` include secure configurations and base image pinning.\r\n\r\n## üöÄ Usage Instructions:\r\n- **Build the image locally:**\r\n  ```bash\r\n  docker build -t telegram-mcp:latest .\r\n```",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v2.0.2",
        "commit_sha": "bb464e52fa762f64227edd6578b0175d70bf1bf3"
      },
      {
        "name": "v2.0.1",
        "commit_sha": "10ff5b79b0af214331e8ec40648bbf224080610c"
      },
      {
        "name": "v2.0.0",
        "commit_sha": "e3842dade91472f2cf0e643b23ffc592d28fb374"
      }
    ],
    "latest_version": "v2.0.2"
  },
  "readme": "# Telegram MCP Server\n\n![MCP Badge](https://badge.mcpx.dev)\n[![License: Apache 2.0](https://img.shields.io/badge/license-Apache%202.0-green?style=flat-square)](https://opensource.org/licenses/Apache-2.0)\n[![Python Lint & Format Check](https://github.com/chigwell/telegram-mcp/actions/workflows/python-lint-format.yml/badge.svg)](https://github.com/chigwell/telegram-mcp/actions/workflows/python-lint-format.yml)\n[![Docker Build & Compose Validation](https://github.com/chigwell/telegram-mcp/actions/workflows/docker-build.yml/badge.svg)](https://github.com/chigwell/telegram-mcp/actions/workflows/docker-build.yml)\n\n---\n\n## ü§ñ MCP in Action\n\nHere's a demonstration of the Telegram MCP capabilities in [Claude](https://docs.anthropic.com/en/docs/agents-and-tools/mcp):\n\n **Basic usage example:**\n\n![Telegram MCP in action](screenshots/1.png)\n\n1. **Example: Asking Claude to analyze chat history and send a response:**\n\n![Telegram MCP Request](screenshots/2.png)\n\n2. **Successfully sent message to the group:**\n\n![Telegram MCP Result](screenshots/3.png)\n\nAs you can see, the AI can seamlessly interact with your Telegram account, retrieving and displaying your chats, messages, and other data in a natural way.\n\n---\n\nA full-featured Telegram integration for Claude, Cursor, and any MCP-compatible client, powered by [Telethon](https://docs.telethon.dev/) and the [Model Context Protocol (MCP)](https://modelcontextprotocol.io/). This project lets you interact with your Telegram account programmatically, automating everything from messaging to group management.\n\n\n---\n\n## üöÄ Features & Tools\n\nThis MCP server exposes a huge suite of Telegram tools. **Every major Telegram/Telethon feature is available as a tool!**\n\n### Chat & Group Management\n- **get_chats(page, page_size)**: Paginated list of chats\n- **list_chats(chat_type, limit)**: List chats with metadata and filtering\n- **get_chat(chat_id)**: Detailed info about a chat\n- **create_group(title, user_ids)**: Create a new group\n- **create_channel(title, about, megagroup)**: Create a channel or supergroup\n- **edit_chat_title(chat_id, title)**: Change chat/group/channel title\n- **delete_chat_photo(chat_id)**: Remove chat/group/channel photo\n- **leave_chat(chat_id)**: Leave a group or channel\n- **get_participants(chat_id)**: List all participants\n- **get_admins(chat_id)**: List all admins\n- **get_banned_users(chat_id)**: List all banned users\n- **promote_admin(chat_id, user_id)**: Promote user to admin\n- **demote_admin(chat_id, user_id)**: Demote admin to user\n- **ban_user(chat_id, user_id)**: Ban user\n- **unban_user(chat_id, user_id)**: Unban user\n- **get_invite_link(chat_id)**: Get invite link\n- **export_chat_invite(chat_id)**: Export invite link\n- **import_chat_invite(hash)**: Join chat by invite hash\n- **join_chat_by_link(link)**: Join chat by invite link\n\n### Messaging\n- **get_messages(chat_id, page, page_size)**: Paginated messages\n- **list_messages(chat_id, limit, search_query, from_date, to_date)**: Filtered messages\n- **send_message(chat_id, message)**: Send a message\n- **reply_to_message(chat_id, message_id, text)**: Reply to a message\n- **edit_message(chat_id, message_id, new_text)**: Edit your message\n- **delete_message(chat_id, message_id)**: Delete a message\n- **forward_message(from_chat_id, message_id, to_chat_id)**: Forward a message\n- **pin_message(chat_id, message_id)**: Pin a message\n- **unpin_message(chat_id, message_id)**: Unpin a message\n- **mark_as_read(chat_id)**: Mark all as read\n- **get_message_context(chat_id, message_id, context_size)**: Context around a message\n- **get_history(chat_id, limit)**: Full chat history\n- **get_pinned_messages(chat_id)**: List pinned messages\n- **get_last_interaction(contact_id)**: Most recent message with a contact\n\n### Contact Management\n- **list_contacts()**: List all contacts\n- **search_contacts(query)**: Search contacts\n- **add_contact(phone, first_name, last_name)**: Add a contact\n- **delete_contact(user_id)**: Delete a contact\n- **block_user(user_id)**: Block a user\n- **unblock_user(user_id)**: Unblock a user\n- **import_contacts(contacts)**: Bulk import contacts\n- **export_contacts()**: Export all contacts as JSON\n- **get_blocked_users()**: List blocked users\n- **get_contact_ids()**: List all contact IDs\n- **get_direct_chat_by_contact(contact_query)**: Find direct chat with a contact\n- **get_contact_chats(contact_id)**: List all chats with a contact\n\n### User & Profile\n- **get_me()**: Get your user info\n- **update_profile(first_name, last_name, about)**: Update your profile\n- **delete_profile_photo()**: Remove your profile photo\n- **get_user_photos(user_id, limit)**: Get a user's profile photos\n- **get_user_status(user_id)**: Get a user's online status\n\n### Media\n- **get_media_info(chat_id, message_id)**: Get info about media in a message\n\n### Search & Discovery\n- **search_public_chats(query)**: Search public chats/channels/bots\n- **search_messages(chat_id, query, limit)**: Search messages in a chat\n- **resolve_username(username)**: Resolve a username to ID\n\n### Stickers, GIFs, Bots\n- **get_sticker_sets()**: List sticker sets\n- **get_bot_info(bot_username)**: Get info about a bot\n- **set_bot_commands(bot_username, commands)**: Set bot commands (bot accounts only)\n\n### Privacy, Settings, and Misc\n- **get_privacy_settings()**: Get privacy settings\n- **set_privacy_settings(key, allow_users, disallow_users)**: Set privacy settings\n- **mute_chat(chat_id)**: Mute notifications\n- **unmute_chat(chat_id)**: Unmute notifications\n- **archive_chat(chat_id)**: Archive a chat\n- **unarchive_chat(chat_id)**: Unarchive a chat\n- **get_recent_actions(chat_id)**: Get recent admin actions\n\n## Removed Functionality\n\nPlease note that tools requiring direct file path access on the server (`send_file`, `download_media`, `set_profile_photo`, `edit_chat_photo`, `send_voice`, `send_sticker`, `upload_file`) have been removed from `main.py`. This is due to limitations in the current MCP environment regarding handling file attachments and local file system paths.\n\nAdditionally, GIF-related tools (`get_gif_search`, `get_saved_gifs`, `send_gif`) have been removed due to ongoing issues with reliability in the Telethon library or Telegram API interactions.\n\n---\n\n## üìã Requirements\n- Python 3.10+\n- [Telethon](https://docs.telethon.dev/)\n- [MCP Python SDK](https://modelcontextprotocol.io/docs/)\n- [Claude Desktop](https://claude.ai/desktop) or [Cursor](https://cursor.so/) (or any MCP client)\n\n---\n\n## üîß Installation & Setup\n\n### 1. Fork & Clone\n\n```bash\ngit clone https://github.com/chigwell/telegram-mcp.git\ncd telegram-mcp\n```\n\n### 2. Create a Virtual Environment\n\n```bash\npython3 -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\npip install -r requirements.txt\n```\n\n### 3. Generate a Session String\n\n```bash\npython3 session_string_generator.py\n```\nFollow the prompts to authenticate and update your `.env` file.\n\n### 4. Configure .env\n\nCopy `.env.example` to `.env` and fill in your values:\n\n```\nTELEGRAM_API_ID=your_api_id_here\nTELEGRAM_API_HASH=your_api_hash_here\nTELEGRAM_SESSION_NAME=anon\nTELEGRAM_SESSION_STRING=your_session_string_here\n```\nGet your API credentials at [my.telegram.org/apps](https://my.telegram.org/apps).\n\n---\n\n## üê≥ Running with Docker\n\nIf you have Docker and Docker Compose installed, you can build and run the server in a container, simplifying dependency management.\n\n### 1. Build the Image\n\nFrom the project root directory, build the Docker image:\n\n```bash\ndocker build -t telegram-mcp:latest .\n```\n\n### 2. Running the Container\n\nYou have two options:\n\n**Option A: Using Docker Compose (Recommended for Local Use)**\n\nThis method uses the `docker-compose.yml` file and automatically reads your credentials from a `.env` file.\n\n1.  **Create `.env` File:** Ensure you have a `.env` file in the project root containing your `TELEGRAM_API_ID`, `TELEGRAM_API_HASH`, and `TELEGRAM_SESSION_STRING` (or `TELEGRAM_SESSION_NAME`). Use `.env.example` as a template.\n2.  **Run Compose:**\n    ```bash\n    docker compose up --build\n    ```\n    *   Use `docker compose up -d` to run in detached mode (background).\n    *   Press `Ctrl+C` to stop the server.\n\n**Option B: Using `docker run`**\n\nYou can run the container directly, passing credentials as environment variables.\n\n```bash\ndocker run -it --rm \\\n  -e TELEGRAM_API_ID=\"YOUR_API_ID\" \\\n  -e TELEGRAM_API_HASH=\"YOUR_API_HASH\" \\\n  -e TELEGRAM_SESSION_STRING=\"YOUR_SESSION_STRING\" \\\n  telegram-mcp:latest\n```\n*   Replace placeholders with your actual credentials.\n*   Use `-e TELEGRAM_SESSION_NAME=your_session_file_name` instead of `TELEGRAM_SESSION_STRING` if you prefer file-based sessions (requires volume mounting, see `docker-compose.yml` for an example).\n*   The `-it` flags are crucial for interacting with the server.\n\n---\n\n## ‚öôÔ∏è Configuration for Claude & Cursor\n\n### MCP Configuration\nEdit your Claude desktop config (e.g. `~/Library/Application Support/Claude/claude_desktop_config.json`) or Cursor config (`~/.cursor/mcp.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"telegram-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/full/path/to/telegram-mcp\",\n        \"run\",\n        \"main.py\"\n      ]\n    }\n  }\n}\n```\n\n## üìù Tool Examples with Code & Output\n\nBelow are examples of the most commonly used tools with their implementation and sample output.\n\n### Getting Your Chats\n\n```python\n@mcp.tool()\nasync def get_chats(page: int = 1, page_size: int = 20) -> str:\n    \"\"\"\n    Get a paginated list of chats.\n    Args:\n        page: Page number (1-indexed).\n        page_size: Number of chats per page.\n    \"\"\"\n    try:\n        dialogs = await client.get_dialogs()\n        start = (page - 1) * page_size\n        end = start + page_size\n        if start >= len(dialogs):\n            return \"Page out of range.\"\n        chats = dialogs[start:end]\n        lines = []\n        for dialog in chats:\n            entity = dialog.entity\n            chat_id = entity.id\n            title = getattr(entity, \"title\", None) or getattr(entity, \"first_name\", \"Unknown\")\n            lines.append(f\"Chat ID: {chat_id}, Title: {title}\")\n        return \"\\n\".join(lines)\n    except Exception as e:\n        logger.exception(f\"get_chats failed (page={page}, page_size={page_size})\")\n        return \"An error occurred (code: GETCHATS-ERR-001). Check mcp_errors.log for details.\"\n```\n\nExample output:\n```\nChat ID: 123456789, Title: John Doe\nChat ID: -100987654321, Title: My Project Group\nChat ID: 111223344, Title: Jane Smith\nChat ID: -200123456789, Title: News Channel\n```\n\n### Sending Messages\n\n```python\n@mcp.tool()\nasync def send_message(chat_id: int, message: str) -> str:\n    \"\"\"\n    Send a message to a specific chat.\n    Args:\n        chat_id: The ID of the chat.\n        message: The message content to send.\n    \"\"\"\n    try:\n        entity = await client.get_entity(chat_id)\n        await client.send_message(entity, message)\n        return \"Message sent successfully.\"\n    except Exception as e:\n        logger.exception(f\"send_message failed (chat_id={chat_id})\")\n        return \"An error occurred (code: SENDMSG-ERR-001). Check mcp_errors.log for details.\"\n```\n\nExample output:\n```\nMessage sent successfully.\n```\n\n### Getting Chat Invite Links\n\nThe `get_invite_link` function is particularly robust with multiple fallback methods:\n\n```python\n@mcp.tool()\nasync def get_invite_link(chat_id: int) -> str:\n    \"\"\"\n    Get the invite link for a group or channel.\n    \"\"\"\n    try:\n        entity = await client.get_entity(chat_id)\n        \n        # Try using ExportChatInviteRequest first\n        try:\n            from telethon.tl import functions\n            result = await client(functions.messages.ExportChatInviteRequest(\n                peer=entity\n            ))\n            return result.link\n        except AttributeError:\n            # If the function doesn't exist in the current Telethon version\n            logger.warning(\"ExportChatInviteRequest not available, using alternative method\")\n        except Exception as e1:\n            # If that fails, log and try alternative approach\n            logger.warning(f\"ExportChatInviteRequest failed: {e1}\")\n            \n        # Alternative approach using client.export_chat_invite_link\n        try:\n            invite_link = await client.export_chat_invite_link(entity)\n            return invite_link\n        except Exception as e2:\n            logger.warning(f\"export_chat_invite_link failed: {e2}\")\n            \n        # Last resort: Try directly fetching chat info\n        try:\n            if isinstance(entity, (Chat, Channel)):\n                full_chat = await client(functions.messages.GetFullChatRequest(\n                    chat_id=entity.id\n                ))\n                if hasattr(full_chat, 'full_chat') and hasattr(full_chat.full_chat, 'invite_link'):\n                    return full_chat.full_chat.invite_link or \"No invite link available.\"\n        except Exception as e3:\n            logger.warning(f\"GetFullChatRequest failed: {e3}\")\n            \n        return \"Could not retrieve invite link for this chat.\"\n    except Exception as e:\n        logger.exception(f\"get_invite_link failed (chat_id={chat_id})\")\n        return f\"Error getting invite link: {e}\"\n```\n\nExample output:\n```\nhttps://t.me/+AbCdEfGhIjKlMnOp\n```\n\n### Joining Chats via Invite Links\n\n```python\n@mcp.tool()\nasync def join_chat_by_link(link: str) -> str:\n    \"\"\"\n    Join a chat by invite link.\n    \"\"\"\n    try:\n        # Extract the hash from the invite link\n        if '/' in link:\n            hash_part = link.split('/')[-1]\n            if hash_part.startswith('+'):\n                hash_part = hash_part[1:]  # Remove the '+' if present\n        else:\n            hash_part = link\n            \n        # Try checking the invite before joining\n        try:\n            # Try to check invite info first (will often fail if not a member)\n            invite_info = await client(functions.messages.CheckChatInviteRequest(hash=hash_part))\n            if hasattr(invite_info, 'chat') and invite_info.chat:\n                # If we got chat info, we're already a member\n                chat_title = getattr(invite_info.chat, 'title', 'Unknown Chat')\n                return f\"You are already a member of this chat: {chat_title}\"\n        except Exception:\n            # This often fails if not a member - just continue\n            pass\n            \n        # Join the chat using the hash\n        result = await client(functions.messages.ImportChatInviteRequest(hash=hash_part))\n        if result and hasattr(result, 'chats') and result.chats:\n            chat_title = getattr(result.chats[0], 'title', 'Unknown Chat')\n            return f\"Successfully joined chat: {chat_title}\"\n        return f\"Joined chat via invite hash.\"\n    except Exception as e:\n        err_str = str(e).lower()\n        if \"expired\" in err_str:\n            return \"The invite hash has expired and is no longer valid.\"\n        elif \"invalid\" in err_str:\n            return \"The invite hash is invalid or malformed.\"\n        elif \"already\" in err_str and \"participant\" in err_str:\n            return \"You are already a member of this chat.\"\n        logger.exception(f\"join_chat_by_link failed (link={link})\")\n        return f\"Error joining chat: {e}\"\n```\n\nExample output:\n```\nSuccessfully joined chat: Developer Community\n```\n\n### Searching Public Chats\n\n```python\n@mcp.tool()\nasync def search_public_chats(query: str) -> str:\n    \"\"\"\n    Search for public chats, channels, or bots by username or title.\n    \"\"\"\n    try:\n        result = await client(functions.contacts.SearchRequest(q=query, limit=20))\n        return json.dumps([format_entity(u) for u in result.users], indent=2)\n    except Exception as e:\n        return f\"Error searching public chats: {e}\"\n```\n\nExample output:\n```json\n[\n  {\n    \"id\": 123456789,\n    \"name\": \"TelegramBot\",\n    \"type\": \"user\",\n    \"username\": \"telegram_bot\"\n  },\n  {\n    \"id\": 987654321,\n    \"name\": \"Telegram News\",\n    \"type\": \"user\",\n    \"username\": \"telegram_news\"\n  }\n]\n```\n\n### Getting Direct Chats with Contacts\n\n```python\n@mcp.tool()\nasync def get_direct_chat_by_contact(contact_query: str) -> str:\n    \"\"\"\n    Find a direct chat with a specific contact by name, username, or phone.\n    \n    Args:\n        contact_query: Name, username, or phone number to search for.\n    \"\"\"\n    try:\n        # Fetch all contacts using the correct Telethon method\n        result = await client(functions.contacts.GetContactsRequest(hash=0))\n        contacts = result.users\n        found_contacts = []\n        for contact in contacts:\n            if not contact:\n                continue\n            name = f\"{getattr(contact, 'first_name', '')} {getattr(contact, 'last_name', '')}\".strip()\n            username = getattr(contact, 'username', '')\n            phone = getattr(contact, 'phone', '')\n            if (contact_query.lower() in name.lower() or \n                (username and contact_query.lower() in username.lower()) or \n                (phone and contact_query in phone)):\n                found_contacts.append(contact)\n        if not found_contacts:\n            return f\"No contacts found matching '{contact_query}'.\"\n        # If we found contacts, look for direct chats with them\n        results = []\n        dialogs = await client.get_dialogs()\n        for contact in found_contacts:\n            contact_name = f\"{getattr(contact, 'first_name', '')} {getattr(contact, 'last_name', '')}\".strip()\n            for dialog in dialogs:\n                if isinstance(dialog.entity, User) and dialog.entity.id == contact.id:\n                    chat_info = f\"Chat ID: {dialog.entity.id}, Contact: {contact_name}\"\n                    if getattr(contact, 'username', ''):\n                        chat_info += f\", Username: @{contact.username}\"\n                    if dialog.unread_count:\n                        chat_info += f\", Unread: {dialog.unread_count}\"\n                    results.append(chat_info)\n                    break\n        \n        if not results:\n            return f\"Found contacts matching '{contact_query}', but no direct chats with them.\"\n        \n        return \"\\n\".join(results)\n    except Exception as e:\n        return f\"Error searching for direct chat: {e}\"\n```\n\nExample output:\n```\nChat ID: 123456789, Contact: John Smith, Username: @johnsmith, Unread: 3\n```\n\n---\n\n## üéÆ Usage Examples\n\n- \"Show my recent chats\"\n- \"Send 'Hello world' to chat 123456789\"\n- \"Add contact with phone +1234567890, name John Doe\"\n- \"Create a group 'Project Team' with users 111, 222, 333\"\n- \"Download the media from message 42 in chat 123456789\"\n- \"Mute notifications for chat 123456789\"\n- \"Promote user 111 to admin in group 123456789\"\n- \"Search for public channels about 'news'\"\n- \"Join the Telegram group with invite link https://t.me/+AbCdEfGhIjK\"\n- \"Send a sticker to my Saved Messages\"\n- \"Get all my sticker sets\"\n\nYou can use these tools via natural language in Claude, Cursor, or any MCP-compatible client.\n\n---\n\n## üß† Error Handling & Robustness\n\nThis implementation includes comprehensive error handling:\n\n- **Session management**: Works with both file-based and string-based sessions\n- **Error reporting**: Detailed errors logged to `mcp_errors.log`\n- **Graceful degradation**: Multiple fallback approaches for critical functions\n- **User-friendly messages**: Clear, actionable error messages instead of technical errors\n- **Account type detection**: Functions that require bot accounts detect and notify when used with user accounts\n- **Invite link processing**: Handles various link formats and already-member cases\n\nThe code is designed to be robust against common Telegram API issues and limitations.\n\n---\n\n## üõ†Ô∏è Contribution Guide\n\n1. **Fork this repo:** [chigwell/telegram-mcp](https://github.com/chigwell/telegram-mcp)\n2. **Clone your fork:**\n   ```bash\n   git clone https://github.com/<your-github-username>/telegram-mcp.git\n   ```\n3. **Create a new branch:**\n   ```bash\n   git checkout -b my-feature\n   ```\n4. **Make your changes, add tests/docs if needed.**\n5. **Push and open a Pull Request** to [chigwell/telegram-mcp](https://github.com/chigwell/telegram-mcp) with a clear description.\n6. **Tag @chigwell or @l1v0n1** in your PR for review.\n\n---\n\n## üîí Security Considerations\n- **Never commit your `.env` or session string.**\n- The session string gives full access to your Telegram account‚Äîkeep it safe!\n- All processing is local; no data is sent anywhere except Telegram's API.\n- Use `.env.example` as a template and keep your actual `.env` file private.\n- Test files are automatically excluded in `.gitignore`.\n\n---\n\n## üõ†Ô∏è Troubleshooting\n- **Check logs** in your MCP client (Claude/Cursor) and the terminal for errors.\n- **Detailed error logs** can be found in `mcp_errors.log`.\n- **Interpreter errors?** Make sure your `.venv` is created and selected.\n- **Database lock?** Use session string authentication, not file-based sessions.\n- **iCloud/Dropbox issues?** Move your project to a local path without spaces if you see odd errors.\n- **Regenerate session string** if you change your Telegram password or see auth errors.\n- **Bot-only functions** will show clear messages when used with regular user accounts.\n- **Test script failures?** Check test configuration in `.env` for valid test accounts/groups.\n\n---\n\n## üìÑ License\n\nThis project is licensed under the [Apache 2.0 License](LICENSE).\n\n---\n\n## üôè Acknowledgements\n- [Telethon](https://github.com/LonamiWebs/Telethon)\n- [Model Context Protocol](https://modelcontextprotocol.io/)\n- [Claude](https://www.anthropic.com/) and [Cursor](https://cursor.so/)\n- [chigwell/telegram-mcp](https://github.com/chigwell/telegram-mcp) (upstream)\n\n---\n\n**Maintained by [@chigwell](https://github.com/chigwell) and [@l1v0n1](https://github.com/l1v0n1). PRs welcome!**\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=chigwell/telegram-mcp&type=Date)](https://www.star-history.com/#chigwell/telegram-mcp&Date)\n"
}