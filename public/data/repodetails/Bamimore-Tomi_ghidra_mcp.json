{
  "mcp_name": "Bamimore-Tomi/ghidra_mcp",
  "mcp_description": "Transforms Ghidra into a reverse-engineering backend by extracting decompiled binary data and exposing it to LLMs via MCP.",
  "mcp_id": "Bamimore-Tomi_ghidra_mcp",
  "fetch_timestamp": "2025-06-23T01:33:42.441105Z",
  "github_url": "https://github.com/Bamimore-Tomi/ghidra_mcp",
  "repository": {
    "name": "ghidra_mcp",
    "full_name": "Bamimore-Tomi/ghidra_mcp",
    "description": "Ghidra MCP server that extracts decompiled binary context and exposes it to LLMs via Model Context Protocol.",
    "html_url": "https://github.com/Bamimore-Tomi/ghidra_mcp",
    "created_at": "2025-04-12T02:31:40Z",
    "updated_at": "2025-06-15T17:31:33Z",
    "pushed_at": "2025-04-12T07:06:24Z",
    "size": 879,
    "stargazers_count": 4,
    "watchers_count": 4,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "Bamimore-Tomi",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/57571280?v=4",
      "html_url": "https://github.com/Bamimore-Tomi"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "Python": 11214,
      "C": 1397,
      "Shell": 524
    },
    "language_percentages": {
      "Python": 85.37,
      "C": 10.64,
      "Shell": 3.99
    },
    "pull_requests_count": 0,
    "contributors_count": 1
  },
  "readme": "# üîç Ghidra MCP Server\n\nThis project lets you use [Ghidra](https://ghidra-sre.org/) in headless mode to extract rich binary analysis data (functions, pseudocode, structs, enums, etc.) into a JSON file, and expose it to LLMs like Claude via [Model Context Protocol (MCP)](https://modelcontextprotocol.io/).\n\nIt turns Ghidra into an interactive reverse-engineering backend.\n\n---\n\n## üöÄ Features\n\n- Decompiles a binary using Ghidra headless mode\n- Extracts:\n  - Function pseudocode, names, parameters, variables, strings, comments\n  - Data structures (structs), enums, and function definitions\n- Outputs to `ghidra_context.json`\n- MCP server exposes tools like:\n  - `list_functions()`, `get_pseudocode(name)`\n  - `list_structures()`, `get_structure(name)`\n  - `list_enums()`, `get_enum(name)`\n  - `list_function_definitions()`, `get_function_definition(name)`\n\n---\n\n## ‚öôÔ∏è System Requirements\n\n- macOS (tested)\n- Python 3.10+\n- Ghidra 11.3.1+\n- Java 21 (Temurin preferred)\n- MCP client (e.g. Claude Desktop)\n- [`mcp` CLI](https://modelcontextprotocol.io/docs/cli) (install via `pip install mcp`)\n\n---\n\n## üß™ Installation & Setup\n\n### ‚úÖ 1. Install Java 21 (REQUIRED by Ghidra 11.3.1)\n\n```bash\nbrew install --cask temurin@21\n```\n\nThen set it:\n\n```bash\nexport JAVA_HOME=$(/usr/libexec/java_home -v 21)\necho 'export JAVA_HOME=$(/usr/libexec/java_home -v 21)' >> ~/.zshrc\nsource ~/.zshrc\n```\n\nCheck it:\n\n```bash\njava -version\n```\n\nShould say: `openjdk version \"21.0.x\"...`\n\n---\n\n### ‚úÖ 2. Install Ghidra\n\nDownload and extract [Ghidra 11.3.1](https://ghidra-sre.org/)\n\n---\n\n### ‚úÖ 3. Set up the project\n\n```bash\ncd ghidra_mcp\ngcc -Wall crackme.c -o crackme\n```\n\n---\n\n### ‚úÖ 4. Install the server via MCP CLI\n\n```bash\nmcp install main.py\n```\n\nThis registers the MCP server so Claude or other clients can access it.\n\n---\n\n### ‚úÖ 5. Run in dev mode (for testing)\n\n```bash\nmcp dev main.py\n```\n\nThis enables hot reload and developer logs.\n\n---\n\n## üõ∞Ô∏è Tools Available\n\n| Tool                         | Description                                |\n|------------------------------|--------------------------------------------|\n| `setup_context(...)`         | Run Ghidra on a binary                     |\n| `list_functions()`           | All functions                             |\n| `get_pseudocode(name)`       | Decompiled pseudocode                     |\n| `list_structures()`          | All structs                               |\n| `get_structure(name)`        | Details of a struct                       |\n| `list_enums()`               | All enums                                 |\n| `get_enum(name)`             | Enum values                               |\n| `list_function_definitions()`| All function prototypes                   |\n| `get_function_definition()`  | Return type & args                        |\n\n---\n\n## Sample Promot\nAnalyze the binary file located at <BINARY_PATH> using Ghidra installed at <GHIDRA_PATH>. First, set up the analysis context using both paths, then list all functions in the binary. Examine the main entry point function and provide a high-level overview of what the program does.\n\n## üß† Common Issues & Fixes\n\n### ‚ùå Ghidra fails with ‚Äúunsupported Java version‚Äù\n\n‚û°Ô∏è Fix: Install **Java 21**, not 17 or 24:\n\n```bash\nbrew install --cask temurin@21\nexport JAVA_HOME=$(/usr/libexec/java_home -v 21)\n```\n\n---\n\n### ‚ùå `spawn uv ENOENT` (Claude Desktop can't find your UV binary)\n\n‚û°Ô∏è Claude can't locate `uv` by name. To fix:\n\n1. Run in your terminal:\n\n```bash\nwhich uv\n```\n\nExample output:\n\n```\n/Users/yourname/.cargo/bin/uv\n```\n\n2. Open your Claude Desktop config file:\n\n```bash\nopen ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n3. Update it like so:\n\n```json\n{\n  \"mcpServers\": {\n    \"ghidra\": {\n      \"command\": \"/Users/yourname/.cargo/bin/uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/yourname/Documents/ghidra_mcp\",\n        \"run\",\n        \"main.py\"\n      ]\n    }\n  }\n}\n```\n\n4. Restart Claude Desktop. You should now see your custom MCP tools.\n\n---\n\n### ‚ùå `The operation couldn‚Äôt be completed. Unable to locate a Java Runtime.`\n\n‚û°Ô∏è Fix: Java not installed or `JAVA_HOME` is unset. Follow setup instructions above.\n\n---\n\n## üìÇ Project Structure\n\n| File                | Purpose                          |\n|---------------------|----------------------------------|\n| `main.py`           | MCP server with tools            |\n| `export_context.py` | Ghidra script that extracts JSON |\n| `crackme.c`         | Sample C binary                  |\n| `crackme`           | Compiled binary to test          |\n\n---\n\n## üë®‚Äçüíª Author\n\nTomi Bamimore  \n[Ghidra](https://ghidra-sre.org/) by the NSA  \n[MCP](https://modelcontextprotocol.io/) by Anthropic\n"
}