{
  "mcp_name": "LuizBranco-ClickHype/VPS-MCP-SERVER",
  "mcp_description": "Automates the setup and management of MCP servers for infrastructure management using natural language commands.",
  "mcp_id": "LuizBranco-ClickHype_VPS-MCP-SERVER",
  "fetch_timestamp": "2025-06-23T06:17:50.390500Z",
  "github_url": "https://github.com/LuizBranco-ClickHype/VPS-MCP-SERVER",
  "repository": {
    "name": "VPS-MCP-SERVER",
    "full_name": "LuizBranco-ClickHype/VPS-MCP-SERVER",
    "description": "Servidor VPS MCP para gerenciamento de projetos",
    "html_url": "https://github.com/LuizBranco-ClickHype/VPS-MCP-SERVER",
    "created_at": "2025-04-23T02:10:26Z",
    "updated_at": "2025-04-23T05:55:09Z",
    "pushed_at": "2025-04-23T05:55:06Z",
    "size": 60,
    "stargazers_count": 0,
    "watchers_count": 0,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Shell",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "LuizBranco-ClickHype",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/194565187?v=4",
      "html_url": "https://github.com/LuizBranco-ClickHype"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "Shell": 93358
    },
    "language_percentages": {
      "Shell": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "1.0.0"
  },
  "readme": "# VPS MCP SERVER - Automação para Servidores MCP\n\nSistema de automação para configuração de servidores com suporte ao [Model Context Protocol (MCP)](https://docs.cursor.com/context/model-context-protocol) que permite que assistentes AI (como Cursor AI) gerenciem sua infraestrutura através de comandos em linguagem natural.\n\n## 🌟 Visão Geral\n\nEste projeto oferece scripts para configurar rapidamente servidores MCP com as seguintes opções:\n\n1. **Configuração de Servidor Único**: Tudo em um só servidor (MCP Server, aplicações, bancos de dados e armazenamento de objetos)\n2. **Configuração de Dois Servidores**:\n   - **Servidor de Aplicações**: MCP Server e aplicações\n   - **Servidor de Banco de Dados**: MCP Server, bancos de dados (PostgreSQL/MySQL) e armazenamento de objetos\n\n## 🚀 Instalação Rápida\n\n### Servidor Único (Tudo em uma VPS)\n  \n```bash\ncurl -fsSL https://raw.githubusercontent.com/LuizBranco-ClickHype/VPS-MCP-SERVER/main/install.sh | bash\n```\n\n### Configuração de Dois Servidores (Duas VPS)\n\n**Na primeira VPS (Servidor de Aplicações)**:\n```bash\ncurl -fsSL https://raw.githubusercontent.com/LuizBranco-ClickHype/VPS-MCP-SERVER/main/install.sh | bash -s -- --mode app\n```\n  \n**Na segunda VPS (Servidor de Banco de Dados)**:\n```bash\ncurl -fsSL https://raw.githubusercontent.com/LuizBranco-ClickHype/VPS-MCP-SERVER/main/install.sh | bash -s -- --mode db\n```\n\n## 💻 Requisitos do Sistema\n  \n- Ubuntu 20.04+ ou Debian 11+\n- Acesso root ou usuário com privilégios sudo\n- Conexão à internet\n- Mínimo 2GB RAM (recomendado 4GB)\n- 20GB de espaço em disco\n\n## 🛠 Recursos\n\n### Serviços MCP Disponíveis\n- **VPS MCP Server**: Gerenciamento central de infraestrutura\n- **PostgreSQL MCP**: Acesso a banco de dados com suporte a vetores para IA\n- **Storage MCP**: Operações de armazenamento compatível com S3\n- **Context7 MCP**: Acesso a documentação e conhecimento externo\n\n### Componentes Integrados\n- **Docker / Docker Compose**: Para containerização dos serviços\n- **PostgreSQL**: Banco de dados com suporte a pgvector para embeddings de IA\n- **MinIO**: Armazenamento de objetos compatível com S3\n- **Context7**: Integração para acesso a documentação e conhecimento externo\n\n### Segurança\n- Firewall configurado (ufw)\n- Tokens de autenticação gerados aleatoriamente\n- Comunicação segura entre servidores\n- Certificados SSL automáticos (Let's Encrypt) quando configurado com domínio\n\n## ⚙️ Opções de Configuração\n\nO script de instalação aceita os seguintes parâmetros:\n\n| Parâmetro | Descrição | Padrão |\n|-----------|-----------|--------|\n| `--mode` | Modo de instalação (`single`, `app`, `db`) | `single` |\n| `--domain` | Domínio para configurar SSL | - |\n| `--email` | Email para certificados Let's Encrypt | - |\n| `--db-type` | Tipo de banco de dados (`postgres`, `mysql`) | `postgres` |\n| `--db-host` | Endereço IP do servidor de banco de dados (para modo `app`) | - |\n| `--app-host` | Endereço IP do servidor de aplicações (para modo `db`) | - |\n| `--port` | Porta para o MCP Server | `3000` |\n| `--help` | Exibe ajuda | - |\n\n## 🌐 Model Context Protocol (MCP)\n\nO [Model Context Protocol (MCP)](https://docs.cursor.com/context/model-context-protocol) é um protocolo aberto que padroniza como aplicativos fornecem contexto e ferramentas para LLMs. Este projeto implementa servidores MCP que podem ser consumidos pelo Cursor AI e outros clientes compatíveis.\n\n### Arquitetura MCP\n\n![Arquitetura MCP](https://docs.cursor.com/img/mcp-architecture.png)\n\nA implementação neste projeto fornece:\n\n1. **Transporte stdio**: Executa em máquina local e é gerenciado pelo Cursor\n2. **Transporte SSE**: Permite execução local ou remota via HTTP\n\n### Configurando o Cursor AI\n\nPara conectar o Cursor AI aos servidores MCP:\n\n1. Crie uma pasta `.cursor` na raiz do seu projeto\n2. Crie um arquivo `mcp.json` com o seguinte conteúdo (ajuste os IPs conforme necessário):\n\n```json\n{\n  \"mcpServers\": {\n    \"vps_mcp_server\": {\n      \"description\": \"Servidor MCP unificado para gerenciamento de infraestrutura\",\n      \"command\": \"bash\",\n      \"args\": [\n        \"./mcp-service.sh\",\n        \"--endpoint\",\n        \"/api/mcp\"\n      ]\n    },\n    \"postgresql\": {\n      \"description\": \"Acesso a banco de dados PostgreSQL com suporte a vetores\",\n      \"command\": \"bash\",\n      \"args\": [\n        \"./mcp-service.sh\",\n        \"--endpoint\",\n        \"/api/postgres\"\n      ]\n    },\n    \"storage\": {\n      \"description\": \"Gerenciamento de armazenamento de objetos S3 compatível\",\n      \"command\": \"bash\",\n      \"args\": [\n        \"./mcp-service.sh\",\n        \"--endpoint\",\n        \"/api/storage\"\n      ]\n    },\n    \"context7\": {\n      \"description\": \"Acesso a documentação e conhecimento via Context7\",\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@upstash/context7-mcp@latest\"]\n    }\n  }\n}\n```\n\n## 📝 Funções Disponíveis\n\nO sistema oferece diversas funções para gerenciamento do servidor:\n\n### Gerenciamento MCP\n```bash\n# Listar serviços MCP disponíveis\n./mcp-service.sh list\n\n# Verificar status dos serviços MCP\n./mcp-service.sh status\n\n# Testar conexão com serviço específico\n./mcp-service.sh test-mcp postgresql\n\n# Ver logs de comunicação MCP\n./mcp-service.sh logs 20\n\n# Iniciar como servidor MCP\n./mcp-service.sh --endpoint /api/mcp\n```\n\n### Banco de Dados\n```bash\n# Configurar PostgreSQL com pgvector\n./postgres-mcp-setup.sh\n\n# Backup de banco de dados\nsource common.sh\nbackup_database\n```\n\n## 🔍 Diagnóstico e Resolução de Problemas\n\nSe você encontrar problemas:\n\n1. Verifique o status dos serviços MCP:\n   ```bash\n   ./mcp-service.sh status\n   ```\n\n2. Verifique os logs específicos:\n   ```bash\n   ./mcp-service.sh logs 50\n   ```\n\n3. Teste a conexão com serviços específicos:\n   ```bash\n   ./mcp-service.sh test-mcp postgresql\n   ./mcp-service.sh test-mcp storage\n   ./mcp-service.sh test-mcp context7\n   ```\n\n## 🔧 Implantação em Produção\n\n### 1. Configuração Inicial do Servidor\n\n1. Atualize o sistema e instale dependências:\n   ```bash\n   apt update && apt upgrade -y\n   apt install -y curl git jq\n   ```\n\n2. Clone o repositório:\n   ```bash\n   git clone https://github.com/LuizBranco-ClickHype/VPS-MCP-SERVER.git\n   cd VPS-MCP-SERVER\n   ```\n\n3. Torne o script executável:\n   ```bash\n   chmod +x mcp-service.sh\n   ```\n\n4. Crie o diretório de logs:\n   ```bash\n   mkdir -p /var/log/vps-mcp\n   touch /var/log/vps-mcp/mcp-communication.log\n   ```\n\n### 2. Configuração do Servidor MCP\n\n1. Edite o arquivo `mcp-model.json` para substituir `IP_DO_SERVIDOR` pelo seu IP público ou domínio:\n   ```bash\n   # Exemplo com sed\n   sed -i 's/IP_DO_SERVIDOR/seu.ip.ou.dominio/g' mcp-model.json\n   ```\n\n2. Instale dependências NPM:\n   ```bash\n   npm install\n   ```\n\n3. Configure o firewall para permitir acesso às portas MCP:\n   ```bash\n   # Se estiver usando ufw\n   ufw allow 3000/tcp  # Porta MCP principal\n   ```\n\n### 3. Configuração para Execução Contínua\n\n1. Crie um serviço systemd para manter o MCP em execução:\n   ```bash\n   cat > /etc/systemd/system/vps-mcp.service << EOF\n   [Unit]\n   Description=VPS MCP Server\n   After=network.target\n\n   [Service]\n   Type=simple\n   User=root\n   WorkingDirectory=/caminho/para/VPS-MCP-SERVER\n   ExecStart=/bin/bash mcp-service.sh --endpoint /api/mcp\n   Restart=on-failure\n   RestartSec=5\n\n   [Install]\n   WantedBy=multi-user.target\n   EOF\n   ```\n\n2. Habilite e inicie o serviço:\n   ```bash\n   systemctl enable vps-mcp\n   systemctl start vps-mcp\n   ```\n\n3. Verifique o status:\n   ```bash\n   systemctl status vps-mcp\n   ```\n\n## 🤝 Contribuições\n\nContribuições são bem-vindas! Para contribuir:\n\n1. Faça um fork do repositório\n2. Crie uma branch para sua feature (`git checkout -b feature/nova-feature`)\n3. Faça commit das suas mudanças (`git commit -m 'Adiciona nova feature'`)\n4. Envie para o GitHub (`git push origin feature/nova-feature`)\n5. Abra um Pull Request\n\n## 📄 Licença\n\nEste projeto está licenciado sob a [Licença MIT](LICENSE)"
}