{
  "mcp_name": "UnitVectorY-Labs/mcp-graphql-forge",
  "mcp_description": "üèéÔ∏è ‚òÅÔ∏è üçé ü™ü üêß - A lightweight, configuration-driven MCP server that exposes curated GraphQL queries as modular tools, enabling intentional API interactions from your agents.",
  "mcp_id": "UnitVectorY-Labs_mcp-graphql-forge",
  "fetch_timestamp": "2025-06-23T09:11:34.237727Z",
  "github_url": "https://github.com/UnitVectorY-Labs/mcp-graphql-forge",
  "repository": {
    "name": "mcp-graphql-forge",
    "full_name": "UnitVectorY-Labs/mcp-graphql-forge",
    "description": "A lightweight, configuration-driven MCP server that exposes curated GraphQL queries as modular tools, enabling intentional API interactions from your agents.",
    "html_url": "https://github.com/UnitVectorY-Labs/mcp-graphql-forge",
    "created_at": "2025-04-22T22:00:12Z",
    "updated_at": "2025-06-19T01:11:32Z",
    "pushed_at": "2025-06-19T01:11:29Z",
    "size": 66,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "Go",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "UnitVectorY-Labs",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/66754856?v=4",
      "html_url": "https://github.com/UnitVectorY-Labs"
    },
    "has_issues": true,
    "has_projects": false,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "Go": 8526
    },
    "language_percentages": {
      "Go": 100
    },
    "pull_requests_count": 14,
    "contributors_count": 2,
    "latest_release": {
      "tag_name": "v0.5.0",
      "name": "v0.5.0",
      "published_at": "2025-06-03T02:07:38Z",
      "body": "## What's Changed\r\n* Bump github.com/mark3labs/mcp-go from 0.25.0 to 0.26.0 by @dependabot in https://github.com/UnitVectorY-Labs/mcp-graphql-forge/pull/6\r\n* Bump github.com/mark3labs/mcp-go from 0.26.0 to 0.27.0 by @dependabot in https://github.com/UnitVectorY-Labs/mcp-graphql-forge/pull/7\r\n* Bump github.com/mark3labs/mcp-go from 0.27.0 to 0.28.0 by @dependabot in https://github.com/UnitVectorY-Labs/mcp-graphql-forge/pull/8\r\n* Bump github.com/mark3labs/mcp-go from 0.28.0 to 0.29.0 by @dependabot in https://github.com/UnitVectorY-Labs/mcp-graphql-forge/pull/9\r\n* Bump github.com/mark3labs/mcp-go from 0.29.0 to 0.31.0 by @dependabot in https://github.com/UnitVectorY-Labs/mcp-graphql-forge/pull/10\r\n* Add support for environment variables passed to token command by @JaredHatfield in https://github.com/UnitVectorY-Labs/mcp-graphql-forge/pull/11\r\n\r\n\r\n**Full Changelog**: https://github.com/UnitVectorY-Labs/mcp-graphql-forge/compare/v0.4.1...v0.5.0",
      "prerelease": false,
      "draft": false
    },
    "tags": [
      {
        "name": "v0.5.0",
        "commit_sha": "65a16b520b2cc8c2132c6002ff51e1d30cb8f777"
      },
      {
        "name": "v0.4.1",
        "commit_sha": "8c44da9d147e4888b880d3ab4b03647ab10f279b"
      },
      {
        "name": "v0.4.0",
        "commit_sha": "6283a3bd1ea7a0eaaa848289cf1dc8ed554a57ac"
      },
      {
        "name": "v0.3.0",
        "commit_sha": "920974b6272df6c4ebdb6731e7fa55543b4b0368"
      },
      {
        "name": "v0.2.0",
        "commit_sha": "5fa5b49ee41e80830acece62e1181d26836ee531"
      },
      {
        "name": "v0.1.0",
        "commit_sha": "fe1646cb39b65cc2caf44739388ac91da399327a"
      }
    ],
    "latest_version": "v0.5.0"
  },
  "readme": "[![GitHub release](https://img.shields.io/github/release/UnitVectorY-Labs/mcp-graphql-forge.svg)](https://github.com/UnitVectorY-Labs/mcp-graphql-forge/releases/latest) [![License](https://img.shields.io/badge/license-MIT-blue)](https://opensource.org/licenses/MIT) [![Active](https://img.shields.io/badge/Status-Active-green)](https://guide.unitvectorylabs.com/bestpractices/status/#active) [![Go Report Card](https://goreportcard.com/badge/github.com/UnitVectorY-Labs/mcp-graphql-forge)](https://goreportcard.com/report/github.com/UnitVectorY-Labs/mcp-graphql-forge)\n\n# mcp-graphql-forge\n\nA lightweight, configuration-driven MCP server that exposes curated GraphQL queries as modular tools, enabling intentional API interactions from your agents.\n\n## Purpose\n\n`mcp-graphql-forge` lets you turn any GraphQL endpoint into an MCP server whose tools are defined in YAML files that specify the GraphQL queries and their parameters. This allows you to create a modular, secure, and minimal server that can be easily extended without modifying the application code.\n\n## Releases\n\nAll official versions of **mcp-graphql-forge** are published on [GitHub Releases](https://github.com/UnitVectorY-Labs/mcp-graphql-forge/releases). Since this MCP server is written in Go, each release provides pre-compiled executables for macOS, Linux, and Windows‚Äîready to download and run.\n\n## Configuration\n\nThe server is configured using environment variables and YAML files.\n\n### Environment Variables\n\n- `FORGE_CONFIG`: Specifies the path to the folder containing the YAML configuration files (`forge.yaml` and tool definitions). Defaults to the current directory (`.`) if not set.\n- `FORGE_DEBUG`: If set to `true` (case-insensitive), enables detailed debug logging to `stderr`, including the obtained token and the full HTTP request/response for GraphQL calls. Defaults to `false`.\n\n### forge.yaml\n\nThe configuration folder uses a special configuration file `forge.yaml` that specifies the common configuration attributes.\n\nThe following attributes can be specified in the file:\n\n- `name`: The name of the MCP server\n- `url`: The URL of the GraphQL endpoint\n- `token_command`: The command to use to request the Bearer token for the `Authorization` header (optional)\n- `env`: A map of environment variables to pass to the token command (optional)\n- `env_passthrough`: If set to `true`, passes all environment variables used when invoking mcp-graphql-forge to the token command; if used in conjunction with `env`, the variables from `env` will take precedence (optional, defaults to `false`)\n\nAn example configuration would look like:\n\n```yaml\nname: \"ExampleServer\"\nurl: \"https://api.github.com/graphql\"\ntoken_command: \"gh auth token\"\n```\n\n### Tool Configuration\n\nAll other YAML files located in the folder are treated as configuration files. Each YAML file defines a tool for the MCP server.\n\n\nThe following attributes can be specified in the file:\n\n- `name`: The name of the MCP tool\n- `description`: The description of the MCP tool\n- `query`: The GraphQL query to execute\n- `inputs`: The list of inputs defined by the MCP tool and passed into the GraphQL query as variables\n  - `name`: The name of the input\n  - `type`: The parameter type; can be 'string' or 'number'\n  - `description`: The description of the parameter for the MCP tool to use\n  - `required`: Boolean value specifying if the attribute is required\n\nAn example configuration would look like:\n\n```yaml\nname: \"getUser\"\ndescription: \"Fetch basic information about a user by `login`, including their name, URL, and location.\"\nquery: |\n  query ($login: String!) {\n    user(login: $login) {\n      id\n      name\n      url\n      location\n    }\n  }\ninputs:\n  - name: \"login\"\n    type: \"string\"\n    description: \"The user `login` that uniquely identifies their account.\"\n    required: true\n```\n\n### Run in SSE Mode\n\nBy default the server runs in stdio mode, but if you want to run in SSE mode, you can specify the `--sse` command line flag specifying the server name and port (ex: localhost:8080).  This will run with the following endpoints that your MCP client can connect to:\n\n- SSE Endpoint: /mcp/sse\n- Message Endpoint: /mcp/message\n\n## Limitations\n\n- Each instance of `mcp-graphql-forge` can only be used with a single GraphQL server at a single URL.\n- All requests use the same Authorization header in the form of a Bearer token.\n- The GraphQL queries are all exposed as Tools and not as Resources, even if they are not mutations. This is because not all MCP clients currently support Resources.\n"
}