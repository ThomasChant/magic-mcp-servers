{
  "mcp_name": "ACNet-AI/OmniTaskAgent",
  "mcp_description": "OmniTaskAgent is a versatile multi-model task management system that integrates with various task management solutions and editors via the MCP protocol, enhancing intelligent workflow processes.",
  "mcp_id": "ACNet-AI_OmniTaskAgent",
  "fetch_timestamp": "2025-06-23T00:13:42.255776Z",
  "github_url": "https://github.com/ACNet-AI/OmniTaskAgent",
  "repository": {
    "name": "OmniTaskAgent",
    "full_name": "ACNet-AI/OmniTaskAgent",
    "description": null,
    "html_url": "https://github.com/ACNet-AI/OmniTaskAgent",
    "created_at": "2025-04-26T14:00:38Z",
    "updated_at": "2025-05-29T06:33:15Z",
    "pushed_at": "2025-05-02T15:09:37Z",
    "size": 93,
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "Python",
    "license": null,
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "ACNet-AI",
      "type": "Organization",
      "avatar_url": "https://avatars.githubusercontent.com/u/200536174?v=4",
      "html_url": "https://github.com/ACNet-AI"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": false,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 0,
    "languages": {
      "Python": 30563,
      "Dockerfile": 787
    },
    "language_percentages": {
      "Python": 97.49,
      "Dockerfile": 2.51
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "0.1.0"
  },
  "readme": "# OmniTaskAgent\n\nA powerful multi-model task management system that can connect to various task management systems and help users choose and use the task management solution that best suits their needs.\n\n## Features\n\n- **Task Management System**: Create, list, update and delete tasks, support status tracking and dependency management\n- **Task Decomposition and Analysis**: Break down complex tasks into subtasks, support complexity assessment and PRD automatic parsing\n- **Python Native Implementation**: Built entirely in Python, seamlessly integrated with the Python ecosystem\n- **Multi-Model Support**: Compatible with multiple models like OpenAI, Claude, etc., not limited to specific API providers\n- **Editor Integration**: Integrate with editors like Cursor through MCP protocol for smooth development experience\n- **Intelligent Workflow**: Implement intelligent task management process based on LangGraph's ReAct pattern\n- **Multi-System Integration**: Can connect to various professional task management systems like mcp-shrimp-task-manager and claude-task-master\n- **Cross-Scenario Application**: Suitable for general development projects, vertical domain projects, and other task systems\n\n## Installation\n\n```bash\n# Install using uv (recommended)\nuv pip install -e .\n\n# Or install using pip\npip install -e .\n\n# Install Node.js dependencies (for MCP server)\nnpm install\n```\n\n## Configuration\n\nCreate a `.env` file in the project root directory for configuration:\n\n```ini\n# Required: API keys (configure at least one)\nOPENAI_API_KEY=your_openai_api_key_here\n# Or\nANTHROPIC_API_KEY=your_anthropic_api_key_here\n\n# Optional: Model configuration\nLLM_MODEL=gpt-4o  # Default model\nTEMPERATURE=0.2   # Creativity parameter\nMAX_TOKENS=4000   # Maximum tokens\n```\n\n## Usage\n\n### Command Line Interface (Recommended)\n\nThe simplest way to use is through the built-in command line interface:\n\n```bash\n# Start interactive command line interface\npython -m omni_task_agent.cli\n```\n\nCommon command examples:\n- `Create task: Optimize website performance Reduce page load time by 50%`\n- `List all tasks`\n- `Update task 1 status to completed`\n- `Decompose task 2`\n- `Analyze project complexity`\n\n### Using in LangGraph Studio\n\nLangGraph Studio is a development environment specifically designed for LLM applications, used for visualizing, interacting with, and debugging complex agent applications.\n\nFirst, ensure langgraph-cli is installed (requires version 0.1.55 or higher):\n\n```bash\n# Install langgraph-cli (requires Python 3.11+)\npip install -U \"langgraph-cli[inmem]\"\n```\n\nThen start the development server in the project root directory (containing langgraph.json):\n\n```bash\n# Start local development server\nlanggraph dev\n```\n\nThis will automatically open a browser and connect to the cloud-hosted Studio interface, where you can:\n\n1. Visualize your agent graph structure\n2. Test and run agents through the UI interface\n3. Modify agent state and debug\n4. Add breakpoints for step-by-step agent execution\n5. Implement human-machine collaboration processes\n\nWhen modifying code during development, Studio will update automatically without needing to restart the service, facilitating rapid iteration and debugging.\n\nFor advanced features like breakpoint debugging:\n\n```bash\n# Enable debug port\nlanggraph dev --debug-port 5678\n```\n\n### Editor Integration (MCP Service)\n\n1. Run the MCP server:\n\n```bash\n# Start STDIO-based MCP service\npython run_mcp.py\n```\n\n2. Configure MCP settings in your editor (like Cursor, VSCode, etc.):\n\n```json\n{\n  \"mcpServers\": {\n    \"task-master-agent\": {\n      \"type\": \"stdio\",\n      \"command\": \"/path/to/python\",\n      \"args\": [\"/path/to/run_mcp.py\"],\n      \"env\": {\n        \"OPENAI_API_KEY\": \"your-key-here\"\n      }\n    }\n  }\n}\n```\n\n## Project Structure\n\n```\nomnitaskagent/\n├── omni_task_agent/     # Main code package\n│   ├── agent.py           # LangGraph agent definition\n│   ├── config.py          # Configuration management\n│   └── cli.py             # Command line interface\n├── examples/              # Example code\n│   └── basic_usage.py     # Basic usage example\n├── tests/                 # Test cases\n├── run_mcp.py             # MCP service entry\n├── adapters.py            # MCP adapters\n├── langgraph.json         # LangGraph API configuration\n├── package.json           # Node.js dependencies\n└── pyproject.toml         # Python dependencies\n```\n\n## Reference Projects\n\n- [mcp-shrimp-task-manager](https://github.com/cjo4m06/mcp-shrimp-task-manager.git) - Task management system implemented in JavaScript\n- [AutoMCP](https://github.com/NapthaAI/automcp.git) - Tool for creating MCP services\n- [LangGraph](https://github.com/langchain-ai/langgraph/tree/main/libs/prebuilt) - Agent building framework\n- [langchain-mcp-adapters](https://github.com/langchain-ai/langchain-mcp-adapters.git) - LangChain MCP adapters\n\n## License\n\nMIT "
}