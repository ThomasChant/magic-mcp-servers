{
  "mcp_name": "Tok/SuperColliderMCP",
  "mcp_description": "Facilitates AI-driven audio synthesis and processing in SuperCollider via OSC messages, enabling dynamic sound generation and integration with AI development environments.",
  "mcp_id": "Tok_SuperColliderMCP",
  "fetch_timestamp": "2025-06-23T08:59:35.251713Z",
  "github_url": "https://github.com/Tok/SuperColliderMCP",
  "repository": {
    "name": "SuperColliderMCP",
    "full_name": "Tok/SuperColliderMCP",
    "description": "A Model Context Protocol (MCP) server for SuperCollider using Open Sound Control (OSC).",
    "html_url": "https://github.com/Tok/SuperColliderMCP",
    "created_at": "2025-04-16T21:37:47Z",
    "updated_at": "2025-06-10T08:34:58Z",
    "pushed_at": "2025-05-14T20:55:27Z",
    "size": 58,
    "stargazers_count": 3,
    "watchers_count": 3,
    "forks_count": 1,
    "open_issues_count": 0,
    "language": "Python",
    "license": "MIT License",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "Tok",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/184101?v=4",
      "html_url": "https://github.com/Tok"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 1,
    "subscribers_count": 1,
    "languages": {
      "Python": 68273
    },
    "language_percentages": {
      "Python": 100
    },
    "pull_requests_count": 1,
    "contributors_count": 3
  },
  "readme": "[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/70ac07b9-ec05-4fec-9456-5c4331cdf994)\n\n# SuperCollider OSC MCP üéõÔ∏è\n\nA Model Context Protocol (MCP) server for SuperCollider using Open Sound Control (OSC).\n\n## Description\n\nThis project provides a Python interface for communicating with [SuperCollider](https://supercollider.github.io/) via OSC messages, integrated with AI development environments using the [Model Context Protocol (MCP)](https://modelcontextprotocol.io/). It allows for programmatic control of audio synthesis and processing in SuperCollider from various AI coding assistants.\n\n## Features\n\n- Send OSC messages to SuperCollider\n- Play procedurally generated melodies with different scales\n- Create rhythmic drum patterns\n- Advanced sound design with synthesizers, effects, and modulation\n- Ambient soundscape generation\n- Granular synthesis and layered instruments\n- Chord progression generation with different voicing styles\n- Flexible integration with multiple AI development- and assistance environments\n\nThe available tools were not created with direct usage in mind and may therefore stay limited in scope.\nThey are intended to serve as a codebase with templates for further customization and project specific implementation by your AI agent after giving it full access to the code.\n\n## Installation\n\n### Prerequisites\n\n- Python 3.12 or higher\n- [SuperCollider 3.13.1](https://supercollider.github.io/) \n  - Ensure server is running on port 57110\n- [UV](https://github.com/astral-sh/uv) - Fast Python package manager\n\n### Installing UV (Python Package Manager)\n\n```bash\n# Install UV on macOS/Linux\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Install UV on Windows\npowershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\n### Project Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/tok/supercollidermcp.git\ncd supercollidermcp\n\n# Install with UV\nuv pip install -e .\n```\n\n## Usage\n\n### AI Development Environment Integration\n\n#### Claude Desktop\nConfigure in Claude Desktop settings:\n\n```json\n\"Super-Collider-OSC-MCP\": {\n  \"command\": \"uv\",\n  \"args\": [\n    \"run\",\n    \"--with\",\n    \"mcp[cli],python-osc\",\n    \"mcp\",\n    \"run\",\n    \"path/to/server.py\"\n  ]\n}\n```\n\n#### Roo Code / Cline\nAdd to `mcp.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"Super-Collider-OSC-MCP\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--with\",\n        \"mcp[cli],python-osc\",\n        \"mcp\",\n        \"run\",\n        \"path/to/server.py\"\n      ]\n    }\n  }\n}\n```\n\n## AI Assistant Tool Adaptation\n\n### Workspace Integration for Dynamic Tool Creation\n\nTo enable advanced functionality, it is recommended to add `server.py` to the AI assistant's workspace. This allows the AI to:\n\n- Dynamically understand the project's structure\n- Analyze and modify the existing sound generation tools\n- Create new OSC-based tools on demand\n- Adapt the Python code to extend functionality\n\n#### Integration Steps\n\n1. Add the entire project directory to the AI assistant's workspace\n2. Ensure `server.py` is visible and accessible to the AI\n3. Provide context about the MCP and OSC communication protocols\n4. Allow the AI to inspect and modify the project files\n\n##### Recommended Workspace Structure\n```\nsupercollidermcp/\n‚îÇ\n‚îú‚îÄ‚îÄ server.py              # Main MCP server with all sound generation tools including advanced synthesis, soundscape and generative rhythm tools\n‚îú‚îÄ‚îÄ supercollidermcp/\n‚îÇ   ‚îú‚îÄ‚îÄ osc.py             # SuperCollider OSC client\n‚îÇ   ‚îú‚îÄ‚îÄ melody.py          # Melody generation utilities\n‚îÇ   ‚îú‚îÄ‚îÄ rhythm.py          # Rhythm pattern utilities\n‚îÇ   ‚îî‚îÄ‚îÄ ...\n‚îî‚îÄ‚îÄ README.md\n```\n\n**Note:** The ability to modify tools dynamically depends on the specific capabilities of the AI assistant and its integration with the Model Context Protocol.\n\n### Local Testing and Development\n\nThe project has been tested with Claude Desktop and locally using Roo Code with:\n- [Ollama](https://ollama.ai/) - Local AI model server\n- [DeepCoder](https://ollama.com/library/deepcoder) (open-source model)\n\n### Available Commands\n\nOnce configured, the assistant can use a variety of tools:\n\n#### Basic Sound Generation\n1. **play_example_osc** - Play a simple example sound with frequency modulation\n2. **play_melody** - Create a procedurally generated melody using a specified scale and tempo\n3. **create_drum_pattern** - Play drum patterns in various styles (four_on_floor, breakbeat, shuffle, random)\n4. **play_synth** - Play a single note with different synthesizer types (sine, saw, square, noise, fm, pad) and effects\n5. **create_sequence** - Create a musical sequence from a pattern string with note length variations\n\n#### Advanced Synthesis\n6. **create_lfo_modulation** - Apply modulation to synthesizer parameters (frequency, amplitude, filter, pan)\n7. **create_layered_synth** - Create rich sounds with multiple detuned oscillator layers and stereo spread\n8. **create_granular_texture** - Create textures using granular synthesis with controllable density and pitch variation\n9. **create_chord_progression** - Play chord progressions with different voicing styles (pad, staccato, arpeggio, power)\n\n#### Soundscape Generation\n10. **create_ambient_soundscape** - Generate evolving ambient textures with different moods (calm, dark, bright, mysterious, chaotic)\n11. **create_generative_rhythm** - Create evolving rhythmic patterns in different styles (minimal, techno, glitch, jazz, ambient)\n\n### Example Usage in Claude\n\nHere are some examples of how to use these tools in Claude:\n\n```\n// Basic melody\nplay_melody(scale=\"pentatonic\", tempo=110)\n\n// Layered synth with effects\ncreate_layered_synth(base_note=\"F3\", num_layers=4, detune=0.2, effects={\"reverb\": 0.6, \"delay\": 0.3}, duration=4.0)\n\n// Ambient soundscape\ncreate_ambient_soundscape(duration=20, density=0.6, pitch_range=\"medium\", mood=\"mysterious\")\n\n// Chord progression\ncreate_chord_progression(progression=\"Cmaj7-Am7-Dm7-G7\", style=\"arpeggio\", tempo=100, duration_per_chord=2.0)\n```\n\n### Testing Locally\n\nYou can test the functionality directly by running:\n\n```bash\npython -m mcp.run server.py\n```\n\nYou can also use the command-line interface:\n\n```bash\n# Play a note\nsc-osc note --freq 440 --amp 0.5 --duration 2.0\n\n# Play a scale\nsc-osc scale --scale minor --tempo 100 --direction both\n\n# Generate and play a melody\nsc-osc melody --scale blues --tempo 120 --notes 16\n\n# Play a drum pattern\nsc-osc drums --pattern breakbeat --beats 32 --tempo 140\n```\n\n## About SuperCollider\n\n[SuperCollider](https://supercollider.github.io/) is a platform for audio synthesis and algorithmic composition, used by musicians, artists, and researchers working with sound. It consists of:\n\n- A real-time audio server with hundreds of unit generators for synthesis and signal processing\n- A cross-platform interpreted programming language (sclang)\n- A flexible scheduling system for precise timing of musical events\n\nThis project communicates with SuperCollider's audio server using OSC messages to control synthesizers and create sound patterns.\n\n## External Security Assessment\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/tok-supercollidermcp-badge.png)](https://mseep.ai/app/tok-supercollidermcp)\n\n## Development\n\nThe project uses FastMCP for handling Claude's requests and the python-osc library for communicating with SuperCollider. For more information about the Model Context Protocol, visit [https://modelcontextprotocol.io/](https://modelcontextprotocol.io/).\n\n## Contributing\n\nContributions are welcome! Please submit Pull Requests with:\n- New sound generation tools\n- Improved integration methods\n- Bug fixes and optimizations\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Additional Resources\n\n- [Model Context Protocol](https://modelcontextprotocol.io/)\n- [SuperCollider Official Website](https://supercollider.github.io/)\n"
}