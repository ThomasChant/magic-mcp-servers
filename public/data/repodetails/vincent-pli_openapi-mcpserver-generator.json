{
  "mcp_name": "vincent-pli/openapi-mcpserver-generator",
  "mcp_description": "A command-line tool that generates MCP server code from OpenAPI specifications, facilitating seamless integration between APIs and LLMs.",
  "mcp_id": "vincent-pli_openapi-mcpserver-generator",
  "fetch_timestamp": "2025-06-23T09:18:38.625628Z",
  "github_url": "https://github.com/vincent-pli/openapi-mcpserver-generator",
  "repository": {
    "name": "openapi-mcpserver-generator",
    "full_name": "vincent-pli/openapi-mcpserver-generator",
    "description": "Generate MCP server from openapi specifications",
    "html_url": "https://github.com/vincent-pli/openapi-mcpserver-generator",
    "created_at": "2025-04-23T23:42:21Z",
    "updated_at": "2025-06-01T09:39:27Z",
    "pushed_at": "2025-05-08T02:44:36Z",
    "size": 55,
    "stargazers_count": 1,
    "watchers_count": 1,
    "forks_count": 0,
    "open_issues_count": 0,
    "language": "JavaScript",
    "license": "Apache License 2.0",
    "topics": [],
    "default_branch": "main",
    "owner": {
      "login": "vincent-pli",
      "type": "User",
      "avatar_url": "https://avatars.githubusercontent.com/u/8669744?v=4",
      "html_url": "https://github.com/vincent-pli"
    },
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "network_count": 0,
    "subscribers_count": 1,
    "languages": {
      "JavaScript": 54451
    },
    "language_percentages": {
      "JavaScript": 100
    },
    "pull_requests_count": 0,
    "contributors_count": 1,
    "package_json_version": "1.1.1"
  },
  "readme": "# OpenAPI to MCP server Generator\n\nA command-line tool that generates Model Context Protocol (MCP) server code from OpenAPI specifications. This tool helps you quickly create an MCP server that acts as a bridge between LLMs (Large Language Models) and your API.\n\n[![npm version](https://img.shields.io/npm/v/openapi-mcpserver-generator.svg)](https://www.npmjs.com/package/openapi-mcpserver-generator)\n[![License: MIT](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/MIT)\n\nEnglish | [简体中文](./README-zh.md)\n\n## At the beginning\nThis repo is originally forked from [openapi-mcp-generator](https://github.com/harsha-iiiv/openapi-mcp-generator), and add some additional features:\n\n- Support nested `$ref` in openapi specifications\n- Besides source code, generate MCP server configuration\n- Allow client to set log level and send log message to client as notification\n- When hit error, send message to stderr\n- Support build docker image and guide client to run in docker container (2025/5/8 updated)\n## Features\n\n- **Automatic Tool Generation**: Converts each API endpoint in your OpenAPI spec into an MCP tool\n- **Transport Options**: Only supports stdio, for sse you can leveral [mcp-proxy](https://github.com/sparfenyuk/mcp-proxy)\n- **Complete Project Setup**: Generates all necessary files to run an MCP server\n- **Easy Configuration**: Simple environment-based configuration for the generated server\n\n## Installation\n\n```bash\n# Install globally from npm\nnpm install -g openapi-mcpserver-generator\n\n# Or with yarn\nyarn global add openapi-mcpserver-generator\n\n# Or with pnpm\npnpm add -g openapi-mcpserver-generator\n```\n\n## Usage\n\nGenerate an MCP server from an OpenAPI specification:\n\n```bash\nopenapi-mcpserver-generator --openapi path/to/openapi.json --output /Path/to/output\n```\n\n### Command Line Options\n\n| Option | Alias | Description | Default |\n|--------|-------|-------------|---------|\n| `--openapi` | `-o` | Path or URL to OpenAPI specification | (required) |\n| `--output` | `-d` | Output directory for generated files | `./mcp-server` |\n| `--name` | `-n` | Name for the MCP server | `openapi-mcp-server` |\n| `--version` | `-v` | Version for the MCP server | `1.0.0` |\n| `--transport` | `-t` | Transport mechanism (stdio, websocket, http) | `stdio` |\n| `--help` | `-h` | Show help information | |\n\n### Examples\n\nGenerate from a local OpenAPI file:\n\n```bash\nopenapi-mcpserver-generator --openapi ./specs/petstore.json --output ./petstore-mcp\n```\n\nGenerate from a remote OpenAPI URL:\n\n```bash\nopenapi-mcpserver-generator --openapi https://petstore3.swagger.io/api/v3/openapi.json --output ./petstore-mcp\n```\n\n## Generated Files\n\nThe tool generates the following files in the output directory:\n\n- `server.js` - The main MCP server implementation\n- `package.json` - Dependencies and scripts\n- `README.md` - Documentation for the generated server\n- `.env.example` - Template for environment variables\n- `types.d.ts` - TypeScript type definitions for the API\n- `tsconfig.json` - TypeScript configuration\n- `Dockerfile` - Dockerfile\n- `.dockerignore` - Docker ignore file\n\n## Using the Generated Server\n\nAfter generating your MCP server:\n\n1. Navigate to the generated directory:\n   ```bash\n   cd my-mcp-server\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n3. Create an environment file:\n   ```bash\n   cp .env.example .env\n   ```\n\n4. Edit `.env` to set your API base URL and any required headers:\n   ```\n   API_BASE_URL=https://api.example.com\n   API_HEADERS=Authorization:Bearer your-token-here\n   ```\n\n5. Start the server:\n   ```bash\n   npm start\n   ```\n\n## Requirements\n\n- Node.js 16.x or higher\n- npm 7.x or higher\n\n## E2E example\n\nSuggest use [mcpclihost](https://github.com/vincent-pli/mcp-cli-host) as MCP host to take a try.\nThis tool(`mcpclihost`) could support both Azure Openai and deepseek\n\nYou can add generated MCP server congiguration like this:\n```\n{\n  \"mcpServers\": {\n    \"petstore-mcp\": {\n      \"command\": \"/usr/local/bin/node\",\n      \"args\": [\n        \"/Users/lipeng/workspaces/github.com/vincent-pli/openapi-mcpserver-generator/petstore-mcp/server.js\",\n        \"run\"\n      ]\n    }\n  }\n}\n```\nto the `~/.mcp.json`(default mcp server configuration path of `mcpclihost`), then take a try\n\n## Security Schemes in Openapi\n\nOpenapi 3.0 support [4 security types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.0.md#security-scheme-object):\n- **apiKey**: \nfor example:\n```\n        \"securitySchemes\": {\n            \"my_api_key\": {\n                \"type\": \"apiKey\",\n                \"name\": \"api_key\",\n                \"in\": \"header\"\n            }\n        }\n```\nExpect a env param named upper cased `MY_API_KEY`_`{securitySchemes.my_api_key.name}`, in this case, it should be: `MY_API_KEY_API_KEY` defined in `.env`\n- **http:**\n```\n        \"securitySchemes\": {\n            basicAuth: {\n               type: \"http\",\n               scheme: \"basic\"\n            }\n        }\n```\nit try to find `BASICAUTH_USERNAME` and `BASICAUTH_PASSWORD` in `.env`\n```\n        \"securitySchemes\": {\n            basicAuth: {\n               type: \"http\",\n               scheme: \"bearer\"\n            }\n        }\n```\nit try to find `BASICAUTH_BEARERTOKEN` in `.env`\n- **oauth2:**\nBecause of the complexity of oauth2, cannot handle it automaticly, we suggest manually get the `access token`, then set it to `.env` as this:\n```\nAPI_HEADERS=Authorization:Bearer your-access-token-here\n```\n- **openIdConnect**\nNot support yet\n\n## License\n\nApache 2.0\n"
}